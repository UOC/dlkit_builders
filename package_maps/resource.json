{
   "name": "resource", 
   "version": "3.0.0", 
   "title": "Resource Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2006-2008 Massachusetts Institute of Technology.\n\nCopyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may modify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Resource OSID defines a service to access and manage a directory of\nobjects.\n\nResources\n\n``Resources`` may represent people, places or a set or arbitrary\nentities that are used throughout the OSIDs as references to indirect\nobjects. In core OSID, ``Resources`` have no other meaning other than to\nprovide an identifier and a relation to an authentication principal.\n``Resource``  ``Types`` may define extra data to define an employee,\norganizational unit or an inventory item.\n\n``Resources`` are referenced throughout the OSIDs to and the abstraction\nlevel of this service provides a consistent interface with which to\naccess and manage object references not directly pertinent to the\nservice in play. For example, a Repository OSID may reference\n``Resources`` as authors or a Course OSID may reference ``Resources``\nfor students and instructors. Each of these OSIDs may orchestrate a\nResource OSID to provide management of the set of referenced resources.\n\nA ``Resource`` genus Type may be used to provide a label the kind of\nresource. This service offers the flexibility that the producer of a\nfilm may be a person, a production company, or a fire hydrant. While\ngenus ``Types`` may be used to constrain the kinds of ``Resources`` that\nmay be related to various ``OsidObjects`` if necessary ``,`` OSID\nConsumers are expected to simply use the Resource as a reference. If an\nOSID Consumer wishes to provide a mechanism for updating a ``Resource``\nreferenced, the OSID Consumer should use an orchestrated Resource OSID.\n\nAgents\n\nA ``Resource`` also provides the mapping between an authentication\n``Agent`` and the entity on whose behalf the agent is acting. An\n``Agent`` can only map to a single ``Resource`` while a ``Resource`` can\nhave multiple ``Agents``. An agent that represents the unix login of\n\"vijay\" on server due.mit.edu can map to a ``Resource`` representing\nVijay Kumar, who may also have a campus agent of \"vkumar@mit.edu.\"\n\nGroup\n\nWhen a ``Resource`` is referenced in another OSID, it is a singular\nentity. To provide groupings of multiple people or things, a\n``Resource`` can also be defined as a hierarchical group of other\nresources. Whether a resource is a single entity or a group is an\nattribute of the ``Resource`` itself. If a ``Resource`` is a group, then\nits membership can be queried or managed in one of the group sessions.\nThis overloading of the object definition serves to keep the nature of\nthe resource separate from the other OSIDs such that a message to a\n\"group\", for example, is referenced as a single resource receipient.\nOther OSIDs are blind to whether or not a referenced ``Resource`` is a\ngroup or a singular entity..\n\nResource Relationships\n\nFor kicks, ``Resources`` may have arbitrrary relationships to other\n``Resources`` using the ``ResourceRelationship`` interface. Resource\nrelationships may also be used to provide a place to describe in more\ndetail, or hang data, on a member to group relationship.\n\nBin Cataloging\n\n``Resources`` may be mapped into hierarchial ``Bins`` for the purpose of\ncataloging or federation.\n\nSub Packages\n\nThe Resource OSID includes a Resource Demographic OSID for managing\ndynamically generated populations of ``Resources`` and a Resource Batch\nOSID for managing ``Resources`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.resource.ResourceProfile", 
         "shortname": "ResourceProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The resource profile describes interoperability among resource services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_resource_lookup", 
            "supports_resource_query", 
            "supports_resource_search", 
            "supports_resource_admin", 
            "supports_resource_notification", 
            "supports_resource_bin", 
            "supports_resource_bin_assignment", 
            "supports_resource_smart_bin", 
            "supports_membership", 
            "supports_group", 
            "supports_group_assignment", 
            "supports_group_notification", 
            "supports_group_hierarchy", 
            "supports_resource_agent", 
            "supports_resource_agent_assignment", 
            "supports_resource_relationship_lookup", 
            "supports_resource_relationship_query", 
            "supports_resource_relationship_search", 
            "supports_resource_relationship_admin", 
            "supports_resource_relationship_notification", 
            "supports_resource_relationship_bin", 
            "supports_resource_relationship_bin_assignment", 
            "supports_resource_relationship_smart_bin", 
            "supports_bin_lookup", 
            "supports_bin_query", 
            "supports_bin_search", 
            "supports_bin_admin", 
            "supports_bin_notification", 
            "supports_bin_hierarchy", 
            "supports_bin_hierarchy_design", 
            "supports_resource_batch", 
            "supports_resource_demographic", 
            "get_resource_record_types", 
            "supports_resource_record_type", 
            "get_resource_search_record_types", 
            "supports_resource_search_record_type", 
            "get_resource_relationship_record_types", 
            "supports_resource_relationship_record_type", 
            "get_resource_relationship_search_record_types", 
            "supports_resource_relationship_search_record_type", 
            "get_bin_record_types", 
            "supports_bin_record_type", 
            "get_bin_search_record_types", 
            "supports_bin_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_lookup", 
               "doc": {
                  "headline": "Tests if resource lookup is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource lookup is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource lookup is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if resource query is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource query is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource query is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_search", 
               "doc": {
                  "headline": "Tests if resource search is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource search is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource search is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_admin", 
               "doc": {
                  "headline": "Tests if resource administration is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_notification", 
               "doc": {
                  "headline": "Tests if resource notification is supported.", 
                  "body": "        Messages may be sent when resources are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_bin", 
               "doc": {
                  "headline": "Tests if retrieving mappings of resource and bins is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource bin mapping retrieval\n                is supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource bin mapping retrieval is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_bin_assignment", 
               "doc": {
                  "headline": "Tests if managing mappings of resource and bins is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource bin assignment is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource bin assignment is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_smart_bin", 
               "doc": {
                  "headline": "Tests if resource smart bins are available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource smart bins are\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource smart bins are supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_membership", 
               "doc": {
                  "headline": "Tests if membership queries are supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if membership queries are supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if membership queries are supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_group", 
               "doc": {
                  "headline": "Tests if group resources are supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if group resources are supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if group resources are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_group_assignment", 
               "doc": {
                  "headline": "Tests if group resource assignment is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if group resource assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if group resource assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_group_notification", 
               "doc": {
                  "headline": "Tests if group resource notification is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if group resource notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if group resource notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_group_hierarchy", 
               "doc": {
                  "headline": "Tests if a group resource hierarchy service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if group resource hierarchy is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if group resource hierarchy is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_agent", 
               "doc": {
                  "headline": "Tests if retrieving mappings of resource and agents is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource agent mapping retrieval\n                is supported ``,`` ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource agent mapping retrieval is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_agent_assignment", 
               "doc": {
                  "headline": "Tests if managing mappings of resources and agents is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource agent assignment is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource agent assignment is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_lookup", 
               "doc": {
                  "headline": "Tests if looking up resource relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationships lookup is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationships lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_query", 
               "doc": {
                  "headline": "Tests if querying resource relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationships query is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationships query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_search", 
               "doc": {
                  "headline": "Tests if searching resource relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationships search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationships search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_admin", 
               "doc": {
                  "headline": "Tests if a resource relationshipsadministrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationships\n                administration is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationships administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_notification", 
               "doc": {
                  "headline": "Tests if a resource relationshipsnotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationships\n                notification is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationships notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_bin", 
               "doc": {
                  "headline": "Tests if retrieving mappings of resource relationships and bins is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationship bin\n                mapping retrieval is supported ``,``  ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationship bin mapping retrieval is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_bin_assignment", 
               "doc": {
                  "headline": "Tests if managing mappings of resource relationships and bins is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationship bin\n                assignment is supported ``,`` ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationship bin assignment is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_smart_bin", 
               "doc": {
                  "headline": "Tests if resource relationship smart bins are available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if resource relationship smart bins\n                are supported ``,`` ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if resource relationship smart bins are supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_lookup", 
               "doc": {
                  "headline": "Tests if bin lookup is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bin lookup is supported ``,``\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bin lookup is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_query", 
               "doc": {
                  "headline": "Tests if bin query is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bin query is supported ``,``\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bin query is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_search", 
               "doc": {
                  "headline": "Tests if bin search is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bin search is supported ``,``\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bin search is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_admin", 
               "doc": {
                  "headline": "Tests if bin administration is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bin administration is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bin administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_notification", 
               "doc": {
                  "headline": "Tests if bin notification is supported.", 
                  "body": "        Messages may be sent when ``Bin`` objects are created, deleted\n        or updated. Notifications for resources within bins are sent via\n        the resource notification session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bin notification is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bin notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_hierarchy", 
               "doc": {
                  "headline": "Tests if a bin hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin hierarchy traversal is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_hierarchy_design", 
               "doc": {
                  "headline": "Tests if a bin hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_batch", 
               "doc": {
                  "headline": "Tests if a resource batch service is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_demographic", 
               "doc": {
                  "headline": "Tests if a resource demographic service is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource demographic service\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource demographic service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_record_types", 
               "doc": {
                  "headline": "Gets all the resource record types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported resource\n                record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported resource record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_record_type", 
               "doc": {
                  "headline": "Tests if a given resource record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): the resource type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the resource record type is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param resource_record_type: the resource type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the resource record type is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_record_types", 
               "doc": {
                  "headline": "Gets all the resource search record types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported resource\n                search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported resource search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_search_record_type", 
               "doc": {
                  "headline": "Tests if a given resource search type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_search_record_type (osid.type.Type): the\n                resource search type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the resource search record type\n                is supported ``,`` ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param resource_search_record_type: the resource search type\n        :type resource_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the resource search record type is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_record_types", 
               "doc": {
                  "headline": "Gets the supported ``ResourceRelationship`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``ResourceRelationship`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``ResourceRelationship`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_record_type", 
               "doc": {
                  "headline": "Tests if the given ``ResourceRelationship`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): a\n                ``Type`` indicating a ``ResourceRelationship`` record\n                type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: a ``Type`` indicating a ``ResourceRelationship`` record type\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``ResourceRelationship`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``ResourceRelationship`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``ResourceRelationship`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``ResourceRelationship`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_search_record_type\n                (osid.type.Type): a ``Type`` indicating a\n                ``ResourceRelationship`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument -\n                ``resource_relationship_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param resource_relationship_search_record_type: a ``Type`` indicating a ``ResourceRelationship`` search record type\n        :type resource_relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_record_types", 
               "doc": {
                  "headline": "Gets all the bin record types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported bin record\n                types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported bin record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_record_type", 
               "doc": {
                  "headline": "Tests if a given bin record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): the bin record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the bin record type is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param bin_record_type: the bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the bin record type is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_search_record_types", 
               "doc": {
                  "headline": "Gets all the bin search record types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported bin search\n                record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported bin search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_search_record_type", 
               "doc": {
                  "headline": "Tests if a given bin search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_search_record_type (osid.type.Type): the bin search\n                record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the bin search record type is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bin_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param bin_search_record_type: the bin search record type\n        :type bin_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the bin search record type is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceManager", 
         "shortname": "ResourceManager", 
         "category": "managers", 
         "doc": {
            "headline": "The resource manager provides access to resource lookup and creation sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``ResourceLookupSession:`` a session to retrieve resources\n      * ``ResourceQuerySession:`` a session to query resources\n      * ``ResourceSearchSession:`` a session to search for resources\n      * ``ResourceAdminSession:`` a session to create and delete\n        resources\n      * ``ResourceNotificationSession:`` a session to receive\n        notifications pertaining to resource changes\n      * ``ResourceBinSession:`` a session to look up resource to bin\n        mappings\n      * ``ResourceBinAssignmentSession:`` a session to manage resource\n        to bin mappings\n      * ``ResourceSmartBinSession:`` a session to manage smart resource\n        bins\n      * ``MembershipSession:`` a session to query memberships\n      * ``GroupSession:`` a session to retrieve group memberships\n      * ``GroupAssignmentSession:`` a session to manage groups\n      * ``GroupNotificationSession:`` a session to retrieve\n        notifications on changes to group membership\n      * ``GroupHierarchySession:`` a session to view a group hierarchy\n      * ``RsourceAgentSession:`` a session to retrieve ``Resource`` and\n        ``Agent`` mappings\n      * ``ResourceAgentAssignmentSession:`` a session to manage\n        ``Resource`` and ``Agent`` mappings\n    \n      * ``ResourceRelationshipLookupSession:`` a session to retrieve\n        resource relationships\n      * ``ResourceRelationshipQuerySession:`` a session to query for\n        resource relationships\n      * ``ResourceRelationshipSearchSession:`` a session to search for\n        resource relationships\n      * ``ResourceRelationshipAdminSession:`` a session to create and\n        delete resource relationships\n      * ``ResourceRelationshipNotificationSession:`` a session to\n        receive notifications pertaining to resource relationshipchanges\n      * ``ResourceRelationshipBinSession:`` a session to look up\n        resource relationship to bin mappings\n      * ``ResourceRelationshipBinAssignmentSession:`` a session to\n        manage resource relationship to bin mappings\n      * ``ResourceRelationshipSmartBinSession:`` a session to manage\n        smart resource relationship bins\n    \n      * ``BinLookupSession: a`` session to retrieve bins\n      * ``BinQuerySession:`` a session to query bins\n      * ``BinSearchSession:`` a session to search for bins\n      * ``BinAdminSession:`` a session to create, update and delete bins\n      * ``BinNotificationSession:`` a session to receive notifications\n        pertaining to changes in bins\n      * ``BinHierarchySession:`` a session to traverse bin hierarchies\n      * ``BinHierarchyDesignSession:`` a session to manage bin\n        hierarchies\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.resource.ResourceProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "ResourceProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "resource"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "resource", 
               "name": "ResourceProfile"
            }
         ], 
         "method_names": [
            "get_resource_lookup_session", 
            "get_resource_lookup_session_for_bin", 
            "get_resource_query_session", 
            "get_resource_query_session_for_bin", 
            "get_resource_search_session", 
            "get_resource_search_session_for_bin", 
            "get_resource_admin_session", 
            "get_resource_admin_session_for_bin", 
            "get_resource_notification_session", 
            "get_resource_notification_session_for_bin", 
            "get_resource_bin_session", 
            "get_resource_bin_assignment_session", 
            "get_resource_smart_bin_session", 
            "get_membership_session", 
            "get_membership_session_for_bin", 
            "get_group_session", 
            "get_group_session_for_bin", 
            "get_group_assignment_session", 
            "get_group_assignment_session_for_bin", 
            "get_group_notification_session", 
            "get_group_notification_session_for_bin", 
            "get_group_hierarchy_session", 
            "get_group_hierarchy_session_for_bin", 
            "get_resource_agent_session", 
            "get_resource_agent_session_for_bin", 
            "get_resource_agent_assignment_session", 
            "get_resource_agent_assignment_session_for_bin", 
            "get_resource_relationship_lookup_session", 
            "get_resource_relationship_lookup_session_for_bin", 
            "get_resource_relationship_query_session", 
            "get_resource_relationship_query_session_for_bin", 
            "get_resource_relationship_search_session", 
            "get_resource_relationship_search_session_for_bin", 
            "get_resource_relationship_admin_session", 
            "get_resource_relationship_admin_session_for_bin", 
            "get_resource_relationship_notification_session", 
            "get_resource_relationship_notification_session_for_bin", 
            "get_resource_relationship_bin_session", 
            "get_resource_relationship_bin_assignment_session", 
            "get_resource_relationship_smart_bin_session", 
            "get_bin_lookup_session", 
            "get_bin_query_session", 
            "get_bin_search_session", 
            "get_bin_admin_session", 
            "get_bin_notification_session", 
            "get_bin_hierarchy_session", 
            "get_bin_hierarchy_design_session", 
            "get_resource_batch_manager", 
            "get_resource_demographic_manager"
         ], 
         "methods": [
            {
               "name": "get_resource_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceLookupSession) - ``a\n                ResourceLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a ResourceLookupSession``\n        :rtype: ``osid.resource.ResourceLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_lookup_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource lookup service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceLookupSession) - ``a\n                ResourceLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceLookupSession``\n        :rtype: ``osid.resource.ResourceLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_session", 
               "doc": {
                  "headline": "Gets a resource query session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuerySession) - ``a\n                ResourceQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a ResourceQuerySession``\n        :rtype: ``osid.resource.ResourceQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource query session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceQuerySession) - ``a\n                ResourceQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceQuerySession``\n        :rtype: ``osid.resource.ResourceQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_session", 
               "doc": {
                  "headline": "Gets a resource search session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchSession) - ``a\n                ResourceSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a ResourceSearchSession``\n        :rtype: ``osid.resource.ResourceSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource search session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceSearchSession) - ``a\n                ResourceSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceSearchSession``\n        :rtype: ``osid.resource.ResourceSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_admin_session", 
               "doc": {
                  "headline": "Gets a resource administration session for creating, updating and deleting resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceAdminSession) - ``a\n                ResourceAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a ResourceAdminSession``\n        :rtype: ``osid.resource.ResourceAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_admin_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource administration session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceAdminSession) - ``a\n                ResourceAdminSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceAdminSession``\n        :rtype: ``osid.resource.ResourceAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to resource changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_receiver (osid.resource.ResourceReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.resource.ResourceNotificationSession) - ``a\n                ResourceNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_receiver: the notification callback\n        :type resource_receiver: ``osid.resource.ResourceReceiver``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceNotificationSession``\n        :rtype: ``osid.resource.ResourceNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceReceiver", 
                     "var_name": "resource_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceReceiver"
               ], 
               "return_type": "osid.resource.ResourceNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the resource notification session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_receiver (osid.resource.ResourceReceiver): the\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceNotificationSession) - ``a\n                ResourceNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``resource_receiver`` or ``bin_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_receiver: the notification callback\n        :type resource_receiver: ``osid.resource.ResourceReceiver``\n        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceNotificationSession``\n        :rtype: ``osid.resource.ResourceNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``resource_receiver`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_notfication()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceReceiver", 
                     "var_name": "resource_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_bin_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceBinSession) - a\n                ``ResourceBinSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_bin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceBinSession``\n        :rtype: ``osid.resource.ResourceBinSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceBinSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_bin_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resource to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceBinAssignmentSession) - a\n                ``ResourceBinAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_bin_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceBinAssignmentSession``\n        :rtype: ``osid.resource.ResourceBinAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_bin_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_bin_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceBinAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_smart_bin_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic resource bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceSmartBinSession) - a\n                ``ResourceSmartBinSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_smart_bin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceSmartBinSession``\n        :rtype: ``osid.resource.ResourceSmartBinSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_smart_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_smart_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceSmartBinSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_membership_session", 
               "doc": {
                  "headline": "Gets the session for querying memberships.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.MembershipSession) - a\n                ``MembershipSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_membership()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MembershipSession``\n        :rtype: ``osid.resource.MembershipSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_membership()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``support_membership()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.MembershipSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_membership_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource membership session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.MembershipSession) - ``a\n                MembershipSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_membership()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a MembershipSession``\n        :rtype: ``osid.resource.MembershipSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_membership()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_membership()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.MembershipSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_session", 
               "doc": {
                  "headline": "Gets the session for retrieving gropup memberships.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.GroupSession) - a ``GroupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GroupSession``\n        :rtype: ``osid.resource.GroupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.GroupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_session_for_bin", 
               "doc": {
                  "headline": "Gets a group session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.GroupSession) - a ``GroupSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``GroupSession``\n        :rtype: ``osid.resource.GroupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.GroupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resources to groups.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.GroupAssignmentSession) - a\n                ``GroupAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GroupAssignmentSession``\n        :rtype: ``osid.resource.GroupAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.GroupAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_assignment_session_for_bin", 
               "doc": {
                  "headline": "Gets a group assignment session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.GroupAssignmentSession) - a\n                ``GroupAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_assignment()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``GroupAssignmentSession``\n        :rtype: ``osid.resource.GroupAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.GroupAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to resource changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_rceeiver (osid.resource.GroupReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.resource.GroupNotificationSession) - ``a\n                GroupNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``group_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param group_rceeiver: the notification callback\n        :type group_rceeiver: ``osid.resource.GroupReceiver``\n", 
               "sphinx_return_doc": "        :return: ``a GroupNotificationSession``\n        :rtype: ``osid.resource.GroupNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``group_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.GroupReceiver", 
                     "var_name": "group_rceeiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.GroupReceiver"
               ], 
               "return_type": "osid.resource.GroupNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the group notification session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_rceeiver (osid.resource.GroupReceiver): the\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.GroupNotificationSession) - ``a\n                GroupNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``group_receiver`` or ``bin_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_group_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param group_rceeiver: the notification callback\n        :type group_rceeiver: ``osid.resource.GroupReceiver``\n        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GroupNotificationSession``\n        :rtype: ``osid.resource.GroupNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``group_receiver`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_group_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_notfication()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.GroupReceiver", 
                     "var_name": "group_rceeiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.GroupReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.GroupNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_hierarchy_session", 
               "doc": {
                  "headline": "Gets a session for retrieving gropup hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.GroupHierarchySession) - ``a\n                GroupHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a GroupHierarchySession``\n        :rtype: ``osid.resource.GroupHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.GroupHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_hierarchy_session_for_bin", 
               "doc": {
                  "headline": "Gets a group hierarchy session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.GroupHierarchySession) - a\n                ``GroupHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``GroupHierarchySession``\n        :rtype: ``osid.resource.GroupHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.GroupHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource agent mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceAgentSession) - a\n                ``ResourceAgentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentSession``\n        :rtype: ``osid.resource.ResourceAgentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceAgentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource agent session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentSession) - a\n                ``ResourceAgentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentSession``\n        :rtype: ``osid.resource.ResourceAgentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceAgentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning agents to resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceAgentAssignmentSession) - a\n                ``ResourceAgentAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentAssignmentSession``\n        :rtype: ``osid.resource.ResourceAgentAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceAgentAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_assignment_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource agent session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentAssignmentSession) - a\n                ``ResourceAgentAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent_assignment()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentAssignmentSession``\n        :rtype: ``osid.resource.ResourceAgentAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceAgentAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipLookupSession) - a\n                ``ResourceRelationshipLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipLookupSession``\n        :rtype: ``osid.resource.ResourceRelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_lookup_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship lookup service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipLookupSession) - a\n                ``ResourceRelationshipLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Bin`` found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipLookupSession``\n        :rtype: ``osid.resource.ResourceRelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Bin`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuerySession) - a\n                ``ResourceRelationshipQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipQuerySession``\n        :rtype: ``osid.resource.ResourceRelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship query service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuerySession) - a\n                ``ResourceRelationshipQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Bin`` found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipQuerySession``\n        :rtype: ``osid.resource.ResourceRelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Bin`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchSession) - a\n                ``ResourceRelationshipSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSearchSession``\n        :rtype: ``osid.resource.ResourceRelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship search service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchSession) - a\n                ``ResourceRelationshipSearchSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSearchSession``\n        :rtype: ``osid.resource.ResourceRelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipAdminSession) - a\n                ``ResourceRelationshipAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipAdminSession``\n        :rtype: ``osid.resource.ResourceRelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_admin_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship administration service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipAdminSession) - a\n                ``ResourceRelationshipAdminSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipAdminSession``\n        :rtype: ``osid.resource.ResourceRelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_receiver\n                (osid.resource.ResourceRelationshipReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipNotificationSession)\n                - a ``ResourceRelationshipNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_receiver`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_receiver: the notification callback\n        :type resource_relationship_receiver: ``osid.resource.ResourceRelationshipReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipNotificationSession``\n        :rtype: ``osid.resource.ResourceRelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipReceiver", 
                     "var_name": "resource_relationship_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipReceiver"
               ], 
               "return_type": "osid.resource.ResourceRelationshipNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship notification service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_receiver\n                (osid.resource.ResourceRelationshipReceiver): the\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipNotificationSession)\n                - a ``ResourceRelationshipNotificationSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``resource_relationship_receiver`` or\n                ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationshipt_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_receiver: the notification callback\n        :type resource_relationship_receiver: ``osid.resource.ResourceRelationshipReceiver``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipNotificationSession``\n        :rtype: ``osid.resource.ResourceRelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_relationship_receiver`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationshipt_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipReceiver", 
                     "var_name": "resource_relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_bin_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource relationship to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipBinSession) - a\n                ``ResourceRelationshipBinSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_relationship_bin()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipBinSession``\n        :rtype: ``osid.resource.ResourceRelationshipBinSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipBinSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_bin_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resource relationships to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipBinAssignmentSession)\n                - a ``ResourceRelationshipBinAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_bin_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipBinAssignmentSession``\n        :rtype: ``osid.resource.ResourceRelationshipBinAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_bin_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_bin_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipBinAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_smart_bin_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic resource relationship bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSmartBinSession) - a\n                ``ResourceRelationshipSmartBinSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_smart_bin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSmartBinSession``\n        :rtype: ``osid.resource.ResourceRelationshipSmartBinSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_smart_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_smart_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSmartBinSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_lookup_session", 
               "doc": {
                  "headline": "Gets the bin lookup session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinLookupSession) - a\n                ``BinLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BinLookupSession``\n        :rtype: ``osid.resource.BinLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_query_session", 
               "doc": {
                  "headline": "Gets the bin query session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuerySession) - a ``BinQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BinQuerySession``\n        :rtype: ``osid.resource.BinQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_search_session", 
               "doc": {
                  "headline": "Gets the bin search session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinSearchSession) - a\n                ``BinSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BinSearchSession``\n        :rtype: ``osid.resource.BinSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_admin_session", 
               "doc": {
                  "headline": "Gets the bin administrative session for creating, updating and deleteing bins.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinAdminSession) - a ``BinAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BinAdminSession``\n        :rtype: ``osid.resource.BinAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for subscribing to changes to a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_receiver (osid.resource.BinReceiver): the\n                notification callback\n", 
               "return_doc": "        return: (osid.resource.BinNotificationSession) - a\n                ``BinNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``bin_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_receiver: the notification callback\n        :type bin_receiver: ``osid.resource.BinReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``BinNotificationSession``\n        :rtype: ``osid.resource.BinNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinReceiver", 
                     "var_name": "bin_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinReceiver"
               ], 
               "return_type": "osid.resource.BinNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_hierarchy_session", 
               "doc": {
                  "headline": "Gets the bin hierarchy traversal session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinHierarchySession) - ``a\n                BinHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``a BinHierarchySession``\n        :rtype: ``osid.resource.BinHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the bin hierarchy design session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinHierarchyDesignSession) - a\n                ``BinHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BinHierarchyDesignSession``\n        :rtype: ``osid.resource.BinHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_batch_manager", 
               "doc": {
                  "headline": "Gets the ``ResourceBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.batch.ResourceBatchManager) - a\n                ``ResourceBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceBatchManager``\n        :rtype: ``osid.resource.batch.ResourceBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.batch.ResourceBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_demographic_manager", 
               "doc": {
                  "headline": "Gets the ``ResourceDemographicManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.demographic.ResourceDemographicManager) -\n                a ``ResourceDemographicManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_demographic()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceDemographicManager``\n        :rtype: ``osid.resource.demographic.ResourceDemographicManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_demographic()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_demographic()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.demographic.ResourceDemographicManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceProxyManager", 
         "shortname": "ResourceProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The resource manager provides access to resource lookup and creation session and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager accept a ``Proxy``. The sessions included in\n    this manager are:\n\n      * ``ResourceLookupSession:`` a session to retrieve resources\n      * ``ResourceQuerySession:`` a session to query resources\n      * ``ResourceSearchSession:`` a session to search for resources\n      * ``ResourceAdminSession:`` a session to create and delete\n        resources\n      * ``ResourceNotificationSession:`` a session to receive\n        notifications pertaining to resource changes\n      * ``ResourceBinSession:`` a session to look up resource to bin\n        mappings\n      * ``ResourceBinAssignmentSession:`` a session to manage resource\n        to bin mappings\n      * ``ResourceSmartBinSession:`` a session to manage smart resource\n        bins\n      * ``MembershipSession:`` a session to query memberships\n      * ``GroupSession:`` a session to retrieve group memberships\n      * ``GroupAssignmentSession:`` a session to manage groups\n      * ``GroupNotificationSession:`` a session to retrieve\n        notifications on changes to group membership\n      * ``GroupHierarchySession:`` a session to view a group hierarchy\n      * ``RsourceAgentSession:`` a session to retrieve ``Resource`` and\n        ``Agent`` mappings\n      * ``ResourceAgentAssignmentSession:`` a session to manage\n        ``Resource`` and ``Agent`` mappings\n    \n      * ``ResourceRelationshipLookupSession:`` a session to retrieve\n        resource relationships\n      * ``ResourceRelationshipQuerySession:`` a session to query for\n        resource relationships\n      * ``ResourceRelationshipSearchSession:`` a session to search for\n        resource relationships\n      * ``ResourceRelationshipAdminSession:`` a session to create and\n        delete resource relationships\n      * ``ResourceRelationshipNotificationSession:`` a session to\n        receive notifications pertaining to resource relationshipchanges\n      * ``ResourceRelationshipBinSession:`` a session to look up\n        resource relationship to bin mappings\n      * ``ResourceRelationshipBinAssignmentSession:`` a session to\n        manage resource relationship to bin mappings\n      * ``ResourceRelationshipSmartBinSession:`` a session to manage\n        smart resource relationship bins\n    \n      * ``BinLookupSession: a`` session to retrieve bins\n      * ``BinQuerySession:`` a session to query bins\n      * ``BinSearchSession:`` a session to search for bins\n      * ``BinAdminSession:`` a session to create, update and delete bins\n      * ``BinNotificationSession:`` a session to receive notifications\n        pertaining to changes in bins\n      * ``BinHierarchySession:`` a session to traverse bin hierarchies\n      * ``BinHierarchyDesignSession:`` a session to manage bin\n        hierarchies\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.resource.ResourceProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "ResourceProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "resource"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "resource", 
               "name": "ResourceProfile"
            }
         ], 
         "method_names": [
            "get_resource_lookup_session", 
            "get_resource_lookup_session_for_bin", 
            "get_resource_query_session", 
            "get_resource_query_session_for_bin", 
            "get_resource_search_session", 
            "get_resource_search_session_for_bin", 
            "get_resource_admin_session", 
            "get_resource_admin_session_for_bin", 
            "get_resource_notification_session", 
            "get_resource_notification_session_for_bin", 
            "get_resource_bin_session", 
            "get_resource_bin_assignment_session", 
            "get_resource_smart_bin_session", 
            "get_membership_session", 
            "get_membership_session_for_bin", 
            "get_group_session", 
            "get_group_session_for_bin", 
            "get_group_assignment_session", 
            "get_group_assignment_session_for_bin", 
            "get_group_notification_session", 
            "get_group_notification_session_for_bin", 
            "get_group_hierarchy_session", 
            "get_group_hierarchy_session_for_bin", 
            "get_resource_agent_session", 
            "get_resource_agent_session_for_bin", 
            "get_resource_agent_assignment_session", 
            "get_resource_agent_assignment_session_for_bin", 
            "get_resource_relationship_lookup_session", 
            "get_resource_relationship_lookup_session_for_bin", 
            "get_resource_relationship_query_session", 
            "get_resource_relationship_query_session_for_bin", 
            "get_resource_relationship_search_session", 
            "get_resource_relationship_search_session_for_bin", 
            "get_resource_relationship_admin_session", 
            "get_resource_relationship_admin_session_for_bin", 
            "get_resource_relationship_notification_session", 
            "get_resource_relationship_notification_session_for_bin", 
            "get_resource_relationship_bin_session", 
            "get_resource_relationship_bin_assignment_session", 
            "get_resource_relationship_smart_bin_session", 
            "get_bin_lookup_session", 
            "get_bin_query_session", 
            "get_bin_search_session", 
            "get_bin_admin_session", 
            "get_bin_notification_session", 
            "get_bin_hierarchy_session", 
            "get_bin_hierarchy_design_session", 
            "get_resource_batch_proxy_manager", 
            "get_resource_demographic_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_resource_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceLookupSession) - ``a\n                ResourceLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceLookupSession``\n        :rtype: ``osid.resource.ResourceLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_lookup_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource lookup service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): ``a proxy``\n", 
               "return_doc": "        return: (osid.resource.ResourceLookupSession) - ``a\n                ResourceLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: ``a proxy``\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceLookupSession``\n        :rtype: ``osid.resource.ResourceLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_session", 
               "doc": {
                  "headline": "Gets a resource query session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceQuerySession) - ``a\n                ResourceQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceQuerySession``\n        :rtype: ``osid.resource.ResourceQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource query session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceQuerySession) - ``a\n                ResourceQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceQuerySession``\n        :rtype: ``osid.resource.ResourceQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_session", 
               "doc": {
                  "headline": "Gets a resource search session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceSearchSession) - ``a\n                ResourceSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceSearchSession``\n        :rtype: ``osid.resource.ResourceSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource search session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceSearchSession) - ``a\n                ResourceSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceSearchSession``\n        :rtype: ``osid.resource.ResourceSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_admin_session", 
               "doc": {
                  "headline": "Gets a resource administration session for creating, updating and deleting resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAdminSession) - ``a\n                ResourceAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceAdminSession``\n        :rtype: ``osid.resource.ResourceAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_admin_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource administration session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAdminSession) - ``a\n                ResourceAdminSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceAdminSession``\n        :rtype: ``osid.resource.ResourceAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_notification_session", 
               "doc": {
                  "headline": "Gets the resource notification session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_receiver (osid.resource.ResourceReceiver):\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceNotificationSession) - ``a\n                ResourceNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_receiver: notification callback\n        :type resource_receiver: ``osid.resource.ResourceReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceNotificationSession``\n        :rtype: ``osid.resource.ResourceNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceReceiver", 
                     "var_name": "resource_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the resource notification session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_receiver (osid.resource.ResourceReceiver):\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceNotificationSession) - ``a\n                ResourceNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``resource_receiver, bin_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_resource_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_receiver: notification callback\n        :type resource_receiver: ``osid.resource.ResourceReceiver``\n        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a ResourceNotificationSession``\n        :rtype: ``osid.resource.ResourceNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``resource_receiver, bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_resource_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_notfication()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceReceiver", 
                     "var_name": "resource_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_bin_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceBinSession) - a\n                ``ResourceBinSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_bin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceBinSession``\n        :rtype: ``osid.resource.ResourceBinSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceBinSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_bin_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resource to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceBinAssignmentSession) - a\n                ``ResourceBinAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_bin_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceBinAssignmentSession``\n        :rtype: ``osid.resource.ResourceBinAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_bin_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_bin_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceBinAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_smart_bin_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic resource bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceSmartBinSession) - a\n                ``ResourceSmartBinSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_smart_bin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceSmartBinSession``\n        :rtype: ``osid.resource.ResourceSmartBinSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_smart_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_smart_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceSmartBinSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_membership_session", 
               "doc": {
                  "headline": "Gets the session for querying memberships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.MembershipSession) - a\n                ``MembershipSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_membership()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MembershipSession``\n        :rtype: ``osid.resource.MembershipSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_membership()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``support_membership()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.MembershipSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_membership_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource membership session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.MembershipSession) - ``a\n                MembershipSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_membership()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a MembershipSession``\n        :rtype: ``osid.resource.MembershipSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_membership()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_membership()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.MembershipSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_session", 
               "doc": {
                  "headline": "Gets the session for retrieving gropup memberships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupSession) - a ``GroupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_groups()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupSession``\n        :rtype: ``osid.resource.GroupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_groups()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_groups()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_session_for_bin", 
               "doc": {
                  "headline": "Gets a group session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupSession) - a ``GroupSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupSession``\n        :rtype: ``osid.resource.GroupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resources to groups.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupAssignmentSession) - a\n                ``GroupAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupAssignmentSession``\n        :rtype: ``osid.resource.GroupAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_assignment_session_for_bin", 
               "doc": {
                  "headline": "Gets a group assignment session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupAssignmentSession) - a\n                ``GroupAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_assignment()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupAssignmentSession``\n        :rtype: ``osid.resource.GroupAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to resource changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_rceeiver (osid.resource.GroupReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupNotificationSession) - ``a\n                GroupNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``group_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param group_rceeiver: the notification callback\n        :type group_rceeiver: ``osid.resource.GroupReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GroupNotificationSession``\n        :rtype: ``osid.resource.GroupNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``group_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.GroupReceiver", 
                     "var_name": "group_rceeiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.GroupReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the group notification session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_rceeiver (osid.resource.GroupReceiver): the\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupNotificationSession) - ``a\n                GroupNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``group_receiver, bin_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_group_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param group_rceeiver: the notification callback\n        :type group_rceeiver: ``osid.resource.GroupReceiver``\n        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GroupNotificationSession``\n        :rtype: ``osid.resource.GroupNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``group_receiver, bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_group_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_notfication()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.GroupReceiver", 
                     "var_name": "group_rceeiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.GroupReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_hierarchy_session", 
               "doc": {
                  "headline": "Gets the group hierarchy traversal session for the given resource group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinHierarchySession) - ``a\n                GroupHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GroupHierarchySession``\n        :rtype: ``osid.resource.BinHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_group_hierarchy_session_for_bin", 
               "doc": {
                  "headline": "Gets a group hierarchy session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.GroupHierarchySession) - a\n                ``GroupHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_group_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupHierarchySession``\n        :rtype: ``osid.resource.GroupHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_group_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_group_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.GroupHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource agent mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentSession) - a\n                ``GroupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agents()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GroupSession``\n        :rtype: ``osid.resource.ResourceAgentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agents()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agents()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAgentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource agent session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentSession) - a\n                ``ResourceAgentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentSession``\n        :rtype: ``osid.resource.ResourceAgentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAgentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning agents to resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentAssignmentSession) - a\n                ``ResourceAgentAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentAssignmentSession``\n        :rtype: ``osid.resource.ResourceAgentAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAgentAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_agent_assignment_session_for_bin", 
               "doc": {
                  "headline": "Gets a resource agent session for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceAgentAssignmentSession) - a\n                ``ResourceAgentAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_agent_assignment()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceAgentAssignmentSession``\n        :rtype: ``osid.resource.ResourceAgentAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_agent_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_agent_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceAgentAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipLookupSession) - a\n                ``ResourceRelationshipLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipLookupSession``\n        :rtype: ``osid.resource.ResourceRelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_lookup_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship lookup service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipLookupSession) - a\n                ``ResourceRelationshipLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Bin`` found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipLookupSession``\n        :rtype: ``osid.resource.ResourceRelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Bin`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuerySession) - a\n                ``ResourceRelationshipQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipQuerySession``\n        :rtype: ``osid.resource.ResourceRelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship query service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuerySession) - a\n                ``ResourceRelationshipQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Bin`` found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipQuerySession``\n        :rtype: ``osid.resource.ResourceRelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Bin`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchSession) - a\n                ``ResourceRelationshipSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSearchSession``\n        :rtype: ``osid.resource.ResourceRelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship search service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchSession) - a\n                ``ResourceRelationshipSearchSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSearchSession``\n        :rtype: ``osid.resource.ResourceRelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipAdminSession) - a\n                ``ResourceRelationshipAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipAdminSession``\n        :rtype: ``osid.resource.ResourceRelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_admin_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship administration service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipAdminSession) - a\n                ``ResourceRelationshipAdminSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipAdminSession``\n        :rtype: ``osid.resource.ResourceRelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_receiver\n                (osid.resource.ResourceRelationshipReceiver): the\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipNotificationSession)\n                - a ``ResourceRelationshipNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_receiver: the notification callback\n        :type resource_relationship_receiver: ``osid.resource.ResourceRelationshipReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipNotificationSession``\n        :rtype: ``osid.resource.ResourceRelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipReceiver", 
                     "var_name": "resource_relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_notification_session_for_bin", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the resource relationship notification service for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_receiver\n                (osid.resource.ResourceRelationshipReceiver): the\n                notification callback\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipNotificationSession)\n                - a ``ResourceRelationshipNotificationSession``", 
               "error_doc": "        raise:  NotFound - no bin found by the given ``Id``\n        raise:  NullArgument - ``resource_relationship_receiver,\n                bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationshipt_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_receiver: the notification callback\n        :type resource_relationship_receiver: ``osid.resource.ResourceRelationshipReceiver``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipNotificationSession``\n        :rtype: ``osid.resource.ResourceRelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no bin found by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_relationship_receiver, bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationshipt_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipReceiver", 
                     "var_name": "resource_relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_bin_session", 
               "doc": {
                  "headline": "Gets the session for retrieving resource relationship to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipBinSession) - a\n                ``ResourceRelationshipBinSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_relationship_bin()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipBinSession``\n        :rtype: ``osid.resource.ResourceRelationshipBinSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipBinSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_bin_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning resource relationship to bin mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipBinAssignmentSession)\n                - a ``ResourceRelationshipBinAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_bin_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipBinAssignmentSession``\n        :rtype: ``osid.resource.ResourceRelationshipBinAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_bin_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_bin_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipBinAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_smart_bin_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic resource relationship bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSmartBinSession) - a\n                ``ResourceRelationshipSmartBinSession``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_resource_relationship_smart_bin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin\n        :type bin_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ResourceRelationshipSmartBinSession``\n        :rtype: ``osid.resource.ResourceRelationshipSmartBinSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_relationship_smart_bin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_smart_bin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSmartBinSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_lookup_session", 
               "doc": {
                  "headline": "Gets the bin lookup session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinLookupSession) - a\n                ``BinLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinLookupSession``\n        :rtype: ``osid.resource.BinLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_query_session", 
               "doc": {
                  "headline": "Gets the bin query session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinQuerySession) - a ``BinQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinQuerySession``\n        :rtype: ``osid.resource.BinQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_search_session", 
               "doc": {
                  "headline": "Gets the bin search session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinSearchSession) - a\n                ``BinSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinSearchSession``\n        :rtype: ``osid.resource.BinSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_admin_session", 
               "doc": {
                  "headline": "Gets the bin administrative session for creating, updating and deleteing bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinAdminSession) - a ``BinAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinAdminSession``\n        :rtype: ``osid.resource.BinAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for subscribing to changes to a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_receiver (osid.resource.BinReceiver): notification\n                callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinNotificationSession) - a\n                ``BinNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``bin_receiver`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bin_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_receiver: notification callback\n        :type bin_receiver: ``osid.resource.BinReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinNotificationSession``\n        :rtype: ``osid.resource.BinNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bin_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinReceiver", 
                     "var_name": "bin_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_hierarchy_session", 
               "doc": {
                  "headline": "Gets the bin hierarchy traversal session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinHierarchySession) - ``a\n                BinHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unimplemented - ``supports_bin_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a BinHierarchySession``\n        :rtype: ``osid.resource.BinHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unimplemented`` -- ``supports_bin_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the bin hierarchy design session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.resource.BinHierarchyDesignSession) - a\n                ``BinHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unimplemented - ``supports_bin_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BinHierarchyDesignSession``\n        :rtype: ``osid.resource.BinHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unimplemented`` -- ``supports_bin_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.resource.BinHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``ResourceBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.batch.ResourceBatchProxyManager) - a\n                ``ResourceBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceBatchProxyManager``\n        :rtype: ``osid.resource.batch.ResourceBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.batch.ResourceBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_demographic_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``ResourceDemographicProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.resource.demographic.ResourceDemographicProxyManag\n                er) - a ``ResourceDemographicProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_resource_demographic()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ResourceDemographicProxyManager``\n        :rtype: ``osid.resource.demographic.ResourceDemographicProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_resource_demographic()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_demographic()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.demographic.ResourceDemographicProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceLookupSession", 
         "shortname": "ResourceLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving resources.", 
            "body": "    A ``Resource`` is an arbitrary entity that may represent a person,\n    place or thing used to identify an object used in various services.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n      * isolated bin view: All resource methods in this session operate,\n        retrieve and pertain to resources defined explicitly in the\n        current bin. Using an isolated view is useful for managing\n        ``Resources`` with the ``ResourceAdminSession.``\n      * federated bin view: All resource methods in this session\n        operate, retrieve and pertain to all resources defined in this\n        bin and any other resources implicitly available in this bin\n        through bin inheritence.\n\n    \n    The methods ``use_federated_bin_view()`` and\n    ``use_isolated_bin_view()`` behave as a radio group and one should\n    be selected before invoking any lookup methods.\n    \n    Resources may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Resource``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_lookup_resources", 
            "use_comparative_resource_view", 
            "use_plenary_resource_view", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "get_resource", 
            "get_resources_by_ids", 
            "get_resources_by_genus_type", 
            "get_resources_by_parent_genus_type", 
            "get_resources_by_record_type", 
            "get_resources"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_resources", 
               "doc": {
                  "headline": "Tests if this user can perform ``Resource`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_resource_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_resource_view", 
               "doc": {
                  "headline": "A complete view of the ``Resource`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource", 
               "doc": {
                  "headline": "Gets the ``Resource`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Resource`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Resource`` and retained for\n        compatibility."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to retrieve\n", 
               "return_doc": "        return: (osid.resource.Resource) - the returned ``Resource``", 
               "error_doc": "        raise:  NotFound - no ``Resource`` found with the given ``Id``\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to retrieve\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Resource``\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Resource`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_ids", 
               "doc": {
                  "headline": "Gets a ``ResourceList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the resources\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Resources`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    resource_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - the returned ``Resource``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``resource_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_ids: the list of ``Ids`` to retrieve\n        :type resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Resource`` list\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``resource_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ResourceList`` corresponding to the given resource genus ``Type`` which does not include resources of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known resources\n        or an error results. Otherwise, the returned list may contain\n        only those resources that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): a resource genus\n                type\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - the returned ``Resource``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_genus_type: a resource genus type\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Resource`` list\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ResourceList`` corresponding to the given resource genus ``Type`` and include any additional resources with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known resources\n        or an error results. Otherwise, the returned list may contain\n        only those resources that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_genus_type (osid.type.Type): a resource genus\n                type\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - the returned ``Resource``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_genus_type: a resource genus type\n        :type resource_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Resource`` list\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ResourceList`` containing the given resource record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known resources\n        or an error results. Otherwise, the returned list may contain\n        only those resources that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): a resource record\n                type\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - the returned ``Resource``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_record_type: a resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Resource`` list\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources", 
               "doc": {
                  "headline": "Gets all ``Resources``.", 
                  "body": "        In plenary mode, the returned list contains all known resources\n        or an error results. Otherwise, the returned list may contain\n        only those resources that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceList) - a list of ``Resources``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Resources``\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceQuerySession", 
         "shortname": "ResourceQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Resource`` objects.", 
            "body": "    The search query is constructed using the ``ResourceQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bin view: searches include resources in bins of which\n        this bin is a ancestor in the bin hierarchy\n      * isolated bin view: searches are restricted to resources in this\n        bin\n\n    \n    Resources may have a resource record indicated by their respective\n    record types. The resource query record is accessed via the\n    ``ResourceQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_search_resources", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "get_resource_query", 
            "get_resources_by_query"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_resources", 
               "doc": {
                  "headline": "Tests if this user can perform ``Resource`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets a resource query.", 
                  "body": "        The returned query will not have an extension query."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {}
            }, 
            {
               "name": "get_resources_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Resources`` matching the given resource query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_query (osid.resource.ResourceQuery): the\n                resource query\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - the returned\n                ``ResourceList``", 
               "error_doc": "        raise:  NullArgument - ``resource_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_query`` is not of this service", 
               "sphinx_param_doc": "        :param resource_query: the resource query\n        :type resource_query: ``osid.resource.ResourceQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ResourceList``\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceQuery", 
                     "var_name": "resource_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceQuery"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceSearchSession", 
         "shortname": "ResourceSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Resource`` objects.", 
            "body": "    The search query is constructed using the ``ResourceQuery``.\n\n    ``get_resources_by_query()`` is the basic search method and returns\n    a list of ``Resources``. A more advanced search may be performed\n    with ``getResourcesBySearch()``. It accepts an ``ResourceSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_resources_by_search()`` returns an ``ResourceSearchResults``\n    that can be used to access the resulting ``ResourceList`` or be used\n    to perform a search within the result set through ``ResourceList``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bin view: searches include resources in bins of which\n        this bin is a ancestor in the bin hierarchy\n      * isolated bin view: searches are restricted to resources in this\n        bin\n\n    \n    Resources may have a resource query record indicated by their\n    respective record types. The resource query record is accessed via\n    the ``ResourceQuery``."
         }, 
         "inherit_fullnames": [
            "osid.resource.ResourceQuerySession"
         ], 
         "inherit_shortnames": [
            "ResourceQuerySession"
         ], 
         "inherit_pkg_names": [
            "resource"
         ], 
         "inheritance": [
            {
               "pkg_name": "resource", 
               "name": "ResourceQuerySession"
            }
         ], 
         "method_names": [
            "get_resource_search", 
            "get_resource_search_order", 
            "get_resources_by_search", 
            "get_resource_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_resource_search", 
               "doc": {
                  "headline": "Gets a resource search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearch) - the resource search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search\n        :rtype: ``osid.resource.ResourceSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearch", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_order", 
               "doc": {
                  "headline": "Gets a resource search order.", 
                  "body": "        The ``ResourceSearchOrder`` is supplied to a ``ResourceSearch``\n        to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_resources_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_query (osid.resource.ResourceQuery): the\n                resource query\n        arg:    resource_search (osid.resource.ResourceSearch): the\n                resource search\n", 
               "return_doc": "        return: (osid.resource.ResourceSearchResults) - the resource\n                search results", 
               "error_doc": "        raise:  NullArgument - ``resource_query`` or ``resource_search``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_query`` or ``resource_search``\n                is not of this service", 
               "sphinx_param_doc": "        :param resource_query: the resource query\n        :type resource_query: ``osid.resource.ResourceQuery``\n        :param resource_search: the resource search\n        :type resource_search: ``osid.resource.ResourceSearch``\n", 
               "sphinx_return_doc": "        :return: the resource search results\n        :rtype: ``osid.resource.ResourceSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_query`` or ``resource_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_query`` or ``resource_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceQuery", 
                     "var_name": "resource_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.resource.ResourceSearch", 
                     "var_name": "resource_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceQuery", 
                  "osid.resource.ResourceSearch"
               ], 
               "return_type": "osid.resource.ResourceSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_from_inspector", 
               "doc": {
                  "headline": "Gets a resource query from an inspector.", 
                  "body": "        The inspector is available from a ``ResourceSearchResults``."
               }, 
               "arg_doc": "        arg:    resource_query_inspector\n                (osid.resource.ResourceQueryInspector): a resource query\n                inspector\n", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  NullArgument - ``resource_query_inspector`` is ``null``\n        raise:  Unsupported - ``resource_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param resource_query_inspector: a resource query inspector\n        :type resource_query_inspector: ``osid.resource.ResourceQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``resource_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceQueryInspector", 
                     "var_name": "resource_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceQueryInspector"
               ], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceAdminSession", 
         "shortname": "ResourceAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Resources``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Resource,`` a ``ResourceForm`` is requested using\n    ``get_resource_form_for_create()`` specifying desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``ResourceForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``ResourceForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ResourceForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``ResourceForms`` are requested to the ``Resource``\n    ``Id`` that is to be updated using ``getResourceFormForUpdate()``.\n    Similarly, the ``ResourceForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``ResourceForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Resources``. To unmap a ``Resource``\n    from the current ``Bin,`` the ``ResourceBinAssignmentSession``\n    should be used. These delete operations attempt to remove the\n    ``Resource`` itself thus removing it from all known ``Bin``\n    catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_create_resources", 
            "can_create_resource_with_record_types", 
            "get_resource_form_for_create", 
            "create_resource", 
            "can_update_resources", 
            "get_resource_form_for_update", 
            "update_resource", 
            "can_delete_resources", 
            "delete_resource", 
            "can_manage_resource_aliases", 
            "alias_resource"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_resources", 
               "doc": {
                  "headline": "Tests if this user can create ``Resources``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Resource`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Resource`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Resource`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_resource_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Resource`` using the desired record types.", 
                  "body": "        While ``ResourceManager.getResourceRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Resource``.\n        Providing an empty array tests if a ``Resource`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    resource_record_types (osid.type.Type[]): array of\n                resource record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Resource`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param resource_record_types: array of resource record types\n        :type resource_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Resource`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "resource_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_form_for_create", 
               "doc": {
                  "headline": "Gets the resource form for creating new resources.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    resource_record_types (osid.type.Type[]): array of\n                resource record types\n", 
               "return_doc": "        return: (osid.resource.ResourceForm) - the resource form", 
               "error_doc": "        raise:  NullArgument - ``resource_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param resource_record_types: array of resource record types\n        :type resource_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the resource form\n        :rtype: ``osid.resource.ResourceForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "resource_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.resource.ResourceForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_resource", 
               "doc": {
                  "headline": "Creates a new ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_form (osid.resource.ResourceForm): the form for\n                this ``Resource``\n", 
               "return_doc": "        return: (osid.resource.Resource) - the new ``Resource``", 
               "error_doc": "        raise:  IllegalState - ``resource_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``resource_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_form`` did not originate from\n                ``get_resource_form_for_create()``", 
               "sphinx_param_doc": "        :param resource_form: the form for this ``Resource``\n        :type resource_form: ``osid.resource.ResourceForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Resource``\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``resource_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``resource_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_form`` did not originate from ``get_resource_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceForm", 
                     "var_name": "resource_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceForm"
               ], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_resources", 
               "doc": {
                  "headline": "Tests if this user can update ``Resources``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Resource`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Resource`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Resource`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_form_for_update", 
               "doc": {
                  "headline": "Gets the resource form for updating an existing resource.", 
                  "body": "        A new resource form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceForm) - the resource form", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the resource form\n        :rtype: ``osid.resource.ResourceForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_resource", 
               "doc": {
                  "headline": "Updates an existing resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_form (osid.resource.ResourceForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``resource_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``resource_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_form`` did not originate from\n                ``get_resource_form_for_update()``", 
               "sphinx_param_doc": "        :param resource_form: the form containing the elements to be updated\n        :type resource_form: ``osid.resource.ResourceForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``resource_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``resource_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_form`` did not originate from ``get_resource_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceForm", 
                     "var_name": "resource_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_resources", 
               "doc": {
                  "headline": "Tests if this user can delete ``Resources``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Resource`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Resource`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Resource`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_resource", 
               "doc": {
                  "headline": "Deletes a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_id`` not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to remove\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_resource_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Resources``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Resource`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Resource`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_resource", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Resource`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Resource`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another resource it is\n        reassigned to the given resource ``Id``."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of a ``Resource``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``resource_id`` not found\n        raise:  NullArgument - ``alias_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``alias_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceNotificationSession", 
         "shortname": "ResourceNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Resource`` objects in this ``Bin``.", 
            "body": "    This also includes existing resources that may appear or disappear\n    due to changes in the ``Bin`` hierarchy, This session is intended\n    for consumers needing to synchronize their state with this service\n    without the use of polling. Notifications are cancelled when this\n    session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``ResourceLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_register_for_resource_notifications", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "register_for_new_resources", 
            "register_for_changed_resources", 
            "register_for_changed_resource", 
            "register_for_deleted_resources", 
            "register_for_deleted_resource"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_resource_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Resource`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_resources", 
               "doc": {
                  "headline": "Register for notifications of new resources.", 
                  "body": "        ``ResourceReceiver.newResource()`` is invoked when a new\n        ``Resource`` is appears in this bin."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resources", 
               "doc": {
                  "headline": "Registers for notification of updated resources.", 
                  "body": "        ``ResourceReceiver.changedResource()`` is invoked when a\n        resource in this bin is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource", 
               "doc": {
                  "headline": "Registers for notification of an updated resource.", 
                  "body": "        ``ResourceReceiver.changedResource()`` is invoked when the\n        specified resource in this bin is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resources", 
               "doc": {
                  "headline": "Registers for notification of deleted resources.", 
                  "body": "        ``ResourceReceiver.deletedResource()`` is invoked when a\n        resource is deleted or removed from this bin."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource", 
               "doc": {
                  "headline": "Registers for notification of a deleted resource.", 
                  "body": "        ``ResourceReceiver.deletedResource()`` is invoked when the\n        specified resource is deleted or removed from this bin."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceBinSession", 
         "shortname": "ResourceBinSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Resource`` to ``Bin`` mappings.", 
            "body": "    A ``Resource`` may appear in multiple ``Bins``. Each ``Bin`` may\n    have its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "use_comparative_bin_view", 
            "use_plenary_bin_view", 
            "can_lookup_resource_bin_mappings", 
            "get_resource_ids_by_bin", 
            "get_resources_by_bin", 
            "get_resource_ids_by_bins", 
            "get_resources_by_bins", 
            "get_bin_ids_by_resource", 
            "get_bins_by_resource"
         ], 
         "methods": [
            {
               "name": "use_comparative_bin_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bin_view", 
               "doc": {
                  "headline": "A complete view of the ``Resource`` and ``Bin`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_lookup_resource_bin_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of resource/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_ids_by_bin", 
               "doc": {
                  "headline": "Gets the list of ``Resource``  ``Ids`` associated with a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): ``Id`` of a ``Bin``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related resource ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: ``Id`` of a ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_bin", 
               "doc": {
                  "headline": "Gets the list of ``Resources`` associated with a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): ``Id`` of a ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - list of related resources", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: ``Id`` of a ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related resources\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_ids_by_bins", 
               "doc": {
                  "headline": "Gets the list of ``Resource Ids`` corresponding to a list of ``Bin`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): list of bin ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of resource ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_ids: list of bin ``Ids``\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_bins", 
               "doc": {
                  "headline": "Gets the list of ``Resources`` corresponding to a list of ``Bins``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): list of bin ``Ids``\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - list of resources", 
               "error_doc": "        raise:  NullArgument - ``bin_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_ids: list of bin ``Ids``\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resources\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bin_ids_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Bin``  ``Ids`` mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bin ``Ids``", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Bin`` objects mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.resource.BinList) - list of bins", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bins\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceBinAssignmentSession", 
         "shortname": "ResourceBinAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Resources`` to ``Bins``.", 
            "body": "    A ``Resource`` may map to multiple ``Bin`` objects and removing the\n    last reference to a ``Resource`` is the equivalent of deleting it.\n    Each ``Bin`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Moving or adding a reference of a ``Resource`` to another ``Bin`` is\n    not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_resources", 
            "can_assign_resources_to_bin", 
            "get_assignable_bin_ids", 
            "get_assignable_bin_ids_for_resource", 
            "assign_resource_to_bin", 
            "unassign_resource_from_bin"
         ], 
         "methods": [
            {
               "name": "can_assign_resources", 
               "doc": {
                  "headline": "Tests if this user can alter resource/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_resources_to_bin", 
               "doc": {
                  "headline": "Tests if this user can alter resource/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied`` . This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bin_ids", 
               "doc": {
                  "headline": "Gets a list of bins including and under the given bin node in which any resource can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bin ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bin_ids_for_resource", 
               "doc": {
                  "headline": "Gets a list of bins including and under the given bin node in which a specific resource can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bin ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` or ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_resource_to_bin", 
               "doc": {
                  "headline": "Adds an existing ``Resource`` to a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``resource_id`` is already assigned to\n                ``bin_id``\n        raise:  NotFound - ``resource_id`` or ``bin_id`` not found\n        raise:  NullArgument - ``resource_id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``resource_id`` is already assigned to ``bin_id``\n        :raise: ``NotFound`` -- ``resource_id`` or ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``resource_id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_resource_from_bin", 
               "doc": {
                  "headline": "Removes a ``Resource`` from a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_id`` or ``bin_id`` not found or\n                ``resource_id`` not assigned to ``bin_id``\n        raise:  NullArgument - ``resource_id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` or ``bin_id`` not found or ``resource_id`` not assigned to ``bin_id``\n        :raise: ``NullArgument`` -- ``resource_id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceSmartBinSession", 
         "shortname": "ResourceSmartBinSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``ResourceQuery`` can be retrieved from this session and mapped to\n    this ``Bin`` to create a virtual collection of ``Resources``. The\n    resources may be sequenced using the ``ResourceSearchOrder`` from\n    this session.\n\n    This ``Bin`` has a default query that matches any resource and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``ResourceQueryInspector``. The query may be\n    modified by converting the inspector back to a ``ResourceQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_manage_smart_bins", 
            "get_resource_query", 
            "get_resource_search_order", 
            "apply_resource_query", 
            "inspect_resource_query", 
            "apply_resource_sequencing", 
            "get_resource_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_bins", 
               "doc": {
                  "headline": "Tests if this user can manage smart bins.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bin management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bin management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets a resource query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_order", 
               "doc": {
                  "headline": "Gets a resource search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_resource_query", 
               "doc": {
                  "headline": "Applies a resource query to this bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_query (osid.resource.ResourceQuery): the\n                resource query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``resource_query`` not of this service", 
               "sphinx_param_doc": "        :param resource_query: the resource query\n        :type resource_query: ``osid.resource.ResourceQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``resource_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceQuery", 
                     "var_name": "resource_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_resource_query", 
               "doc": {
                  "headline": "Gets a resource query inspector for this bin.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query inspector\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_resource_sequencing", 
               "doc": {
                  "headline": "Applies a resource search order to this bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_search_order\n                (osid.resource.ResourceSearchOrder): the resource search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``resource_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param resource_search_order: the resource search order\n        :type resource_search_order: ``osid.resource.ResourceSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``resource_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceSearchOrder", 
                     "var_name": "resource_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_from_inspector", 
               "doc": {
                  "headline": "Gets a resource query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_query_inspector\n                (osid.resource.ResourceQueryInspector): a resource query\n                inspector\n", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  NullArgument - ``resource_query_inspector`` is ``null``\n        raise:  Unsupported - ``resource_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param resource_query_inspector: a resource query inspector\n        :type resource_query_inspector: ``osid.resource.ResourceQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``resource_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceQueryInspector", 
                     "var_name": "resource_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceQueryInspector"
               ], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.MembershipSession", 
         "shortname": "MembershipSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to query if a ``Resource`` is a member of another ``Resource``.", 
            "body": "    ``Resources`` may represent groups of ``Resources`` or generated\n    ``Demographics`` of ``Resources``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_query_membership", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "is_member"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_query_membership", 
               "doc": {
                  "headline": "Tests if this user can perform membership queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if membership queries are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if membership queries are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts resources to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "is_member", 
               "doc": {
                  "headline": "Tests if a ``Resource`` is a member of another ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    member_resource_id (osid.id.Id): ``Id`` of the\n                ``Resource`` member\n        arg:    resource_id (osid.id.Id): ``Id`` of the ``Resource``\n                representing the group or demographic\n", 
               "return_doc": "        return: (boolean) - true if ``member_resource_id`` is a member\n                of the ``resource_id,`` false otherwise", 
               "error_doc": "        raise:  NullArgument - ``member_resource_id`` or ``resource_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param member_resource_id: ``Id`` of the ``Resource`` member\n        :type member_resource_id: ``osid.id.Id``\n        :param resource_id: ``Id`` of the ``Resource`` representing the group or demographic\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: true if ``member_resource_id`` is a member of the ``resource_id,`` false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``member_resource_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "member_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.GroupSession", 
         "shortname": "GroupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Resource`` to ``Group`` mappings.", 
            "body": "    A ``Resource`` may appear in multiple resource groups. A group is\n    also represented by a resource itself."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_lookup_resource_members", 
            "use_comparative_resource_view", 
            "use_plenary_resource_view", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "use_federated_group_view", 
            "use_isolated_group_view", 
            "get_resource_ids_by_group", 
            "get_resources_by_group", 
            "get_resource_ids_by_groups", 
            "get_resources_by_groups", 
            "get_group_ids_by_resource", 
            "get_groups_by_resource"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_resource_members", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of resource members.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up members is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up members is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_resource_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_resource_view", 
               "doc": {
                  "headline": "A complete view of the ``Resource`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts resources to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_group_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in groups which are\n        children of the specified group in the group hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_group_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to the specified group only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_ids_by_group", 
               "doc": {
                  "headline": "Gets the list of ``Resource``  ``Ids`` associated with a ``Resource``.", 
                  "body": "        In a federated view, resources for child groups are included."
               }, 
               "arg_doc": "        arg:    group_resource_id (osid.id.Id): ``Id`` of the\n                ``Resource``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of member resource ``Ids``", 
               "error_doc": "        raise:  NotFound - ``group_resource_id`` is not found\n        raise:  NullArgument - ``group_resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param group_resource_id: ``Id`` of the ``Resource``\n        :type group_resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of member resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``group_resource_id`` is not found\n        :raise: ``NullArgument`` -- ``group_resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "group_resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_group", 
               "doc": {
                  "headline": "Gets the list of ``Resources`` associated with a ``Resource``.", 
                  "body": "        In a federated view, resources for child groups are included."
               }, 
               "arg_doc": "        arg:    group_resource_id (osid.id.Id): ``Id`` of the\n                ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - list of resourcememembers", 
               "error_doc": "        raise:  NotFound - ``group_resource_id`` is not found\n        raise:  NullArgument - ``group_resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param group_resource_id: ``Id`` of the ``Resource``\n        :type group_resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of resourcememembers\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``group_resource_id`` is not found\n        :raise: ``NullArgument`` -- ``group_resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "group_resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_ids_by_groups", 
               "doc": {
                  "headline": "Gets the list of ``Resource Ids`` corresponding to a list of ``Resource`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_resource_ids (osid.id.IdList): list of resource\n                ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of resource ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``group_resource_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param group_resource_ids: list of resource ``Ids``\n        :type group_resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``group_resource_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "group_resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resources_by_groups", 
               "doc": {
                  "headline": "Gets the list of ``Resources`` corresponding to a list of ``Resource`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_resource_ids (osid.id.IdList): list of resource\n                ``Ids``\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - list of resources", 
               "error_doc": "        raise:  NullArgument - ``group_resource_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param group_resource_ids: list of resource ``Ids``\n        :type group_resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resources\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``group_resource_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "group_resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_group_ids_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Resource``  ``Ids`` mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of group resource ``Ids``", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of group resource ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_groups_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Resource`` objects mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceList) - list of group resources", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of group resources\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.GroupAssignmentSession", 
         "shortname": "GroupAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Resources`` to group ``Resources``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_assign_resources", 
            "can_assign_resources_to_group", 
            "assign_resource_to_group", 
            "unassign_resource_from_group"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_assign_resources", 
               "doc": {
                  "headline": "Tests if this user can change resource group mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not wish to offer\n        assignment operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_resources_to_group", 
               "doc": {
                  "headline": "Tests if this user can assign members to the given group.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "assign_resource_to_group", 
               "doc": {
                  "headline": "Adds an existing ``Resource`` to a ``Resource`` group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    resource_group_id (osid.id.Id): the ``Id`` of the\n                ``Resource`` group\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``resource_id`` is already part of\n                ``resource_group_id``\n        raise:  NotFound - ``resource_id`` or ``resource_group_id`` not\n                found\n        raise:  NullArgument - ``resource_id`` or ``resource_group_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param resource_group_id: the ``Id`` of the ``Resource`` group\n        :type resource_group_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``resource_id`` is already part of ``resource_group_id``\n        :raise: ``NotFound`` -- ``resource_id`` or ``resource_group_id`` not found\n        :raise: ``NullArgument`` -- ``resource_id`` or ``resource_group_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_group_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_resource_from_group", 
               "doc": {
                  "headline": "Removes a ``Resource`` from a ``Resource`` group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    resource_group_id (osid.id.Id): the ``Id`` of the\n                ``Repository``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_id or resource_group_id`` not\n                found or ``resource_id`` not part of\n                ``resource_group_id``\n        raise:  NullArgument - ``resource_id or resource_group_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param resource_group_id: the ``Id`` of the ``Repository``\n        :type resource_group_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id or resource_group_id`` not found or ``resource_id`` not part of ``resource_group_id``\n        :raise: ``NullArgument`` -- ``resource_id or resource_group_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_group_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.GroupNotificationSession", 
         "shortname": "GroupNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Resource`` members.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_register_for_group_notifications", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "register_for_new_members", 
            "register_for_deleted_members"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_group_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for group notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_members", 
               "doc": {
                  "headline": "Register for notifications of new resource memberss.", 
                  "body": "        ``GroupReceiver.newMember()`` is invoked when a new member is\n        added to the specified group."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_members", 
               "doc": {
                  "headline": "Register for notifications of deleted resource memberss.", 
                  "body": "        ``GroupReceiver.deletedMember()`` is invoked when a new member\n        is removed from the specified group."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.GroupHierarchySession", 
         "shortname": "GroupHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides a hierarchical view of resource groups.", 
            "body": "    Each node in the hierarchy is a unique ``Resource``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``get_parent_resources()`` and ``getChildResources()``. To relate\n    these ``Ids`` to another OSID, ``get_resource_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_resources()`` or ``get_child_resources()``\n    in lieu of a ``PermissionDenied`` error that may disrupt the\n    traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: resource elements may be silently omitted or\n        re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_access_group_hierarchy", 
            "use_comparative_resource_view", 
            "use_plenary_resource_view", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "is_member_of_group", 
            "get_resource_node_ids", 
            "get_resource_nodes"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_group_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_resource_view", 
               "doc": {
                  "headline": "The returns from the group methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_resource_view", 
               "doc": {
                  "headline": "A complete view of the ``Resource`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "is_member_of_group", 
               "doc": {
                  "headline": "Tests if a resource ``Id`` is a member of a group either directly or indirectly through nested groups.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_id (osid.id.Id): a resource group ``Id``\n        arg:    resource_id (osid.id.Id): the ``Id`` of a resource\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``resource_id`` is a member\n                of ``group_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``group_id`` is not found\n        raise:  NullArgument - ``group_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param group_id: a resource group ``Id``\n        :type group_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of a resource\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``resource_id`` is a member of ``group_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``group_id`` is not found\n        :raise: ``NullArgument`` -- ``group_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``resource_id`` not found return\n        ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "group_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given resource group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a resource node", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` to query\n        :type resource_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a resource node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given resource group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.acknowledgement.BillingNode) - a resource node", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` to query\n        :type resource_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a resource node\n        :rtype: ``osid.acknowledgement.BillingNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.acknowledgement.BillingNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceAgentSession", 
         "shortname": "ResourceAgentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Resource`` to ``Agent`` mappings.", 
            "body": "    An ``Agent`` may map to only one ``Resource`` while a ``Resource``\n    may map to multiple ``Agents``.\n\n    This lookup session defines several views\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_lookup_resource_agent_mappings", 
            "use_comparative_agent_view", 
            "use_plenary_agent_view", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "get_resource_id_by_agent", 
            "get_resource_by_agent", 
            "get_agent_ids_by_resource", 
            "get_agents_by_resource"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_resource_agent_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of resource/agent mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_agent_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_agent_view", 
               "doc": {
                  "headline": "A complete view of the ``Agent`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include resources in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_id_by_agent", 
               "doc": {
                  "headline": "Gets the ``Resource``  ``Id`` associated with the given agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (osid.id.Id) - associated resource", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: associated resource\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_by_agent", 
               "doc": {
                  "headline": "Gets the ``Resource`` associated with the given agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` of the ``Agent``\n", 
               "return_doc": "        return: (osid.resource.Resource) - associated resource", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: associated resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agent_ids_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Agent``  ``Ids`` mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of agent ``Ids``", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of agent ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_agents_by_resource", 
               "doc": {
                  "headline": "Gets the list of ``Agents`` mapped to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.authentication.AgentList) - list of agents", 
               "error_doc": "        raise:  NotFound - ``resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of agents\n        :rtype: ``osid.authentication.AgentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.AgentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceAgentAssignmentSession", 
         "shortname": "ResourceAgentAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Resource`` to ``Agents``.", 
            "body": "    A ``Resource`` may be associated with multiple ``Agents``. An\n    ``Agent`` may map to only one ``Resource``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_assign_agents", 
            "can_assign_agents_to_resource", 
            "assign_agent_to_resource", 
            "unassign_agent_from_resource"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_assign_agents", 
               "doc": {
                  "headline": "Tests if this user can alter resource/agent mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_agents_to_resource", 
               "doc": {
                  "headline": "Tests if this user can alter resource/agent mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known location methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "assign_agent_to_resource", 
               "doc": {
                  "headline": "Adds an existing ``Agent`` to a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``agent_id`` is already assigned to\n                ``resource_id``\n        raise:  NotFound - ``agent_id`` or ``resource_id`` not found\n        raise:  NullArgument - ``agent_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``agent_id`` is already assigned to ``resource_id``\n        :raise: ``NotFound`` -- ``agent_id`` or ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``agent_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_agent_from_resource", 
               "doc": {
                  "headline": "Removes an ``Agent`` from a ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the ``Id`` of the ``Agent``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``agent_id`` or ``resource_id`` not found or\n                ``agent_id`` not assigned to ``resource_id``\n        raise:  NullArgument - ``agent_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: the ``Id`` of the ``Agent``\n        :type agent_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` or ``resource_id`` not found or ``agent_id`` not assigned to ``resource_id``\n        :raise: ``NullArgument`` -- ``agent_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipLookupSession", 
         "shortname": "ResourceRelationshipLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for examining resource relationships.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_lookup_resource_relationships", 
            "use_comparative_resource_relationship_view", 
            "use_plenary_resource_relationship_view", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "use_effective_resource_relationship_view", 
            "use_any_effective_resource_relationship_view", 
            "get_resource_relationship", 
            "get_resource_relationships_by_ids", 
            "get_resource_relationships_by_genus_type", 
            "get_resource_relationships_by_parent_genus_type", 
            "get_resource_relationships_by_record_type", 
            "get_resource_relationships_on_date", 
            "get_resource_relationships_for_source_resource", 
            "get_resource_relationships_for_source_resource_on_date", 
            "get_resource_relationships_by_genus_type_for_source_resource", 
            "get_resource_relationships_by_genus_type_for_source_resource_on_date", 
            "get_resource_relationships_for_destination_resource", 
            "get_resource_relationships_for_destination_resource_on_date", 
            "get_resource_relationships_by_genus_type_for_destination_resource", 
            "get_resource_relationships_by_genus_type_for_destination_resource_on_date", 
            "get_resource_relationships_for_resources", 
            "get_resource_relationships_for_resources_on_date", 
            "get_resource_relationships_by_genus_type_for_resources", 
            "get_resource_relationships_by_genus_type_for_resources_on_date", 
            "get_resource_relationships"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can access resource relationships.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        relationship operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_resource_relationship_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_resource_relationship_view", 
               "doc": {
                  "headline": "A complete view of the resource relationship returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relationships in bins which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts relationships to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_resource_relationship_view", 
               "doc": {
                  "headline": "Only resource relationships whose effective dates are current are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_resource_relationship_view", 
               "doc": {
                  "headline": "All resource relationships of any effective dates are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationship`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): ``Id`` of the\n                ``Relationship``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationship) - the relationship", 
               "error_doc": "        raise:  NotFound - ``resource_relationship_id`` not found\n        raise:  NullArgument - ``resource_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: ``Id`` of the ``Relationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationship\n        :rtype: ``osid.resource.ResourceRelationship``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_relationship_id`` not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationship", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_ids", 
               "doc": {
                  "headline": "Gets a ``ResourceRelationshipList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_ids (osid.id.IdList): the list of\n                ``Ids`` to retrieve\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the returned\n                ``ResourceRelationship`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``resource_relationship_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_ids: the list of ``Ids`` to retrieve\n        :type resource_relationship_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``ResourceRelationship`` list\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``resource_relationship_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_relationship_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type", 
               "doc": {
                  "headline": "Gets the resource relationships for the given resource relationship genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets the reource relationships for the given resource relationship genus type and include any relationships with a genus type derived from the specified genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_record_type", 
               "doc": {
                  "headline": "Gets the resource relationships for the given resource relationship record type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_on_date", 
               "doc": {
                  "headline": "Gets the resource relationships effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_source_resource", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` of a resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``source_resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: ``Id`` of a ``Resource``\n        :type source_resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_source_resource_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships for a resource and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``source_resource_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: a resource ``Id``\n        :type source_resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``source_resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_source_resource", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` of a resource of relationship genus type that includes any genus type derived from the given one.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``source_resource_id`` or\n                ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: ``Id`` of a ``Resource``\n        :type source_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_resource_id`` or ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_source_resource_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships of a given genus type for a resource and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): a resource ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``source_resource_id,\n                relationship_genus_type, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: a resource ``Id``\n        :type source_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``source_resource_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_destination_resource", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` of a resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``destination_resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_resource_id: ``Id`` of a ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_destination_resource_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships for a resource and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``destination_resource_id, from,`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: a resource ``Id``\n        :type source_resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``destination_resource_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_destination_resource", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` of a resource of relationship genus type that includes any genus type derived from the given one.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``destination_resource_id`` or\n                ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_resource_id: ``Id`` of a ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_resource_id`` or ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_destination_resource_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships of a given genus type for a resource and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_resource_id (osid.id.Id): a resource ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``destination_resource_id,\n                relationship_genus_type, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_resource_id: a resource ``Id``\n        :type destination_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``destination_resource_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_resources", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` given two resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n        arg:    destination_resource_id (osid.id.Id): ``Id`` of another\n                ``Resource``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``source_relationship_id`` or\n                ``destination_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: ``Id`` of a ``Resource``\n        :type source_resource_id: ``osid.id.Id``\n        :param destination_resource_id: ``Id`` of another ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_relationship_id`` or ``destination_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_for_resources_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships for a two peer resources and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): a resource ``Id``\n        arg:    destination_resource_id (osid.id.Id): ``Id`` of another\n                ``Resource``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``source_resource_id,\n                destination_resource_id, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: a resource ``Id``\n        :type source_resource_id: ``osid.id.Id``\n        :param destination_resource_id: ``Id`` of another ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``source_resource_id, destination_resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_resources", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationships`` given two resources and a relationship genus type which includes any genus types derived from the given genus type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): ``Id`` of a\n                ``Resource``\n        arg:    destination_resource_id (osid.id.Id): ``Id`` of another\n                ``Resource``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``source_resource_id,\n                destination_resource_id,`` or ``relatonship_genus_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: ``Id`` of a ``Resource``\n        :type source_resource_id: ``osid.id.Id``\n        :param destination_resource_id: ``Id`` of another ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_resource_id, destination_resource_id,`` or ``relatonship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_genus_type_for_resources_on_date", 
               "doc": {
                  "headline": "Gets a list of resource relationships of a given genus type for a two peer resources and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): a resource ``Id``\n        arg:    destination_resource_id (osid.id.Id): ``Id`` of another\n                ``Resource``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``source_resource_id,\n                destination_resource_id, relationship_genus_type, from``\n                or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_resource_id: a resource ``Id``\n        :type source_resource_id: ``osid.id.Id``\n        :param destination_resource_id: ``Id`` of another ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``source_resource_id, destination_resource_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships", 
               "doc": {
                  "headline": "Gets all ``ResourceRelationships``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the\n                relationships", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipQuerySession", 
         "shortname": "ResourceRelationshipQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``ResourceRelationship`` objects.", 
            "body": "    The search query is constructed using the\n    ``ResourceRelationshipQuery``. The resource relationship record\n    ``Type`` also specifies the record for the relationship query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bin view: searches include relationships in bins of\n        which this bin is a ancestor in the bin hierarchy\n      * isolated bin view: searches are restricted to relationships in\n        this bin only\n\n    \n    Relationships may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ResourceRelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_search_resource_relationships", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "get_resource_relationship_query", 
            "get_resource_relationships_by_query"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the bin", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can perform ``ResourceRelationship`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relationships in bin which are\n        children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_query", 
               "doc": {
                  "headline": "Gets a relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuery) - the\n                relationship query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.resource.ResourceRelationshipQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQuery", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationships_by_query", 
               "doc": {
                  "headline": "Gets a list of ``ResourceRelationship`` matching the given resource relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_query\n                (osid.resource.ResourceRelationshipQuery): the resource\n                relationship query\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the returned\n                ``ResourceRelationshipList``", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_query is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_relationship_query`` is not of\n                this service", 
               "sphinx_param_doc": "        :param resource_relationship_query: the resource relationship query\n        :type resource_relationship_query: ``osid.resource.ResourceRelationshipQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ResourceRelationshipList``\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_query is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_relationship_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipQuery", 
                     "var_name": "resource_relationship_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipQuery"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipSearchSession", 
         "shortname": "ResourceRelationshipSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``ResourceRelationship`` objects.", 
            "body": "    The search query is constructed using the\n    ``ResourceRelationshipQuery``. The resource relationship record\n    ``Type`` also specifies the record for the relationship query.\n\n    ``get_resource_relationships_by_query()`` is the basic search method\n    and returns a list of ``ResourceRelationships``. A more advanced\n    search may be performed with ``getResourceRelationshipsBySearch()``.\n    It accepts a ``ResourceRelationshipSearch`` in addition to the query\n    for the purpose of specifying additional options affecting the\n    entire search, such as ordering.\n    ``get_resource_relationships_by_search()`` returns an\n    ``ResourceRelationshipSearchResults`` that can be used to access the\n    resulting ``ResourceRelationshipList`` or be used to perform a\n    search within the result set through ``ResourceRelationshipSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bin view: searches include relationships in bins of\n        which this bin is a ancestor in the bin hierarchy\n      * isolated bin view: searches are restricted to relationships in\n        this bin only\n\n    \n    Relationships may have a resource relationship query record\n    indicated by their respective record types. The resource\n    relationship query record is accessed via the\n    ``ResourceRelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.resource.ResourceRelationshipQuerySession"
         ], 
         "inherit_shortnames": [
            "ResourceRelationshipQuerySession"
         ], 
         "inherit_pkg_names": [
            "resource"
         ], 
         "inheritance": [
            {
               "pkg_name": "resource", 
               "name": "ResourceRelationshipQuerySession"
            }
         ], 
         "method_names": [
            "get_resource_relationship_search", 
            "get_resource_relationship_search_order", 
            "get_resource_relationships_by_search", 
            "get_resource_relationship_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_resource_relationship_search", 
               "doc": {
                  "headline": "Gets a relationship search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearch) - the\n                relationship search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship search\n        :rtype: ``osid.resource.ResourceRelationshipSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipSearch", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_search_order", 
               "doc": {
                  "headline": "Gets a relationship search order.", 
                  "body": "        The ``ResourceRelationshipSearchOrder`` is supplied to a\n        ``ResourceRelationshipSearch`` to specify the ordering of\n        results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchOrder) - the\n                relationship search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship search order\n        :rtype: ``osid.resource.ResourceRelationshipSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationships_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_query\n                (osid.resource.ResourceRelationshipQuery): the resource\n                relationship query\n        arg:    resource_relationship_search\n                (osid.resource.ResourceRelationshipSearch): the resource\n                relationship search\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchResults) - the\n                returned resource relationship search results", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_query`` or r\n                ``esource_relationship_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_relationship_search`` or r\n                ``esource_relationship_query`` is not of this service", 
               "sphinx_param_doc": "        :param resource_relationship_query: the resource relationship query\n        :type resource_relationship_query: ``osid.resource.ResourceRelationshipQuery``\n        :param resource_relationship_search: the resource relationship search\n        :type resource_relationship_search: ``osid.resource.ResourceRelationshipSearch``\n", 
               "sphinx_return_doc": "        :return: the returned resource relationship search results\n        :rtype: ``osid.resource.ResourceRelationshipSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_query`` or r ``esource_relationship_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_relationship_search`` or r ``esource_relationship_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipQuery", 
                     "var_name": "resource_relationship_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.resource.ResourceRelationshipSearch", 
                     "var_name": "resource_relationship_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipQuery", 
                  "osid.resource.ResourceRelationshipSearch"
               ], 
               "return_type": "osid.resource.ResourceRelationshipSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_from_inspector", 
               "doc": {
                  "headline": "Gets a resource relationship query from an inspector.", 
                  "body": "        The inspector is available from a\n        ``ResourceRelationshipSearchResults``."
               }, 
               "arg_doc": "        arg:    resource_relationship_query_inspector\n                (osid.resource.ResourceRelationshipQueryInspector): a\n                query inspector\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuery) - the resource\n                relationship query", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_query_inspector``\n                is ``null``\n        raise:  Unsupported - ``resource_relationship_query_inspector``\n                is not of this service", 
               "sphinx_param_doc": "        :param resource_relationship_query_inspector: a query inspector\n        :type resource_relationship_query_inspector: ``osid.resource.ResourceRelationshipQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the resource relationship query\n        :rtype: ``osid.resource.ResourceRelationshipQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``resource_relationship_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipQueryInspector", 
                     "var_name": "resource_relationship_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipQueryInspector"
               ], 
               "return_type": "osid.resource.ResourceRelationshipQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipAdminSession", 
         "shortname": "ResourceRelationshipAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``ResourceRelationships``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``ResourceRelationship,`` a ``ResourceRelationshipForm`` is\n    requested using ``ge_resource_relationship_form_for_create()``\n    specifying the ``nodes`` and desired record ``Types`` or none if no\n    record ``Types`` are needed. The returned\n    ``ResourceRelationshipForm`` will indicate that it is to be used\n    with a create operation and can be used to examine metdata or\n    validate data prior to creation. Once the\n    ``ResourceRelationshipForm`` is submiited to a create operation, it\n    cannot be reused with another create operation unless the first\n    operation was unsuccessful. Each ``ResourceRelationshipForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``ResourceRelationshipForms`` are requested to the\n    ``ResourceRelationship``  ``Id`` that is to be updated using\n    ``getResourceRelationshipFormForUpdate()``. Similarly, the\n    ``ResourceRelationshipForm`` has metadata about the data that can be\n    updated and it can perform validation before submitting the update.\n    The ``ResourceRelationshipForm`` can only be used once for a\n    successful update and cannot be reused.\n    \n    The delete operations delete ``ResourceRelationships``. To unmap s\n    ``ResourceRelationship`` from the current ``Bin,`` the\n    ``ResourceRelationshipBinAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``ResourceRelationship``\n    itself thus removing it from all known ``Bin`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_create_resource_relationships", 
            "can_create_resource_relationship_with_record_types", 
            "get_resource_relationship_form_for_create", 
            "create_resource_relationship", 
            "can_update_resource_relationships", 
            "get_resource_relationship_form_for_update", 
            "update_resource_relationship", 
            "can_delete_resource_relationships", 
            "delete_resource_relationship", 
            "can_manage_resource_relationship_aliases", 
            "alias_resource_relationship"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the bin", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can create ``ResourceRelationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``ResourceRelationship`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ResourceRelationship``\n                creation is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ResourceRelationship`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_resource_relationship_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``ResourceRelationship`` using the desired record types.", 
                  "body": "        While ``ResourceManager.getResourceRelationshipRecordTypes()``\n        can be used to examine which records are supported, this method\n        tests which record(s) are required for creating a specific\n        ``ResourceRelationship``. Providing an empty array tests if a\n        ``ResourceRelationship`` can be created with no records."
               }, 
               "arg_doc": "        arg:    resource_relationship_record_types (osid.type.Type[]):\n                array of resource relationship types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``ResourceRelationship``\n                creation using the specified record ``Types`` is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_types`` is\n                ``null``", 
               "sphinx_param_doc": "        :param resource_relationship_record_types: array of resource relationship types\n        :type resource_relationship_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``ResourceRelationship`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "resource_relationship_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_form_for_create", 
               "doc": {
                  "headline": "Gets the relationship form for creating new relationships.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    source_resource_id (osid.id.Id): the ``Id`` of the\n                source ``Resource``\n        arg:    destination_resource_id (osid.id.Id): the ``Id`` of the\n                destination ``Resource``\n        arg:    resource_relationship_record_types (osid.type.Type[]):\n                array of resource relationship types\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipForm) - the\n                relationship form", 
               "error_doc": "        raise:  NotFound - ``source_resource_id`` or\n                ``destination_resource_id`` is not found\n        raise:  NullArgument - ``resource_id`` or ``peer_resource_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param source_resource_id: the ``Id`` of the source ``Resource``\n        :type source_resource_id: ``osid.id.Id``\n        :param destination_resource_id: the ``Id`` of the destination ``Resource``\n        :type destination_resource_id: ``osid.id.Id``\n        :param resource_relationship_record_types: array of resource relationship types\n        :type resource_relationship_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the relationship form\n        :rtype: ``osid.resource.ResourceRelationshipForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``source_resource_id`` or ``destination_resource_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_id`` or ``peer_resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "resource_relationship_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.resource.ResourceRelationshipForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_resource_relationship", 
               "doc": {
                  "headline": "Creates a new ``ResourceRelationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_form\n                (osid.resource.ResourceRelationshipForm): the form for\n                this ``ResourceRelationship``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationship) - the new\n                ``ResourceRelationship``", 
               "error_doc": "        raise:  IllegalState - ``resource_relationship_form`` already\n                used in a create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``resource_id, peer_resource_id`` or\n                ``resource_relationship_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_relationship_form`` did not\n                originate from\n                ``get_resource_relationship_form_for_create()``", 
               "sphinx_param_doc": "        :param resource_relationship_form: the form for this ``ResourceRelationship``\n        :type resource_relationship_form: ``osid.resource.ResourceRelationshipForm``\n", 
               "sphinx_return_doc": "        :return: the new ``ResourceRelationship``\n        :rtype: ``osid.resource.ResourceRelationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``resource_relationship_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``resource_id, peer_resource_id`` or ``resource_relationship_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_relationship_form`` did not originate from ``get_resource_relationship_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipForm", 
                     "var_name": "resource_relationship_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipForm"
               ], 
               "return_type": "osid.resource.ResourceRelationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can update ``ResourceRelationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``ResourceRelationship`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if relationship modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if relationship modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_form_for_update", 
               "doc": {
                  "headline": "Gets the relationship form for updating an existing relationship.", 
                  "body": "        A new relationship form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipForm) - the\n                relationship form", 
               "error_doc": "        raise:  NotFound - ``resource_relationship_id`` not found\n        raise:  NullArgument - ``resource_relationship_id`` or\n                ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationship form\n        :rtype: ``osid.resource.ResourceRelationshipForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_relationship_id`` not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "update_resource_relationship", 
               "doc": {
                  "headline": "Updates an existing relationship.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_form\n                (osid.resource.ResourceRelationshipForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``resource_relationship_form`` already\n                used in an update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``resource_relationship_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``resource_relationship_form`` did not\n                originate from\n                ``get_resource_relationship_form_for_update()``", 
               "sphinx_param_doc": "        :param resource_relationship_form: the form containing the elements to be updated\n        :type resource_relationship_form: ``osid.resource.ResourceRelationshipForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``resource_relationship_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``resource_relationship_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``resource_relationship_form`` did not originate from ``get_resource_relationship_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipForm", 
                     "var_name": "resource_relationship_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can delete ``ResourceRelationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``ResourceRelationship`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ResourceRelationship``\n                deletion is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ResourceRelationship`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_resource_relationship", 
               "doc": {
                  "headline": "Deletes the ``ResourceRelationship`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship`` to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``ResourceRelationship`` was not found\n                identified by the given ``Id``\n        raise:  NullArgument - ``resource_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship`` to delete\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``ResourceRelationship`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_resource_relationship_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``ResourceRelationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ResourceRelationship``\n                aliasing is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ResourceRelationship`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_resource_relationship", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``ResourceRelationship`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``ResourceRelationship`` is determined\n        by the provider. The new ``Id`` performs as an alias to the\n        primary ``Id`` . If the alias is a pointer to another resource\n        relationshp, it is reassigned to the given resource relationship\n        ``Id``."
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of a\n                ``ResourceRelationship``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``resource_relationship_id`` not found\n        raise:  NullArgument - ``resource_relationship_id`` or\n                ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of a ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``resource_relationship_id`` not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipNotificationSession", 
         "shortname": "ResourceRelationshipNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to resource relationships.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``ResourceRelationshipLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_register_for_resource_relationship_notifications", 
            "use_federated_bin_view", 
            "use_isolated_bin_view", 
            "register_for_new_resource_relationships", 
            "register_for_new_resource_relationships_by_genus_type", 
            "register_for_new_resource_relationships_for_source_resource", 
            "register_for_new_resource_relationships_for_destination_resource", 
            "register_for_changed_resource_relationships", 
            "register_for_changed_resource_relationships_by_genus_type", 
            "register_for_changed_resource_relationships_for_source_resource", 
            "register_for_changed_resource_relationships_for_destination_resource", 
            "register_for_changed_resource_relationship", 
            "register_for_deleted_resource_relationships", 
            "register_for_deleted_resource_relationships_by_genus_type", 
            "register_for_deleted_resource_relationships_for_source_resource", 
            "register_for_deleted_resource_relationships_for_destination_resource", 
            "register_for_deleted_resource_relationship"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the bin", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_resource_relationship_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``ResourceRelationship`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bin_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for relationships in\n        bins which are children of this bin in the bin hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bin_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications for relationships in\n        this bin only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_resource_relationships", 
               "doc": {
                  "headline": "Register for notifications of new relationship.", 
                  "body": "        ``ResourceRelationshipReceiver.newResourceRelationship()`` is\n        invoked when a new relationship is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_resource_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of new relationships of the given genus type.", 
                  "body": "        ``ResourceRelationshipReceiver.newResourceRelationship()`` is\n        invoked when a new relationship is created."
               }, 
               "arg_doc": "        arg:    resource_relationship_genus_type (osid.type.Type): the\n                rsource relationship genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_genus_type is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_genus_type: the rsource relationship genus type\n        :type resource_relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_resource_relationships_for_source_resource", 
               "doc": {
                  "headline": "Register for notifications of new relationships from the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.newResourceRelationship()`` is\n        invoked when a new relationship is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_resource_relationships_for_destination_resource", 
               "doc": {
                  "headline": "Register for notifications of new relationships to the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.newResourceRelationship()`` is\n        invoked when a new relationship is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource_relationships", 
               "doc": {
                  "headline": "Registers for notification of updated relationships.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when a relationship is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of changed relationshipsof the given genus type.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when a relationship is changed."
               }, 
               "arg_doc": "        arg:    resource_relationship_genus_type (osid.type.Type): the\n                rsource relationship genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_genus_type is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_genus_type: the rsource relationship genus type\n        :type resource_relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource_relationships_for_source_resource", 
               "doc": {
                  "headline": "Register for notifications of changed relationships from the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when a relationship is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource_relationships_for_destination_resource", 
               "doc": {
                  "headline": "Register for notifications of changed relationships to the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when a relationship is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_resource_relationship", 
               "doc": {
                  "headline": "Registers for notification of an updated relationship.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when the specified relationship is changed."
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship`` to monitor\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource_relationships", 
               "doc": {
                  "headline": "Registers for notification of deleted relationships.", 
                  "body": "        ``ResourceRelationshipReceiver.deletedResourceRelationship()``\n        is invoked when a relationship is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships of the given genus type.", 
                  "body": "        ``ResourceRelationshipReceiver.deletedResourceRelationship()``\n        is invoked when a relationship is deleted."
               }, 
               "arg_doc": "        arg:    resource_relationship_genus_type (osid.type.Type): the\n                rsource relationship genus type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_genus_type is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_genus_type: the rsource relationship genus type\n        :type resource_relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_genus_type is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource_relationships_for_source_resource", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships from the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.deletedResourceRelationship()``\n        is invoked when a relationship is deleted."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource_relationships_for_destination_resource", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships to the given resource.", 
                  "body": "        ``ResourceRelationshipReceiver.deletedResourceRelationship()``\n        is invoked when a relationship is deleted."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_resource_relationship", 
               "doc": {
                  "headline": "Registers for notification of a deleted relationship.", 
                  "body": "        ``ResourceRelationshipReceiver.changedResourceRelationship()``\n        is invoked when the specified relationship is deleted."
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship`` to monitor\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipBinSession", 
         "shortname": "ResourceRelationshipBinSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``ResourceRelationship`` to ``Bin`` mappings.", 
            "body": "    A ``Resource`` may appear in multiple ``Bins``. Each ``Bin`` may\n    have its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "use_comparative_bin_view", 
            "use_plenary_bin_view", 
            "can_lookup_resource_relationship_bin_mappings", 
            "get_resource_relationship_ids_by_bin", 
            "get_resource_relationships_by_bin", 
            "get_resource_relationships_ids_by_bins", 
            "get_resource_relationships_by_bins", 
            "get_bin_ids_by_resource_relationship", 
            "get_bins_by_resource_relationship"
         ], 
         "methods": [
            {
               "name": "use_comparative_bin_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bin_view", 
               "doc": {
                  "headline": "A complete view of the ``Resource`` and ``Bin`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_lookup_resource_relationship_bin_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of resource relationship/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_ids_by_bin", 
               "doc": {
                  "headline": "Gets the list of ``ResourceRelationship``  ``Ids`` associated with a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): ``Id`` of a ``Bin``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related resource relationship\n                ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: ``Id`` of a ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related resource relationship ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_bin", 
               "doc": {
                  "headline": "Gets the list of ``ResourceRelationships`` associated with a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): ``Id`` of a ``Bin``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - list of\n                related resource relationship", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: ``Id`` of a ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related resource relationship\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_ids_by_bins", 
               "doc": {
                  "headline": "Gets the list of ``ResourceRelationship Ids`` corresponding to a list of ``Bin`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): list of bin ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of resource relationship ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_ids: list of bin ``Ids``\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resource relationship ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_resource_relationships_by_bins", 
               "doc": {
                  "headline": "Gets the list of ``ResourceRelationships`` corresponding to a list of ``Bins``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): list of bin ``Ids``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - list of\n                resource relationships", 
               "error_doc": "        raise:  NullArgument - ``bin_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_ids: list of bin ``Ids``\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of resource relationships\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bin_ids_by_resource_relationship", 
               "doc": {
                  "headline": "Gets the list of ``Bin``  ``Ids`` mapped to a ``ResourceRelationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): ``Id`` of a\n                ``ResourceRelationship``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bin ``Ids``", 
               "error_doc": "        raise:  NotFound - ``resource_relationship_id`` is not found\n        raise:  NullArgument - ``resource_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: ``Id`` of a ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_relationship_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_resource_relationship", 
               "doc": {
                  "headline": "Gets the list of ``Bin`` objects mapped to a ``ResourceRelationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): ``Id`` of a\n                ``ResourceRelationship``\n", 
               "return_doc": "        return: (osid.resource.BinList) - list of bins", 
               "error_doc": "        raise:  NotFound - ``resource_relationship_id`` is not found\n        raise:  NullArgument - ``resource_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: ``Id`` of a ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bins\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_relationship_id`` is not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipBinAssignmentSession", 
         "shortname": "ResourceRelationshipBinAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``ResourceRelationships`` to ``Bins``.", 
            "body": "    A ``ResourceRelationship`` may map to multiple ``Bin`` objects and\n    removing the last reference to a ``ResourceRelationship`` is the\n    equivalent of deleting it. Each ``Bin`` may have its own\n    authorizations governing who is allowed to operate on it.\n\n    Moving or adding a reference of a ``ResourceRelationship`` to\n    another ``Bin`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_resource_relationships", 
            "can_assign_resource_relationships_to_bin", 
            "get_assignable_bin_ids", 
            "get_assignable_bin_ids_for_resource_relationship", 
            "assign_resource_relationship_to_bin", 
            "unassign_resource_relationship_from_bin"
         ], 
         "methods": [
            {
               "name": "can_assign_resource_relationships", 
               "doc": {
                  "headline": "Tests if this user can alter resource relationship/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_resource_relationships_to_bin", 
               "doc": {
                  "headline": "Tests if this user can alter resource relationship/bin mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied`` . This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bin_ids", 
               "doc": {
                  "headline": "Gets a list of bins including and under the given bin node in which any resource relationship can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bin ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bin_ids_for_resource_relationship", 
               "doc": {
                  "headline": "Gets a list of bins including and under the given bin node in which a specific resource relationship can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bin ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` or\n                ``resource_relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` or ``resource_relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_resource_relationship_to_bin", 
               "doc": {
                  "headline": "Adds an existing ``ResourceRelationship`` to a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship``\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``resource_relationship_id`` is already\n                assigned to ``bin_id``\n        raise:  NotFound - ``resource_relationship_id`` or ``bin_id``\n                not found\n        raise:  NullArgument - ``resource_relationship_id`` or\n                ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``resource_relationship_id`` is already assigned to ``bin_id``\n        :raise: ``NotFound`` -- ``resource_relationship_id`` or ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_resource_relationship_from_bin", 
               "doc": {
                  "headline": "Removes a ``ResourceRelationship`` from a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                ``ResourceRelationship``\n        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``resource_relationship_id`` or ``bin_id``\n                not found or ``resource_relationship_id`` not assigned\n                to ``bin_id``\n        raise:  NullArgument - ``resource_relationship_id`` or\n                ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``resource_relationship_id`` or ``bin_id`` not found or ``resource_relationship_id`` not assigned to ``bin_id``\n        :raise: ``NullArgument`` -- ``resource_relationship_id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipSmartBinSession", 
         "shortname": "ResourceRelationshipSmartBinSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``ResourceRelationshipQuery`` can be retrieved from this session\n    and mapped to this ``Bin`` to create a virtual collection of\n    ``ResourceRelationships``. The resource relationships may be\n    sequenced using the ``ResourceRelationshipSearchOrder`` from this\n    session.\n\n    This ``Bin`` has a default query that matches any resource and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``ResourceRelationshipQueryInspector``. The\n    query may be modified by converting the inspector back to a\n    ``ResourceRelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_id", 
            "get_bin", 
            "can_manage_smart_bins", 
            "get_resource_relationship_query", 
            "get_resource_relationship_search_order", 
            "apply_resource_relationship_query", 
            "inspect_resource_relationship_query", 
            "apply_resource_relationship_sequencing", 
            "get_resource_relationship_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bin_id", 
               "doc": {
                  "headline": "Gets the ``Bin``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bin Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the ``Bin`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bin`` associated with this session\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_bins", 
               "doc": {
                  "headline": "Tests if this user can manage smart bins.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bin management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bin management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_query", 
               "doc": {
                  "headline": "Gets a resource relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuery) - the resource\n                relationship query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship query\n        :rtype: ``osid.resource.ResourceRelationshipQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQuery", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_search_order", 
               "doc": {
                  "headline": "Gets a resource relationship search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipSearchOrder) - the\n                resource relationship search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship search order\n        :rtype: ``osid.resource.ResourceRelationshipSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_resource_relationship_query", 
               "doc": {
                  "headline": "Applies a resource relationship query to this bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_query\n                (osid.resource.ResourceRelationshipQuery): the resource\n                relationship query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_query`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``resource_relationship_query`` not of\n                this service", 
               "sphinx_param_doc": "        :param resource_query: the resource relationship query\n        :type resource_query: ``osid.resource.ResourceRelationshipQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``resource_relationship_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipQuery", 
                     "var_name": "resource_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_resource_relationship_query", 
               "doc": {
                  "headline": "Gets a resource relationship query inspector for this bin.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQueryInspector) - the\n                resource relationship query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship query inspector\n        :rtype: ``osid.resource.ResourceRelationshipQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_resource_relationship_sequencing", 
               "doc": {
                  "headline": "Applies a resource relationship search order to this bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_search_order\n                (osid.resource.ResourceRelationshipSearchOrder): the\n                resource relationship search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_search_order`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``resource_relationship_search_order`` not\n                of this service", 
               "sphinx_param_doc": "        :param resource_relationship_search_order: the resource relationship search order\n        :type resource_relationship_search_order: ``osid.resource.ResourceRelationshipSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``resource_relationship_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipSearchOrder", 
                     "var_name": "resource_relationship_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_from_inspector", 
               "doc": {
                  "headline": "Gets a resource relationship query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_query_inspector\n                (osid.resource.ResourceRelationshipQueryInspector): a\n                resource relationship query inspector\n", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource\n                relationship query", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_query_inspector``\n                is ``null``\n        raise:  Unsupported - ``resource_relationship_query_inspector``\n                is not of this service", 
               "sphinx_param_doc": "        :param resource_relationship_query_inspector: a resource relationship query inspector\n        :type resource_relationship_query_inspector: ``osid.resource.ResourceRelationshipQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the resource relationship query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``resource_relationship_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipQueryInspector", 
                     "var_name": "resource_relationship_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipQueryInspector"
               ], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinLookupSession", 
         "shortname": "BinLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Bin`` objects.", 
            "body": "    The ``Bin`` represents a collection resources.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Bins`` it can access, without breaking execution.\n    However, an administrative application may require all ``Bin``\n    elements to be available.\n    \n    Bins may have an additional records indicated by their respective\n    record types. The record may not be accessed through a cast of the\n    ``Bin``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_bins", 
            "use_comparative_bin_view", 
            "use_plenary_bin_view", 
            "get_bin", 
            "get_bins_by_ids", 
            "get_bins_by_genus_type", 
            "get_bins_by_parent_genus_type", 
            "get_bins_by_record_type", 
            "get_bins_by_provider", 
            "get_bins"
         ], 
         "methods": [
            {
               "name": "can_lookup_bins", 
               "doc": {
                  "headline": "Tests if this user can perform ``Bin`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bin_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bin_view", 
               "doc": {
                  "headline": "A complete view of the ``Bin`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Bin`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Bin`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.Bin) - the bin", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the bin\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_ids", 
               "doc": {
                  "headline": "Gets a ``BinList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the bins\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Bins`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``Bin list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``bin_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_ids: the list of ``Ids`` to retrieve\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bin list``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``BinList`` corresponding to the given bin genus ``Type`` which does not include bins of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known bins or an\n        error results. Otherwise, the returned list may contain only\n        those bins that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bin_genus_type (osid.type.Type): a bin genus type\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``Bin list``", 
               "error_doc": "        raise:  NullArgument - ``bin_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_genus_type: a bin genus type\n        :type bin_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bin list``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``BinList`` corresponding to the given bin genus ``Type`` and include any additional bins with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known bins or an\n        error results. Otherwise, the returned list may contain only\n        those bins that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bin_genus_type (osid.type.Type): a bin genus type\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``Bin list``", 
               "error_doc": "        raise:  NullArgument - ``bin_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_genus_type: a bin genus type\n        :type bin_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bin list``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_record_type", 
               "doc": {
                  "headline": "Gets a ``BinList`` containing the given bin record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known bins or an\n        error results. Otherwise, the returned list may contain only\n        those bins that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): a bin record type\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``Bin list``", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_record_type: a bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bin list``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins_by_provider", 
               "doc": {
                  "headline": "Gets a ``BinList`` from the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known bins or an\n        error results. Otherwise, the returned list may contain only\n        those bins that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``Bin list``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bin list``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bins", 
               "doc": {
                  "headline": "Gets all ``Bins``.", 
                  "body": "        In plenary mode, the returned list contains all known bins or an\n        error results. Otherwise, the returned list may contain only\n        those bins that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinList) - a list of ``Bins``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Bins``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinQuerySession", 
         "shortname": "BinQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Bin`` objects.", 
            "body": "    The search query is constructed using the ``BinQuery``.\n\n    Bins may have a bin query record indicated by their respective\n    record types. The bin query record is accessed via the ``BinQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_bins", 
            "get_bin_query", 
            "get_bins_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_bins", 
               "doc": {
                  "headline": "Tests if this user can perform ``Bin`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bin_query", 
               "doc": {
                  "headline": "Gets a bin query.", 
                  "body": "        The returned query will not have an extension query."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {}
            }, 
            {
               "name": "get_bins_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Bins`` matching the given bin query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_query (osid.resource.BinQuery): the bin query\n", 
               "return_doc": "        return: (osid.resource.BinList) - the returned ``BinList``", 
               "error_doc": "        raise:  NullArgument - ``bin_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - a ``bin_query`` is not of this service", 
               "sphinx_param_doc": "        :param bin_query: the bin query\n        :type bin_query: ``osid.resource.BinQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``BinList``\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- a ``bin_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinQuery", 
                     "var_name": "bin_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinQuery"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinSearchSession", 
         "shortname": "BinSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Bin`` objects.", 
            "body": "    The search query is constructed using the ``BinQuery``.\n\n    ``get_bins_by_query()`` is the basic search method and returns a\n    list of ``Bin`` objects.A more advanced search may be performed with\n    ``getBinsBySearch()``. It accepts a ``BinSearch`` in addition to the\n    query for the purpose of specifying additional options affecting the\n    entire search, such as ordering. ``get_bins_by_search()`` returns a\n    ``BinSearchResults`` that can be used to access the resulting\n    ``BinList`` or be used to perform a search within the result set\n    through ``BinSearch``.\n    \n    Bins may have a bin query record indicated by their respective\n    record types. The bin query record is accessed via the ``BinQuery``."
         }, 
         "inherit_fullnames": [
            "osid.resource.BinQuerySession"
         ], 
         "inherit_shortnames": [
            "BinQuerySession"
         ], 
         "inherit_pkg_names": [
            "resource"
         ], 
         "inheritance": [
            {
               "pkg_name": "resource", 
               "name": "BinQuerySession"
            }
         ], 
         "method_names": [
            "get_bin_search", 
            "get_bin_search_order", 
            "get_bins_by_search", 
            "get_bin_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bin_search", 
               "doc": {
                  "headline": "Gets a bin search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinSearch) - the bin search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin search\n        :rtype: ``osid.resource.BinSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinSearch", 
               "errors": {}
            }, 
            {
               "name": "get_bin_search_order", 
               "doc": {
                  "headline": "Gets a bin search order.", 
                  "body": "        The ``BinSearchOrder`` is supplied to a ``BinSearch`` to specify\n        the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinSearchOrder) - the bin search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin search order\n        :rtype: ``osid.resource.BinSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_bins_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_query (osid.resource.BinQuery): the bin query\n        arg:    bin_search (osid.resource.BinSearch): the bin search\n", 
               "return_doc": "        return: (osid.resource.BinSearchResults) - the bin search\n                results", 
               "error_doc": "        raise:  NullArgument - ``bin_query`` or ``bin_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``bin_query`` or ``bin_search`` is not of\n                this service", 
               "sphinx_param_doc": "        :param bin_query: the bin query\n        :type bin_query: ``osid.resource.BinQuery``\n        :param bin_search: the bin search\n        :type bin_search: ``osid.resource.BinSearch``\n", 
               "sphinx_return_doc": "        :return: the bin search results\n        :rtype: ``osid.resource.BinSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_query`` or ``bin_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``bin_query`` or ``bin_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinQuery", 
                     "var_name": "bin_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.resource.BinSearch", 
                     "var_name": "bin_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinQuery", 
                  "osid.resource.BinSearch"
               ], 
               "return_type": "osid.resource.BinSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_query_from_inspector", 
               "doc": {
                  "headline": "Gets a bin query from an inspector.", 
                  "body": "        The inspector is available from a ``BinSearchResults``."
               }, 
               "arg_doc": "        arg:    bin_query_inspector (osid.resource.BinQueryInspector): a\n                bin query inspector\n", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "        raise:  NullArgument - ``bin_query_inspector`` is ``null``\n        raise:  Unsupported - ``bin_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param bin_query_inspector: a bin query inspector\n        :type bin_query_inspector: ``osid.resource.BinQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``bin_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinQueryInspector", 
                     "var_name": "bin_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinQueryInspector"
               ], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinAdminSession", 
         "shortname": "BinAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Bins``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Bin,`` a ``BinForm`` is requested using\n    ``get_bin_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``BinForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``BinForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``BinForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``BinForms`` are requested to the ``Bin``  ``Id`` that\n    is to be updated using ``getBinFormForUpdate()``. Similarly, the\n    ``BinForm`` has metadata about the data that can be updated and it\n    can perform validation before submitting the update. The ``BinForm``\n    can only be used once for a successful update and cannot be reused.\n    \n    The delete operations delete ``Bins``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_bins", 
            "can_create_bin_with_record_types", 
            "get_bin_form_for_create", 
            "create_bin", 
            "can_update_bins", 
            "get_bin_form_for_update", 
            "update_bin", 
            "can_delete_bins", 
            "delete_bin", 
            "can_manage_bin_aliases", 
            "alias_bin"
         ], 
         "methods": [
            {
               "name": "can_create_bins", 
               "doc": {
                  "headline": "Tests if this user can create ``Bins``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Bin``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bin`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bin`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_bin_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Bin`` using the desired record types.", 
                  "body": "        While ``ResourceManager.getBinRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Bin``.\n        Providing an empty array tests if a ``Bin`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    bin_record_types (osid.type.Type[]): array of bin record\n                types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Bin`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bin_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param bin_record_types: array of bin record types\n        :type bin_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Bin`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "bin_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_form_for_create", 
               "doc": {
                  "headline": "Gets the bin form for creating new bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_record_types (osid.type.Type[]): array of bin record\n                types\n", 
               "return_doc": "        return: (osid.resource.BinForm) - the bin form", 
               "error_doc": "        raise:  NullArgument - ``bin_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param bin_record_types: array of bin record types\n        :type bin_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the bin form\n        :rtype: ``osid.resource.BinForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "bin_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.resource.BinForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_bin", 
               "doc": {
                  "headline": "Creates a new ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_form (osid.resource.BinForm): the form for this\n                ``Bin``\n", 
               "return_doc": "        return: (osid.resource.Bin) - the new ``Bin``", 
               "error_doc": "        raise:  IllegalState - ``bin_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``bin_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``bin_form`` did not originate from\n                ``get_bin_form_for_create()``", 
               "sphinx_param_doc": "        :param bin_form: the form for this ``Bin``\n        :type bin_form: ``osid.resource.BinForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Bin``\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``bin_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``bin_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``bin_form`` did not originate from ``get_bin_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinForm", 
                     "var_name": "bin_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinForm"
               ], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_bins", 
               "doc": {
                  "headline": "Tests if this user can update ``Bins``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Bin``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bin`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bin`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bin_form_for_update", 
               "doc": {
                  "headline": "Gets the bin form for updating an existing bin.", 
                  "body": "        A new bin form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n", 
               "return_doc": "        return: (osid.resource.BinForm) - the bin form", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the bin form\n        :rtype: ``osid.resource.BinForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_bin", 
               "doc": {
                  "headline": "Updates an existing bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_form (osid.resource.BinForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``bin_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``bin_id`` or ``bin_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``bin_form`` did not originate from\n                ``get_bin_form_for_update()``", 
               "sphinx_param_doc": "        :param bin_form: the form containing the elements to be updated\n        :type bin_form: ``osid.resource.BinForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``bin_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``bin_id`` or ``bin_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``bin_form`` did not originate from ``get_bin_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinForm", 
                     "var_name": "bin_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_bins", 
               "doc": {
                  "headline": "Tests if this user can delete ``Bins``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Bin``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bin`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bin`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_bin", 
               "doc": {
                  "headline": "Deletes a ``Bin``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin`` to remove\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_bin_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Bins``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bin`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bin`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_bin", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Bin`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Bin`` is determined by the provider.\n        The new ``Id`` performs as an alias to the primary ``Id``. If\n        the alias is a pointer to another bin, it is reassigned to the\n        given bin ``Id``."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a ``Bin``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinNotificationSession", 
         "shortname": "BinNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Bin`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_bin_notifications", 
            "register_for_new_bins", 
            "register_for_new_bin_ancestors", 
            "register_for_new_bin_descendants", 
            "register_for_changed_bins", 
            "register_for_changed_bin", 
            "register_for_deleted_bins", 
            "register_for_deleted_bin", 
            "register_for_deleted_bin_ancestors", 
            "register_for_deleted_bin_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_bin_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Bin`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_bins", 
               "doc": {
                  "headline": "Register for notifications of new bins.", 
                  "body": "        ``BinReceiver.newBin()`` is invoked when a new ``Bin`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_bin_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified bin in the bin hierarchy.", 
                  "body": "        ``BinReceiver.newBinAncestor()`` is invoked when the specified\n        bin experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_bin_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified bin in the bin hierarchy.", 
                  "body": "        ``BinReceiver.newBinDescendant()`` is invoked when the specified\n        bin experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bins", 
               "doc": {
                  "headline": "Registers for notification of updated bins.", 
                  "body": "        ``BinReceiver.changedBin()`` is invoked when a bin is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bin", 
               "doc": {
                  "headline": "Registers for notification of an updated bin.", 
                  "body": "        ``BinReceiver.changedBin()`` is invoked when the specified bin\n        is changed."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the Id of the Bin to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the Id of the Bin to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_bins", 
               "doc": {
                  "headline": "Registers for notification of deleted bins.", 
                  "body": "        ``BinReceiver.deletedBin()`` is invoked when a bin is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_bin", 
               "doc": {
                  "headline": "Registers for notification of a deleted bin.", 
                  "body": "        ``BinReceiver.deletedBin()`` is invoked when the specified bin\n        is deleted."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin`` to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_bin_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified bin in the bin hierarchy.", 
                  "body": "        ``BinReceiver.deletedBinAncestor()`` is invoked when the\n        specified bin experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_bin_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified bin in the bin hierarchy.", 
                  "body": "        ``BinReceiver.deletedBinDescendnant()`` is invoked when the\n        specified bin experiences a removal of one of its descdendents."
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the bin to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the bin to monitor\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinHierarchySession", 
         "shortname": "BinHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Bin`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Bin``. The hierarchy may be\n    traversed recursively to establish the tree structure through\n    ``get_parent_bins()`` and ``getChildBins()``. To relate these\n    ``Ids`` to another OSID, ``get_bin_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Bin`` available in the Resource OSID is known to this hierarchy\n    but does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_bins()`` or ``get_child_bins()`` in lieu of\n    a ``PermissionDenied`` error that may disrupt the traversal through\n    authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: bin elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_hierarchy_id", 
            "get_bin_hierarchy", 
            "can_access_bin_hierarchy", 
            "use_comparative_bin_view", 
            "use_plenary_bin_view", 
            "get_root_bin_ids", 
            "get_root_bins", 
            "has_parent_bins", 
            "is_parent_of_bin", 
            "get_parent_bin_ids", 
            "get_parent_bins", 
            "is_ancestor_of_bin", 
            "has_child_bins", 
            "is_child_of_bin", 
            "get_child_bin_ids", 
            "get_child_bins", 
            "is_descendant_of_bin", 
            "get_bin_node_ids", 
            "get_bin_nodes"
         ], 
         "methods": [
            {
               "name": "get_bin_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_bin_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer traversal\n        functions to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bin_view", 
               "doc": {
                  "headline": "The returns from the bin methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bin_view", 
               "doc": {
                  "headline": "A complete view of the ``Bin`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_bin_ids", 
               "doc": {
                  "headline": "Gets the root bin ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root bin ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root bin ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_bins", 
               "doc": {
                  "headline": "Gets the root bins in the bin hierarchy.", 
                  "body": "        A node with no parents is an orphan. While all bin ``Ids`` are\n        known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root node or child of\n        another node."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinList) - the root bins", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root bins\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_bins", 
               "doc": {
                  "headline": "Tests if the ``Bin`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if the bin has parents, ``false``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the bin has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_bin", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``bin_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``bin_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_bin_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the bin", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the bin\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_bins", 
               "doc": {
                  "headline": "Gets the parents of the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.resource.BinList) - the parents of the bin", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` to query\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the bin\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_bin", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``bin_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``bin_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_bins", 
               "doc": {
                  "headline": "Tests if a bin has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``bin_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``bin_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_bin", 
               "doc": {
                  "headline": "Tests if a bin is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``bin_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``bin_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_bin_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the bin", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` to query\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the bin\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_bins", 
               "doc": {
                  "headline": "Gets the children of the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.resource.BinList) - the children of the bin", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` to query\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the bin\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_bin", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``bin_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bin_id`` is not found\n        raise:  NullArgument - ``id`` or ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``bin_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bin_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a bin node", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` to query\n        :type bin_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a bin node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bin_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.resource.BinNode) - a bin node", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` to query\n        :type bin_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a bin node\n        :rtype: ``osid.resource.BinNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.resource.BinNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinHierarchyDesignSession", 
         "shortname": "BinHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Bin`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Bin``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bin_hierarchy_id", 
            "get_bin_hierarchy", 
            "can_modify_bin_hierarchy", 
            "add_root_bin", 
            "remove_root_bin", 
            "add_child_bin", 
            "remove_child_bin", 
            "remove_child_bins"
         ], 
         "methods": [
            {
               "name": "get_bin_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bin_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_bin_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_bin", 
               "doc": {
                  "headline": "Adds a root bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``bin_id`` is already in hierarchy\n        raise:  NotFound - ``bin_id`` not found\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``bin_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``bin_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_bin", 
               "doc": {
                  "headline": "Removes a root bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not a root\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not a root\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_bin", 
               "doc": {
                  "headline": "Adds a child to a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``bin_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``bin_id`` or ``child_id`` not found\n        raise:  NullArgument - ``bin_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``bin_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``bin_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``bin_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_bin", 
               "doc": {
                  "headline": "Removes a child from a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``bin_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``bin_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_bins", 
               "doc": {
                  "headline": "Removes all children from a bin.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of a bin\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bin_id`` not in hierarchy\n        raise:  NullArgument - ``bin_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of a bin\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bin_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``bin_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.Resource", 
         "shortname": "Resource", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Resource`` represents an arbitrary entity.", 
            "body": "    Resources are used to define an object to accompany an OSID ``Id``\n    used in other OSIDs. A resource may be used to represent a meeting\n    room in the Scheduling OSID, or a student in the Course OSID.\n\n    A ``Resource`` may also represent a group or organization. A\n    provider may present such a group in an opaque manner through a\n    single resource definition, or the provider may expose the resource\n    collection for examination or manipulation. If such a resource\n    collection is visible, ``is_group()`` is ``true`` and can be used in\n    one of the group sessions available in this OSID."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "is_group", 
            "is_demographic", 
            "has_avatar", 
            "get_avatar_id", 
            "get_avatar", 
            "get_resource_record"
         ], 
         "methods": [
            {
               "name": "is_group", 
               "doc": {
                  "headline": "Tests if this resource is a group.", 
                  "body": "        A resource that is a group can be used in the group sessions."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this resource is a group,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this resource is a group, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "is_demographic", 
               "doc": {
                  "headline": "Tests if this resource is a demographic.", 
                  "body": "        A resource that is a demographic can be used in the demographic\n        service and the group sessions."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this resource is a demographic,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this resource is a demographic, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "has_avatar", 
               "doc": {
                  "headline": "Tests if this resource has an avatar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this resource has an avatar,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this resource has an avatar, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_avatar_id", 
               "doc": {
                  "headline": "Gets the asset ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the asset ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_avatar()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_avatar()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_avatar", 
               "doc": {
                  "headline": "Gets the asset.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.Asset) - the asset", 
               "error_doc": "        raise:  IllegalState - ``has_avatar()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset\n        :rtype: ``osid.repository.Asset``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_avatar()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.Asset", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_resource_record", 
               "doc": {
                  "headline": "Gets the resource record corresponding to the given ``Resource`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``resource_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(resource_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): the resource\n                record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceRecord) - the resource\n                record", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(resource_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_record_type: the resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource record\n        :rtype: ``osid.resource.records.ResourceRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRecord", 
         "shortname": "ResourceRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Resource``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceQuery", 
         "shortname": "ResourceQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching resources.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_group", 
            "clear_group_terms", 
            "match_demographic", 
            "clear_demographic_terms", 
            "match_containing_group_id", 
            "clear_containing_group_id_terms", 
            "supports_containing_group_query", 
            "get_containing_group_query", 
            "match_any_containing_group", 
            "clear_containing_group_terms", 
            "match_avatar_id", 
            "clear_avatar_id_terms", 
            "supports_avatar_query", 
            "get_avatar_query", 
            "match_any_avatar", 
            "clear_avatar_terms", 
            "match_agent_id", 
            "clear_agent_id_terms", 
            "supports_agent_query", 
            "get_agent_query", 
            "match_any_agent", 
            "clear_agent_terms", 
            "match_resource_relationship_id", 
            "clear_resource_relationship_id_terms", 
            "supports_resource_relationship_query", 
            "get_resource_relationship_query", 
            "match_any_resource_relationship", 
            "clear_resource_relationship_terms", 
            "match_bin_id", 
            "clear_bin_id_terms", 
            "supports_bin_query", 
            "get_bin_query", 
            "clear_bin_terms", 
            "get_resource_query_record"
         ], 
         "methods": [
            {
               "name": "match_group", 
               "doc": {
                  "headline": "Matches resources that are also groups.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_group_terms", 
               "doc": {
                  "headline": "Clears the group terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_demographic", 
               "doc": {
                  "headline": "Matches resources that are also demographics.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_demographic_terms", 
               "doc": {
                  "headline": "Clears the demographic terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_containing_group_id", 
               "doc": {
                  "headline": "Sets the group ``Id`` for this query to match resources within the given group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_containing_group_id_terms", 
               "doc": {
                  "headline": "Clears the group ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_containing_group_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying containing groups.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a group resource query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a group resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_containing_group_query", 
               "doc": {
                  "headline": "Gets the query for a a containing group.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_containing_group_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_containing_group_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_containing_group", 
               "doc": {
                  "headline": "Matches resources inside any group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match any containing group,\n                ``false`` to match resources part of no groups\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match any containing group, ``false`` to match resources part of no groups\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_containing_group_terms", 
               "doc": {
                  "headline": "Clears the containing group terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_avatar_id", 
               "doc": {
                  "headline": "Sets the asset ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    asset_id (osid.id.Id): the asset ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``asset_id`` is ``null``", 
               "sphinx_param_doc": "        :param asset_id: the asset ``Id``\n        :type asset_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``asset_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "asset_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_avatar_id_terms", 
               "doc": {
                  "headline": "Clears the asset ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_avatar_query", 
               "doc": {
                  "headline": "Tests if an ``AssetQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an asset query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an asset query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_avatar_query", 
               "doc": {
                  "headline": "Gets the query for an asset.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetQuery) - the asset query", 
               "error_doc": "        raise:  Unimplemented - ``supports_avatar_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset query\n        :rtype: ``osid.repository.AssetQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_avatar_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_avatar_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_avatar", 
               "doc": {
                  "headline": "Matches resources with any asset.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match any asset, ``false``\n                to match resources with no asset\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match any asset, ``false`` to match resources with no asset\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_avatar_terms", 
               "doc": {
                  "headline": "Clears the asset terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_agent_id", 
               "doc": {
                  "headline": "Sets the agent ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): the agent ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: the agent ``Id``\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agent_id_terms", 
               "doc": {
                  "headline": "Clears the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_agent_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_agent", 
               "doc": {
                  "headline": "Matches resources with any agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match any agent, ``false``\n                to match resources with no agent\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match any agent, ``false`` to match resources with no agent\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_agent_terms", 
               "doc": {
                  "headline": "Clears the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_resource_relationship_id", 
               "doc": {
                  "headline": "Sets the resource relationship ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the resource\n                relationship ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_relationship_id: the resource relationship ``Id``\n        :type resource_relationship_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_relationship_id_terms", 
               "doc": {
                  "headline": "Clears the resource relationship ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_relationship_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceRelationshipQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource relationship query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource relationship query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_query", 
               "doc": {
                  "headline": "Gets the query for aa resource relationship.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQuery) - the resource\n                relationship query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_resource_relationship_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship query\n        :rtype: ``osid.resource.ResourceRelationshipQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_resource_relationship", 
               "doc": {
                  "headline": "Matches resources with any resource relationship.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match any resource\n                relationship, ``false`` to match resources with no\n                relationship\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match any resource relationship, ``false`` to match resources with no relationship\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_resource_relationship_terms", 
               "doc": {
                  "headline": "Clears the resource relationship terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bin_id", 
               "doc": {
                  "headline": "Sets the bin ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the bin ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param bin_id: the bin ``Id``\n        :type bin_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bin_id_terms", 
               "doc": {
                  "headline": "Clears the bin ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_query", 
               "doc": {
                  "headline": "Tests if a ``BinQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bin_query", 
               "doc": {
                  "headline": "Gets the query for a bin.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bin_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bin_terms", 
               "doc": {
                  "headline": "Clears the bin terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query_record", 
               "doc": {
                  "headline": "Gets the resource query record corresponding to the given ``Resource`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): a resource record\n                type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceQueryRecord) - the\n                resource query record", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(resource_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_record_type: a resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource query record\n        :rtype: ``osid.resource.records.ResourceQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceQueryRecord", 
         "shortname": "ResourceQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceQueryInspector", 
         "shortname": "ResourceQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining resource queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_group_terms", 
            "get_demographic_terms", 
            "get_containing_group_id_terms", 
            "get_containing_group_terms", 
            "get_avatar_id_terms", 
            "get_avatar_terms", 
            "get_agent_id_terms", 
            "get_agent_terms", 
            "get_resource_relationship_id_terms", 
            "get_resource_relationship_terms", 
            "get_bin_id_terms", 
            "get_bin_terms", 
            "get_resource_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_group_terms", 
               "doc": {
                  "headline": "Gets the group query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_demographic_terms", 
               "doc": {
                  "headline": "Gets the demographic query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_containing_group_id_terms", 
               "doc": {
                  "headline": "Gets the containing group ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_containing_group_terms", 
               "doc": {
                  "headline": "Gets the containing group query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_avatar_id_terms", 
               "doc": {
                  "headline": "Gets the asset ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_avatar_terms", 
               "doc": {
                  "headline": "Gets the asset query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.repository.AssetQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agent_id_terms", 
               "doc": {
                  "headline": "Gets the agent ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_agent_terms", 
               "doc": {
                  "headline": "Gets the agent query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_id_terms", 
               "doc": {
                  "headline": "Gets the resource relationship ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_terms", 
               "doc": {
                  "headline": "Gets the resource relationship query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQueryInspector) - the\n                query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceRelationshipQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bin_id_terms", 
               "doc": {
                  "headline": "Gets the bin ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bin_terms", 
               "doc": {
                  "headline": "Gets the bin query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.BinQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query_inspector_record", 
               "doc": {
                  "headline": "Gets the record query inspector record corresponding to the given ``Resource`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): a resource record\n                type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceQueryInspectorRecord) -\n                the resource query inspector record", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(resource_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_record_type: a resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource query inspector record\n        :rtype: ``osid.resource.records.ResourceQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceQueryInspectorRecord", 
         "shortname": "ResourceQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceForm", 
         "shortname": "ResourceForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Resources``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ResourceAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints.\n\n    Resources can be designated as a group. The group metadata indicates\n    if it is possible to convert a resource to a group and vice-versa."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_group_metadata", 
            "set_group", 
            "clear_group", 
            "get_avatar_metadata", 
            "set_avatar", 
            "clear_avatar", 
            "get_resource_form_record"
         ], 
         "methods": [
            {
               "name": "get_group_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a group.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the group", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the group\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_group", 
               "doc": {
                  "headline": "Sets the resource as a group.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group (boolean): ``true`` if this resource is a group,\n                ``false`` otherwise\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``group`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param group: ``true`` if this resource is a group, ``false`` otherwise\n        :type group: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``group`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "group", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_group", 
               "doc": {
                  "headline": "Clears the group designation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_avatar_metadata", 
               "doc": {
                  "headline": "Gets the metadata for an asset.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the asset", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the asset\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_avatar", 
               "doc": {
                  "headline": "Sets the avatar asset.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    asset_id (osid.id.Id): an asset ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``asset_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param asset_id: an asset ``Id``\n        :type asset_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``asset_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "asset_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_avatar", 
               "doc": {
                  "headline": "Clears the asset.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_form_record", 
               "doc": {
                  "headline": "Gets the ``ResourceFormRecord`` corresponding to the given ``Resource`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): the resource\n                record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceFormRecord) - the\n                resource form record", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(resource_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_record_type: the resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource form record\n        :rtype: ``osid.resource.records.ResourceFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceFormRecord", 
         "shortname": "ResourceFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceSearchOrder", 
         "shortname": "ResourceSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_group", 
            "order_by_demographic", 
            "order_by_avatar", 
            "supports_avatar_search_order", 
            "get_avatar_search_order", 
            "get_resource_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_group", 
               "doc": {
                  "headline": "Groups the search results by resources that are groups.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_demographic", 
               "doc": {
                  "headline": "Groups the search results by resources that are demographics.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_avatar", 
               "doc": {
                  "headline": "Orders the result set by avatar.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_avatar_search_order", 
               "doc": {
                  "headline": "Tests if an ``AssetSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an asset search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an asset search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_avatar_search_order", 
               "doc": {
                  "headline": "Gets the search order for an asset.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetSearchOrder) - the asset search\n                order", 
               "error_doc": "        raise:  Unimplemented - ``supports_avatar_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset search order\n        :rtype: ``osid.repository.AssetSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_avatar_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_avatar_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_order_record", 
               "doc": {
                  "headline": "Gets the resource search record corresponding to the given resource record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    resource_record_type (osid.type.Type): a resource record\n                type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceSearchOrderRecord) - the\n                resource search order record", 
               "error_doc": "        raise:  NullArgument - ``resource_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(resource_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_record_type: a resource record type\n        :type resource_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource search order record\n        :rtype: ``osid.resource.records.ResourceSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceSearchOrderRecord", 
         "shortname": "ResourceSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceSearch", 
         "shortname": "ResourceSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing resource searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_resources", 
            "order_resource_results", 
            "get_resource_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_resources", 
               "doc": {
                  "headline": "Execute this search among the given list of resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_ids (osid.id.IdList): list of resource ``Ids``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_ids`` is ``null``", 
               "sphinx_param_doc": "        :param resource_ids: list of resource ``Ids``\n        :type resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_resource_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_search_order\n                (osid.resource.ResourceSearchOrder): resource search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``order`` is ``null``\n        raise:  Unsupported - ``order`` is not of this service", 
               "sphinx_param_doc": "        :param resource_search_order: resource search order\n        :type resource_search_order: ``osid.resource.ResourceSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``order`` is ``null``\n        :raise: ``Unsupported`` -- ``order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceSearchOrder", 
                     "var_name": "resource_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_search_record", 
               "doc": {
                  "headline": "Gets the resource search record corresponding to the given resource search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    resource_search_record_type (osid.type.Type): a resource\n                search record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceSearchRecord) - the\n                resource search record", 
               "error_doc": "        raise:  NullArgument - ``resource_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type_type(resource_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_search_record_type: a resource search record type\n        :type resource_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource search record\n        :rtype: ``osid.resource.records.ResourceSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type_type(resource_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceSearchRecord", 
         "shortname": "ResourceSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceSearchResults", 
         "shortname": "ResourceSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_resources", 
            "get_resource_query_inspector", 
            "get_resource_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_resources", 
               "doc": {
                  "headline": "Gets the resource list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceList) - the resource list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource list\n        :rtype: ``osid.resource.ResourceList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query inspector\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_results_record", 
               "doc": {
                  "headline": "Gets the resource search results record corresponding to the given resource search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    resource_search_record_type (osid.type.Type): a resource\n                search record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceSearchResultsRecord) -\n                the resource search results record", 
               "error_doc": "        raise:  NullArgument - ``resource_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type_type(resource_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param resource_search_record_type: a resource search record type\n        :type resource_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource search results record\n        :rtype: ``osid.resource.records.ResourceSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type_type(resource_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceSearchResultsRecord", 
         "shortname": "ResourceSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceReceiver", 
         "shortname": "ResourceReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The resource receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Resource`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_resource", 
            "changed_resource", 
            "changed_resource_membership", 
            "deleted_resource"
         ], 
         "methods": [
            {
               "name": "new_resource", 
               "doc": {
                  "headline": "The callback for notifications of new resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the new\n                ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the new ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_resource", 
               "doc": {
                  "headline": "The callback for notification of updated resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the updated\n                ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the updated ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_resource_membership", 
               "doc": {
                  "headline": "The callback for notification of updated resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the updated\n                ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the updated ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_resource", 
               "doc": {
                  "headline": "the callback for notification of deleted resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the deleted\n                ``Resource``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the deleted ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceList", 
         "shortname": "ResourceList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ResourceList`` provides a means for accessing ``Resource`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Resource resource =\n    rl.getNextResource(); }\n\n    or\n      while (rl.hasNext()) {\n           Resource[] resources = rl.getNextResources(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_resource", 
            "get_next_resources"
         ], 
         "methods": [
            {
               "name": "get_next_resource", 
               "doc": {
                  "headline": "Gets the next ``Resource`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the next ``Resource`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Resource`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Resource`` in this list. The ``has_next()`` method should be used to test that a next ``Resource`` is available before calling this method.\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_resources", 
               "doc": {
                  "headline": "Gets the next set of ``Resources`` in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Resource`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.resource.Resource) - an array of ``Resource``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Resource`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Resource`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.GroupReceiver", 
         "shortname": "GroupReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The resource group receiver is the consumer supplied interface for receiving notifications pertaining to new or deleted members.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_member", 
            "deleted_member"
         ], 
         "methods": [
            {
               "name": "new_member", 
               "doc": {
                  "headline": "The callback for notifications of new resource members.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_id (osid.id.Id): the ``Id`` of the ``Resource``\n                group\n        arg:    member_id (osid.id.Id): the ``Id`` of the new\n                ``Resource`` member\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param group_id: the ``Id`` of the ``Resource`` group\n        :type group_id: ``osid.id.Id``\n        :param member_id: the ``Id`` of the new ``Resource`` member\n        :type member_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "group_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "member_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_member", 
               "doc": {
                  "headline": "the callback for notification of deleted resource members.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    group_id (osid.id.Id): the ``Id`` of the ``Resource``\n                group\n        arg:    member_id (osid.id.Id): the ``Id`` of the new\n                ``Resource`` member\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param group_id: the ``Id`` of the ``Resource`` group\n        :type group_id: ``osid.id.Id``\n        :param member_id: the ``Id`` of the new ``Resource`` member\n        :type member_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "group_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "member_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceNode", 
         "shortname": "ResourceNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``BinHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_resource", 
            "get_parent_resource_nodes", 
            "get_child_resource_nodes"
         ], 
         "methods": [
            {
               "name": "get_resource", 
               "doc": {
                  "headline": "Gets the ``Resource`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the resource represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource represented by this node\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {}
            }, 
            {
               "name": "get_parent_resource_nodes", 
               "doc": {
                  "headline": "Gets the parents of this resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceNodeList) - the parents of the\n                resource", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the resource\n        :rtype: ``osid.resource.ResourceNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_resource_nodes", 
               "doc": {
                  "headline": "Gets the children of this resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceNodeList) - the children of this\n                resource", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this resource\n        :rtype: ``osid.resource.ResourceNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceNodeList", 
         "shortname": "ResourceNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ResourceNodeList`` provides a means for accessing ``ResourceNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rnl.hasNext()) { ResourceNode node =\n    rnl.getNextResourceNode(); }\n\n    or\n      while rnl.hasNext()) {\n           ResourceNode[] nodes = rnl.getNextResourceNodes(rnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_resource_node", 
            "get_next_resource_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_resource_node", 
               "doc": {
                  "headline": "Gets the next ``ResourceNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceNode) - the next ``ResourceNode``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``ResourceNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ResourceNode`` in this list. The ``has_next()`` method should be used to test that a next ``ResourceNode`` is available before calling this method.\n        :rtype: ``osid.resource.ResourceNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_resource_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``ResourceNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ResourceNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.resource.ResourceNode) - an array of\n                ``ResourceNode`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ResourceNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ResourceNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.resource.ResourceNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.resource.ResourceNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationship", 
         "shortname": "ResourceRelationship", 
         "category": "objects", 
         "doc": {
            "headline": "``ResourceRelationship`` relates two resources.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_source_resource_id", 
            "get_source_resource", 
            "get_destination_resource_id", 
            "get_destination_resource", 
            "get_resource_relationship_record"
         ], 
         "methods": [
            {
               "name": "get_source_resource_id", 
               "doc": {
                  "headline": "Gets the source resource ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - a resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_source_resource", 
               "doc": {
                  "headline": "Gets the ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the source resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_destination_resource_id", 
               "doc": {
                  "headline": "Gets the destination resource ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - a resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_destination_resource", 
               "doc": {
                  "headline": "Gets the ``Resource``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the destination resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the destination resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_resource_relationship_record", 
               "doc": {
                  "headline": "Gets the resource relationship record corresponding to the given ``ResourceRelationship`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``resource_relationship_record_type`` may\n        be the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(resource_relationship_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): the\n                type of the record to retrieve\n", 
               "return_doc": "        return: (osid.resource.records.ResourceRelationshipRecord) - the\n                resource relationship record", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: the type of the record to retrieve\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship record\n        :rtype: ``osid.resource.records.ResourceRelationshipRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipRecord", 
         "shortname": "ResourceRelationshipRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationship``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipQuery", 
         "shortname": "ResourceRelationshipQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching resource relationships.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_source_resource_id", 
            "clear_source_resource_id_terms", 
            "supports_source_resource_query", 
            "get_source_resource_query", 
            "clear_source_resource_terms", 
            "match_destination_resource_id", 
            "clear_destination_resource_id_terms", 
            "supports_destination_resource_query", 
            "get_destination_resource_query", 
            "clear_destination_resource_terms", 
            "match_same_resource", 
            "clear_same_resource_terms", 
            "match_bin_id", 
            "clear_bin_id_terms", 
            "supports_bin_query", 
            "get_bin_query", 
            "clear_bin_terms", 
            "get_resource_relationship_query_record"
         ], 
         "methods": [
            {
               "name": "match_source_resource_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_source_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_source_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_source_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_source_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_source_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_source_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_source_resource_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_destination_resource_id", 
               "doc": {
                  "headline": "Sets the peer resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    peer_resource_id (osid.id.Id): a peer resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``peer_resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param peer_resource_id: a peer resource ``Id``\n        :type peer_resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``peer_resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "peer_resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_destination_resource_id_terms", 
               "doc": {
                  "headline": "Clears the peer resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_destination_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_destination_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_destination_resource_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_destination_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_destination_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_destination_resource_terms", 
               "doc": {
                  "headline": "Clears the peer resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_same_resource", 
               "doc": {
                  "headline": "Matches relationships where the peer resources are the same.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_same_resource_terms", 
               "doc": {
                  "headline": "Clears the same resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bin_id", 
               "doc": {
                  "headline": "Sets the bin ``Id`` for this query to match terms assigned to bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the bin ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param bin_id: the bin ``Id``\n        :type bin_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bin_id_terms", 
               "doc": {
                  "headline": "Clears the bin ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bin_query", 
               "doc": {
                  "headline": "Tests if a ``BinQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bin_query", 
               "doc": {
                  "headline": "Gets the query for a bin.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bin_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bin_terms", 
               "doc": {
                  "headline": "Clears the bin terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_query_record", 
               "doc": {
                  "headline": "Gets the resource relationship query record corresponding to the given ``ResourceRelationship`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): a\n                resource relationship query record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceRelationshipQueryRecord)\n                - the resource relationship query record", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: a resource relationship query record type\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship query record\n        :rtype: ``osid.resource.records.ResourceRelationshipQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipQueryRecord", 
         "shortname": "ResourceRelationshipQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipQueryInspector", 
         "shortname": "ResourceRelationshipQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining resource relationship queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_source_resource_id_terms", 
            "get_source_resource_terms", 
            "get_destination_resource_id_terms", 
            "get_destination_resource_terms", 
            "get_same_resource_terms", 
            "get_bin_id_terms", 
            "get_bin_terms", 
            "get_resource_relationship_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_source_resource_id_terms", 
               "doc": {
                  "headline": "Gets the source resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_source_resource_terms", 
               "doc": {
                  "headline": "Gets the source resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_destination_resource_id_terms", 
               "doc": {
                  "headline": "Gets the Destination resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_destination_resource_terms", 
               "doc": {
                  "headline": "Gets the Destination resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_same_resource_terms", 
               "doc": {
                  "headline": "Gets the same resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bin_id_terms", 
               "doc": {
                  "headline": "Gets the bin ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bin_terms", 
               "doc": {
                  "headline": "Gets the bin query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.BinQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_query_inspector_record", 
               "doc": {
                  "headline": "Gets the resource relationship query inspector record corresponding to the given ``ResourceRelationship`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): a\n                resource relationship record type\n", 
               "return_doc": "        return:\n                (osid.resource.records.ResourceRelationshipQueryInspecto\n                rRecord) - the resource relationship query inspector\n                record", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: a resource relationship record type\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship query inspector record\n        :rtype: ``osid.resource.records.ResourceRelationshipQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipQueryInspectorRecord", 
         "shortname": "ResourceRelationshipQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipForm", 
         "shortname": "ResourceRelationshipForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``ResourceRelationships``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_resource_relationship_form_record"
         ], 
         "methods": [
            {
               "name": "get_resource_relationship_form_record", 
               "doc": {
                  "headline": "Gets the ``ResourceRelationshipFormRecord`` record corresponding to the given relationship ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): the\n                resource relationship record type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceRelationshipFormRecord) -\n                the resource relationship form record", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: the resource relationship record type\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship form record\n        :rtype: ``osid.resource.records.ResourceRelationshipFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipFormRecord", 
         "shortname": "ResourceRelationshipFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipSearchOrder", 
         "shortname": "ResourceRelationshipSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_source_resource", 
            "supports_source_resource_search_order", 
            "get_source_resource_search_order", 
            "order_by_destination_resource", 
            "supports_destination_resource_search_order", 
            "get_destination_resource_search_order", 
            "get_resource_relationship_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_source_resource", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_source_resource_search_order", 
               "doc": {
                  "headline": "Tests if a ``ResourceSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_source_resource_search_order", 
               "doc": {
                  "headline": "Gets the search order for a resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_source_resource_search_order()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_source_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_source_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_destination_resource", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_destination_resource_search_order", 
               "doc": {
                  "headline": "Tests if a ``ResourceSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_destination_resource_search_order", 
               "doc": {
                  "headline": "Gets the search order for a peer resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_destination_resource_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_destination_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_destination_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_order_record", 
               "doc": {
                  "headline": "Gets the resource relationship search order record corresponding to the given resource relationship record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    resource_relationship_record_type (osid.type.Type): a\n                resource relationship record type\n", 
               "return_doc": "        return:\n                (osid.resource.records.ResourceRelationshipSearchOrderRe\n                cord) - the resource relationship search order record", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(_resource_relationship_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_record_type: a resource relationship record type\n        :type resource_relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship search order record\n        :rtype: ``osid.resource.records.ResourceRelationshipSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(_resource_relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipSearchOrderRecord", 
         "shortname": "ResourceRelationshipSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipSearch", 
         "shortname": "ResourceRelationshipSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``ResourceRelationshipSearch`` defines the interface for specifying relationship search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_resource_relationships", 
            "order_resource_relationship_results", 
            "get_resource_relationship_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_resource_relationships", 
               "doc": {
                  "headline": "Execute this search among the given list of resource relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_ids (osid.id.IdList): list of\n                resource relationships\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_ids`` is ``null``", 
               "sphinx_param_doc": "        :param resource_relationship_ids: list of resource relationships\n        :type resource_relationship_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_relationship_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_resource_relationship_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_search_order\n                (osid.resource.ResourceRelationshipSearchOrder):\n                relationship search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_relationship_search_order`` is\n                ``null``\n        raise:  Unsupported - ``resource_relationship_search_order`` is\n                not of this service", 
               "sphinx_param_doc": "        :param resource_relationship_search_order: relationship search order\n        :type resource_relationship_search_order: ``osid.resource.ResourceRelationshipSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``resource_relationship_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.ResourceRelationshipSearchOrder", 
                     "var_name": "resource_relationship_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.ResourceRelationshipSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_search_record", 
               "doc": {
                  "headline": "Gets the resource relationship search record corresponding to the given relationship search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    resource_relationship_search_record_type\n                (osid.type.Type): a resource relationship search record\n                type\n", 
               "return_doc": "        return: (osid.resource.records.ResourceRelationshipSearchRecord)\n                - the resource relationship search record", 
               "error_doc": "        raise:  NullArgument -\n                ``resource_relationship_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_search_record_ty\n                pe)`` is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_search_record_type: a resource relationship search record type\n        :type resource_relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship search record\n        :rtype: ``osid.resource.records.ResourceRelationshipSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipSearchRecord", 
         "shortname": "ResourceRelationshipSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipSearchResults", 
         "shortname": "ResourceRelationshipSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_resource_relationships", 
            "get_resource_relationship_query_inspector", 
            "get_resource_relationship_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_resource_relationships", 
               "doc": {
                  "headline": "Gets the resource relationship list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipList) - the resource\n                relationship list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship list\n        :rtype: ``osid.resource.ResourceRelationshipList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_resource_relationship_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationshipQueryInspector) - the\n                resource relationship query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource relationship query inspector\n        :rtype: ``osid.resource.ResourceRelationshipQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationshipQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_resource_relationship_search_results_record", 
               "doc": {
                  "headline": "Gets the resource relationship search results record corresponding to the given resource relationship search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    resource_relationship_search_record_type\n                (osid.type.Type): a resource relationship search record\n                type\n", 
               "return_doc": "        return:\n                (osid.resource.records.ResourceRelationshipSearchResults\n                Record) - the resource relationship search results\n                record", 
               "error_doc": "        raise:  NullArgument -\n                ``resource_relationship_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(resource_relationship_search_record_ty\n                pe)`` is ``false``", 
               "sphinx_param_doc": "        :param resource_relationship_search_record_type: a resource relationship search record type\n        :type resource_relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the resource relationship search results record\n        :rtype: ``osid.resource.records.ResourceRelationshipSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_relationship_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(resource_relationship_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "resource_relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.ResourceRelationshipSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.ResourceRelationshipSearchResultsRecord", 
         "shortname": "ResourceRelationshipSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ResourceRelationshipSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipReceiver", 
         "shortname": "ResourceRelationshipReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The resource relationship receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``ResourceRelationships``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_resource_relationship", 
            "changed_resource_relationship", 
            "deleted_resource_relationship"
         ], 
         "methods": [
            {
               "name": "new_resource_relationship", 
               "doc": {
                  "headline": "The callback for notifications of new relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                new ``ResourceRelationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the new ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_resource_relationship", 
               "doc": {
                  "headline": "The callback for notification of updated relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                updated ``ResourceRelationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the updated ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_resource_relationship", 
               "doc": {
                  "headline": "The callback for notification of deleted relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_relationship_id (osid.id.Id): the ``Id`` of the\n                deleted ``ResourceRelationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param resource_relationship_id: the ``Id`` of the deleted ``ResourceRelationship``\n        :type resource_relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.ResourceRelationshipList", 
         "shortname": "ResourceRelationshipList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ResourceRelationshipList`` provides a means for accessing ``ResourceRelationship`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rrl.hasNext()) { ResourceRelationship relationship\n    = rrl.getNextResourceRelationship(); }\n\n    or\n      while (rrl.hasNext()) {\n           ResourceRelationship[] relationships = rrl.getNextResourceRelationships(rrl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_resource_relationship", 
            "get_next_resource_relationships"
         ], 
         "methods": [
            {
               "name": "get_next_resource_relationship", 
               "doc": {
                  "headline": "Gets the next ``ResourceRelationship`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceRelationship) - the next\n                ``ResourceRelationship`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``ResourceRelationship`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ResourceRelationship`` in this list. The ``has_next()`` method should be used to test that a next ``ResourceRelationship`` is available before calling this method.\n        :rtype: ``osid.resource.ResourceRelationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceRelationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_resource_relationships", 
               "doc": {
                  "headline": "Gets the next set of ``ResourceRelationship`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ResourceRelationship``\n                elements requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.resource.ResourceRelationship) - an array of\n                ``ResourceRelationship`` elements.The length of the\n                array is less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ResourceRelationship`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ResourceRelationship`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.resource.ResourceRelationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.resource.ResourceRelationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.Bin", 
         "shortname": "Bin", 
         "category": "objects", 
         "doc": {
            "headline": "An inventory defines a collection of resources.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_bin_record"
         ], 
         "methods": [
            {
               "name": "get_bin_record", 
               "doc": {
                  "headline": "Gets the bin record corresponding to the given ``Bin`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``bin_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(bin_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): the bin record type\n", 
               "return_doc": "        return: (osid.resource.records.BinRecord) - the bin record", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bin_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_record_type: the bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin record\n        :rtype: ``osid.resource.records.BinRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinRecord", 
         "shortname": "BinRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Bin``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinQuery", 
         "shortname": "BinQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching bins.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_resource_id", 
            "clear_resource_id_terms", 
            "supports_resource_query", 
            "get_resource_query", 
            "match_any_resource", 
            "clear_resource_terms", 
            "match_ancestor_bin_id", 
            "clear_ancestor_bin_id_terms", 
            "supports_ancestor_bin_query", 
            "get_ancestor_bin_query", 
            "match_any_ancestor_bin", 
            "clear_ancestor_bin_terms", 
            "match_descendant_bin_id", 
            "clear_descendant_bin_id_terms", 
            "supports_descendant_bin_query", 
            "get_descendant_bin_query", 
            "match_any_descendant_bin", 
            "clear_descendant_bin_terms", 
            "get_bin_query_record"
         ], 
         "methods": [
            {
               "name": "match_resource_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_resource", 
               "doc": {
                  "headline": "Matches bins with any resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match bins with any\n                resource, ``false`` to match bins with no resources\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match bins with any resource, ``false`` to match bins with no resources\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_resource_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_bin_id", 
               "doc": {
                  "headline": "Sets the bin ``Id`` for this query to match bins that have the specified bin as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    binid (osid.id.Id): a bin ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param binid: a bin ``Id``\n        :type binid: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "binid", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_bin_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor bin ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_bin_query", 
               "doc": {
                  "headline": "Tests if a ``BinQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bin_query", 
               "doc": {
                  "headline": "Gets the query for a bin.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_bin_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_bin", 
               "doc": {
                  "headline": "Matches bins with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match bins with any\n                ancestor, ``false`` to match root bins\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match bins with any ancestor, ``false`` to match root bins\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_bin_terms", 
               "doc": {
                  "headline": "Clears the ancestor bin terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_bin_id", 
               "doc": {
                  "headline": "Sets the bin ``Id`` for this query to match bins that have the specified bin as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    binid (osid.id.Id): a bin ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_id`` is ``null``", 
               "sphinx_param_doc": "        :param binid: a bin ``Id``\n        :type binid: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "binid", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_bin_id_terms", 
               "doc": {
                  "headline": "Clears the descendant bin ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_bin_query", 
               "doc": {
                  "headline": "Tests if a ``BinQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bin query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bin query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bin_query", 
               "doc": {
                  "headline": "Gets the query for a bin.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQuery) - the bin query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_bin_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query\n        :rtype: ``osid.resource.BinQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_bin_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_bin_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_bin", 
               "doc": {
                  "headline": "Matches bins with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match bins with any\n                descendant, ``false`` to match leaf bins\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match bins with any descendant, ``false`` to match leaf bins\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_bin_terms", 
               "doc": {
                  "headline": "Clears the descendant bin terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_bin_query_record", 
               "doc": {
                  "headline": "Gets the bin query record corresponding to the given ``Bin`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): a bin record type\n", 
               "return_doc": "        return: (osid.resource.records.BinQueryRecord) - the bin query\n                record", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bin_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_record_type: a bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin query record\n        :rtype: ``osid.resource.records.BinQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinQueryRecord", 
         "shortname": "BinQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinQueryInspector", 
         "shortname": "BinQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining bin queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_resource_id_terms", 
            "get_resource_terms", 
            "get_ancestor_bin_id_terms", 
            "get_ancestor_bin_terms", 
            "get_descendant_bin_id_terms", 
            "get_descendant_bin_terms", 
            "get_bin_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_resource_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_terms", 
               "doc": {
                  "headline": "Gets the resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bin_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor bin ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bin_terms", 
               "doc": {
                  "headline": "Gets the ancestor bin query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.BinQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bin_id_terms", 
               "doc": {
                  "headline": "Gets the descendant bin ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bin_terms", 
               "doc": {
                  "headline": "Gets the descendant bin query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.BinQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bin_query_inspector_record", 
               "doc": {
                  "headline": "Gets the bin query inspector record corresponding to the given ``Bin`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): a bin record type\n", 
               "return_doc": "        return: (osid.resource.records.BinQueryInspectorRecord) - the\n                bin query inspector record", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bin_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_record_type: a bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin query inspector record\n        :rtype: ``osid.resource.records.BinQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinQueryInspectorRecord", 
         "shortname": "BinQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinForm", 
         "shortname": "BinForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating bins.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the ``BinAdminSession``.\n    For each data element that may be set, metadata may be examined to\n    provide display hints or data constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_bin_form_record"
         ], 
         "methods": [
            {
               "name": "get_bin_form_record", 
               "doc": {
                  "headline": "Gets the ``BinFormRecord`` corresponding to the given bin record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): the bin record type\n", 
               "return_doc": "        return: (osid.resource.records.BinFormRecord) - the bin form\n                record", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bin_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_record_type: the bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin form record\n        :rtype: ``osid.resource.records.BinFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinFormRecord", 
         "shortname": "BinFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinSearchOrder", 
         "shortname": "BinSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_bin_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_bin_search_order_record", 
               "doc": {
                  "headline": "Gets the bin search record corresponding to the given bin record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    bin_record_type (osid.type.Type): a bin record type\n", 
               "return_doc": "        return: (osid.resource.records.BinSearchOrderRecord) - the bin\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``bin_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bin_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bin_record_type: a bin record type\n        :type bin_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin search order record\n        :rtype: ``osid.resource.records.BinSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinSearchOrderRecord", 
         "shortname": "BinSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinSearch", 
         "shortname": "BinSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing bin searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_bins", 
            "order_bin_results", 
            "get_bin_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_bins", 
               "doc": {
                  "headline": "Execute this search among the given list of bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_ids (osid.id.IdList): list of bins\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_ids`` is ``null``", 
               "sphinx_param_doc": "        :param bin_ids: list of bins\n        :type bin_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bin_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_bin_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_search_order (osid.resource.BinSearchOrder): bin\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bin_search_order`` is ``null``\n        raise:  Unsupported - ``bin_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param bin_search_order: bin search order\n        :type bin_search_order: ``osid.resource.BinSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``bin_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.resource.BinSearchOrder", 
                     "var_name": "bin_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.resource.BinSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_search_record", 
               "doc": {
                  "headline": "Gets the bin search record corresponding to the given bin search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    bin_search_record_type (osid.type.Type): a bin search\n                record type\n", 
               "return_doc": "        return: (osid.resource.records.BinSearchRecord) - the bin search\n                record", 
               "error_doc": "        raise:  NullArgument - ``bin_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(bin_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param bin_search_record_type: a bin search record type\n        :type bin_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin search record\n        :rtype: ``osid.resource.records.BinSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinSearchRecord", 
         "shortname": "BinSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinSearchResults", 
         "shortname": "BinSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_bins", 
            "get_bin_query_inspector", 
            "get_bin_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_bins", 
               "doc": {
                  "headline": "Gets the bin list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinList) - the bin list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin list\n        :rtype: ``osid.resource.BinList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bin_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinQueryInspector) - the bin query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin query inspector\n        :rtype: ``osid.resource.BinQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bin_search_results_record", 
               "doc": {
                  "headline": "Gets the bin search results record corresponding to the given bin search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    bin_search_record_type (osid.type.Type): a bin search\n                record type\n", 
               "return_doc": "        return: (osid.resource.records.BinSearchResultsRecord) - the bin\n                search results record", 
               "error_doc": "        raise:  NullArgument - ``bin_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(bin_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param bin_search_record_type: a bin search record type\n        :type bin_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bin search results record\n        :rtype: ``osid.resource.records.BinSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bin_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bin_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bin_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.resource.records.BinSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.records.BinSearchResultsRecord", 
         "shortname": "BinSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BinSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.resource.BinReceiver", 
         "shortname": "BinReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The bin receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Bin`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_bin", 
            "new_ancestor_bin", 
            "new_descendant_bin", 
            "changed_bin", 
            "deleted_bin", 
            "deleted_ancestor_bin", 
            "deleted_descendant_bin"
         ], 
         "methods": [
            {
               "name": "new_bin", 
               "doc": {
                  "headline": "The callback for notifications of new bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the new ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the new ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_bin", 
               "doc": {
                  "headline": "The callback for notifications of new bin ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ``Bin``\n                ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``Bin`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_bin", 
               "doc": {
                  "headline": "The callback for notifications of new bin descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Bin`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Bin`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_bin", 
               "doc": {
                  "headline": "The callback for notification of updated bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the updated ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the updated ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_bin", 
               "doc": {
                  "headline": "The callback for notification of deleted bins.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the deleted ``Bin``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the deleted ``Bin``\n        :type bin_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_bin", 
               "doc": {
                  "headline": "The callback for notifications of deleted bin ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Bin`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Bin`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_bin", 
               "doc": {
                  "headline": "The callback for notifications of deleted bin descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bin_id (osid.id.Id): the ``Id`` of the ``Bin``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Bin`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param bin_id: the ``Id`` of the ``Bin``\n        :type bin_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Bin`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bin_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinList", 
         "shortname": "BinList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BinList`` provides a means for accessing ``Bin`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bl.hasNext()) { Bin bin = bl.getNextBin(); }\n\n    or\n      while (bl.hasNext()) {\n           Bin[] bins = bl.getNextBins(bl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_bin", 
            "get_next_bins"
         ], 
         "methods": [
            {
               "name": "get_next_bin", 
               "doc": {
                  "headline": "Gets the next ``Bin`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the next ``Bin`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``Bin`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Bin`` in this list. The ``has_next()`` method should be used to test that a next ``Bin`` is available before calling this method.\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_bins", 
               "doc": {
                  "headline": "Gets the next set of ``Bin`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Bin`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.resource.Bin) - an array of ``Bin`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Bin`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Bin`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.resource.Bin", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinNode", 
         "shortname": "BinNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``BinHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_bin", 
            "get_parent_bin_nodes", 
            "get_child_bin_nodes"
         ], 
         "methods": [
            {
               "name": "get_bin", 
               "doc": {
                  "headline": "Gets the ``Bin`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Bin) - the bin represented by this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bin represented by this node\n        :rtype: ``osid.resource.Bin``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Bin", 
               "errors": {}
            }, 
            {
               "name": "get_parent_bin_nodes", 
               "doc": {
                  "headline": "Gets the parents of this bin.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinNodeList) - the parents of the ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.resource.BinNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_bin_nodes", 
               "doc": {
                  "headline": "Gets the children of this bin.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinNodeList) - the children of this bin", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this bin\n        :rtype: ``osid.resource.BinNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.resource.BinNodeList", 
         "shortname": "BinNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BinNodeList`` provides a means for accessing ``BinNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bnl.hasNext()) { BinNode node =\n    bnl.getNextBinNode(); }\n\n    or\n      while (bnl.hasNext()) {\n           BinNode[] nodes = bnl.getNextBinNodes(bnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_bin_node", 
            "get_next_bin_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_bin_node", 
               "doc": {
                  "headline": "Gets the next ``BinNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.BinNode) - the next ``BinNode`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``BinNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``BinNode`` in this list. The ``has_next()`` method should be used to test that a next ``BinNode`` is available before calling this method.\n        :rtype: ``osid.resource.BinNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.BinNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_bin_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``BinNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``BinNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.resource.BinNode) - an array of ``BinNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``BinNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``BinNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.resource.BinNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.resource.BinNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.resource"
}
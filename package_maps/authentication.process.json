{
   "name": "authentication.process", 
   "version": "3.0.0", 
   "title": "Authentication Process Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002-2004, 2007-2009 Massachusetts Institute of\nTechnology. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Authentication Process OSID conducts an authentication process.\n\nAuthentication Process\n\nThe Authentication OSID helps an OSID Consumer acquire and validate\nauthentication credentials without having to manage the details of a\nparticular authentication environment. Authentication is generally a two\nstep process. A user wishing to authenticate acquires a set of\ncredentials and transports those credentials to a remote peer. The\nremote peer then validates those credentials and determines the identity\nof the user represented. This process is reflected in the Authentication\nOSID with the definition of two OSID sessions:\n\n  * ``AuthenticationAcquisitionSession:`` A session to acquire\n    credentials from a user and serialize them for transport to a remote\n    peer for authentication.\n  * ``AuthenticationValidationSession:`` A session to receive and\n    validate authentication credentials from a remote peer wishing to\n    authenticate.\n\n\nThe transport of authentication credentials is the responsibility of the\nconsumer of the Authentication OSID as authentication generally supports\nan existing application protocol enviornment. Methods exist to extract\nand supply credentials at each end. An Authentication OSID Provider may\nsupport either or both sessions, and one or more credential formats.\nMethods also exist to support a challenge-response mechanism.\n\nCircle of Trust\n\nIn the Authorization OSID, Authorizations may be managed for a set of\nAgents related to a Resource. The set of ``Agents`` may be filtered\nbased on the level of confidence upon the authentication mechanism. A\n``Trust`` is a category of ``Agents`` produced from an authentication\nmechanism that represent a level of confidence on which to specify an\nAuthorization.\n\n``Trusts`` are not explicitly managed in the Authentication Process\nOSID. They serve to facilitate the orchestration between an\nAuthentication OSID Provider and an Authorization OSID Provider. An\nAuthorization OSID Provider may query the ``CircleOfTrustSession`` to\ndetermine if an ``Agent`` it has received belongs to a ``Trust``\nspecified in one of its Authorizations.\n\nFor example, an ``Authorization`` may be created by specifying a\n``Resource``. The ``Resource`` may be an individual person or a group of\nemployees. While employees might be authorized to read their company\nemail using their GMail account, requisitions in the ERP system must be\nmade using the company authentication system and even perhaps a specific\nspecific type of credential. An ``Authorization`` can be created for a\nset of employees based but restricted to a ``Trust`` where the Trust\nrepresents any ``Agent`` related to the set of employees that have\nauthenticated in the desired fashion.\n\nThe multiplicity of ``Agents`` per Resource as aell as the alignment\nwith an Authorization OSID Provider is a consideration in the design of\nan Authentication OSID Provider. It does only identify the\nauthentication principal as a singular entity, but may also represent\nsomething about the authentication style that is used to perform an\nauthorization.\n\nExamples\n\nClient side authentication:\n  if (manager.supportsAuthenticationAcquisition() &amp;&amp;\n      manager.supportsAcquisitionInputType(krb5ServiceType) &amp;&amp;\n      manager.supportsCredentialType(serialKRB5Type)) {\n      AuthenticationAcquisitionSession aas = manager.getAuthenticationAcquisitionSession();\n  \n      // specify input parameters (interface extension)\n      KRB5Service kService = new KRB5Service();\n      kService.setName(\"host\");\n      kService.setInstance(\"server.osid.org\");\n      kService.setRealm(\"OSID.ORG\");\n  \n      // get Credential (interface type) \n      Authentication auth = aas.getAuthentication(kService, krb5ServiceType);\n      SerializedKRB5Ticket ticket = (SerializedKRB5Ticket)        auth.getCredential(serialKRB5Type);\n      send_data_to_peer(ticket); // app specific protocol\n  }\n\n\n\n\n\nServer side authentication:\n  if (manager.supportsAuthenticationValidation() &amp;&amp;\n      manager.supportsCredentialType(serialSAML2Type)) {\n      AuthenticationValidationSession avs = manager.getAuthenticationValidationSession();\n  \n      Authentication auth = authenticate(SAML2Token, serialSAML2Type);\n  \n      if (auth.isValid()) {\n          Agent agent = auth.getAgent(); // identity established\n      }\n  }\n\n", 
   "interfaces": [
      {
         "fullname": "osid.authentication.process.AuthenticationProcessProfile", 
         "shortname": "AuthenticationProcessProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``AuthenticationProcessProfile`` describes the interoperability among authentication process services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_authentication_acquisition", 
            "supports_authentication_validation", 
            "supports_trust_lookup", 
            "supports_circle_of_trust", 
            "supports_challenge", 
            "get_authentication_record_types", 
            "supports_authentication_record_type", 
            "get_authentication_input_record_types", 
            "supports_authentication_input_record_type", 
            "get_challenge_record_types", 
            "supports_challenge_record_type", 
            "supports_credential_export", 
            "get_credential_types", 
            "supports_credential_type", 
            "get_trust_types", 
            "supports_trust_type"
         ], 
         "methods": [
            {
               "name": "supports_authentication_acquisition", 
               "doc": {
                  "headline": "Tests if authentication acquisition is supported.", 
                  "body": "        Authentication acquisition is responsible for acquiring client\n        side authentication credentials."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if authentication acquisiiton is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if authentication acquisiiton is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_validation", 
               "doc": {
                  "headline": "Tests if authentication validation is supported.", 
                  "body": "        Authentication validation verifies given authentication\n        credentials and maps to an agent identity."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if authentication validation is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if authentication validation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_trust_lookup", 
               "doc": {
                  "headline": "Tests if a trust look up session is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if trust lookup is supported ``,``\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if trust lookup is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_circle_of_trust", 
               "doc": {
                  "headline": "Tests if a session to examine agent and trust relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a circle of trust is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a circle of trust is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_challenge", 
               "doc": {
                  "headline": "Tests if this authentication service supports a challenge- response mechanism where credential validation service must implement a means to generate challenge data.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this is a challenge-response\n                system, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this is a challenge-response system, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_authentication_record_types", 
               "doc": {
                  "headline": "Gets the supported authentication record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                authentication record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported authentication record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_record_type", 
               "doc": {
                  "headline": "Tests if the given authentication record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    authentication_record_type (osid.type.Type): a ``Type``\n                indicating an authentication record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``authentication_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param authentication_record_type: a ``Type`` indicating an authentication record type\n        :type authentication_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``authentication_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "authentication_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_input_record_types", 
               "doc": {
                  "headline": "Gets the supported authentication input record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                authentication input record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported authentication input record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_authentication_input_record_type", 
               "doc": {
                  "headline": "Tests if the given authentication input record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    authentication_input_record_type (osid.type.Type): a\n                ``Type`` indicating an authentication input record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``authentication_input_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param authentication_input_record_type: a ``Type`` indicating an authentication input record type\n        :type authentication_input_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``authentication_input_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "authentication_input_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_challenge_record_types", 
               "doc": {
                  "headline": "Gets the supported challenge types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                challenge types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported challenge types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_challenge_record_type", 
               "doc": {
                  "headline": "Tests if the given challenge data type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    challenge_record_type (osid.type.Type): a ``Type``\n                indicating a challenge record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``challenge_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param challenge_record_type: a ``Type`` indicating a challenge record type\n        :type challenge_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``challenge_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "challenge_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_credential_export", 
               "doc": {
                  "headline": "Tests if ``Authentication`` objects can export serialzied credentials for transport.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the given credentials export is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the given credentials export is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_credential_types", 
               "doc": {
                  "headline": "Gets the supported credential types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                credential types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported credential types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_credential_type", 
               "doc": {
                  "headline": "Tests if the given credential type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    credential_type (osid.type.Type): a ``Type`` indicating\n                a credential type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``credential_type`` is ``null``", 
               "sphinx_param_doc": "        :param credential_type: a ``Type`` indicating a credential type\n        :type credential_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``credential_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "credential_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_trust_types", 
               "doc": {
                  "headline": "Gets the supported trust types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                trust types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported trust types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_trust_type", 
               "doc": {
                  "headline": "Tests if the given trust type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    trust_type (osid.type.Type): a ``Type`` indicating a\n                trust type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``trust_type`` is ``null``", 
               "sphinx_param_doc": "        :param trust_type: a ``Type`` indicating a trust type\n        :type trust_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``trust_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "trust_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.AuthenticationProcessManager", 
         "shortname": "AuthenticationProcessManager", 
         "category": "managers", 
         "doc": {
            "headline": "The authentication process manager provides access to authentication sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``AuthenticationAcquisitionSession:`` a session to acquire\n        credentials from a user and serialize them for transport to a\n        remote peer for authentication\n      * ``AuthenticationValidationSession: a`` session to receive and\n        validate authentication credentials from a remote peer wishing\n        to authenticate\n      * ``TrustLookupSession:`` a session to look up authentication\n        circles of trust\n      * ``CircleOfTrustSession:`` a session to examine agent circles of\n        trust\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.authentication.process.AuthenticationProcessProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "AuthenticationProcessProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "process"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "authentication.process", 
               "name": "AuthenticationProcessProfile"
            }
         ], 
         "method_names": [
            "get_authentication_acquisition_session", 
            "get_authentication_validation_session", 
            "get_trust_lookup_session", 
            "get_trust_lookup_session_for_agency", 
            "get_circle_of_trust_session", 
            "get_circle_of_trust_session_for_agency"
         ], 
         "methods": [
            {
               "name": "get_authentication_acquisition_session", 
               "doc": {
                  "headline": "Gets an ``AuthenticationAcquisitionSession`` which is responsible for acquiring authentication credentials on behalf of a service client.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationAcquisitionSe\n                ssion) - an acquisition session for this service", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_authentication_acquisition()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an acquisition session for this service\n        :rtype: ``osid.authentication.process.AuthenticationAcquisitionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_acquisition()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_acquisition()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.AuthenticationAcquisitionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_validation_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the ``AuthenticationValidation`` service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationValidationSes\n                sion) - an ``AuthenticationValidationSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_validation()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AuthenticationValidationSession``\n        :rtype: ``osid.authentication.process.AuthenticationValidationSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_validation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_validation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.AuthenticationValidationSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_trust_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.TrustLookupSession) - a\n                ``TrustLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_trust_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``TrustLookupSession``\n        :rtype: ``osid.authentication.process.TrustLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_trust_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_trust_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.TrustLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_trust_lookup_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust lookup service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.process.TrustLookupSession) - a\n                ``TrustLookupSession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_trust_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``TrustLookupSession``\n        :rtype: ``osid.authentication.process.TrustLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_trust_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_trust_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.process.TrustLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_circle_of_trust_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust circle service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.CircleOfTrustSession) - a\n                ``CircleOfTrustSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_circle_of_trust()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CircleOfTrustSession``\n        :rtype: ``osid.authentication.process.CircleOfTrustSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_circle_of_trust()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_circle_of_trust()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.CircleOfTrustSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_circle_of_trust_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust circle service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n", 
               "return_doc": "        return: (osid.authentication.process.CircleOfTrustSession) - a\n                ``CircleOfTrustSession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_ciirle_of_trust()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``CircleOfTrustSession``\n        :rtype: ``osid.authentication.process.CircleOfTrustSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_ciirle_of_trust()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_circle_of_trust()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.process.CircleOfTrustSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.AuthenticationProcessProxyManager", 
         "shortname": "AuthenticationProcessProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The authentication process proxy manager provides access to authentication sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy`` object.\n    The sessions included in this manager are:\n\n      * ``AuthenticationAcquisitionSession:`` session to acquire\n        credentials from a user and serialize them for transport to a\n        remote peer for authentication\n      * ``AuthenticationValidationSession:`` session to receive and\n        validate authentication credentials from a remote peer wishing\n        to authenticate\n      * ``TrustLookupSession:`` a session to look up authentication\n        circles of trust\n      * ``CircleOfTrustSession:`` a session to examine agent circles of\n        trust\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.authentication.process.AuthenticationProcessProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "AuthenticationProcessProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "process"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "authentication.process", 
               "name": "AuthenticationProcessProfile"
            }
         ], 
         "method_names": [
            "get_authentication_acquisition_session", 
            "get_authentication_validation_session", 
            "get_trust_lookup_session", 
            "get_trust_lookup_session_for_agency", 
            "get_circle_of_trust_session", 
            "get_circle_of_trust_session_for_agency"
         ], 
         "methods": [
            {
               "name": "get_authentication_acquisition_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the ``AuthenticationAcquisitionSession`` using the supplied ``Authentication``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationAcquisitionSe\n                ssion) - an ``AuthenticationAcquisitionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_authentication_acquisition()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AuthenticationAcquisitionSession``\n        :rtype: ``osid.authentication.process.AuthenticationAcquisitionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_acquisition()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_acquisition()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.AuthenticationAcquisitionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_validation_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the ``AuthenticationValidation`` service using the supplied ``Authentication``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return:\n                (osid.authentication.process.AuthenticationValidationSes\n                sion) - an ``AuthenticationValidationSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_authentication_validation()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AuthenticationValidationSession``\n        :rtype: ``osid.authentication.process.AuthenticationValidationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_authentication_validation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_validation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.AuthenticationValidationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_trust_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.process.TrustLookupSession) - a\n                ``TrustLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_trust_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TrustLookupSession``\n        :rtype: ``osid.authentication.process.TrustLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_trust_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_trust_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.TrustLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_trust_lookup_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust lookup service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.process.TrustLookupSession) - a\n                ``TrustLookupSession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_trust_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TrustLookupSession``\n        :rtype: ``osid.authentication.process.TrustLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_trust_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_trust_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.TrustLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_circle_of_trust_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust circle service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.process.CircleOfTrustSession) - a\n                ``CircleOfTrustSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_circle_of_trust()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CircleOfTrustSession``\n        :rtype: ``osid.authentication.process.CircleOfTrustSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_circle_of_trust()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_circle_of_trust()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.CircleOfTrustSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_circle_of_trust_session_for_agency", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the trust circle service for the given agency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agency_id (osid.id.Id): the ``Id`` of the agency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.authentication.process.CircleOfTrustSession) - a\n                ``CircleOfTrustSession``", 
               "error_doc": "        raise:  NotFound - ``agency_id`` not found\n        raise:  NullArgument - ``agency_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_ciirle_of_trust()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param agency_id: the ``Id`` of the agency\n        :type agency_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CircleOfTrustSession``\n        :rtype: ``osid.authentication.process.CircleOfTrustSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agency_id`` not found\n        :raise: ``NullArgument`` -- ``agency_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_ciirle_of_trust()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_circle_of_trust()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.authentication.process.CircleOfTrustSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.AuthenticationAcquisitionSession", 
         "shortname": "AuthenticationAcquisitionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session acquires authentication credentials.", 
            "body": "    The basic method, ``get_authentication(),`` gets authentication\n    credentials for use with authenticating to a remote peer. These\n    credentials may be generated from direct user input or retrieved via\n    a file, for example."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_authentication"
         ], 
         "methods": [
            {
               "name": "get_authentication", 
               "doc": {
                  "headline": "Gets the authentication credential for the current user.", 
                  "body": "        The input data may represent the identity of the remote peer or\n        data from a challenge-response transaction necessary for\n        generating the credantial."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.Authentication) - the\n                acquired authentication credential", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the acquired authentication credential\n        :rtype: ``osid.authentication.process.Authentication``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.Authentication", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.AuthenticationValidationSession", 
         "shortname": "AuthenticationValidationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session is the remote end of a transport link from the acquisition session and validates authentication credentials sent to it.", 
            "body": "    The basic method, ``authenticate()`` accepts a credential, validates\n    it and returns an ``Authentication`` containing the identity of the\n    authenticated user.\n\n    This OSID does not define any root interface for credentials and\n    challenge data. The object representing these are completely defined\n    within their ``Type,`` providing flexibility in adapting to a\n    variety of application environments."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_authentication_input", 
            "authenticate", 
            "get_challenge_data"
         ], 
         "methods": [
            {
               "name": "get_authentication_input", 
               "doc": {
                  "headline": "Gets an interface for authentication input.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.AuthenticationInput) -\n                authentication input", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: authentication input\n        :rtype: ``osid.authentication.process.AuthenticationInput``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.AuthenticationInput", 
               "errors": {}
            }, 
            {
               "name": "authenticate", 
               "doc": {
                  "headline": "Validates and returns the authentication credential from the given data.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    input (osid.authentication.process.AuthenticationInput):\n                the authentication input to be validated\n", 
               "return_doc": "        return: (osid.authentication.process.Authentication) - the\n                resulting authentication", 
               "error_doc": "        raise:  NullArgument - ``input`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``input`` is not of this service", 
               "sphinx_param_doc": "        :param input: the authentication input to be validated\n        :type input: ``osid.authentication.process.AuthenticationInput``\n", 
               "sphinx_return_doc": "        :return: the resulting authentication\n        :rtype: ``osid.authentication.process.Authentication``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``input`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``input`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.process.AuthenticationInput", 
                     "var_name": "input", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.process.AuthenticationInput"
               ], 
               "return_type": "osid.authentication.process.Authentication", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_challenge_data", 
               "doc": {
                  "headline": "Gets data that can be used for a challenge to the peer attempting authentication.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    input (osid.authentication.process.AuthenticationInput):\n                authentication input\n", 
               "return_doc": "        return: (osid.authentication.process.Challenge) - the acquired\n                challenge data", 
               "error_doc": "        raise:  NullArgument - ``input`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unimplemented - challenge response not available\n        raise:  Unsupported - ``input`` is not of this service", 
               "sphinx_param_doc": "        :param input: authentication input\n        :type input: ``osid.authentication.process.AuthenticationInput``\n", 
               "sphinx_return_doc": "        :return: the acquired challenge data\n        :rtype: ``osid.authentication.process.Challenge``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``input`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unimplemented`` -- challenge response not available\n        :raise: ``Unsupported`` -- ``input`` is not of this service", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``AuthenticationProcessManager.supportsChallenge()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.authentication.process.AuthenticationInput", 
                     "var_name": "input", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.authentication.process.AuthenticationInput"
               ], 
               "return_type": "osid.authentication.process.Challenge", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.TrustLookupSession", 
         "shortname": "TrustLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Trusts``.", 
            "body": "    The ``Trust`` represents the trust level of an agent. The\n    relationship among ``Agents`` and ``Trust`` is not explicity managed\n    but understood by an Authentication OSID Provider when orchestration\n    to an Authorization OSID Provider is desired.\n\n    This session defines two sets of views which offer differing\n    behaviors when retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete and ordered result set or is\n        an error condition\n      * isolated agency view: All agent methods in this session operate,\n        retrieve and pertain to trusts defined explicitly in the current\n        agency.\n      * federated agency view: All trust methods in this session\n        operate, retrieve and pertain to all trusts defined in this\n        agency and any other trusts implicitly available in this agency\n        through agency inheritence.\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there a particular element is\n    inaccessible. For example, a hierarchy output can be plugged into a\n    lookup method to retrieve all objects known to a hierarchy, but it\n    may not be necessary to break execution if a node from the hierarchy\n    no longer exists. However, some administrative applications may need\n    to know whether it had retrieved an entire set of objects and may\n    sacrifice some interoperability for the sake of precision.\n    \n    Trusts may have an additional records indicated by their respective\n    record types. The record may not be accessed through a cast of the\n    ``Trust``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_lookup_trusts", 
            "use_comparative_trust_view", 
            "use_plenary_trust_view", 
            "use_federated_agency_view", 
            "use_isolated_agency_view", 
            "get_trust", 
            "get_trusts_by_ids", 
            "get_trusts_by_genus_type", 
            "get_trusts_by_parent_genus_type", 
            "get_trusts_by_record_type", 
            "get_circle_of_trust", 
            "get_trusts"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_trusts", 
               "doc": {
                  "headline": "Tests if this user can perform ``Trust`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_trust_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_trust_view", 
               "doc": {
                  "headline": "A complete view of the ``Trust`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_agency_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include trusts in agencies which are\n        children of this agency in the agency hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_agency_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this agency only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_trust", 
               "doc": {
                  "headline": "Gets the ``Trust`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Trust`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Trust`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    trust_id (osid.id.Id): the ``Id`` of the ``Trust`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.authentication.process.Trust) - the returned\n                ``Trust``", 
               "error_doc": "        raise:  NotFound - no ``Trust`` found with the given ``Id``\n        raise:  NullArgument - ``trust_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_id: the ``Id`` of the ``Trust`` to retrieve\n        :type trust_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust``\n        :rtype: ``osid.authentication.process.Trust``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Trust`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``trust_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "trust_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.process.Trust", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_trusts_by_ids", 
               "doc": {
                  "headline": "Gets a ``TrustList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the trusts\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Trusts`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    trust_ids (osid.id.IdList): a list of trust ``Ids``\n", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - the returned\n                ``Trust list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``trust_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_ids: a list of trust ``Ids``\n        :type trust_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust list``\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``trust_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "trust_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_trusts_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``TrustList`` corresponding to the given trust genus ``Type`` which does not include trusts of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known trusts or\n        an error results. Otherwise, the returned list may contain only\n        those trusts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    trust_genus_type (osid.type.Type): a trust genus type\n", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - the returned\n                ``Trust`` list", 
               "error_doc": "        raise:  NullArgument - ``trust_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_genus_type: a trust genus type\n        :type trust_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust`` list\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``trust_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "trust_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_trusts_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``TrustList`` corresponding to the given trust genus ``Type`` and include any additional trusts with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known trusts or\n        an error results. Otherwise, the returned list may contain only\n        those trusts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    trust_genus_type (osid.type.Type): a trust genus type\n", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - the returned\n                ``Trust`` list", 
               "error_doc": "        raise:  NullArgument - ``trust_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_genus_type: a trust genus type\n        :type trust_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust`` list\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``trust_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "trust_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_trusts_by_record_type", 
               "doc": {
                  "headline": "Gets a ``TrustList`` containing the given trust record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known trusts or\n        an error results. Otherwise, the returned list may contain only\n        those trusts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    trust_record_type (osid.type.Type): a trust record type\n", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - the returned\n                ``Trust`` list", 
               "error_doc": "        raise:  NullArgument - ``trust_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_record_type: a trust record type\n        :type trust_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust`` list\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``trust_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "trust_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_circle_of_trust", 
               "doc": {
                  "headline": "Gets a ``TrustList`` in the same circle, or the same level of confidence, as the given trust.", 
                  "body": "        In plenary mode, the returned list contains all known trusts or\n        an error results. Otherwise, the returned list may contain only\n        those trusts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    trust_id (osid.id.Id): a trust ``Id``\n", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - the returned\n                ``Trust`` list", 
               "error_doc": "        raise:  NotFound - ``trust_id`` is not found\n        raise:  NullArgument - ``trust_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param trust_id: a trust ``Id``\n        :type trust_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Trust`` list\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``trust_id`` is not found\n        :raise: ``NullArgument`` -- ``trust_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "trust_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_trusts", 
               "doc": {
                  "headline": "Gets all ``Trusts``.", 
                  "body": "        In plenary mode, the returned list contains all known trusts or\n        an error results. Otherwise, the returned list may contain only\n        those trusts that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.TrustList) - a list of\n                ``Trusts``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Trusts``\n        :rtype: ``osid.authentication.process.TrustList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.TrustList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.CircleOfTrustSession", 
         "shortname": "CircleOfTrustSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session examines the relationship between ``Agents`` and ``Trusts``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_agency_id", 
            "get_agency", 
            "can_lookup_trust_circles", 
            "use_federated_agency_view", 
            "use_isolated_agency_view", 
            "get_trust", 
            "is_in_circle"
         ], 
         "methods": [
            {
               "name": "get_agency_id", 
               "doc": {
                  "headline": "Gets the ``Agency``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agency Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agency", 
               "doc": {
                  "headline": "Gets the ``Agency`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agency) - the ``Agency`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agency`` associated with this session\n        :rtype: ``osid.authentication.Agency``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agency", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_trust_circles", 
               "doc": {
                  "headline": "Tests if this user can look up trusts for agents.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known these methods will\n        result in a ``PermissionDenied``. This is intended as a hint to\n        an application that may opt not to offer create operations to\n        users outside the circle."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if trust methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if trust methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_agency_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include trusts in agencies which are\n        children of this agency in the agency hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_agency_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this agency only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_trust", 
               "doc": {
                  "headline": "Gets a trust level for the given agent.", 
                  "body": "        An ``Agent`` may be in one circle of trust that, in turn, is\n        inside another circle of trust. To test whether an agent is\n        inside a specific circle, use ``IsInCircle()``."
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n", 
               "return_doc": "        return: (osid.authentication.process.Trust) - the trust", 
               "error_doc": "        raise:  NotFound - ``agent_id`` is not found\n        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the trust\n        :rtype: ``osid.authentication.process.Trust``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``agent_id`` is not found\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.authentication.process.Trust", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_in_circle", 
               "doc": {
                  "headline": "Tests if the given agent is inside the given circle of trust.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the agent is in the given trust,\n                ``false`` if agent not found or is outside the circle", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the agent is in the given trust, ``false`` if agent not found or is outside the circle\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.Authentication", 
         "shortname": "Authentication", 
         "category": "objects", 
         "doc": {
            "headline": "``Authentication`` represents an authentication credential which contains set of ``bytes`` and a format Type.", 
            "body": "    Once an ``Authentication`` is created from the\n    ``AuthenticationValidationSession,`` the credential data can be\n    extracted and sent to the remote peer for validation. The remote\n    peer gets another ``Authentication`` object as a result of\n    validating the serialized credential data.\n\n    An ``Authentication`` may or may not be valid. ``is_valid()`` should\n    be checked before acting upon the ``Agent`` identity to which the\n    credential is mapped."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_agent_id", 
            "get_agent", 
            "is_valid", 
            "has_expiration", 
            "get_expiration", 
            "has_credential", 
            "get_credential", 
            "get_authentication_record"
         ], 
         "methods": [
            {
               "name": "get_agent_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Agent`` identified in this authentication credential.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Agent Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: The Agent should be determined at the\n        time this credential is created.\n", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agent", 
               "doc": {
                  "headline": "Gets the ``Agent`` identified in this authentication credential.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the ``Agent``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_valid", 
               "doc": {
                  "headline": "Tests whether or not the credential represented by this ``Authentication`` is currently valid.", 
                  "body": "        A credential may be invalid because it has been destroyed,\n        expired, or is somehow no longer able to be used."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this authentication credential\n                is valid, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this authentication credential is valid, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: Any problem in determining the validity\n        of this credential should result in ``false``.\n", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "has_expiration", 
               "doc": {
                  "headline": "Tests if this authentication has an expiration.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this authentication has an\n                expiration, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this authentication has an expiration, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_expiration", 
               "doc": {
                  "headline": "Gets the expiration date associated with this authentication credential.", 
                  "body": "        Consumers should check for the existence of a an expiration\n        mechanism via ``hasExpiration()``."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (timestamp) - the expiration date of this authentication\n                credential", 
               "error_doc": "        raise:  IllegalState - ``has_expiration()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the expiration date of this authentication credential\n        :rtype: ``timestamp``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_expiration()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "timestamp", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "has_credential", 
               "doc": {
                  "headline": "Tests if this authentication has a credential for export.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this authentication has a\n                credential, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this authentication has a credential, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_credential", 
               "doc": {
                  "headline": "Gets the credential represented by the given ``Type`` for transport to a remote service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    credential_type (osid.type.Type): the credential format\n                ``Type``\n", 
               "return_doc": "        return: (object) - the credential", 
               "error_doc": "        raise:  IllegalState - ``has_credential()`` is ``false``\n        raise:  NullArgument - ``credential_type`` is ``null``\n        raise:  Unsupported - the given ``credential_type`` is not\n                supported", 
               "sphinx_param_doc": "        :param credential_type: the credential format ``Type``\n        :type credential_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the credential\n        :rtype: ``object``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_credential()`` is ``false``\n        :raise: ``NullArgument`` -- ``credential_type`` is ``null``\n        :raise: ``Unsupported`` -- the given ``credential_type`` is not supported", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: A provider may support multiple\n        credential formats for a variety of applications.\n", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "credential_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "object", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_authentication_record", 
               "doc": {
                  "headline": "Gets the authentication record corresponding to the given authentication record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``authentication_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(authentication_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    authentication_record_type (osid.type.Type): the type of\n                authentication record to retrieve\n", 
               "return_doc": "        return:\n                (osid.authentication.process.records.AuthenticationRecor\n                d) - the authentication record", 
               "error_doc": "        raise:  NullArgument - ``authentication_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(authenticaton_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param authentication_record_type: the type of authentication record to retrieve\n        :type authentication_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the authentication record\n        :rtype: ``osid.authentication.process.records.AuthenticationRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``authentication_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(authenticaton_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "authentication_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.records.AuthenticationRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.records.AuthenticationRecord", 
         "shortname": "AuthenticationRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Authentication``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.process.AuthenticationInput", 
         "shortname": "AuthenticationInput", 
         "category": "rules", 
         "doc": {
            "headline": "An authorization condition interface.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCondition"
         ], 
         "inherit_shortnames": [
            "OsidCondition"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCondition"
            }
         ], 
         "method_names": [
            "get_authentication_input_record"
         ], 
         "methods": [
            {
               "name": "get_authentication_input_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given ``AuthenticationInput`` record ``Type``.", 
                  "body": "        This method must be used to retrieve an object implementing the\n        requested record interface along with all of its ancestor\n        interfaces. The ``authentication_input_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(authentication_input_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    authentication_input_record_type (osid.type.Type): an\n                authentication input record type\n", 
               "return_doc": "        return:\n                (osid.authentication.process.records.AuthenticationInput\n                Record) - the authentication input record", 
               "error_doc": "        raise:  NullArgument - ``authentication_input_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(authentication_input_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param authentication_input_record_type: an authentication input record type\n        :type authentication_input_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the authentication input record\n        :rtype: ``osid.authentication.process.records.AuthenticationInputRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``authentication_input_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(authentication_input_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "authentication_input_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.records.AuthenticationInputRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.records.AuthenticationInputRecord", 
         "shortname": "AuthenticationInputRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AuthenticationInput``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.process.Challenge", 
         "shortname": "Challenge", 
         "category": "objects", 
         "doc": {
            "headline": "The challenge data.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_challenge_record"
         ], 
         "methods": [
            {
               "name": "get_challenge_record", 
               "doc": {
                  "headline": "Gets the challenge record corresponding to the given challenge record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``challenge_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(challenge_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    challenge_record_type (osid.type.Type): the type of\n                challenge record to retrieve\n", 
               "return_doc": "        return: (osid.authentication.process.records.ChallengeRecord) -\n                the challenge record", 
               "error_doc": "        raise:  NullArgument - ``challenge_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(challenge_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param challenge_record_type: the type of challenge record to retrieve\n        :type challenge_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the challenge record\n        :rtype: ``osid.authentication.process.records.ChallengeRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``challenge_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(challenge_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "challenge_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.records.ChallengeRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.records.ChallengeRecord", 
         "shortname": "ChallengeRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Challenge``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.process.Trust", 
         "shortname": "Trust", 
         "category": "objects", 
         "doc": {
            "headline": "``Trust`` represents the level of confidence in an authentication.", 
            "body": "    An Authentication OSID Provider may issue different ``Agents`` based\n    on the authentication mechanism. ``Trust`` is a grouping of\n    ``Agent`` \"types\" that can be inferred as equivalent from an\n    authorization point of view.\n\n    The relationship among ``Agents`` and ``Trust`` is not explicity\n    managed but understood by an Authentication OSID Provider when\n    orchestration to an Authorization OSID Provider is desired."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_trust_record"
         ], 
         "methods": [
            {
               "name": "get_trust_record", 
               "doc": {
                  "headline": "Gets the trust record corresponding to the given trust record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested. The ``trust_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(trust_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    trust_record_type (osid.type.Type): the type of trust\n                record to retrieve\n", 
               "return_doc": "        return: (osid.authentication.process.records.TrustRecord) - the\n                trust record", 
               "error_doc": "        raise:  NullArgument - ``trust_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(trust_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param trust_record_type: the type of trust record to retrieve\n        :type trust_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the trust record\n        :rtype: ``osid.authentication.process.records.TrustRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``trust_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(trust_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "trust_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.authentication.process.records.TrustRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.authentication.process.records.TrustRecord", 
         "shortname": "TrustRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Trust``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.authentication.process.TrustList", 
         "shortname": "TrustList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``TrustList`` provides a means for accessing ``Trust`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (tl.hasNext()) { Trust trust = tl.getNextTrust(); }\n\n    or\n      while (tl.hasNext()) {\n           Trust[] trusts = tl.getNextTrusts(tl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_trust", 
            "get_next_trusts"
         ], 
         "methods": [
            {
               "name": "get_next_trust", 
               "doc": {
                  "headline": "Gets the next ``Trust`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.process.Trust) - the next ``Trust``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``Trust`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Trust`` in this list. The ``has_next()`` method should be used to test that a next ``Trust`` is available before calling this method.\n        :rtype: ``osid.authentication.process.Trust``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.process.Trust", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_trusts", 
               "doc": {
                  "headline": "Gets the next set of ``Trust`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Trust`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.authentication.process.Trust) - an array of\n                ``Trust`` elements.The length of the array is less than\n                or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Trust`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Trust`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.authentication.process.Trust``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.authentication.process.Trust", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.authentication.process"
}
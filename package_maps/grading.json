{
   "name": "grading", 
   "version": "3.0.0", 
   "title": "Grading Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002-2004, 2008 Massachusetts Institute of Technology.\n\nCopyright (c) 2010-2011 Ingeenscus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Grading OSID defines a service to apply grades or ratings.\n\nGrade Systems\n\nThe grade system sessions provide the means to retrievs and manage\n``GradeSystem`` definitions. A ``GradeSystem`` is a fixed set of\n``Grades`` . ``GradeSystems`` may also take the form of a numerical\nscore as well as a rating based on some system. ``GradeEntries`` belong\nto a single ``GradebookColumn``.\n\nGradebook Columns\n\nA ``Gradebook`` is represented by a series of ``GradebookColumns``. A\n``GradeBookColumn`` represents a something to be graded and is joined to\na single ``GradeSystem``. A ``GradebookColumn`` may be constrained to a\nsingle grader.\n\nGrade Entries\n\nA ``GradebookColumn`` is comprised of a series of ``GradeEntry``\nelements. A ``GradebookColumn`` may represent \"Assignment 3\" while a\n``GradeEntry`` may represent the assignment turned in by a particular\nstudent.\n\nA ``Grade`` can be applied to a ``GradeEntry`` that relates the entry to\na grader and a key ``Resource``. In the case of a class gradebook, the\nkey resource represents the student. If there are multiple graders for\nthe same key resource, each grader gets their own ``GradebookColumn``.\n\nGradebooks may also be used to capture ratings about other objects. In\nthe case where people vote for their favorite assets, the key resource\nrepresents the ``Asset`` .\n\n``GradebookColumns`` may have a ``GradebookColumnSummary`` entry for\nsummary results and statistics across all ``GradeEntries`` in the\ncolumn.\n\nGradebook Cataloging\n\n``GradebookColumns`` are organized into ``Gradebooks``.  ``Gradebooks``\nalso provide for a federated hierarchy of ``GradebookColumns``. Simple\nreordering of ``GradebookColumns`` can be performed by moving the\n``GradebookColumn`` relative to another. The relative positioning may\nreference two ``GradebookColumns`` through the federation.\n\nSub Packages\n\nThe Grading OSID includes several subpackages. The Grading Transform\nOSID provides a means of translating one ``GradeSystem`` to another. The\nGrading Calculation OSID defines derived ``GradebookColumns``. The\nGrading Batch OSID manages ``GradeSystems,``  ``GradeEntries,``\n``Gradebooks,`` and ``GradebookColumns`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.grading.GradingProfile", 
         "shortname": "GradingProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``GradingProfile`` describes the interoperability among grading services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_grade_system_lookup", 
            "supports_grade_system_query", 
            "supports_grade_system_search", 
            "supports_grade_system_admin", 
            "supports_grade_system_notification", 
            "supports_grade_system_gradebook", 
            "supports_grade_system_gradebook_assignment", 
            "supports_grade_system_smart_gradebook", 
            "supports_grade_entry_lookup", 
            "supports_grade_entry_query", 
            "supports_grade_entry_search", 
            "supports_grade_entry_admin", 
            "supports_grade_entry_notification", 
            "supports_gradebook_column_lookup", 
            "supports_gradebook_column_query", 
            "supports_gradebook_column_search", 
            "supports_gradebook_column_admin", 
            "supports_gradebook_column_notification", 
            "supports_gradebook_column_gradebook", 
            "supports_gradebook_column_gradebook_assignment", 
            "supports_gradebook_column_smart_gradebook", 
            "supports_gradebook_lookup", 
            "supports_gradebook_query", 
            "supports_gradebook_search", 
            "supports_gradebook_admin", 
            "supports_gradebook_notification", 
            "supports_gradebook_hierarchy", 
            "supports_gradebook_hierarchy_design", 
            "supports_grading_batch", 
            "supports_grading_calculation", 
            "supports_grading_transform", 
            "get_grade_record_types", 
            "supports_grade_record_type", 
            "get_grade_system_record_types", 
            "supports_grade_system_record_type", 
            "get_grade_system_search_record_types", 
            "supports_grade_system_search_record_type", 
            "get_grade_entry_record_types", 
            "supports_grade_entry_record_type", 
            "get_grade_entry_search_record_types", 
            "supports_grade_entry_search_record_type", 
            "get_gradebook_column_record_types", 
            "supports_gradebook_column_record_type", 
            "get_gradebook_column_search_record_types", 
            "supports_gradebook_column_search_record_type", 
            "get_gradebook_column_summary_record_types", 
            "supports_gradebook_column_summary_record_type", 
            "get_gradebook_record_types", 
            "supports_gradebook_record_type", 
            "get_gradebook_search_record_types", 
            "supports_gradebook_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_lookup", 
               "doc": {
                  "headline": "Tests if a grade system lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if grade system lookup is supported,\n                false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if grade system lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_query", 
               "doc": {
                  "headline": "Tests if a grade system query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_search", 
               "doc": {
                  "headline": "Tests if a grade system search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_admin", 
               "doc": {
                  "headline": "Tests if a grade system administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_notification", 
               "doc": {
                  "headline": "Tests if grade system notification is supported.", 
                  "body": "        Messages may be sent when grade entries are created, modified,\n        or deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_gradebook", 
               "doc": {
                  "headline": "Tests if a grade system to gradebook lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system gradebook lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system gradebook lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_gradebook_assignment", 
               "doc": {
                  "headline": "Tests if a grade system to gradebook assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system gradebook\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system gradebook assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_smart_gradebook", 
               "doc": {
                  "headline": "Tests if a grade system smart gradebook session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system smart gradebook is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system smart gradebook is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_lookup", 
               "doc": {
                  "headline": "Tests if a grade entry lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if grade entry lookup is supported,\n                false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if grade entry lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_query", 
               "doc": {
                  "headline": "Tests if a grade entry query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if grade entry query is supported,\n                false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if grade entry query is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_search", 
               "doc": {
                  "headline": "Tests if a grade entry search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade entry search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade entry search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_admin", 
               "doc": {
                  "headline": "Tests if a grade entry administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade entry admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade entry admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_notification", 
               "doc": {
                  "headline": "Tests if grade entry notification is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade entry notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade entry notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_lookup", 
               "doc": {
                  "headline": "Tests if a gradebook column lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if gradebook column lookup is\n                supported, false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if gradebook column lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_query", 
               "doc": {
                  "headline": "Tests if a gradebook column query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_search", 
               "doc": {
                  "headline": "Tests if a gradebook column search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if grade system search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if grade system search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_admin", 
               "doc": {
                  "headline": "Tests if a gradebook column administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook column admin is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook column admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_notification", 
               "doc": {
                  "headline": "Tests if gradebook column notification is supported.", 
                  "body": "        Messages may be sent when grade entries are created, modified,\n        or deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook column notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook column notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_gradebook", 
               "doc": {
                  "headline": "Tests if a gradebook column to gradebook lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook column gradebook\n                lookup session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook column gradebook lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_gradebook_assignment", 
               "doc": {
                  "headline": "Tests if a gradebook column to gradebook assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook column gradebook\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook column gradebook assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_smart_gradebook", 
               "doc": {
                  "headline": "Tests if a gradebook column smart gradebookt session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook column amsrt gradebook\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook column amsrt gradebook is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_lookup", 
               "doc": {
                  "headline": "Tests if a gradebook lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a gradebook query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_search", 
               "doc": {
                  "headline": "Tests if a gradebook search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_admin", 
               "doc": {
                  "headline": "Tests if a gradebook administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_notification", 
               "doc": {
                  "headline": "Tests if gradebook notification is supported.", 
                  "body": "        Messages may be sent when gradebooks are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if gradebook notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if gradebook notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_hierarchy", 
               "doc": {
                  "headline": "Tests if a gradebook hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook hierarchy traversal\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_hierarchy_design", 
               "doc": {
                  "headline": "Tests if gradebook hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grading_batch", 
               "doc": {
                  "headline": "Tests if a grading batch service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grading batch service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grading batch service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grading_calculation", 
               "doc": {
                  "headline": "Tests if a grading calculation service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grading calculation service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grading calculation service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_grading_transform", 
               "doc": {
                  "headline": "Tests if a grade system transform service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grading transform service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grading transform service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Grade`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Grade`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Grade`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Grade`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): a ``Type``\n                indicating a ``Grade`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param grade_record_type: a ``Type`` indicating a ``Grade`` record type\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradeSystem`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradeSystem`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradeSystem`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradeSystem`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): a ``Type``\n                indicating a ``GradeSystem`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_record_type: a ``Type`` indicating a ``GradeSystem`` record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradeSystem`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradeSystem`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradeSystem`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradeSystem`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``GradeSystem`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param grade_system_search_record_type: a ``Type`` indicating a ``GradeSystem`` search record type\n        :type grade_system_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradeEntry`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradeEntry`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradeEntry`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradeEntry`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): a ``Type``\n                indicating a ``GradeEntry`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: a ``Type`` indicating a ``GradeEntry`` record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradeEntry`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradeEntry`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradeEntry`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradeEntry`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``GradeEntry`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param grade_entry_search_record_type: a ``Type`` indicating a ``GradeEntry`` search record type\n        :type grade_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradebookColumn`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradebookColumn`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradebookColumn`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradebookColumn`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                ``Type`` indicating a ``GradebookColumn`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given gradebook column\n                record ``Type`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a ``Type`` indicating a ``GradebookColumn`` type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given gradebook column record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_record_types", 
               "doc": {
                  "headline": "Gets the supported gradebook column search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradebookColumn`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradebookColumn`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_search_record_type", 
               "doc": {
                  "headline": "Tests if the given gradebook column search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``GradebookColumn`` search record\n                type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record ``Type``\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_search_record_type``\n                is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_search_record_type: a ``Type`` indicating a ``GradebookColumn`` search record type\n        :type gradebook_column_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_summary_record_types", 
               "doc": {
                  "headline": "Gets the supported ``GradebookColumnSummary`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``GradebookColumnSummary`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``GradebookColumnSummary`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_summary_record_type", 
               "doc": {
                  "headline": "Tests if the given ``GradebookColumnSummary`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_summary_record_type (osid.type.Type): a\n                ``Type`` indicating a ``GradebookColumnSummary`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given gradebook column\n                summary record ``Type`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_summary_record_type: a ``Type`` indicating a ``GradebookColumnSummary`` type\n        :type gradebook_column_summary_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given gradebook column summary record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_summary_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Gradebook`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Gradebook`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Gradebook`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Gradebook`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a ``Type``\n                indicating a ``Gradebook`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given gradebook record\n                ``Type`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a ``Type`` indicating a ``Gradebook`` type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given gradebook record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_search_record_types", 
               "doc": {
                  "headline": "Gets the supported gradebook search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Gradebook`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Gradebook`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_search_record_type", 
               "doc": {
                  "headline": "Tests if the given gradebook search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``Gradebook`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record ``Type``\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param gradebook_search_record_type: a ``Type`` indicating a ``Gradebook`` search record type\n        :type gradebook_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradingManager", 
         "shortname": "GradingManager", 
         "category": "managers", 
         "doc": {
            "headline": "The grading manager provides access to grading sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``GradeSystemLookupSession:`` a session to look up grades and\n        grade systems\n      * ``GradeSystemQuerySession:`` a session to query grade systems\n        ``None``\n      * ``GradeSystemSearchSession:`` a session to search grade systems\n      * ``GradeSystemAdminSession:`` a session to manage grade systems\n      * ``GradeSystemNotificationSession`` a session for subscribing to\n        new or deleted grades or grade systems\n      * ``GradeSystemGradebookSession:`` a session for retrieving grade\n        system to gradebook mappings\n      * ``GradeSystemGradebookAssignmentSession:`` a session for\n        managing grade system to gradebook mappings\n      * ``GradeSystemSmartGradebookSession:`` a session for managing\n        smart gradebooks of grade systems\n    \n      * ``GradeEntryLookupSession:`` a session to look up grade entries\n      * ``GradeEntryQuerySession:`` a session to query grade entries\n        ``None``\n      * ``GradeEntrySearchSession:`` a session to search grade entries\n      * ``GradeEntryAdminSession:`` a session to create, modify and\n        delete grade entries ``None``\n      * ``GradeEntryNotificationSession: a`` session to receive messages\n        pertaining to grade entry ```` changes\n    \n      * ``GradebookColumnLookupSession:`` a session to look up gradebook\n        columns\n      * ``GradebookColumnQuerySession:`` a session to query gradebook\n        columns ``None``\n      * ``GradebookColumnSearchSession:`` a session to search gradebook\n        columns\n      * ``GradebookColumnAdminSession:`` a session to manage gradebook\n        columns\n      * ``GradebookColumnNotificationSession`` a session for subscribing\n        to new or deleted gradebook columns\n      * ``GradebookColumnGradebookSession:`` a session for retrieving\n        gradebook column to gradebook mappings\n      * ``GradebookColumnGradebookAssignmentSession:`` a session for\n        managing gradebook column to gradebook mappings\n      * ``GradebookColumnSmartGradebookSession:`` a session for managing\n        smart gradebooks of gradebook columns\n    \n      * ``GradebookLookupSession:`` a session to lookup gradebooks\n      * ``GradebookQuerySession:`` a session to query gradebooks\n      * ``GradebookSearchSession`` : a session to search gradebooks\n      * ``GradebookAdminSession`` : a session to create, modify and\n        delete gradebooks\n      * ``GradebookNotificationSession`` : a session to receive messages\n        pertaining to gradebook changes\n      * ``GradebookHierarchySession:`` a session to traverse the\n        gradebook hierarchy\n      * ``GradebookHierarchyDesignSession:`` a session to manage the\n        gradebook hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.grading.GradingProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "GradingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "grading", 
               "name": "GradingProfile"
            }
         ], 
         "method_names": [
            "get_grade_system_lookup_session", 
            "get_grade_system_lookup_session_for_gradebook", 
            "get_grade_system_query_session", 
            "get_grade_system_query_session_for_gradebook", 
            "get_grade_system_search_session", 
            "get_grade_system_search_session_for_gradebook", 
            "get_grade_system_admin_session", 
            "get_grade_system_admin_session_for_gradebook", 
            "get_grade_system_notification_session", 
            "get_grade_system_notification_session_for_gradebook", 
            "get_grade_system_gradebook_session", 
            "get_grade_system_gradebook_assignment_session", 
            "get_grade_system_smart_gradebook_session", 
            "get_grade_entry_lookup_session", 
            "get_grade_entry_lookup_session_for_gradebook", 
            "get_grade_entry_query_session", 
            "get_grade_entry_query_session_for_gradebook", 
            "get_grade_entry_search_session", 
            "get_grade_entry_search_session_for_gradebook", 
            "get_grade_entry_admin_session", 
            "get_grade_entry_admin_session_for_gradebook", 
            "get_grade_entry_notification_session", 
            "get_grade_entry_notification_session_for_gradebook", 
            "get_gradebook_column_lookup_session", 
            "get_gradebook_column_lookup_session_for_gradebook", 
            "get_gradebook_column_query_session", 
            "get_gradebook_column_query_session_for_gradebook", 
            "get_gradebook_column_search_session", 
            "get_gradebook_column_search_session_for_gradebook", 
            "get_gradebook_column_admin_session", 
            "get_gradebook_column_admin_session_for_gradebook", 
            "get_gradebook_column_notification_session", 
            "get_gradebook_column_notification_session_for_gradebook", 
            "get_gradebook_column_gradebook_session", 
            "get_gradebook_column_gradebook_assignment_session", 
            "get_gradebook_column_smart_gradebook_session", 
            "get_gradebook_lookup_session", 
            "get_gradebook_query_session", 
            "get_gradebook_search_session", 
            "get_gradebook_admin_session", 
            "get_gradebook_notification_session", 
            "get_gradebook_hierarchy_session", 
            "get_gradebook_hierarchy_design_session", 
            "get_grading_batch_manager", 
            "get_grading_calculation_manager", 
            "get_grading_transform_manager"
         ], 
         "methods": [
            {
               "name": "get_grade_system_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemLookupSession) - a\n                ``GradeSystemLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemLookupSession``\n        :rtype: ``osid.grading.GradeSystemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemLookupSession) - ``a\n                GradeSystemLookupSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemLookupSession``\n        :rtype: ``osid.grading.GradeSystemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuerySession) - a\n                ``GradeSystemQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemQuerySession``\n        :rtype: ``osid.grading.GradeSystemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemQuerySession) - ``a\n                GradeSystemQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemQuerySession``\n        :rtype: ``osid.grading.GradeSystemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchSession) - a\n                ``GradeSystemSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemSearchSession``\n        :rtype: ``osid.grading.GradeSystemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchSession) - ``a\n                GradeSystemSearchSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemSearchSession``\n        :rtype: ``osid.grading.GradeSystemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemAdminSession) - a\n                ``GradeSystemAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemAdminSession``\n        :rtype: ``osid.grading.GradeSystemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemAdminSession) - ``a\n                GradeSystemAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemAdminSession``\n        :rtype: ``osid.grading.GradeSystemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to grade system changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_receiver\n                (osid.grading.GradeSystemReceiver): the grade system\n                receiver\n", 
               "return_doc": "        return: (osid.grading.GradeSystemNotificationSession) - a\n                ``GradeSystemNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``grade_system_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param grade_system_receiver: the grade system receiver\n        :type grade_system_receiver: ``osid.grading.GradeSystemReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemNotificationSession``\n        :rtype: ``osid.grading.GradeSystemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemReceiver", 
                     "var_name": "grade_system_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemReceiver"
               ], 
               "return_type": "osid.grading.GradeSystemNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_receiver\n                (osid.grading.GradeSystemReceiver): the grade system\n                receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemNotificationSession) - ``a\n                _grade_system_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``grade_system_receiver`` or\n                ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param grade_system_receiver: the grade system receiver\n        :type grade_system_receiver: ``osid.grading.GradeSystemReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _grade_system_notification_session``\n        :rtype: ``osid.grading.GradeSystemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_receiver`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemReceiver", 
                     "var_name": "grade_system_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for retrieving grade system to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemGradebookSession) - a\n                ``GradeSystemGradebookSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_gradebook()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemGradebookSession``\n        :rtype: ``osid.grading.GradeSystemGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemGradebookSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_gradebook_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning grade system to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemGradebookSession) - a\n                ``GradeSystemGradebookAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_grade_system_gradebook_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemGradebookAssignmentSession``\n        :rtype: ``osid.grading.GradeSystemGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_gradebook_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_gradebook_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemGradebookSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_smart_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for managing smart gradebooks of grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSmartGradebookSession) - a\n                ``GradeSystemSmartGradebookSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_grade_system_smart_gradebook()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemSmartGradebookSession``\n        :rtype: ``osid.grading.GradeSystemSmartGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_smart_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_smart_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemSmartGradebookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryLookupSession) - a\n                ``GradeEntryLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeEntryLookupSession``\n        :rtype: ``osid.grading.GradeEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeEntryLookupSession) - ``a\n                GradeEntryLookupSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryLookupSession``\n        :rtype: ``osid.grading.GradeEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuerySession) - a\n                ``GradeEntryQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeEntryQuerySession``\n        :rtype: ``osid.grading.GradeEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeEntryQuerySession) - ``a\n                GradeEntryQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryQuerySession``\n        :rtype: ``osid.grading.GradeEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchSession) - a\n                ``GradeEntrySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeEntrySearchSession``\n        :rtype: ``osid.grading.GradeEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntrySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchSession) - ``a\n                GradeEntrySearchSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntrySearchSession``\n        :rtype: ``osid.grading.GradeEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntrySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryAdminSession) - a\n                ``GradeEntryAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeEntryAdminSession``\n        :rtype: ``osid.grading.GradeEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeEntryAdminSession) - ``a\n                GradeEntryAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryAdminSession``\n        :rtype: ``osid.grading.GradeEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to grade entry changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    receiver (osid.grading.GradeEntryReceiver): the grade\n                entry receiver\n", 
               "return_doc": "        return: (osid.grading.GradeEntryNotificationSession) - a\n                ``GradeEntryNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param receiver: the grade entry receiver\n        :type receiver: ``osid.grading.GradeEntryReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntryNotificationSession``\n        :rtype: ``osid.grading.GradeEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryReceiver", 
                     "var_name": "receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryReceiver"
               ], 
               "return_type": "osid.grading.GradeEntryNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    receiver (osid.grading.GradeEntryReceiver): the grade\n                entry receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradeEntryNotificationSession) - ``a\n                _grade_entry_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``receiver`` or ``gradebook_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param receiver: the grade entry receiver\n        :type receiver: ``osid.grading.GradeEntryReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _grade_entry_notification_session``\n        :rtype: ``osid.grading.GradeEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``receiver`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryReceiver", 
                     "var_name": "receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnLookupSession) - a\n                ``GradebookColumnLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnLookupSession``\n        :rtype: ``osid.grading.GradebookColumnLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnLookupSession) - ``a\n                _gradebook_column_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_lookup_session``\n        :rtype: ``osid.grading.GradebookColumnLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuerySession) - a\n                ``GradebookColumnQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnQuerySession``\n        :rtype: ``osid.grading.GradebookColumnQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuerySession) - ``a\n                GradebookColumnQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradebookColumnQuerySession``\n        :rtype: ``osid.grading.GradebookColumnQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchSession) - a\n                ``GradebookColumnSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_search()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnSearchSession``\n        :rtype: ``osid.grading.GradebookColumnSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchSession) - ``a\n                _gradebook_column_search_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_search_session``\n        :rtype: ``osid.grading.GradebookColumnSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnAdminSession) - a\n                ``GradebookColumnAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnAdminSession``\n        :rtype: ``osid.grading.GradebookColumnAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnAdminSession) - ``a\n                GradebookColumnAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a GradebookColumnAdminSession``\n        :rtype: ``osid.grading.GradebookColumnAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to gradebook column changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_receiver\n                (osid.grading.GradebookColumnReceiver): the grade system\n                receiver\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnNotificationSession) - a\n                ``GradebookColumnNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_receiver: the grade system receiver\n        :type gradebook_column_receiver: ``osid.grading.GradebookColumnReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnNotificationSession``\n        :rtype: ``osid.grading.GradebookColumnNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnReceiver", 
                     "var_name": "gradebook_column_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnReceiver"
               ], 
               "return_type": "osid.grading.GradebookColumnNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_receiver\n                (osid.grading.GradebookColumnReceiver): the gradebook\n                column receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnNotificationSession) - ``a\n                _gradebook_column_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_column_receiver`` or\n                ``gradebook_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_gradebook_column_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_receiver: the gradebook column receiver\n        :type gradebook_column_receiver: ``osid.grading.GradebookColumnReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_notification_session``\n        :rtype: ``osid.grading.GradebookColumnNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_receiver`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnReceiver", 
                     "var_name": "gradebook_column_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for retrieving gradebook column to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnGradebookSession) - a\n                ``GradebookColumnGradebookSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_gradebook()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnGradebookSession``\n        :rtype: ``osid.grading.GradebookColumnGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnGradebookSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_gradebook_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning gradebook column to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnGradebookAssignmentSession)\n                - a ``GradebookColumnGradebookAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_gradebook_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnGradebookAssignmentSession``\n        :rtype: ``osid.grading.GradebookColumnGradebookAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_gradebook_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_gradebook_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnGradebookAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_smart_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for managing smart gradebooks of gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSmartGradebookSession) - a\n                ``GradebookColumnSmartGradebookSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_smart_gradebook()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnSmartGradebookSession``\n        :rtype: ``osid.grading.GradebookColumnSmartGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_smart_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_smart_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnSmartGradebookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookLookupSession) - a\n                ``GradebookLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_lookup() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookLookupSession``\n        :rtype: ``osid.grading.GradebookLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuerySession) - a\n                ``GradebookQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_query() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookQuerySession``\n        :rtype: ``osid.grading.GradebookQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookSearchSession) - a\n                ``GradebookSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_search() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookSearchSession``\n        :rtype: ``osid.grading.GradebookSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookAdminSession) - a\n                ``GradebookAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_admin() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookAdminSession``\n        :rtype: ``osid.grading.GradebookAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to gradebook service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_receiver (osid.grading.GradebookReceiver): the\n                gradebook receiver\n", 
               "return_doc": "        return: (osid.grading.GradebookNotificationSession) - a\n                ``GradebookNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_notification() is\n                false``", 
               "sphinx_param_doc": "        :param gradebook_receiver: the gradebook receiver\n        :type gradebook_receiver: ``osid.grading.GradebookReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookNotificationSession``\n        :rtype: ``osid.grading.GradebookNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookReceiver", 
                     "var_name": "gradebook_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookReceiver"
               ], 
               "return_type": "osid.grading.GradebookNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing gradebook hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookHierarchySession) - a\n                ``GradebookHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_hierarchy() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookHierarchySession``\n        :rtype: ``osid.grading.GradebookHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing gradebook hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookHierarchyDesignSession) - a\n                ``GradebookHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_hierarchy_design()\n                is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookHierarchyDesignSession``\n        :rtype: ``osid.grading.GradebookHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_batch_manager", 
               "doc": {
                  "headline": "Gets the ``GradingBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.batch.GradingBatchManager) - a\n                ``GradingBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingBatchManager``\n        :rtype: ``osid.grading.batch.GradingBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.batch.GradingBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_calculation_manager", 
               "doc": {
                  "headline": "Gets the ``GradingCalculationManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.calculation.GradingCalculationManager) - a\n                ``GradingCalculationManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_calculation() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingCalculationManager``\n        :rtype: ``osid.grading.calculation.GradingCalculationManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_calculation() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_calculation()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.calculation.GradingCalculationManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_transform_manager", 
               "doc": {
                  "headline": "Gets the ``GradingTransformManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.transform.GradingTransformManager) - a\n                ``GradingTransformManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_transform() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingTransformManager``\n        :rtype: ``osid.grading.transform.GradingTransformManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_transform() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_transform()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.transform.GradingTransformManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradingProxyManager", 
         "shortname": "GradingProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The grading manager provides access to grading sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager accept a ``Proxy`` for passing information\n    from server environments.The sessions included in this manager are:\n\n      * ``GradeSystemLookupSession:`` a session to look up grades and\n        grade systems\n      * ``GradeSystemQuerySession:`` a session to query grade systems\n        ``None``\n      * ``GradeSystemSearchSession:`` a session to search grade systems\n      * ``GradeSystemAdminSession:`` a session to manage grade systems\n      * ``GradeSystemNotificationSession`` a session for subscribing to\n        new or deleted grades or grade systems\n      * ``GradeSystemGradebookSession:`` a session for retrieving grade\n        system to gradebook mappings\n      * ``GradeSystemGradebookAssignmentSession:`` a session for\n        managing grade system to gradebook mappings\n      * ``GradeSystemSmartGradebookSession:`` a session for managing\n        smart gradebooks of grade systems\n    \n      * ``GradeEntryLookupSession:`` a session to look up grade entries\n      * ``GradeEntryQuerySession:`` a session to query grade entries\n        ``None``\n      * ``GradeEntrySearchSession:`` a session to search grade entries\n      * ``GradeEntryAdminSession:`` a session to create, modify and\n        delete grade entries ``None``\n      * ``GradeEntryNotificationSession: a`` session to receive messages\n        pertaining to grade entry ```` changes\n    \n      * ``GradebookColumnLookupSession:`` a session to look up gradebook\n        columns\n      * ``GradebookColumnQuerySession:`` a session to query gradebook\n        columns ``None``\n      * ``GradebookColumnSearchSession:`` a session to search gradebook\n        columns\n      * ``GradebookColumnAdminSession:`` a session to manage gradebook\n        columns\n      * ``GradebookColumnDerivationSession:`` a session to manage\n        derived gradebook columns\n      * ``GradebookColumnNotificationSession`` a session for subscribing\n        to new or deleted gradebook columns\n      * ``GradebookColumnGradebookSession:`` a session for retrieving\n        gradebook column to gradebook mappings\n      * ``GradebookColumnGradebookAssignmentSession:`` a session for\n        managing gradebook column to gradebook mappings\n      * ``GradebookColumnSmartGradebookSession:`` a session for managing\n        smart gradebooks of gradebook columns\n    \n      * ``GradebookLookupSession:`` a session to lookup gradebooks\n      * ``GradebookQuerySession:`` a session to query gradebooks\n      * ``GradebookSearchSession`` : a session to search gradebooks\n      * ``GradebookAdminSession`` : a session to create, modify and\n        delete gradebooks\n      * ``GradebookNotificationSession`` : a session to receive messages\n        pertaining to gradebook changes\n      * ``GradebookHierarchySession:`` a session to traverse the\n        gradebook hierarchy\n      * ``GradebookHierarchyDesignSession:`` a session to manage the\n        gradebook hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.grading.GradingProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "GradingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "grading", 
               "name": "GradingProfile"
            }
         ], 
         "method_names": [
            "get_grade_system_lookup_session", 
            "get_grade_system_lookup_session_for_gradebook", 
            "get_grade_system_query_session", 
            "get_grade_system_query_session_for_gradebook", 
            "get_grade_system_search_session", 
            "get_grade_system_search_session_for_gradebook", 
            "get_grade_system_admin_session", 
            "get_grade_system_admin_session_for_gradebook", 
            "get_grade_system_notification_session", 
            "get_grade_system_notification_session_for_gradebook", 
            "get_grade_system_gradebook_session", 
            "get_grade_system_gradebook_assignment_session", 
            "get_grade_system_smart_gradebook_session", 
            "get_grade_entry_lookup_session", 
            "get_grade_entry_lookup_session_for_gradebook", 
            "get_grade_entry_query_session", 
            "get_grade_entry_query_session_for_gradebook", 
            "get_grade_entry_search_session", 
            "get_grade_entry_search_session_for_gradebook", 
            "get_grade_entry_admin_session", 
            "get_grade_entry_admin_session_for_gradebook", 
            "get_grade_entry_notification_session", 
            "get_grade_entry_notification_session_for_gradebook", 
            "get_gradebook_column_lookup_session", 
            "get_gradebook_column_lookup_session_for_gradebook", 
            "get_gradebook_column_query_session", 
            "get_gradebook_column_query_session_for_gradebook", 
            "get_gradebook_column_search_session", 
            "get_gradebook_column_search_session_for_gradebook", 
            "get_gradebook_column_admin_session", 
            "get_gradebook_column_admin_session_for_gradebook", 
            "get_gradebook_column_notification_session", 
            "get_gradebook_column_notification_session_for_gradebook", 
            "get_gradebook_column_gradebook_session", 
            "get_gradebook_column_gradebook_assignment_session", 
            "get_gradebook_column_smart_gradebook_session", 
            "get_gradebook_lookup_session", 
            "get_gradebook_query_session", 
            "get_gradebook_search_session", 
            "get_gradebook_admin_session", 
            "get_gradebook_notification_session", 
            "get_gradebook_hierarchy_session", 
            "get_gradebook_hierarchy_design_session", 
            "get_grading_batch_proxy_manager", 
            "get_grading_calculation_proxy_manager", 
            "get_grading_transform_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_grade_system_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemLookupSession) - a\n                ``GradeSystemLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemLookupSession``\n        :rtype: ``osid.grading.GradeSystemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemLookupSession) - ``a\n                GradeSystemLookupSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemLookupSession``\n        :rtype: ``osid.grading.GradeSystemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemQuerySession) - a\n                ``GradeSystemQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemQuerySession``\n        :rtype: ``osid.grading.GradeSystemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemQuerySession) - ``a\n                GradeSystemQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemQuerySession``\n        :rtype: ``osid.grading.GradeSystemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchSession) - a\n                ``GradeSystemSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemSearchSession``\n        :rtype: ``osid.grading.GradeSystemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchSession) - ``a\n                GradeSystemSearchSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemSearchSession``\n        :rtype: ``osid.grading.GradeSystemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemAdminSession) - a\n                ``GradeSystemAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemAdminSession``\n        :rtype: ``osid.grading.GradeSystemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemAdminSession) - ``a\n                GradeSystemAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeSystemAdminSession``\n        :rtype: ``osid.grading.GradeSystemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to grade system changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_receiver\n                (osid.grading.GradeSystemReceiver): the grade system\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemNotificationSession) - a\n                ``GradeSystemNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``grade_system_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param grade_system_receiver: the grade system receiver\n        :type grade_system_receiver: ``osid.grading.GradeSystemReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemNotificationSession``\n        :rtype: ``osid.grading.GradeSystemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemReceiver", 
                     "var_name": "grade_system_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade system notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_receiver\n                (osid.grading.GradeSystemReceiver): the grade system\n                receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemNotificationSession) - ``a\n                _grade_system_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``grade_system_receiver, gradebook_id``\n                or ``porxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_system_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param grade_system_receiver: the grade system receiver\n        :type grade_system_receiver: ``osid.grading.GradeSystemReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _grade_system_notification_session``\n        :rtype: ``osid.grading.GradeSystemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_receiver, gradebook_id`` or ``porxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_system_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemReceiver", 
                     "var_name": "grade_system_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for retrieving grade system to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemGradebookSession) - a\n                ``GradeSystemGradebookSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_system_gradebook()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemGradebookSession``\n        :rtype: ``osid.grading.GradeSystemGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemGradebookSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_gradebook_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning grade system to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemGradebookSession) - a\n                ``GradeSystemGradebookAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_grade_system_gradebook_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemGradebookAssignmentSession``\n        :rtype: ``osid.grading.GradeSystemGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_gradebook_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_gradebook_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemGradebookSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_smart_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for managing smart gradebooks of grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSmartGradebookSession) - a\n                ``GradeSystemSmartGradebookSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_grade_system_smart_gradebook()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeSystemSmartGradebookSession``\n        :rtype: ``osid.grading.GradeSystemSmartGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_system_smart_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_smart_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeSystemSmartGradebookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryLookupSession) - a\n                ``GradeEntryLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntryLookupSession``\n        :rtype: ``osid.grading.GradeEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryLookupSession) - ``a\n                GradeEntryLookupSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryLookupSession``\n        :rtype: ``osid.grading.GradeEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryQuerySession) - a\n                ``GradeEntryQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntryQuerySession``\n        :rtype: ``osid.grading.GradeEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryQuerySession) - ``a\n                GradeEntryQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryQuerySession``\n        :rtype: ``osid.grading.GradeEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchSession) - a\n                ``GradeEntrySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntrySearchSession``\n        :rtype: ``osid.grading.GradeEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntrySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchSession) - ``a\n                GradeEntrySearchSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntrySearchSession``\n        :rtype: ``osid.grading.GradeEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntrySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryAdminSession) - a\n                ``GradeEntryAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntryAdminSession``\n        :rtype: ``osid.grading.GradeEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryAdminSession) - ``a\n                GradeEntryAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradeEntryAdminSession``\n        :rtype: ``osid.grading.GradeEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to grade entry changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_receiver (osid.grading.GradeEntryReceiver):\n                the grade entry receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryNotificationSession) - a\n                ``GradeEntryNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grade_entry_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param grade_entry_receiver: the grade entry receiver\n        :type grade_entry_receiver: ``osid.grading.GradeEntryReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradeEntryNotificationSession``\n        :rtype: ``osid.grading.GradeEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryReceiver", 
                     "var_name": "grade_entry_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the grade entry notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_receiver (osid.grading.GradeEntryReceiver):\n                the grade entry receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradeEntryNotificationSession) - ``a\n                _grade_entry_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``grade_entry_receiver, gradebook_id`` or\n                ``porxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_grade_entry_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param grade_entry_receiver: the grade entry receiver\n        :type grade_entry_receiver: ``osid.grading.GradeEntryReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _grade_entry_notification_session``\n        :rtype: ``osid.grading.GradeEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``grade_entry_receiver, gradebook_id`` or ``porxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_grade_entry_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryReceiver", 
                     "var_name": "grade_entry_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradeEntryNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnLookupSession) - a\n                ``GradebookColumnLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnLookupSession``\n        :rtype: ``osid.grading.GradebookColumnLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_lookup_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column lookup service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnLookupSession) - ``a\n                _gradebook_column_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_lookup_session``\n        :rtype: ``osid.grading.GradebookColumnLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuerySession) - a\n                ``GradebookColumnQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnQuerySession``\n        :rtype: ``osid.grading.GradebookColumnQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column query service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuerySession) - a\n                ``GradebookColumnQuerySession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnQuerySession``\n        :rtype: ``osid.grading.GradebookColumnQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchSession) - a\n                ``GradebookColumnSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_search()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnSearchSession``\n        :rtype: ``osid.grading.GradebookColumnSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column search service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchSession) - ``a\n                _gradebook_column_search_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_search_session``\n        :rtype: ``osid.grading.GradebookColumnSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnAdminSession) - a\n                ``GradebookColumnAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnAdminSession``\n        :rtype: ``osid.grading.GradebookColumnAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_admin_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column admin service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnAdminSession) - ``a\n                GradebookColumnAdminSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_gradebook_column_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a GradebookColumnAdminSession``\n        :rtype: ``osid.grading.GradebookColumnAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to gradebook column changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_receiver\n                (osid.grading.GradebookColumnReceiver): the grade system\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnNotificationSession) - a\n                ``GradebookColumnNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_receiver: the grade system receiver\n        :type gradebook_column_receiver: ``osid.grading.GradebookColumnReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnNotificationSession``\n        :rtype: ``osid.grading.GradebookColumnNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnReceiver", 
                     "var_name": "gradebook_column_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_notification_session_for_gradebook", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the gradebook column notification service for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_receiver\n                (osid.grading.GradebookColumnReceiver): the gradebook\n                column receiver\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnNotificationSession) - ``a\n                _gradebook_column_notification_session``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_column_receiver,\n                gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_gradebook_column_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_receiver: the gradebook column receiver\n        :type gradebook_column_receiver: ``osid.grading.GradebookColumnReceiver``\n        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``a _gradebook_column_notification_session``\n        :rtype: ``osid.grading.GradebookColumnNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_receiver, gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnReceiver", 
                     "var_name": "gradebook_column_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for retrieving gradebook column to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnGradebookSession) - a\n                ``GradebookColumnGradebookSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_gradebook()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnGradebookSession``\n        :rtype: ``osid.grading.GradebookColumnGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnGradebookSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_gradebook_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning gradebook column to gradebook mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnGradebookAssignmentSession)\n                - a ``GradebookColumnGradebookAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_gradebook_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnGradebookAssignmentSession``\n        :rtype: ``osid.grading.GradebookColumnGradebookAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_gradebook_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_gradebook_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnGradebookAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_smart_gradebook_session", 
               "doc": {
                  "headline": "Gets the session for managing smart gradebooks of gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSmartGradebookSession) - a\n                ``GradebookColumnSmartGradebookSession``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_gradebook_column_smart_gradebook()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookColumnSmartGradebookSession``\n        :rtype: ``osid.grading.GradebookColumnSmartGradebookSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_column_smart_gradebook()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_smart_gradebook()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookColumnSmartGradebookSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookLookupSession) - a\n                ``GradebookLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_lookup() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookLookupSession``\n        :rtype: ``osid.grading.GradebookLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookQuerySession) - a\n                ``GradebookQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_query() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookQuerySession``\n        :rtype: ``osid.grading.GradebookQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookSearchSession) - a\n                ``GradebookSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_search() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookSearchSession``\n        :rtype: ``osid.grading.GradebookSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the gradebook administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookAdminSession) - a\n                ``GradebookAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_admin() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookAdminSession``\n        :rtype: ``osid.grading.GradebookAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to gradebook service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_receiver (osid.grading.GradebookReceiver): the\n                gradebook receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookNotificationSession) - a\n                ``GradebookNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_notification() is\n                false``", 
               "sphinx_param_doc": "        :param gradebook_receiver: the gradebook receiver\n        :type gradebook_receiver: ``osid.grading.GradebookReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookNotificationSession``\n        :rtype: ``osid.grading.GradebookNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookReceiver", 
                     "var_name": "gradebook_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing gradebook hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookHierarchySession) - a\n                ``GradebookHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_hierarchy() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookHierarchySession``\n        :rtype: ``osid.grading.GradebookHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing gradebook hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.grading.GradebookHierarchyDesignSession) - a\n                ``GradebookHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_hierarchy_design()\n                is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``GradebookHierarchyDesignSession``\n        :rtype: ``osid.grading.GradebookHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_gradebook_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.grading.GradebookHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``GradingBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.batch.GradingBatchProxyManager) - a\n                ``GradingBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingBatchProxyManager``\n        :rtype: ``osid.grading.batch.GradingBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.batch.GradingBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_calculation_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``GradingCalculationProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.grading.calculation.GradingCalculationProxyManager\n                ) - a ``GradingCalculationProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_calculation() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingCalculationProxyManager``\n        :rtype: ``osid.grading.calculation.GradingCalculationProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_calculation() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_calculation()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.calculation.GradingCalculationProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_transform_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``GradingTransformProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.transform.GradingTransformProxyManager) -\n                a ``GradingTransformManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_grading_transform() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradingTransformManager``\n        :rtype: ``osid.grading.transform.GradingTransformProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_grading_transform() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_transform()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.transform.GradingTransformProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemLookupSession", 
         "shortname": "GradeSystemLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "The session defines methods for retrieving ``Grades`` and ``GradeSystems``.", 
            "body": "    A Grade represents a qualified ranking defined in some grade system.\n\n    Two views are defined in this session:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * federated gradebook view: lookups include grade systems from\n        this gradebook and other gradebooks which are children of this\n        gradebook in the gradebook hierarchy\n      * isolated gradebook view: lookups include only those grade\n        systems defined in this gradebook\n\n    \n    Grades and grade systems may have an additional records indicated by\n    their respective record types. The record may not be accessed\n    through a cast of the object."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_lookup_grade_systems", 
            "use_comparative_grade_system_view", 
            "use_plenary_grade_system_view", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "get_grade_system", 
            "get_grade_system_by_grade", 
            "get_grade_systems_by_ids", 
            "get_grade_systems_by_genus_type", 
            "get_grade_systems_by_parent_genus_type", 
            "get_grade_systems_by_record_type", 
            "get_grade_systems"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``GradeSystem``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``GradeSystem Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``GradeSystem Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_grade_systems", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradeSystem`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_grade_system_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_grade_system_view", 
               "doc": {
                  "headline": "A complete view of the ``GradeSystem`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include grade entries in gradebooks which\n        are children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system", 
               "doc": {
                  "headline": "Gets the ``GradeSystem`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``GradeSystem`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``GradeSystem`` and retained\n        for compatibility."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): ``Id`` of the\n                ``GradeSystem``\n", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` not found\n        raise:  NullArgument - ``grade_system_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: ``Id`` of the ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_system_by_grade", 
               "doc": {
                  "headline": "Gets the ``GradeSystem`` by a ``Grade``  ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): ``Id`` of a ``Grade``\n", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "        raise:  NotFound - ``grade_id`` not found\n        raise:  NullArgument - ``grade_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_id: ``Id`` of a ``Grade``\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_id`` not found\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_ids", 
               "doc": {
                  "headline": "Gets a ``GradeSystemList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the systems\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``GradeSystems`` may be omitted from the list and\n        may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    grade_system_ids (osid.id.IdList): the list of ``Ids``\n                to retrieve\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the returned\n                ``GradeSystem`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``grade_system_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_ids: the list of ``Ids`` to retrieve\n        :type grade_system_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeSystem`` list\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``grade_system_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "grade_system_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradeSystemList`` corresponding to the given grade system genus ``Type`` which does not include systems of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known systems or\n        an error results. Otherwise, the returned list may contain only\n        those systems that are accessible through this session."
               }, 
               "arg_doc": "        arg:    grade_system_genus_type (osid.type.Type): a grade system\n                genus type\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the returned\n                ``GradeSystem`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_system_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_genus_type: a grade system genus type\n        :type grade_system_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeSystem`` list\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradeSystemList`` corresponding to the given grade system genus ``Type`` and include any additional systems with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known systems or\n        an error results. Otherwise, the returned list may contain only\n        those systems that are accessible through this session."
               }, 
               "arg_doc": "        arg:    grade_system_genus_type (osid.type.Type): a grade system\n                genus type\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the returned\n                ``GradeSystem`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_system_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_genus_type: a grade system genus type\n        :type grade_system_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeSystem`` list\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_record_type", 
               "doc": {
                  "headline": "Gets a ``GradeSystemList`` containing the given grade record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known systems or\n        an error results. Otherwise, the returned list may contain only\n        those systems that are accessible through this session."
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): a grade\n                system record type\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the returned\n                ``GradeSystem`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_system_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_record_type: a grade system record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeSystem`` list\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems", 
               "doc": {
                  "headline": "Gets all ``GradeSystems``.", 
                  "body": "        In plenary mode, the returned list contains all known grade\n        systems or an error results. Otherwise, the returned list may\n        contain only those grade systems that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - a ``GradeSystemList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeSystemList``\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemQuerySession", 
         "shortname": "GradeSystemQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``GradeSystems``.", 
            "body": "    The search query is constructed using the ``GradeSystemQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include grade systems in\n        gradebooks of which this gradebook is a ancestor in the\n        gradebook hierarchy\n      * isolated gradebook view: searches are restricted to grade\n        systems in this gradebook\n\n    \n    Grade systems may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradeSystemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_search_grade_systems", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "get_grade_system_query", 
            "get_grade_systems_by_query"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_grade_systems", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradeSystem`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include grades in gradebooks which are\n        children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets a grade system query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - a grade system query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {}
            }, 
            {
               "name": "get_grade_systems_by_query", 
               "doc": {
                  "headline": "Gets a list of ``GradeSystem`` objects matching the given grade system query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_query (osid.grading.GradeSystemQuery): the\n                grade system query\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the returned\n                ``GradeSystemList``", 
               "error_doc": "        raise:  NullArgument - ``grade_system_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_system_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param grade_system_query: the grade system query\n        :type grade_system_query: ``osid.grading.GradeSystemQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeSystemList``\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_system_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemQuery", 
                     "var_name": "grade_system_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemQuery"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemSearchSession", 
         "shortname": "GradeSystemSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``GradeSystems``.", 
            "body": "    The search query is constructed using the ``GradeSystemQuery``.\n\n    ``get_grade_systems_by_query()`` is the basic search method and\n    returns a list of ``GradeSystems``. A more advanced search may be\n    performed with ``getGradeSystemsBySearch()``. It accepts a\n    ``GradeSystemSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_grade_systems_by_search()`` returns a\n    ``GradeSystemSearchResults`` that can be used to access the\n    resulting ``GradeSystemList`` or be used to perform a search within\n    the result set through ``GradeSystemSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include grade systems in\n        gradebooks of which this gradebook is a ancestor in the\n        gradebook hierarchy\n      * isolated gradebook view: searches are restricted to grade\n        systems in this gradebook\n\n    \n    Grade systems may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradeSystemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.grading.GradeSystemQuerySession"
         ], 
         "inherit_shortnames": [
            "GradeSystemQuerySession"
         ], 
         "inherit_pkg_names": [
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "grading", 
               "name": "GradeSystemQuerySession"
            }
         ], 
         "method_names": [
            "get_grade_system_search", 
            "get_grade_system_search_order", 
            "get_grade_systems_by_search", 
            "get_grade_system_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_grade_system_search", 
               "doc": {
                  "headline": "Gets a grade system search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearch) - a grade system search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade system search\n        :rtype: ``osid.grading.GradeSystemSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearch", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_order", 
               "doc": {
                  "headline": "Gets a grade system search order.", 
                  "body": "        The ``GradeSystemSearchOrder`` is supplied to a\n        ``GradeSystemSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - the grade system\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_grade_systems_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_query (osid.grading.GradeSystemQuery): the\n                grade system query\n        arg:    grade_system_search (osid.grading.GradeSystemSearch):\n                the grade system search\n", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchResults) - the grade\n                system search results", 
               "error_doc": "        raise:  NullArgument - ``grade_system_query`` or\n                ``grade_system_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_system_query`` or\n                ``grade_system_search`` is not of this service", 
               "sphinx_param_doc": "        :param grade_system_query: the grade system query\n        :type grade_system_query: ``osid.grading.GradeSystemQuery``\n        :param grade_system_search: the grade system search\n        :type grade_system_search: ``osid.grading.GradeSystemSearch``\n", 
               "sphinx_return_doc": "        :return: the grade system search results\n        :rtype: ``osid.grading.GradeSystemSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_query`` or ``grade_system_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_system_query`` or ``grade_system_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemQuery", 
                     "var_name": "grade_system_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.grading.GradeSystemSearch", 
                     "var_name": "grade_system_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemQuery", 
                  "osid.grading.GradeSystemSearch"
               ], 
               "return_type": "osid.grading.GradeSystemSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_from_inspector", 
               "doc": {
                  "headline": "Gets a grade system query from an inspector.", 
                  "body": "        The inspector is available from an ``GradeSystemSearchResults``."
               }, 
               "arg_doc": "        arg:    grade_system_query_inspector\n                (osid.grading.GradeSystemQueryInspector): a grade system\n                query inspector\n", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  NullArgument - ``grade_system_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``grade_system_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param grade_system_query_inspector: a grade system query inspector\n        :type grade_system_query_inspector: ``osid.grading.GradeSystemQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``grade_system_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemQueryInspector", 
                     "var_name": "grade_system_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemQueryInspector"
               ], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemAdminSession", 
         "shortname": "GradeSystemAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``GradeSystems``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``GradeSystem,`` a ``GradeSystemForm`` is requested using\n    ``get_grade_system_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``GradeSystemForm`` will indicate that it is to be used with a\n    create operation and can be used to examine metdata or validate data\n    prior to creation. Once the ``GradeSystemForm`` is submiited to a\n    create operation, it cannot be reused with another create operation\n    unless the first operation was unsuccessful. Each\n    ``GradeSystemForm`` corresponds to an attempted transaction.\n    \n    For updates, ``GradeSystemForms`` are requested to the\n    ``GradeSystem``  ``Id`` that is to be updated using\n    ``getGradeSystemFormForUpdate()``. Similarly, the\n    ``GradeSystemForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``GradeSystemForm`` can only be used once for a successful update\n    and cannot be reused.\n    \n    The delete operations delete ``GradeSystems`` To unmap a\n    ``GradeSystem`` from the current ``Gradebook,`` the\n    ``GradeSystemGradebookAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``GradeSystem`` itself thus\n    removing it from all known ``Gradebook`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_create_grade_systems", 
            "can_create_grade_system_with_record_types", 
            "get_grade_system_form_for_create", 
            "create_grade_system", 
            "can_update_grade_systems", 
            "get_grade_system_form_for_update", 
            "update_grade_system", 
            "can_delete_grade_systems", 
            "delete_grade_system", 
            "can_manage_grade_system_aliases", 
            "alias_grade_system", 
            "can_create_grades", 
            "can_create_grade_with_record_types", 
            "get_grade_form_for_create", 
            "create_grade", 
            "can_update_grades", 
            "get_grade_form_for_update", 
            "update_grade", 
            "can_delete_grades", 
            "delete_grade", 
            "can_manage_grade_aliases", 
            "alias_grade"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_grade_systems", 
               "doc": {
                  "headline": "Tests if this user can create ``GradeSystems``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``GradeSystem`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeSystem`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeSystem`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_grade_system_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``GradeSystem`` using the desired record types.", 
                  "body": "        While ``GradingManager.getGradeSystemRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``GradeSystem``.\n        Providing an empty array tests if a ``GradeSystem`` can be\n        created with no records."
               }, 
               "arg_doc": "        arg:    grade_system_record_types (osid.type.Type[]): array of\n                grade system types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``GradeSystem`` creation using\n                the specified ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_record_types: array of grade system types\n        :type grade_system_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``GradeSystem`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_system_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_form_for_create", 
               "doc": {
                  "headline": "Gets the grade system form for creating new grade systems.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    grade_system_record_types (osid.type.Type[]): array of\n                grade system types\n", 
               "return_doc": "        return: (osid.grading.GradeSystemForm) - the grade system form", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param grade_system_record_types: array of grade system types\n        :type grade_system_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the grade system form\n        :rtype: ``osid.grading.GradeSystemForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_system_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradeSystemForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_grade_system", 
               "doc": {
                  "headline": "Creates a new ``GradeSystem``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_form (osid.grading.GradeSystemForm): the\n                form for this ``GradeSystem``\n", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the new ``GradeSystem``", 
               "error_doc": "        raise:  IllegalState - ``grade_system_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``grade_system_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_system_form`` did not originate\n                from ``get_grade_system_form_for_create()``", 
               "sphinx_param_doc": "        :param grade_system_form: the form for this ``GradeSystem``\n        :type grade_system_form: ``osid.grading.GradeSystemForm``\n", 
               "sphinx_return_doc": "        :return: the new ``GradeSystem``\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_system_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``grade_system_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_system_form`` did not originate from ``get_grade_system_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemForm", 
                     "var_name": "grade_system_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemForm"
               ], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_grade_systems", 
               "doc": {
                  "headline": "Tests if this user can update ``GradeSystems``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``GradeSystem`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeSystem`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeSystem`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_form_for_update", 
               "doc": {
                  "headline": "Gets the grade system form for updating an existing grade system.", 
                  "body": "        A new grade system form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the\n                ``GradeSystem``\n", 
               "return_doc": "        return: (osid.grading.GradeSystemForm) - the grade system form", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` is not found\n        raise:  NullArgument - ``grade_system_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade system form\n        :rtype: ``osid.grading.GradeSystemForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_grade_system", 
               "doc": {
                  "headline": "Updates an existing grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_form (osid.grading.GradeSystemForm): the\n                form containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``grade_system_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``grade_system_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_system_form`` did not originate\n                from ``get_grade_system_form_for_update()``", 
               "sphinx_param_doc": "        :param grade_system_form: the form containing the elements to be updated\n        :type grade_system_form: ``osid.grading.GradeSystemForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_system_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``grade_system_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_system_form`` did not originate from ``get_grade_system_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemForm", 
                     "var_name": "grade_system_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_grade_systems", 
               "doc": {
                  "headline": "Tests if this user can delete grade systems.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``GradeSystem`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeSystem`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeSystem`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_grade_system", 
               "doc": {
                  "headline": "Deletes a ``GradeSystem``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the\n                ``GradeSystem`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` not found\n        raise:  NullArgument - ``grade_system_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the ``GradeSystem`` to remove\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_grade_system_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``GradeSystems``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeSystem`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeSystem`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_grade_system", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``GradeSystem`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``GradeSystem`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another grade system, it is\n        reassigned to the given grade system ``Id``."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``grade_system_id`` not found\n        raise:  NullArgument - ``grade_system_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``grade_system_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_grades", 
               "doc": {
                  "headline": "Tests if this user can create ``Grade`` s for a ``GradeSystem``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``GradeSystem`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n", 
               "return_doc": "        return: (boolean) - ``false`` if ``Grade`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if ``Grade`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "can_create_grade_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Grade`` using the desired record types.", 
                  "body": "        While ``GradingManager.getGradeRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Grade``.\n        Providing an empty array tests if a ``Grade`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n        arg:    grade_record_types (osid.type.Type[]): array of grade\n                recod types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Grade`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` or\n                ``grade_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n        :param grade_record_types: array of grade recod types\n        :type grade_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Grade`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` or ``grade_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_form_for_create", 
               "doc": {
                  "headline": "Gets the grade form for creating new grades.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n        arg:    grade_record_types (osid.type.Type[]): array of grade\n                recod types\n", 
               "return_doc": "        return: (osid.grading.GradeForm) - the grade form", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` is not found\n        raise:  NullArgument - ``grade_system_id`` or\n                ``grade_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n        :param grade_record_types: array of grade recod types\n        :type grade_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the grade form\n        :rtype: ``osid.grading.GradeForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` or ``grade_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradeForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_grade", 
               "doc": {
                  "headline": "Creates a new ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_form (osid.grading.GradeForm): the form for this\n                ``Grade``\n", 
               "return_doc": "        return: (osid.grading.Grade) - the new ``Grade``", 
               "error_doc": "        raise:  IllegalState - ``grade_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``grade_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_form`` did not originate from\n                ``get_grade_form_for_create()``", 
               "sphinx_param_doc": "        :param grade_form: the form for this ``Grade``\n        :type grade_form: ``osid.grading.GradeForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Grade``\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``grade_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_form`` did not originate from ``get_grade_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeForm", 
                     "var_name": "grade_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeForm"
               ], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_grades", 
               "doc": {
                  "headline": "Tests if this user can update ``Grades``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Grade``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n", 
               "return_doc": "        return: (boolean) - ``false`` if ``Grade`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if ``Grade`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_form_for_update", 
               "doc": {
                  "headline": "Gets the grade form for updating an existing grade.", 
                  "body": "        A new grade form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the ``Id`` of the ``Grade``\n", 
               "return_doc": "        return: (osid.grading.GradeForm) - the grade form", 
               "error_doc": "        raise:  NotFound - ``grade_id`` is not found\n        raise:  NullArgument - ``grade_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_id: the ``Id`` of the ``Grade``\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade form\n        :rtype: ``osid.grading.GradeForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_grade", 
               "doc": {
                  "headline": "Updates an existing grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_form (osid.grading.GradeForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``grade_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``grade_id`` or ``grade_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_form`` did not originate from\n                ``get_grade_form_for_update()``", 
               "sphinx_param_doc": "        :param grade_form: the form containing the elements to be updated\n        :type grade_form: ``osid.grading.GradeForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``grade_id`` or ``grade_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_form`` did not originate from ``get_grade_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeForm", 
                     "var_name": "grade_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_grades", 
               "doc": {
                  "headline": "Tests if this user can delete grades.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Grade``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of a\n                ``GradeSystem``\n", 
               "return_doc": "        return: (boolean) - ``false`` if ``Grade`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if ``Grade`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "delete_grade", 
               "doc": {
                  "headline": "Deletes a ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the ``Id`` of the ``Grade`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``grade_id`` not found\n        raise:  NullArgument - ``grade_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_id: the ``Id`` of the ``Grade`` to remove\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_id`` not found\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_grade_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Grades``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Grade`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Grade`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_grade", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Grade`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Grade`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another grade, it is\n        reassigned to the given grade ``Id``."
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the ``Id`` of a ``Grade``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``grade_id`` not found\n        raise:  NullArgument - ``grade_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_id: the ``Id`` of a ``Grade``\n        :type grade_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``grade_id`` not found\n        :raise: ``NullArgument`` -- ``grade_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemNotificationSession", 
         "shortname": "GradeSystemNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``GradeSystems`` and the Grades defined within.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_register_for_grade_system_notifications", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "register_for_new_grade_systems", 
            "register_for_changed_grade_systems", 
            "register_for_changed_grade_system", 
            "register_for_deleted_grade_systems", 
            "register_for_deleted_grade_system"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_grade_system_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``GradeSystem`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for grade systems in\n        gradebooks which are children of this gradebook in the gradebook\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_grade_systems", 
               "doc": {
                  "headline": "Register for notifications of new grade systems.", 
                  "body": "        ``GradeSystemReceiver.newGradeSystem()`` is invoked when a new\n        ``GradeSystem`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_systems", 
               "doc": {
                  "headline": "Registers for notification of updated grade systems.", 
                  "body": "        ``GradeSystemReceiver.changedGradeSystem()`` is invoked when a\n        system is changed or grades are changed within it."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_system", 
               "doc": {
                  "headline": "Registers for notification of an updated grade system.", 
                  "body": "        ``GradeSystemReceiver.changedGradeSystem()`` is invoked when the\n        specified grade system is changed or grades are changed within\n        it."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the grade\n                system to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the grade system to monitor\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_systems", 
               "doc": {
                  "headline": "Registers for notification of deleted grade systems.", 
                  "body": "        ``GradeSystemReceiver.deletedGradeSystem()`` is invoked when a\n        grade system is removed from this gradebook."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_system", 
               "doc": {
                  "headline": "Registers for notification of a deleted grade system.", 
                  "body": "        ``GradeSystemReceiver.deletedGradeSystem()`` is invoked when the\n        specified system is removed from this gradebook."
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the grade\n                system to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the grade system to monitor\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemGradebookSession", 
         "shortname": "GradeSystemGradebookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``GradeSystem`` to ``Gradebook`` mappings.", 
            "body": "    A ``GradeSystem`` may appear in multiple ``Gradebooks``. Each\n    ``Gradebook`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "use_comparative_gradebook_view", 
            "use_plenary_gradebook_view", 
            "can_lookup_grade_system_gradebook_mappings", 
            "get_grade_system_ids_by_gradebook", 
            "get_grade_systems_by_gradebook", 
            "get_grade_system_ids_by_gradebooks", 
            "get_grade_systems_by_gradebooks", 
            "get_gradebook_ids_by_grade_system", 
            "get_gradebooks_by_grade_system"
         ], 
         "methods": [
            {
               "name": "use_comparative_gradebook_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_gradebook_view", 
               "doc": {
                  "headline": "A complete view of the ``GradebookColumn`` and ``Gradebook`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_lookup_grade_system_gradebook_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of gradebook/grade system mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_ids_by_gradebook", 
               "doc": {
                  "headline": "Gets the list of ``GradeSystem``  ``Ids`` associated with a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): ``Id`` of the ``Gradebook``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related grade system ``Ids``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related grade system ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_gradebook", 
               "doc": {
                  "headline": "Gets the list of grade systems associated with a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): ``Id`` of the ``Gradebook``\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - list of related grade\n                systems", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related grade systems\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_system_ids_by_gradebooks", 
               "doc": {
                  "headline": "Gets the list of ``GradeSystem Ids`` corresponding to a list of ``Gradebooks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): list of gradebook\n                ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of grade systems ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_ids: list of gradebook ``Ids``\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of grade systems ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_systems_by_gradebooks", 
               "doc": {
                  "headline": "Gets the list of grade systems corresponding to a list of ``Gradebooks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): list of gradebook\n                ``Ids``\n", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - list of grade systems", 
               "error_doc": "        raise:  NullArgument - ``gradebook_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_ids: list of gradebook ``Ids``\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of grade systems\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_ids_by_grade_system", 
               "doc": {
                  "headline": "Gets the list of ``Gradebook``  ``Ids`` mapped to a ``GradeSystem``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): ``Id`` of a\n                ``GradeSystem``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of gradebook ``Ids``", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` is not found\n        raise:  NullArgument - ``grade_system_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_grade_system", 
               "doc": {
                  "headline": "Gets the list of ``Gradebooks`` mapped to a ``GradeSystem``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): ``Id`` of a\n                ``GradeSystem``\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - list of gradebooks", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` is not found\n        raise:  NullArgument - ``grade_system_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: ``Id`` of a ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of gradebooks\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemGradebookAssignmentSession", 
         "shortname": "GradeSystemGradebookAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign grade systems to ``Gradebooks``.", 
            "body": "    A ``GradeSystem`` may map to multiple ``Gradebooks`` and removing\n    the last reference to a ``GradeSystem`` is the equivalent of\n    deleting it. Each ``Gradebook`` may have its own authorizations\n    governing who is allowed to operate on it.\n\n    Moving or adding a reference of a ``GradeSystem`` to another\n    ``Gradebook`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_grade_system", 
            "can_assign_grade_systems_to_gradebook", 
            "get_assignable_gradebook_ids", 
            "get_assignable_gradebook_ids_for_grade_system", 
            "assign_grade_system_to_gradebook", 
            "unassign_grade_system_from_gradebook"
         ], 
         "methods": [
            {
               "name": "can_assign_grade_system", 
               "doc": {
                  "headline": "Tests if this user can alter grade system/gradebook mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_grade_systems_to_gradebook", 
               "doc": {
                  "headline": "Tests if this user can alter grade system/gradebook mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_gradebook_ids", 
               "doc": {
                  "headline": "Gets a list of gradebooks including and under the given gradebook node in which any grade system can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable gradebook ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_gradebook_ids_for_grade_system", 
               "doc": {
                  "headline": "Gets a list of gradebooks including and under the given gradebook node in which a specific grade system can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    grade_system_id (osid.id.Id): the ``Id`` of the\n                ``GradeSystem``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable gradebook ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` or ``grade_system_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param grade_system_id: the ``Id`` of the ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` or ``grade_system_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_grade_system_to_gradebook", 
               "doc": {
                  "headline": "Adds an existing ``GradeSystem`` to a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the\n                ``GradeSystem``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``grade_system_id`` is already assigned\n                to ``gradebook_id``\n        raise:  NotFound - ``grade_system_id`` or ``gradebook_id`` not\n                found\n        raise:  NullArgument - ``grade_system_id`` or ``gradebook_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``grade_system_id`` is already assigned to ``gradebook_id``\n        :raise: ``NotFound`` -- ``grade_system_id`` or ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``grade_system_id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_grade_system_from_gradebook", 
               "doc": {
                  "headline": "Removes a ``GradeSystem`` from a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the\n                ``GradeSystem``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``grade_system_id`` or ``gradebook_id`` not\n                found or ``grade_system_id`` not assigned to\n                ``gradebook_id``\n        raise:  NullArgument - ``grade_system_id`` or ``gradebook_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_system_id`` or ``gradebook_id`` not found or ``grade_system_id`` not assigned to ``gradebook_id``\n        :raise: ``NullArgument`` -- ``grade_system_id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemSmartGradebookSession", 
         "shortname": "GradeSystemSmartGradebookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``GradeSystemQuery`` can be retrieved from this session and mapped\n    to this ``Gradebook`` to create a virtual collection of\n    ``GradeSystems``. The entries may be sequenced using the\n    ``GradeSystemSearchOrder`` from this session.\n\n    This ``Gradebook`` has a default query that matches any grade system\n    and a default search order that specifies no sequencing. The queries\n    may be examined using a ``GradeSystemQueryInspector``. The query may\n    be modified by converting the inspector back to a\n    ``GradeSystemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_manage_smart_gradebooks", 
            "get_grade_system_query", 
            "get_grade_system_search_order", 
            "apply_grade_system_query", 
            "inspect_grade_system_query", 
            "apply_grade_system_sequencing", 
            "get_grade_system_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can manage smart gradebooks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart gradebook methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart gradebook methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets a grade system query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_order", 
               "doc": {
                  "headline": "Gets a grade system search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - the grade system\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_grade_system_query", 
               "doc": {
                  "headline": "Applies a grade system query to this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_query (osid.grading.GradeSystemQuery): the\n                grade system query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``grade_system_query`` not of this service", 
               "sphinx_param_doc": "        :param grade_system_query: the grade system query\n        :type grade_system_query: ``osid.grading.GradeSystemQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``grade_system_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemQuery", 
                     "var_name": "grade_system_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_grade_system_query", 
               "doc": {
                  "headline": "Gets a grade system query inspector for this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query inspector\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_grade_system_sequencing", 
               "doc": {
                  "headline": "Applies a grade system search order to this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_search_order\n                (osid.grading.GradeSystemSearchOrder): the grade system\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``grade_system_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param grade_system_search_order: the grade system search order\n        :type grade_system_search_order: ``osid.grading.GradeSystemSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``grade_system_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemSearchOrder", 
                     "var_name": "grade_system_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_from_inspector", 
               "doc": {
                  "headline": "Gets a grade system query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_query_inspector\n                (osid.grading.GradeSystemQueryInspector): a grade system\n                query inspector\n", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  NullArgument - ``grade_system_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``grade_system_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param grade_system_query_inspector: a grade system query inspector\n        :type grade_system_query_inspector: ``osid.grading.GradeSystemQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``grade_system_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemQueryInspector", 
                     "var_name": "grade_system_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemQueryInspector"
               ], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntryLookupSession", 
         "shortname": "GradeEntryLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``GradeEntrie`` s.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_lookup_grade_entries", 
            "use_comparative_grade_entry_view", 
            "use_plenary_grade_entry_view", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "use_effective_grade_entry_view", 
            "use_any_effective_grade_entry_view", 
            "get_grade_entry", 
            "get_grade_entries_by_ids", 
            "get_grade_entries_by_genus_type", 
            "get_grade_entries_by_parent_genus_type", 
            "get_grade_entries_by_record_type", 
            "get_grade_entries_on_date", 
            "get_grade_entries_for_gradebook_column", 
            "get_grade_entries_for_gradebook_column_on_date", 
            "get_grade_entries_for_resource", 
            "get_grade_entries_for_resource_on_date", 
            "get_grade_entries_for_gradebook_column_and_resource", 
            "get_grade_entries_for_gradebook_column_and_resource_on_date", 
            "get_grade_entries_by_grader", 
            "get_grade_entries"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradeEntry`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_grade_entry_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_grade_entry_view", 
               "doc": {
                  "headline": "A complete view of the ``GradeEntry`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include grade entries in gradebooks which\n        are children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_grade_entry_view", 
               "doc": {
                  "headline": "Only grade entries whose effective dates are current are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_grade_entry_view", 
               "doc": {
                  "headline": "All grade entries of any effective dates are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry", 
               "doc": {
                  "headline": "Gets the ``GradeEntry`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): ``Id`` of the\n                ``GradeEntry``\n", 
               "return_doc": "        return: (osid.grading.GradeEntry) - the grade entry", 
               "error_doc": "        raise:  NotFound - ``grade_entry_id`` not found\n        raise:  NullArgument - ``grade_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: ``Id`` of the ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade entry\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_entry_id`` not found\n        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_by_ids", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``grade_entry_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_ids: the list of ``Ids`` to retrieve\n        :type grade_entry_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``grade_entry_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "grade_entry_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` corresponding to the given grade entry genus ``Type`` which does not include grade entries of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_genus_type (osid.type.Type): a grade entry\n                genus type\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_genus_type: a grade entry genus type\n        :type grade_entry_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` corresponding to the given grade entry genus ``Type`` and include any additional grade entry with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_genus_type (osid.type.Type): a grade entry\n                genus type\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_genus_type: a grade entry genus type\n        :type grade_entry_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_by_record_type", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` containing the given grade entry record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): a grade entry\n                record type\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_record_type: a grade entry record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_on_date", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from or to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from or to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_gradebook_column", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_gradebook_column_on_date", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the given gradebook column and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``gradebook_column_id, from, or to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``gradebook_column_id, from, or to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_resource", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the given key key resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a key resource ``Id``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a key resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the given key resource and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, from, or to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, from, or to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_gradebook_column_and_resource", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the gradebook column and key resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    resource_id (osid.id.Id): a key resource ``Id``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` or\n                ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param resource_id: a key resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_for_gradebook_column_and_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the given gradebook column, resource, and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    resource_id (osid.id.Id): a key resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``gradebook_column_id, resource, from, or\n                to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param resource_id: a key resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``gradebook_column_id, resource, from, or to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries_by_grader", 
               "doc": {
                  "headline": "Gets a ``GradeEntryList`` for the given grader.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntry`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntry`` list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries", 
               "doc": {
                  "headline": "Gets all grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - a ``GradeEntryList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradeEntryList``\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntryQuerySession", 
         "shortname": "GradeEntryQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``GradeEntry`` objects.", 
            "body": "    The search query is constructed using the ``GradeEntryQuery``. The\n    grade entry record ``Type`` also specifies the record interface for\n    the grade entry query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include grade entries in\n        gradebooks of which this gradebook is a ancestor in the\n        gradebook hierarchy\n      * isolated gradebook view: searches are restricted to grade\n        entries in this gradebook\n\n    \n    Grade entries may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradeEntryQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_search_grade_entries", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "get_grade_entry_query", 
            "get_grade_entries_by_query"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradeEntry`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include grade entries in gradebooks which\n        are children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query", 
               "doc": {
                  "headline": "Gets a grade entry query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entries_by_query", 
               "doc": {
                  "headline": "Gets a list of entries matching the given grade entry query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_query (osid.grading.GradeEntryQuery): the\n                grade entry query\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the returned\n                ``GradeEntryList``", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_entry_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param grade_entry_query: the grade entry query\n        :type grade_entry_query: ``osid.grading.GradeEntryQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradeEntryList``\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_entry_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryQuery", 
                     "var_name": "grade_entry_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryQuery"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntrySearchSession", 
         "shortname": "GradeEntrySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``GradeEntry`` objects.", 
            "body": "    The search query is constructed using the ``GradeEntryQuery``.\n\n    ``get_grade_entries_by_query()`` is the basic search method and\n    returns a list of ``GradeEntry`` objects.A more advanced search may\n    be performed with ``getGradeEntriesBySearch()``. It accepts a\n    ``GradeEntrySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_grade_entries_by_search()`` returns a\n    ``GradeEntrySearchResults`` that can be used to access the resulting\n    ``GradeEntryList`` or be used to perform a search within the result\n    set through ``GradeEntrySearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include grade entries in\n        gradebooks of which this gradebook is a ancestor in the\n        gradebook hierarchy\n      * isolated gradebook view: searches are restricted to grade\n        entries in this gradebook\n\n    \n    Grade entries may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradeEntryQuery``."
         }, 
         "inherit_fullnames": [
            "osid.grading.GradeEntryQuerySession"
         ], 
         "inherit_shortnames": [
            "GradeEntryQuerySession"
         ], 
         "inherit_pkg_names": [
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "grading", 
               "name": "GradeEntryQuerySession"
            }
         ], 
         "method_names": [
            "get_grade_entry_search", 
            "get_grade_entry_search_order", 
            "get_grade_entries_by_search", 
            "get_grade_entry_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_grade_entry_search", 
               "doc": {
                  "headline": "Gets a grade entry search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntrySearch) - the grade entry search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry search\n        :rtype: ``osid.grading.GradeEntrySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntrySearch", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_search_order", 
               "doc": {
                  "headline": "Gets a grade entry search order.", 
                  "body": "        The ``GradeEntrySearchOrder`` is supplied to a\n        ``GradeEntrySearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchOrder) - the grade entry\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry search order\n        :rtype: ``osid.grading.GradeEntrySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntrySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entries_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_query (osid.grading.GradeEntryQuery): the\n                grade entry query\n        arg:    grade_entry_search (osid.grading.GradeEntrySearch): the\n                grade entry search\n", 
               "return_doc": "        return: (osid.grading.GradeEntrySearchResults) - the grade entry\n                search results", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_query`` or\n                ``grade_entry_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_entry_search`` or\n                ``grade_entry_query`` is not of this service", 
               "sphinx_param_doc": "        :param grade_entry_query: the grade entry query\n        :type grade_entry_query: ``osid.grading.GradeEntryQuery``\n        :param grade_entry_search: the grade entry search\n        :type grade_entry_search: ``osid.grading.GradeEntrySearch``\n", 
               "sphinx_return_doc": "        :return: the grade entry search results\n        :rtype: ``osid.grading.GradeEntrySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_query`` or ``grade_entry_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_entry_search`` or ``grade_entry_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryQuery", 
                     "var_name": "grade_entry_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.grading.GradeEntrySearch", 
                     "var_name": "grade_entry_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryQuery", 
                  "osid.grading.GradeEntrySearch"
               ], 
               "return_type": "osid.grading.GradeEntrySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_from_inspector", 
               "doc": {
                  "headline": "Gets a grade entry query from an inspector.", 
                  "body": "        The inspector is available from an ``GradeEntrySearchResults``."
               }, 
               "arg_doc": "        arg:    grade_entry_query_inspector\n                (osid.grading.GradeEntryQueryInspector): a grade entry\n                query inspector\n", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``grade_entry_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param grade_entry_query_inspector: a grade entry query inspector\n        :type grade_entry_query_inspector: ``osid.grading.GradeEntryQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``grade_entry_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryQueryInspector", 
                     "var_name": "grade_entry_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryQueryInspector"
               ], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntryAdminSession", 
         "shortname": "GradeEntryAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``GradeEntries``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``GradeEntry,`` a ``GradeEntryForm`` is requested using\n    ``get_grade_entry_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``GradeEntryForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``GradeEntryForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``GradeEntryForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``GradeEntryForms`` are requested to the ``GradeEntry``\n    ``Id`` that is to be updated using ``getGradeEntryFormForUpdate()``.\n    Similarly, the ``GradeEntryForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``GradeEntryForm`` can only be used once for a\n    successful update and cannot be reused.\n    \n    The delete operations delete ``GradeEntries``. To unmap a\n    ``GradeEntry`` from the current ``Gradebook,`` the\n    ``GradeEntryGradebookAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``GradeEntry`` itself thus\n    removing it from all known ``Gradebook`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_create_grade_entries", 
            "can_create_grade_entry_with_record_types", 
            "get_grade_entry_form_for_create", 
            "create_grade_entry", 
            "can_overridecalculated_grade_entries", 
            "get_grade_entry_form_for_override", 
            "override_calculated_grade_entry", 
            "can_update_grade_entries", 
            "get_grade_entry_form_for_update", 
            "update_grade_entry", 
            "can_delete_grade_entries", 
            "delete_grade_entry", 
            "can_manage_grade_entry_aliases", 
            "alias_grade_entry"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can create grade entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a grade\n        entry will result in a ``PermissionDenied``. This is intended as\n        a hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeEntry`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeEntry`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_grade_entry_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``GradeEntry`` using the desired record types.", 
                  "body": "        While ``GradingManager.getGradeEntryRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``GradeEntry``.\n        Providing an empty array tests if a ``GradeEntry`` can be\n        created with no records."
               }, 
               "arg_doc": "        arg:    grade_entry_record_types (osid.type.Type[]): array of\n                grade entry record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``GradeEntry`` creation using\n                the specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_record_types: array of grade entry record types\n        :type grade_entry_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``GradeEntry`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_entry_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_form_for_create", 
               "doc": {
                  "headline": "Gets the grade entry form for creating new grade entries.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the gradebook column\n        arg:    resource_id (osid.id.Id): the key resource\n        arg:    grade_entry_record_types (osid.type.Type[]): array of\n                grade entry record types\n", 
               "return_doc": "        return: (osid.grading.GradeEntryForm) - the grade entry form", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id or resource_id`` not\n                found\n        raise:  NullArgument - ``gradebook_column_id, resource_id,`` or\n                ``grade_entry_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param gradebook_column_id: the gradebook column\n        :type gradebook_column_id: ``osid.id.Id``\n        :param resource_id: the key resource\n        :type resource_id: ``osid.id.Id``\n        :param grade_entry_record_types: array of grade entry record types\n        :type grade_entry_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the grade entry form\n        :rtype: ``osid.grading.GradeEntryForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id or resource_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id, resource_id,`` or ``grade_entry_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_entry_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradeEntryForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_grade_entry", 
               "doc": {
                  "headline": "Creates a new ``GradeEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_form (osid.grading.GradeEntryForm): the form\n                for this ``GradeEntry``\n", 
               "return_doc": "        return: (osid.grading.GradeEntry) - the new ``GradeEntry``", 
               "error_doc": "        raise:  IllegalState - ``grade_entry_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``grade_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_entry_form`` did not originate\n                from ``get_grade_entry_form_for_create()``", 
               "sphinx_param_doc": "        :param grade_entry_form: the form for this ``GradeEntry``\n        :type grade_entry_form: ``osid.grading.GradeEntryForm``\n", 
               "sphinx_return_doc": "        :return: the new ``GradeEntry``\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_entry_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``grade_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_entry_form`` did not originate from ``get_grade_entry_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryForm", 
                     "var_name": "grade_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryForm"
               ], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_overridecalculated_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can override grade entries calculated from another.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a grade\n        entry will result in a ``PermissionDenied``. This is intended as\n        a hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeEntry`` override is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeEntry`` override is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_form_for_override", 
               "doc": {
                  "headline": "Gets the grade entry form for overriding calculated grade entries.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the grade\n                entry to be overridden\n        arg:    grade_entry_record_types (osid.type.Type[]): array of\n                grade entry record types\n", 
               "return_doc": "        return: (osid.grading.GradeEntryForm) - the grade entry form", 
               "error_doc": "        raise:  AlreadyExists - ``grade_entry_id`` is already overridden\n        raise:  NotFound - ``grade_entry_id`` not found or\n                ``grade_entry_id`` is not a calculated entry\n        raise:  NullArgument - ``grade_entry_id`` or\n                ``grade_entry_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the grade entry to be overridden\n        :type grade_entry_id: ``osid.id.Id``\n        :param grade_entry_record_types: array of grade entry record types\n        :type grade_entry_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the grade entry form\n        :rtype: ``osid.grading.GradeEntryForm``", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``grade_entry_id`` is already overridden\n        :raise: ``NotFound`` -- ``grade_entry_id`` not found or ``grade_entry_id`` is not a calculated entry\n        :raise: ``NullArgument`` -- ``grade_entry_id`` or ``grade_entry_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "grade_entry_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradeEntryForm", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "override_calculated_grade_entry", 
               "doc": {
                  "headline": "Creates a new overriding ``GradeEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_form (osid.grading.GradeEntryForm): the form\n                for this ``GradeEntry``\n", 
               "return_doc": "        return: (osid.grading.GradeEntry) - the new ``GradeEntry``", 
               "error_doc": "        raise:  IllegalState - ``grade_entry_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``grade_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_entry_form`` did not originate\n                from ``get_grade_entry_form_for_override()``", 
               "sphinx_param_doc": "        :param grade_entry_form: the form for this ``GradeEntry``\n        :type grade_entry_form: ``osid.grading.GradeEntryForm``\n", 
               "sphinx_return_doc": "        :return: the new ``GradeEntry``\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_entry_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``grade_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_entry_form`` did not originate from ``get_grade_entry_form_for_override()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryForm", 
                     "var_name": "grade_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryForm"
               ], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can update grade entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``GradeEntry`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if grade entry modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if grade entry modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_form_for_update", 
               "doc": {
                  "headline": "Gets the grade entry form for updating an existing entry.", 
                  "body": "        A new grade entry form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the\n                ``GradeEntry``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryForm) - the grade entry form", 
               "error_doc": "        raise:  NotFound - ``grade_entry_id`` is not found\n        raise:  NullArgument - ``grade_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the grade entry form\n        :rtype: ``osid.grading.GradeEntryForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``grade_entry_id`` is not found\n        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_grade_entry", 
               "doc": {
                  "headline": "Updates an existing grade entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_form (osid.grading.GradeEntryForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``grade_entry_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``grade_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``grade_entry_form`` did not originate\n                from ``get_grade_entry_form_for_update()``", 
               "sphinx_param_doc": "        :param grade_entry_form: the form containing the elements to be updated\n        :type grade_entry_form: ``osid.grading.GradeEntryForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``grade_entry_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``grade_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``grade_entry_form`` did not originate from ``get_grade_entry_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntryForm", 
                     "var_name": "grade_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntryForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_grade_entries", 
               "doc": {
                  "headline": "Tests if this user can delete grade entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``GradeEntry`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeEntry`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeEntry`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_grade_entry", 
               "doc": {
                  "headline": "Deletes the ``GradeEntry`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the\n                ``GradeEntry`` to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``GradeEntry`` was not found identified by\n                the given ``Id``\n        raise:  NullArgument - ``grade_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the ``GradeEntry`` to delete\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``GradeEntry`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_grade_entry_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``GradeEntries``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradeEntry`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradeEntry`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_grade_entry", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``GradeEntry`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``GradeEntry`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another grade entry, it is\n        reassigned to the given grade entry ``Id``."
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of a\n                ``GradeEntry``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``grade_entry_id`` not found\n        raise:  NullArgument - ``grade_entry_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of a ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``grade_entry_id`` not found\n        :raise: ``NullArgument`` -- ``grade_entry_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntryNotificationSession", 
         "shortname": "GradeEntryNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``GradeEntry`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``GradeEntryLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_register_for_grade_entry_notifications", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "register_for_new_grade_entries", 
            "register_for_new_grade_entries_for_gradebook_column", 
            "register_for_new_grade_entries_for_resource", 
            "register_for_new_grade_entries_by_grader", 
            "register_for_changed_grade_entries", 
            "register_for_changed_grade_entries_for_gradebook_column", 
            "register_for_changed_grade_entries_for_resource", 
            "register_for_changed_grade_entries_by_grader", 
            "register_for_changed_grade_entry", 
            "register_for_deleted_grade_entries", 
            "register_for_deleted_grade_entries_for_gradebook_column", 
            "register_for_deleted_grade_entries_for_resource", 
            "register_for_deleted_grade_entries_by_grader", 
            "register_for_deleted_grade_entry"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_grade_entry_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``GradeEntry`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for grade entries in\n        gradebooks which are children of this gradebook in the gradebook\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_grade_entries", 
               "doc": {
                  "headline": "Register for notifications of new grade entries.", 
                  "body": "        ``GradeEntryReceiver.newGradeEntry()`` is invoked when a new\n        grade entry is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_grade_entries_for_gradebook_column", 
               "doc": {
                  "headline": "Registers for notification of a new grade entry for the specified gradebook column.", 
                  "body": "        ``GradeEntryReceiver.newGradeEntry()`` is invoked when a new\n        entry for the resource is created."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to monitor\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_grade_entries_for_resource", 
               "doc": {
                  "headline": "Registers for notification of a new grade entry for the specified resource.", 
                  "body": "        ``GradeEntryReceiver.newGradeEntry()`` is invoked when a new\n        entry for the resource is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_grade_entries_by_grader", 
               "doc": {
                  "headline": "Registers for notification of a new grade entry for the specified grader agent.", 
                  "body": "        ``GradeEntryReceiver.newGradeEntry()`` is invoked when a new\n        entry for the grader is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Agent`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_entries", 
               "doc": {
                  "headline": "Registers for notification of updated grade entries.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when a\n        grade entry is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_entries_for_gradebook_column", 
               "doc": {
                  "headline": "Registers for notification of an updated grade entry for the specified gradebook column.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the column is updated."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to monitor\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_entries_for_resource", 
               "doc": {
                  "headline": "Registers for notification of an updated grade entry for the specified key resource.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the resource is updated."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_entries_by_grader", 
               "doc": {
                  "headline": "Registers for notification of an updated grade entry for the specified grader.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the agent is updated."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Agent`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_grade_entry", 
               "doc": {
                  "headline": "Registers for notification of an updated grade entry.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when the\n        specified grade entry is changed."
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the\n                ``GradeEntry`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the ``GradeEntry`` to monitor\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_entries", 
               "doc": {
                  "headline": "Registers for notification of deleted grade entries.", 
                  "body": "        ``GradeEntryReceiver.deletedGradeEntry()`` is invoked when a\n        grade entry is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_entries_for_gradebook_column", 
               "doc": {
                  "headline": "Registers for notification of a deleted grade entry for the specified gradebook column.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the column is removed from this gradebook."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to monitor\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_entries_for_resource", 
               "doc": {
                  "headline": "Registers for notification of a deleted grade entry for the specified key resource.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the resource is removed from this gradebook."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_entries_by_grader", 
               "doc": {
                  "headline": "Registers for notification of a deleted grade entry for the specified grader.", 
                  "body": "        ``GradeEntryReceiver.changedGradeEntry()`` is invoked when an\n        entry for the agent is removed from this gradebook."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Agent`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Agent`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_grade_entry", 
               "doc": {
                  "headline": "Registers for notification of a deleted grade entry.", 
                  "body": "        ``GradeEntryReceiver.deletedGradeEntry()`` is invoked when the\n        specified entry is deleted."
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the\n                ``GradeEntry`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the ``GradeEntry`` to monitor\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnLookupSession", 
         "shortname": "GradebookColumnLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``GradebookColumns``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_lookup_gradebook_columns", 
            "use_comparative_gradebook_column_view", 
            "use_plenary_gradebook_column_view", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "get_gradebook_column", 
            "get_gradebook_columns_by_ids", 
            "get_gradebook_columns_by_genus_type", 
            "get_gradebook_columns_by_parent_genus_type", 
            "get_gradebook_columns_by_record_type", 
            "get_gradebook_columns", 
            "supports_summary", 
            "get_gradebook_column_summary"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradebookColumn`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_gradebook_column_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_gradebook_column_view", 
               "doc": {
                  "headline": "A complete view of the ``GradebookColumn`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include gradebook columns in gradebooks\n        which are children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column", 
               "doc": {
                  "headline": "Gets the ``GradebookColumn`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``GradebookColumn`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``GradebookColumn`` and\n        retained for compatibility."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): ``Id`` of the\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - the gradebook column", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` not found\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: ``Id`` of the ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the gradebook column\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_ids", 
               "doc": {
                  "headline": "Gets a ``GradebookColumnList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the gradebook\n        columns specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if a ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible gradeboook columns may be omitted from the list."
               }, 
               "arg_doc": "        arg:    gradebook_column_ids (osid.id.IdList): the list of\n                ``Ids`` to retrieve\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the returned\n                ``GradebookColumn`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``grade_book_column_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_ids: the list of ``Ids`` to retrieve\n        :type gradebook_column_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookColumn`` list\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``grade_book_column_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_column_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradebookColumnList`` corresponding to the given gradebook column genus ``Type`` which does not include gradebook columns of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebook\n        columns or an error results. Otherwise, the returned list may\n        contain only those gradebook columns that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    gradebook_column_genus_type (osid.type.Type): a\n                gradebook column genus type\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the returned\n                ``GradebookColumn`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_genus_type: a gradebook column genus type\n        :type gradebook_column_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookColumn`` list\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradebookColumnList`` corresponding to the given gradebook column genus ``Type`` and include any additional columns with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebook\n        columns or an error results. Otherwise, the returned list may\n        contain only those gradebook columns that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    gradebook_column_genus_type (osid.type.Type): a\n                gradebook column genus type\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the returned\n                ``GradebookColumn`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_genus_type: a gradebook column genus type\n        :type gradebook_column_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookColumn`` list\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_record_type", 
               "doc": {
                  "headline": "Gets a ``GradebookColumnList`` containing the given gradebook column record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebook\n        columns or an error results. Otherwise, the returned list may\n        contain only those gradebook columns that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                gradebook column record type\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the returned\n                ``GradebookColumn`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a gradebook column record type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookColumn`` list\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns", 
               "doc": {
                  "headline": "Gets all gradebook columns.", 
                  "body": "        In plenary mode, the returned list contains all known gradebook\n        columns or an error results. Otherwise, the returned list may\n        contain only those gradebook columns that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - a\n                ``GradebookColumn``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookColumn``\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "supports_summary", 
               "doc": {
                  "headline": "Tests if a summary entry is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a summary entry is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a summary entry is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary", 
               "doc": {
                  "headline": "Gets the ``GradebookColumnSummary`` for summary results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): ``Id`` of the\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSummary) - the gradebook\n                column summary", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` is not found\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unimplemented - ``has_summary()`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_id: ``Id`` of the ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the gradebook column summary\n        :rtype: ``osid.grading.GradebookColumnSummary``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unimplemented`` -- ``has_summary()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnSummary", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnQuerySession", 
         "shortname": "GradebookColumnQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``GradebookColumn`` objects.", 
            "body": "    The search query is constructed using the ``GradebookColumnQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include columns in gradebooks\n        of which this gradebook is a ancestor in the gradebook hierarchy\n      * isolated gradebook view: searches are restricted to columns in\n        this gradebook\n\n    \n    Gradebook columns may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``GradebookColumnQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_search_gradebook_columns", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "get_gradebook_column_query", 
            "get_gradebook_columns_by_query"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can perform ``GradebookColumn`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include gradebook columns in gradebooks\n        which are children of this gradebook in the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets a gradebook column query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_columns_by_query", 
               "doc": {
                  "headline": "Gets a list of gradebook columns matching the given query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_query\n                (osid.grading.GradebookColumnQuery): the gradebook\n                column query\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the returned\n                ``GradebookColumnList``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_column_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param gradebook_column_query: the gradebook column query\n        :type gradebook_column_query: ``osid.grading.GradebookColumnQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookColumnList``\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_column_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnQuery", 
                     "var_name": "gradebook_column_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnQuery"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSearchSession", 
         "shortname": "GradebookColumnSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``GradebookColumn`` objects.", 
            "body": "    The search query is constructed using the ``GradebookColumnQuery``.\n\n    ``get_gradebook_columns_by_query()`` is the basic search method and\n    returns a list of ``GradebookColumn`` objects.A more advanced search\n    may be performed with ``getGradebookColumnsBySearch()``. It accepts\n    a ``GradebookColumnSearch`` in addition to the query for the purpose\n    of specifying additional options affecting the entire search, such\n    as ordering. ``get_gradebook_columns_by_search()`` returns a\n    ``GradebookColumnSearchResults`` that can be used to access the\n    resulting ``GradebookColumnList`` or be used to perform a search\n    within the result set through ``GradebookColumnSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated gradebook view: searches include columns in gradebooks\n        of which this gradebook is a ancestor in the gradebook hierarchy\n      * isolated gradebook view: searches are restricted to columns in\n        this gradebook\n\n    \n    Gradebook columns may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``GradebookColumnQuery``."
         }, 
         "inherit_fullnames": [
            "osid.grading.GradebookColumnQuerySession"
         ], 
         "inherit_shortnames": [
            "GradebookColumnQuerySession"
         ], 
         "inherit_pkg_names": [
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "grading", 
               "name": "GradebookColumnQuerySession"
            }
         ], 
         "method_names": [
            "get_gradebook_column_search", 
            "get_gradebook_column_search_order", 
            "get_gradebook_columns_by_search", 
            "get_gradebook_column_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_gradebook_column_search", 
               "doc": {
                  "headline": "Gets a gradebook column search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearch) - the gradebook\n                column search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column search\n        :rtype: ``osid.grading.GradebookColumnSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSearch", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_search_order", 
               "doc": {
                  "headline": "Gets a gradebook column search order.", 
                  "body": "        The ``GradebookColumnSearchOrder`` is supplied to a\n        ``GradebookColumnSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchOrder) - the\n                gradebook column search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column search order\n        :rtype: ``osid.grading.GradebookColumnSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_columns_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_query\n                (osid.grading.GradebookColumnQuery): the gradebook\n                column query\n        arg:    gradebook_column_search\n                (osid.grading.GradebookColumnSearch): the gradebook\n                column search\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchResults) - the\n                gradebook column search results", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_query`` or\n                ``gradebook_column_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_column_search`` or\n                ``gradebook_column_query`` is not of this service", 
               "sphinx_param_doc": "        :param gradebook_column_query: the gradebook column query\n        :type gradebook_column_query: ``osid.grading.GradebookColumnQuery``\n        :param gradebook_column_search: the gradebook column search\n        :type gradebook_column_search: ``osid.grading.GradebookColumnSearch``\n", 
               "sphinx_return_doc": "        :return: the gradebook column search results\n        :rtype: ``osid.grading.GradebookColumnSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_query`` or ``gradebook_column_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_column_search`` or ``gradebook_column_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnQuery", 
                     "var_name": "gradebook_column_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.grading.GradebookColumnSearch", 
                     "var_name": "gradebook_column_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnQuery", 
                  "osid.grading.GradebookColumnSearch"
               ], 
               "return_type": "osid.grading.GradebookColumnSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_from_inspector", 
               "doc": {
                  "headline": "Gets a gradebook column query from an inspector.", 
                  "body": "        The inspector is available from an\n        ``GradebookColumnSearchResults``."
               }, 
               "arg_doc": "        arg:    gradebook_column_query_inspector\n                (osid.grading.GradebookColumnQueryInspector): a\n                gradebook column query inspector\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``gradebook_column_query_inspector`` is\n                not of this service", 
               "sphinx_param_doc": "        :param gradebook_column_query_inspector: a gradebook column query inspector\n        :type gradebook_column_query_inspector: ``osid.grading.GradebookColumnQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``gradebook_column_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnQueryInspector", 
                     "var_name": "gradebook_column_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnQueryInspector"
               ], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnAdminSession", 
         "shortname": "GradebookColumnAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``GradebookColumns``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``GradebookColumn,`` a ``GradebookColumnForm`` is requested using\n    ``get_gradebook_column_form_for_create()`` specifying the desired\n    record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``GradebookColumnForm`` will indicate that it is to be used\n    with a create operation and can be used to examine metdata or\n    validate data prior to creation. Once the ``GradebookColumnForm`` is\n    submiited to a create operation, it cannot be reused with another\n    create operation unless the first operation was unsuccessful. Each\n    ``GradebookColumnForm`` corresponds to an attempted transaction.\n    \n    For updates, ``GradebookColumnForms`` are requested to the\n    ``GradebookColumn``  ``Id`` that is to be updated using\n    ``getGradebookColumnFormForUpdate()``. Similarly, the\n    ``GradebookColumnForm`` has metadata about the data that can be\n    updated and it can perform validation before submitting the update.\n    The ``GradebookColumnForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``GradebookColumns`` To unmap a\n    ``GradebookColumn`` from the current ``Gradebook,`` the\n    ``GradebookColumnGradebookAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``GradebookColumnForm``\n    itself thus removing it from all known ``Gradebook`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_create_gradebook_columns", 
            "can_create_gradebook_column_with_record_types", 
            "get_gradebook_column_form_for_create", 
            "create_gradebook_column", 
            "can_update_gradebook_columns", 
            "get_gradebook_column_form_for_update", 
            "update_gradebook_column", 
            "sequence_gradebook_columns", 
            "move_gradebook_column", 
            "copy_gradebook_column_entries", 
            "can_delete_gradebook_columns", 
            "delete_gradebook_column", 
            "can_manage_gradebook_column_aliases", 
            "alias_gradebook_column"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can create gradebook columns.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a gradebook\n        column will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradebookColumn`` creation is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradebookColumn`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_gradebook_column_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``GradebookColumn`` using the desired record types.", 
                  "body": "        While ``GradingManager.getGradebookColumnRecordTypes()`` can be\n        used to examine which records are supported, this method tests\n        which record(s) are required for creating a specific\n        ``GradebookColumn``. Providing an empty array tests if a\n        ``GradebookColumn`` can be created with no records."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_types (osid.type.Type[]): array\n                of gradebook column record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``GradebookColumn`` creation\n                using the specified record ``Types`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_types`` is\n                ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_record_types: array of gradebook column record types\n        :type gradebook_column_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``GradebookColumn`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "gradebook_column_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_form_for_create", 
               "doc": {
                  "headline": "Gets the gradebook column form for creating new gradebook columns.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_types (osid.type.Type[]): array\n                of gradebook column record types\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnForm) - the gradebook\n                column form", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_types`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param gradebook_column_record_types: array of gradebook column record types\n        :type gradebook_column_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the gradebook column form\n        :rtype: ``osid.grading.GradebookColumnForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "gradebook_column_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradebookColumnForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_gradebook_column", 
               "doc": {
                  "headline": "Creates a new ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_form\n                (osid.grading.GradebookColumnForm): the form for this\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - the new\n                ``GradebookColumn``", 
               "error_doc": "        raise:  IllegalState - ``gradebook_column_form`` already used in\n                a create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``gradebook_column_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_column_form`` did not\n                originate from\n                ``get_gradebook_column_form_for_create()``", 
               "sphinx_param_doc": "        :param gradebook_column_form: the form for this ``GradebookColumn``\n        :type gradebook_column_form: ``osid.grading.GradebookColumnForm``\n", 
               "sphinx_return_doc": "        :return: the new ``GradebookColumn``\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``gradebook_column_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``gradebook_column_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_column_form`` did not originate from ``get_gradebook_column_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnForm", 
                     "var_name": "gradebook_column_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnForm"
               ], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can update gradebook columns.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``GradebookColumn`` will result in a ``PermissionDenied``. This\n        is intended as a hint to an application that may opt not to\n        offer update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if gradebook column modification\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if gradebook column modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_form_for_update", 
               "doc": {
                  "headline": "Gets the gradebook column form for updating an existing gradebook column.", 
                  "body": "        A new gradebook column form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnForm) - the gradebook\n                column form", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` is not found\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the gradebook column form\n        :rtype: ``osid.grading.GradebookColumnForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_gradebook_column", 
               "doc": {
                  "headline": "Updates an existing gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_form\n                (osid.grading.GradebookColumnForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``gradebook_column_form`` already used in\n                an update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``gradebook_column_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_column_form`` did not\n                originate from\n                ``get_gradebook_column_form_for_update()``", 
               "sphinx_param_doc": "        :param gradebook_column_form: the form containing the elements to be updated\n        :type gradebook_column_form: ``osid.grading.GradebookColumnForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``gradebook_column_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``gradebook_column_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_column_form`` did not originate from ``get_gradebook_column_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnForm", 
                     "var_name": "gradebook_column_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "sequence_gradebook_columns", 
               "doc": {
                  "headline": "Resequences the gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_ids (osid.id.IdList): the ``Ids`` of\n                the ``GradebookColumns``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_ids: the ``Ids`` of the ``GradebookColumns``\n        :type gradebook_column_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_column_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "move_gradebook_column", 
               "doc": {
                  "headline": "Moves a gradebook column in front of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    front_gradebook_column_id (osid.id.Id): the ``Id`` of a\n                ``GradebookColumn``\n        arg:    back_gradebook_column_id (osid.id.Id): the ``Id`` of a\n                ``GradebookColumn``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``front_gradebook_column_id or\n                back_gradebook_column_id`` is not found\n        raise:  NullArgument - ``front_gradebook_column_id or\n                back_gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param front_gradebook_column_id: the ``Id`` of a ``GradebookColumn``\n        :type front_gradebook_column_id: ``osid.id.Id``\n        :param back_gradebook_column_id: the ``Id`` of a ``GradebookColumn``\n        :type back_gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``front_gradebook_column_id or back_gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``front_gradebook_column_id or back_gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "front_gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "back_gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "copy_gradebook_column_entries", 
               "doc": {
                  "headline": "Copies gradebook column entries from one column to another.", 
                  "body": "        If the target grade column grade system differs from the source,\n        the grades in the entries are transformed to the new grade\n        system."
               }, 
               "arg_doc": "        arg:    source_gradebook_column_id (osid.id.Id): the ``Id`` of a\n                ``GradebookColumn``\n        arg:    target_gradebook_column_id (osid.id.Id): the ``Id`` of a\n                ``GradebookColumn``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``source_gradebook_column_id\n                ortarget_gradebook_column_id`` is not found\n        raise:  NullArgument - ``source_gradebook_column_id\n                target_gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_gradebook_column_id: the ``Id`` of a ``GradebookColumn``\n        :type source_gradebook_column_id: ``osid.id.Id``\n        :param target_gradebook_column_id: the ``Id`` of a ``GradebookColumn``\n        :type target_gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``source_gradebook_column_id ortarget_gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``source_gradebook_column_id target_gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "target_gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_delete_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can delete gradebook columns.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``GradebookColumn`` will result in a ``PermissionDenied``. This\n        is intended as a hint to an application that may opt not to\n        offer delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradebookColumn`` deletion is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradebookColumn`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_gradebook_column", 
               "doc": {
                  "headline": "Deletes the ``GradebookColumn`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``GradebookColumn`` was not found\n                identified by the given ``Id``\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to delete\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``GradebookColumn`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_gradebook_column_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``GradebookColumns``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``GradebookColumn`` aliasing is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``GradebookColumn`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_gradebook_column", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``GradebookColumn`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``GradebookColumn`` is determined by\n        the provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another gradebook column,\n        it is reassigned to the given gradebook column ``Id``."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of a\n                ``GradebookColumn``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``gradebook_column_id`` not found\n        raise:  NullArgument - ``gradebook_column_id`` or ``alias_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of a ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``gradebook_column_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnNotificationSession", 
         "shortname": "GradebookColumnNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``GradebookColumn`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``GradebookColumnLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_register_for_gradebook_column_notifications", 
            "use_federated_gradebook_view", 
            "use_isolated_gradebook_view", 
            "register_for_new_gradebook_columns", 
            "register_for_changed_gradebook_columns", 
            "register_for_changed_gradebook_column", 
            "register_for_deleted_gradebook_columns", 
            "register_for_deleted_gradebook_column"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_gradebook_column_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``GradebookColumn`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_gradebook_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for gradebook\n        columns in gradebooks which are children of this gradebook in\n        the gradebook hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_gradebook_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this gradebook only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_gradebook_columns", 
               "doc": {
                  "headline": "Register for notifications of new gradebook columns.", 
                  "body": "        ``GradebookColumnReceiver.newGradebookColumny()`` is invoked\n        when a new column is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_gradebook_columns", 
               "doc": {
                  "headline": "Registers for notification of updated gradebook columns.", 
                  "body": "        ``GradebookColumnReceiver.changedGradebookColumn()`` is invoked\n        when a gradebook column is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_gradebook_column", 
               "doc": {
                  "headline": "Registers for notification of an updated gradebook column.", 
                  "body": "        ``GradebookColumnReceiver.changedGradebookColumn()`` is invoked\n        when the specified gradebook column is changed."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to monitor\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebook_columns", 
               "doc": {
                  "headline": "Registers for notification of deleted gradebook columns.", 
                  "body": "        ``GradebookColumnReceiver.deletedGradebookColumn()`` is invoked\n        when a gradebook column is removed from this gradebook."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebook_column", 
               "doc": {
                  "headline": "Registers for notification of a deleted gradebook column.", 
                  "body": "        ``GradebookColumnReceiver.deletedGradebookColumn()`` is invoked\n        when the specified column is removed from thia gradebook."
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn`` to monitor\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnGradebookSession", 
         "shortname": "GradebookColumnGradebookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``GradebookColumn`` to ``Gradebook`` mappings.", 
            "body": "    A ``GradebookColumn`` may appear in multiple ``Gradebooks``. Each\n    ``Gradebook`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "use_comparative_gradebook_view", 
            "use_plenary_gradebook_view", 
            "can_lookup_gradebook_column_gradebook_mappings", 
            "get_gradebook_column_ids_by_gradebook", 
            "get_gradebook_columns_by_gradebook", 
            "get_gradebook_column_ids_by_gradebooks", 
            "get_gradebook_columns_by_gradebooks", 
            "get_gradebook_ids_by_gradebook_column", 
            "get_gradebooks_by_gradebook_column"
         ], 
         "methods": [
            {
               "name": "use_comparative_gradebook_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_gradebook_view", 
               "doc": {
                  "headline": "A complete view of the ``GradebookColumn`` and ``Gradebook`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_lookup_gradebook_column_gradebook_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of gradebook/column mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_ids_by_gradebook", 
               "doc": {
                  "headline": "Gets the list of ``GradebookColumn``  ``Ids`` associated with a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): ``Id`` of the ``Gradebook``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related gradebook column\n                ``Ids``", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related gradebook column ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_gradebook", 
               "doc": {
                  "headline": "Gets the list of gradebook columns associated with a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): ``Id`` of the ``Gradebook``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - list of related\n                gradebook columns", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related gradebook columns\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_column_ids_by_gradebooks", 
               "doc": {
                  "headline": "Gets the list of ``GradebookColumn Ids`` corresponding to a list of ``Gradebooks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): list of gradebook\n                ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of gradebook column ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_ids: list of gradebook ``Ids``\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of gradebook column ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_columns_by_gradebooks", 
               "doc": {
                  "headline": "Gets the list of gradebook columns corresponding to a list of ``Gradebooks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): list of gradebook\n                ``Ids``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - list of gradebook\n                columns", 
               "error_doc": "        raise:  NullArgument - ``gradebook_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_ids: list of gradebook ``Ids``\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of gradebook columns\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_ids_by_gradebook_column", 
               "doc": {
                  "headline": "Gets the list of ``Gradebook``  ``Ids`` mapped to a ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): ``Id`` of a\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of gradebook ``Ids``", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` is not found\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: ``Id`` of a ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_gradebook_column", 
               "doc": {
                  "headline": "Gets the list of ``Gradebooks`` mapped to a ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): ``Id`` of a\n                ``GradebookColumn``\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - list of gradebooks", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` is not found\n        raise:  NullArgument - ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: ``Id`` of a ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of gradebooks\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnGradebookAssignmentSession", 
         "shortname": "GradebookColumnGradebookAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign gradebook columns to ``Gradebooks``.", 
            "body": "    A ``GradebookColumn`` may map to multiple ``Gradebooks`` and\n    removing the last reference to a ``GradebookColumn`` is the\n    equivalent of deleting it. Each ``Gradebook`` may have its own\n    authorizations governing who is allowed to operate on it.\n\n    Moving or adding a reference of a ``GradebookColumn`` to another\n    ``Gradebook`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_gradebook_columns", 
            "can_assign_gradebook_columns_to_gradebook", 
            "get_assignable_gradebook_ids", 
            "get_assignable_gradebook_ids_for_gradebook_column", 
            "assign_gradebook_column_to_gradebook", 
            "unassign_gradebook_column_from_gradebook"
         ], 
         "methods": [
            {
               "name": "can_assign_gradebook_columns", 
               "doc": {
                  "headline": "Tests if this user can alter gradebook column/gradebook mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_gradebook_columns_to_gradebook", 
               "doc": {
                  "headline": "Tests if this user can alter gradebook column/gradebook mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_gradebook_ids", 
               "doc": {
                  "headline": "Gets a list of gradebook ``Ids`` including and under the given gradebook node in which any gradebook column can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable gradebook ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_gradebook_ids_for_gradebook_column", 
               "doc": {
                  "headline": "Gets a list of gradebooks including and under the given gradebook node in which a specific gradebook column can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebokColumn``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable gradebook ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` or\n                ``gradebook_column_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param gradebook_column_id: the ``Id`` of the ``GradebokColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` or ``gradebook_column_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_gradebook_column_to_gradebook", 
               "doc": {
                  "headline": "Adds an existing ``GradebookColumn`` to a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``gradebook_column_id`` is already\n                assigned to ``gradebook_id``\n        raise:  NotFound - ``gradebook_column_id`` or ``gradebook_id``\n                not found\n        raise:  NullArgument - ``gradebook_column_id`` or\n                ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``gradebook_column_id`` is already assigned to ``gradebook_id``\n        :raise: ``NotFound`` -- ``gradebook_column_id`` or ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_gradebook_column_from_gradebook", 
               "doc": {
                  "headline": "Removes a ``GradebookColumn`` from a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                ``GradebookColumn``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``gradebook_column_id`` or ``gradebook_id``\n                not found or ``gradebook_column_id`` not assigned to\n                ``gradebook_id``\n        raise:  NullArgument - ``gradebook_column_id`` or\n                ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_column_id`` or ``gradebook_id`` not found or ``gradebook_column_id`` not assigned to ``gradebook_id``\n        :raise: ``NullArgument`` -- ``gradebook_column_id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSmartGradebookSession", 
         "shortname": "GradebookColumnSmartGradebookSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``GradebookColumnQuery`` can be retrieved from this session and\n    mapped to this ``Gradebook`` to create a virtual collection of\n    ``GradebookColumns``. The entries may be sequenced using the\n    ``GradebookColumnSearchOrder`` from this session.\n\n    This ``Gradebook`` has a default query that matches any gradebook\n    column and a default search order that specifies no sequencing. The\n    queries may be examined using a ``GradebookColumnQueryInspector``.\n    The query may be modified by converting the inspector back to a\n    ``GradebookColumnQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_id", 
            "get_gradebook", 
            "can_manage_smart_gradebooks", 
            "get_gradebook_column_query", 
            "get_gradebook_column_search_order", 
            "apply_gradebook_column_query", 
            "inspect_gradebook_column_query", 
            "apply_gradebook_column_sequencing", 
            "get_gradebook_column_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_gradebook_id", 
               "doc": {
                  "headline": "Gets the ``Gradebook``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Gradebook Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the ``Gradebook`` associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Gradebook`` associated with this session\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can manage smart gradebooks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart gradebook methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart gradebook methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets a gradebook column query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_search_order", 
               "doc": {
                  "headline": "Gets a gradebook column search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchOrder) - the\n                gradebook column search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column search order\n        :rtype: ``osid.grading.GradebookColumnSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_gradebook_column_query", 
               "doc": {
                  "headline": "Applies a gradebook column query to this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_query\n                (osid.grading.GradebookColumnQuery): the gradebook\n                column query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``gradebook_column_query`` not of this\n                service", 
               "sphinx_param_doc": "        :param gradebook_column_query: the gradebook column query\n        :type gradebook_column_query: ``osid.grading.GradebookColumnQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``gradebook_column_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnQuery", 
                     "var_name": "gradebook_column_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_gradebook_column_query", 
               "doc": {
                  "headline": "Gets a gradebook column query inspector for this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebook column query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query inspector\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_gradebook_column_sequencing", 
               "doc": {
                  "headline": "Applies a gradebook column search order to this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_search_order\n                (osid.grading.GradebookColumnSearchOrder): the gradebook\n                column search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_search_order`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``gradebook_column_search_order`` not of\n                this service", 
               "sphinx_param_doc": "        :param gradebook_column_search_order: the gradebook column search order\n        :type gradebook_column_search_order: ``osid.grading.GradebookColumnSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``gradebook_column_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnSearchOrder", 
                     "var_name": "gradebook_column_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_from_inspector", 
               "doc": {
                  "headline": "Gets a gradebook column query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_query_inspector\n                (osid.grading.GradebookColumnQuery): a gradebook column\n                query inspector\n", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``gradebook_column_query_inspector`` is\n                not of this service", 
               "sphinx_param_doc": "        :param gradebook_column_query_inspector: a gradebook column query inspector\n        :type gradebook_column_query_inspector: ``osid.grading.GradebookColumnQuery``\n", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``gradebook_column_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnQuery", 
                     "var_name": "gradebook_column_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnQuery"
               ], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookLookupSession", 
         "shortname": "GradebookLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Gradebook`` objects.", 
            "body": "    The ``Gradebook`` represents a collection of grade systems, entries,\n    and gradebook columns.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Gradebooks`` it can access, without breaking\n    execution. However, an administrative application may require all\n    ``Gradebook`` elements to be available.\n    \n    Gradebooks may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Gradebook``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_gradebooks", 
            "use_comparative_gradebook_view", 
            "use_plenary_gradebook_view", 
            "get_gradebook", 
            "get_gradebooks_by_ids", 
            "get_gradebooks_by_genus_type", 
            "get_gradebooks_by_parent_genus_type", 
            "get_gradebooks_by_record_type", 
            "get_gradebooks_by_provider", 
            "get_gradebooks"
         ], 
         "methods": [
            {
               "name": "can_lookup_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can perform ``Gradebook`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_gradebook_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_gradebook_view", 
               "doc": {
                  "headline": "A complete view of the ``Gradebook`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Gradebook`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Gradebook`` and retained\n        for compatility."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): ``Id`` of the ``Gradebook``\n", 
               "return_doc": "        return: (osid.grading.Gradebook) - the gradebook", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the gradebook\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_ids", 
               "doc": {
                  "headline": "Gets a ``GradebookList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        gradebooks specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Gradebook`` objects may be omitted from the list\n        and may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``Gradebook`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``gradebook_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_ids: the list of ``Ids`` to retrieve\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Gradebook`` list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradebookList`` corresponding to the given gradebook genus ``Type`` which does not include gradebooks of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebooks\n        or an error results. Otherwise, the returned list may contain\n        only those gradebooks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    gradebook_genus_type (osid.type.Type): a gradebook genus\n                type\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``Gradebook`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_genus_type: a gradebook genus type\n        :type gradebook_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Gradebook`` list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``GradebookList`` corresponding to the given gradebook genus ``Type`` and include any additional gradebooks with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebooks\n        or an error results. Otherwise, the returned list may contain\n        only those gradebooks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    gradebook_genus_type (osid.type.Type): a gradebook genus\n                type\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``Gradebook`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_genus_type: a gradebook genus type\n        :type gradebook_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Gradebook`` list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_record_type", 
               "doc": {
                  "headline": "Gets a ``GradebookList`` containing the given gradebook record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebooks\n        or an error results. Otherwise, the returned list may contain\n        only those gradebooks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``Gradebook`` list", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Gradebook`` list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks_by_provider", 
               "doc": {
                  "headline": "Gets a ``GradebookList`` for the given provider ````.", 
                  "body": "        In plenary mode, the returned list contains all known gradebooks\n        or an error results. Otherwise, the returned list may contain\n        only those gradebooks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``Gradebook`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Gradebook`` list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebooks", 
               "doc": {
                  "headline": "Gets all ``Gradebooks``.", 
                  "body": "        In plenary mode, the returned list contains all known gradebooks\n        or an error results. Otherwise, the returned list may contain\n        only those gradebooks that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookList) - a ``GradebookList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``GradebookList``\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookQuerySession", 
         "shortname": "GradebookQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Gradebook`` objects.", 
            "body": "    The search query is constructed using the ``GradebookQuery``.\n\n    Gradebooks may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradebookQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_gradebooks", 
            "get_gradebook_query", 
            "get_gradebooks_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can perform ``Gradebook`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets a gradebook query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - a gradebook query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {}
            }, 
            {
               "name": "get_gradebooks_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Gradebook`` objects matching the given gradebook query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_query (osid.grading.GradebookQuery): the\n                gradebook query\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the returned\n                ``GradebookList``", 
               "error_doc": "        raise:  NullArgument - ``gradebook_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_query`` is not of this service", 
               "sphinx_param_doc": "        :param gradebook_query: the gradebook query\n        :type gradebook_query: ``osid.grading.GradebookQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``GradebookList``\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookQuery", 
                     "var_name": "gradebook_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookQuery"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookSearchSession", 
         "shortname": "GradebookSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Gradebook`` objects.", 
            "body": "    The search query is constructed using the ``GradebookQuery``.\n\n    ``get_gradebooks_by_query()`` is the basic search method and returns\n    a list of ``Gradebook`` objects.A more advanced search may be\n    performed with ``getGradebooksBySearch()``. It accepts a\n    ``GradebookSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_gradebooks_by_search()`` returns a\n    ``GradebookSearchResults`` that can be used to access the resulting\n    ``GradebookList`` or be used to perform a search within the result\n    set through ``GradebookSearch``.\n    \n    Gradebooks may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``GradebookQuery``."
         }, 
         "inherit_fullnames": [
            "osid.grading.GradebookQuerySession"
         ], 
         "inherit_shortnames": [
            "GradebookQuerySession"
         ], 
         "inherit_pkg_names": [
            "grading"
         ], 
         "inheritance": [
            {
               "pkg_name": "grading", 
               "name": "GradebookQuerySession"
            }
         ], 
         "method_names": [
            "get_gradebook_search", 
            "get_gradebook_search_order", 
            "get_gradebooks_by_search", 
            "get_gradebook_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_gradebook_search", 
               "doc": {
                  "headline": "Gets a gradebook search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookSearch) - a gradebook search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a gradebook search\n        :rtype: ``osid.grading.GradebookSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookSearch", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_search_order", 
               "doc": {
                  "headline": "Gets a gradebook search order.", 
                  "body": "        The ``GradebookSearchOrder`` is supplied to a\n        ``GradebookSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookSearchOrder) - the gradebook\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook search order\n        :rtype: ``osid.grading.GradebookSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_gradebooks_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_query (osid.grading.GradebookQuery): the\n                gradebook query\n        arg:    gradebook_search (osid.grading.GradebookSearch): the\n                gradebook search\n", 
               "return_doc": "        return: (osid.grading.GradebookSearchResults) - the gradebook\n                search results", 
               "error_doc": "        raise:  NullArgument - ``gradebook_query`` or\n                ``gradebook_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_query`` or\n                ``gradebook_search`` is not of this service", 
               "sphinx_param_doc": "        :param gradebook_query: the gradebook query\n        :type gradebook_query: ``osid.grading.GradebookQuery``\n        :param gradebook_search: the gradebook search\n        :type gradebook_search: ``osid.grading.GradebookSearch``\n", 
               "sphinx_return_doc": "        :return: the gradebook search results\n        :rtype: ``osid.grading.GradebookSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_query`` or ``gradebook_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_query`` or ``gradebook_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookQuery", 
                     "var_name": "gradebook_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.grading.GradebookSearch", 
                     "var_name": "gradebook_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookQuery", 
                  "osid.grading.GradebookSearch"
               ], 
               "return_type": "osid.grading.GradebookSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_query_from_inspector", 
               "doc": {
                  "headline": "Gets a gradebook query from an inspector.", 
                  "body": "        The inspector is available from an ``GradenookSearchResults``."
               }, 
               "arg_doc": "        arg:    gradebook_query_inspector\n                (osid.grading.GradebookQueryInspector): a gradebook\n                query inspector\n", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  NullArgument - ``gradebook_query_inspector`` is ``null``\n        raise:  Unsupported - ``gradebook_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param gradebook_query_inspector: a gradebook query inspector\n        :type gradebook_query_inspector: ``osid.grading.GradebookQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``gradebook_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookQueryInspector", 
                     "var_name": "gradebook_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookQueryInspector"
               ], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookAdminSession", 
         "shortname": "GradebookAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Gradebooks``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Gradebook,`` a ``GradebookForm`` is requested using\n    ``get_gradebook_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``GradebookForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``GradebookForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``GradebookForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``GradebookForms`` are requested to the ``Gradebook``\n    ``Id`` that is to be updated using ``getGradebookFormForUpdate()``.\n    Similarly, the ``GradebookForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``GradebookForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Gradebooks``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_gradebooks", 
            "can_create_gradebook_with_record_types", 
            "get_gradebook_form_for_create", 
            "create_gradebook", 
            "can_update_gradebooks", 
            "get_gradebook_form_for_update", 
            "update_gradebook", 
            "can_delete_gradebooks", 
            "delete_gradebook", 
            "can_manage_gradebook_aliases", 
            "alias_gradebook"
         ], 
         "methods": [
            {
               "name": "can_create_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can create ``Gradebooks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Gradebook`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Gradebook`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Gradebook`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_gradebook_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Gradebook`` using the desired record types.", 
                  "body": "        While ``GradingManager.getGradebookRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Gradebook``.\n        Providing an empty array tests if a ``Gradebook`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    gradebook_record_types (osid.type.Type[]): array of\n                gradebook record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Gradebook`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_record_types: array of gradebook record types\n        :type gradebook_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Gradebook`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "gradebook_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_form_for_create", 
               "doc": {
                  "headline": "Gets the gradebook form for creating new gradebooks.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    gradebook_record_types (osid.type.Type[]): array of\n                gradebook record types\n", 
               "return_doc": "        return: (osid.grading.GradebookForm) - the gradebook form", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param gradebook_record_types: array of gradebook record types\n        :type gradebook_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the gradebook form\n        :rtype: ``osid.grading.GradebookForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "gradebook_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.grading.GradebookForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_gradebook", 
               "doc": {
                  "headline": "Creates a new ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_form (osid.grading.GradebookForm): the form\n                for this ``Gradebook``\n", 
               "return_doc": "        return: (osid.grading.Gradebook) - the new ``Gradebook``", 
               "error_doc": "        raise:  IllegalState - ``gradebook_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``gradebook_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_form`` did not originate from\n                ``get_gradebook_form_for_create()``", 
               "sphinx_param_doc": "        :param gradebook_form: the form for this ``Gradebook``\n        :type gradebook_form: ``osid.grading.GradebookForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Gradebook``\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``gradebook_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``gradebook_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_form`` did not originate from ``get_gradebook_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookForm", 
                     "var_name": "gradebook_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookForm"
               ], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can update ``Gradebooks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Gradebook`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Gradebook`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Gradebook`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_form_for_update", 
               "doc": {
                  "headline": "Gets the gradebook form for updating an existing gradebook.", 
                  "body": "        A new gradebook form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n", 
               "return_doc": "        return: (osid.grading.GradebookForm) - the gradebook form", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the gradebook form\n        :rtype: ``osid.grading.GradebookForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_gradebook", 
               "doc": {
                  "headline": "Updates an existing gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_form (osid.grading.GradebookForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``gradebook_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``gradebook_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``gradebook_form did not originate from\n                get_gradebook_form_for_update()``", 
               "sphinx_param_doc": "        :param gradebook_form: the form containing the elements to be updated\n        :type gradebook_form: ``osid.grading.GradebookForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``gradebook_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``gradebook_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``gradebook_form did not originate from get_gradebook_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookForm", 
                     "var_name": "gradebook_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_gradebooks", 
               "doc": {
                  "headline": "Tests if this user can delete gradebooks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Gradebook`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Gradebook`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Gradebook`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_gradebook", 
               "doc": {
                  "headline": "Deletes a ``Gradebook``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook`` to remove\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_gradebook_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Gradebooks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Gradebook`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Gradebook`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_gradebook", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Gradebook`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Gradebook`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id`` . If the alias is a pointer to another gradebook, it is\n        reassigned to the given gradebook ``Id``."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a ``Gradebook``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookNotificationSession", 
         "shortname": "GradebookNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Gradebook`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_gradebook_notifications", 
            "register_for_new_gradebooks", 
            "register_for_new_gradebook_ancestors", 
            "register_for_new_gradebook_descendants", 
            "register_for_changed_gradebooks", 
            "register_for_changed_gradebook", 
            "register_for_deleted_gradebooks", 
            "register_for_deleted_gradebook", 
            "register_for_deleted_gradebook_ancestors", 
            "register_for_deleted_gradebook_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_gradebook_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Gradebook`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_gradebooks", 
               "doc": {
                  "headline": "Register for notifications of new gradebooks.", 
                  "body": "        ``GradebookReceiver.newGradebook()`` is invoked when a new\n        ``Gradebook`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_gradebook_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified gradebook in the gradebook hierarchy.", 
                  "body": "        ``GradebookReceiver.newGradebookAncestor()`` is invoked when the\n        specified gradebook experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_gradebook_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified gradebook in the gradebook hierarchy.", 
                  "body": "        ``GradebookReceiver.newGradebookDescendant()`` is invoked when\n        the specified gradebook experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_gradebooks", 
               "doc": {
                  "headline": "Registers for notification of updated gradebooks.", 
                  "body": "        ``GradebookReceiver.changedGradebook()`` is invoked when a\n        gradebook is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_gradebook", 
               "doc": {
                  "headline": "Registers for notification of an updated gradebook.", 
                  "body": "        ``GradebookReceiver.changedGradebook()`` is invoked when the\n        specified gradebook is changed."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebooks", 
               "doc": {
                  "headline": "Registers for notification of deleted gradebooks.", 
                  "body": "        ``GradebookReceiver.deletedGradebook()`` is invoked when a\n        calenedar is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebook", 
               "doc": {
                  "headline": "Registers for notification of a deleted gradebook.", 
                  "body": "        ``GradebookReceiver.deletedGradebook()`` is invoked when the\n        specified gradebook is deleted."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebook_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified gradebook in the gradebook hierarchy.", 
                  "body": "        ``GradebookReceiver.deletedGradebookAncestor()`` is invoked when\n        the specified gradebook experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_gradebook_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified gradebook in the calndar hierarchy.", 
                  "body": "        ``GradebookReceiver.deletedGradebookDescednant()`` is invoked\n        when the specified gradebook experiences a removal of one of its\n        descendants."
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the gradebook\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the gradebook to monitor\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookHierarchySession", 
         "shortname": "GradebookHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Gradebook`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Gradebook``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``get_parent_gradebooks()`` and ``getChildGradebooks()``. To relate\n    these ``Ids`` to another OSID, ``get_gradebook_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Gradebook`` available in the Gradebooking OSID is known to this\n    hierarchy but does not appear in the hierarchy traversal until added\n    as a root node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_gradebooks()`` or ``get_child_gradebooks()``\n    in lieu of a ``PermissionDenied`` error that may disrupt the\n    traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: gradebook elements may be silently omitted or\n        re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_hierarchy_id", 
            "get_gradebook_hierarchy", 
            "can_access_gradebook_hierarchy", 
            "use_comparative_gradebook_view", 
            "use_plenary_gradebook_view", 
            "get_root_gradebook_ids", 
            "get_root_gradebooks", 
            "has_parent_gradebooks", 
            "is_parent_of_gradebook", 
            "get_parent_gradebook_ids", 
            "get_parent_gradebooks", 
            "is_ancestor_of_gradebook", 
            "has_child_gradebooks", 
            "is_child_of_gradebook", 
            "get_child_gradebook_ids", 
            "get_child_gradebooks", 
            "is_descendant_of_gradebook", 
            "get_gradebook_node_ids", 
            "get_gradebook_nodes"
         ], 
         "methods": [
            {
               "name": "get_gradebook_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_gradebook_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer hierrachy\n        traversal operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_gradebook_view", 
               "doc": {
                  "headline": "The returns from the gradebook methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_gradebook_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_gradebook_ids", 
               "doc": {
                  "headline": "Gets the root gradebook ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root gradebook ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root gradebook ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_gradebooks", 
               "doc": {
                  "headline": "Gets the root gradebooks in this gradebook hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookList) - the root gradebooks", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root gradebooks\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_gradebooks", 
               "doc": {
                  "headline": "Tests if the ``Gradebook`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if the gradebook has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the gradebook has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_gradebook", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``gradebook_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``id`` or ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``gradebook_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_gradebook_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the gradebook", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the gradebook\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_gradebooks", 
               "doc": {
                  "headline": "Gets the parents of the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the parents of the\n                gradebook", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the gradebook\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_gradebook", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``gradebook_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``id`` or ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``gradebook_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_gradebooks", 
               "doc": {
                  "headline": "Tests if a gradebook has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``gradebook_id`` has\n                children, ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``gradebook_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_gradebook", 
               "doc": {
                  "headline": "Tests if a gradebook is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``gradebook_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``id`` or ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``gradebook_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_gradebook_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the gradebook", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` to query\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the gradebook\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_gradebooks", 
               "doc": {
                  "headline": "Gets the children of the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.grading.GradebookList) - the children of the\n                gradebook", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` to query\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the gradebook\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_gradebook", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``gradebook_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``id`` or ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``gradebook_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a gradebook node", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` to query\n        :type gradebook_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a gradebook node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_gradebook_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.grading.GradebookNode) - a gradebook node", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` to query\n        :type gradebook_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a gradebook node\n        :rtype: ``osid.grading.GradebookNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.grading.GradebookNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookHierarchyDesignSession", 
         "shortname": "GradebookHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Gradebook`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Gradebook``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_gradebook_hierarchy_id", 
            "get_gradebook_hierarchy", 
            "can_modify_gradebook_hierarchy", 
            "add_root_gradebook", 
            "remove_root_gradebook", 
            "add_child_gradebook", 
            "remove_child_gradebook"
         ], 
         "methods": [
            {
               "name": "get_gradebook_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_gradebook_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_gradebook", 
               "doc": {
                  "headline": "Adds a root gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``gradebook_id`` is already in hierarchy\n        raise:  NotFound - ``gradebook_id`` not found\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``gradebook_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``gradebook_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_gradebook", 
               "doc": {
                  "headline": "Removes a root gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` is not a root\n        raise:  NullArgument - ``gradebook_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` is not a root\n        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_gradebook", 
               "doc": {
                  "headline": "Adds a child to a gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``gradebook_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``gradebook_id`` or ``child_id`` not found\n        raise:  NullArgument - ``gradebook_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``gradebook_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``gradebook_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_gradebook", 
               "doc": {
                  "headline": "Removes a child from a gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of a gradebook\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``gradebook_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``gradebook_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of a gradebook\n        :type gradebook_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``gradebook_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``gradebook_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.Grade", 
         "shortname": "Grade", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Grade``.", 
            "body": "    Grades represent qualified performance levels defined within some\n    grading system."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Subjugateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Subjugateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Subjugateable"
            }
         ], 
         "method_names": [
            "get_grade_system_id", 
            "get_grade_system", 
            "get_input_score_start_range", 
            "get_input_score_end_range", 
            "get_output_score", 
            "get_grade_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_id", 
               "doc": {
                  "headline": "Gets the ``GradeSystem Id`` in which this grade belongs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade system ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system", 
               "doc": {
                  "headline": "Gets the ``GradeSystem`` in which this grade belongs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {}
            }, 
            {
               "name": "get_input_score_start_range", 
               "doc": {
                  "headline": "Gets the low end of the input score range equivalent to this grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the start range", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the start range\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_input_score_end_range", 
               "doc": {
                  "headline": "Gets the high end of the input score range equivalent to this grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the end range", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the end range\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_output_score", 
               "doc": {
                  "headline": "Gets the output score for this grade used for calculating cumultives or performing articulation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the output score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the output score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_grade_record", 
               "doc": {
                  "headline": "Gets the grade record corresponding to the given ``Grade`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``grade_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(grade_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.grading.records.GradeRecord) - the grade record", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(grade_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_record_type: the type of the record to retrieve\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade record\n        :rtype: ``osid.grading.records.GradeRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeRecord", 
         "shortname": "GradeRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Grade``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeQuery", 
         "shortname": "GradeQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching gradings.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidSubjugateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidSubjugateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQuery"
            }
         ], 
         "method_names": [
            "match_grade_system_id", 
            "clear_grade_system_id_terms", 
            "supports_grade_system_query", 
            "get_grade_system_query", 
            "clear_grade_system_terms", 
            "match_input_score_start_range", 
            "clear_input_score_start_range_terms", 
            "match_input_score_end_range", 
            "clear_input_score_end_range_terms", 
            "match_input_score", 
            "clear_input_score_terms", 
            "match_output_score", 
            "clear_output_score_terms", 
            "match_grade_entry_id", 
            "clear_grade_entry_id_terms", 
            "supports_grade_entry_query", 
            "get_grade_entry_query", 
            "match_any_grade_entry", 
            "clear_grade_entry_terms", 
            "match_gradebook_id", 
            "clear_gradebook_id_terms", 
            "supports_gradebook_query", 
            "get_gradebook_query", 
            "clear_gradebook_terms", 
            "get_grade_query_record"
         ], 
         "methods": [
            {
               "name": "match_grade_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system_id_terms", 
               "doc": {
                  "headline": "Clears the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available for querying grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system_terms", 
               "doc": {
                  "headline": "Clears the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_input_score_start_range", 
               "doc": {
                  "headline": "Matches grades with the start input score inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_score_start_range_terms", 
               "doc": {
                  "headline": "Clears the nput score start range terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_input_score_end_range", 
               "doc": {
                  "headline": "Matches grades with the end input score inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_score_end_range_terms", 
               "doc": {
                  "headline": "Clears the nput score start range terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_input_score", 
               "doc": {
                  "headline": "Matches grades with the input score range contained within the given range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_score_terms", 
               "doc": {
                  "headline": "Clears the input score start range terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_output_score", 
               "doc": {
                  "headline": "Matches grades with the output score contained within the given range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_output_score_terms", 
               "doc": {
                  "headline": "Clears the output score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_entry_id", 
               "doc": {
                  "headline": "Sets the grade entry ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): a grade entry ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_id: a grade entry ``Id``\n        :type grade_entry_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_entry_id_terms", 
               "doc": {
                  "headline": "Clears the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_query", 
               "doc": {
                  "headline": "Tests if a ``GradeEntryQuery`` is available for querying grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade entry query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade entry query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query", 
               "doc": {
                  "headline": "Gets the query for a grade entry.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_entry", 
               "doc": {
                  "headline": "Matches grades that are assigned to any grade entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grades used in any\n                grade entry, ``false`` to match grades that are not used\n                in any grade entries\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grades used in any grade entry, ``false`` to match grades that are not used in any grade entries\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_entry_terms", 
               "doc": {
                  "headline": "Clears the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_terms", 
               "doc": {
                  "headline": "Clears the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_query_record", 
               "doc": {
                  "headline": "Gets the grade query record corresponding to the given ``Grade`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): a grade record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeQueryRecord) - the grade\n                query record", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(grade_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_record_type: a grade record type\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade query record\n        :rtype: ``osid.grading.records.GradeQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeQueryRecord", 
         "shortname": "GradeQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeQueryInspector", 
         "shortname": "GradeQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining grade queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidSubjugateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidSubjugateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_grade_system_id_terms", 
            "get_grade_system_terms", 
            "get_input_score_start_range_terms", 
            "get_input_score_end_range_terms", 
            "get_input_score_terms", 
            "get_output_score_terms", 
            "get_grade_entry_id_terms", 
            "get_grade_entry_terms", 
            "get_gradebook_id_terms", 
            "get_gradebook_terms", 
            "get_grade_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_terms", 
               "doc": {
                  "headline": "Gets the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_input_score_start_range_terms", 
               "doc": {
                  "headline": "Gets the input score start range terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the input score\n                start range terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the input score start range terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_input_score_end_range_terms", 
               "doc": {
                  "headline": "Gets the input score end range terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the input score\n                end range terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the input score end range terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_input_score_terms", 
               "doc": {
                  "headline": "Gets the input score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the input score\n                range terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the input score range terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_output_score_terms", 
               "doc": {
                  "headline": "Gets the output score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the output score\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the output score terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_id_terms", 
               "doc": {
                  "headline": "Gets the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade entry ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_terms", 
               "doc": {
                  "headline": "Gets the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQueryInspector) - the grade\n                entry terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry terms\n        :rtype: ``osid.grading.GradeEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_terms", 
               "doc": {
                  "headline": "Gets the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_query_inspector_record", 
               "doc": {
                  "headline": "Gets the grade query inspector record corresponding to the given ``Grade`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): a grade record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeQueryInspectorRecord) - the\n                grade query inspector record", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(grade_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_record_type: a grade record type\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade query inspector record\n        :rtype: ``osid.grading.records.GradeQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeQueryInspectorRecord", 
         "shortname": "GradeQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeForm", 
         "shortname": "GradeForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Grades``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``GradeAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidSubjugateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidSubjugateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableForm"
            }
         ], 
         "method_names": [
            "get_input_score_start_range_metadata", 
            "set_input_score_start_range", 
            "clear_input_start_score_range", 
            "get_input_score_end_range_metadata", 
            "set_input_score_end_range", 
            "clear_input_score_end_range", 
            "get_output_score_metadata", 
            "set_output_score", 
            "clear_output_score", 
            "get_grade_form_record"
         ], 
         "methods": [
            {
               "name": "get_input_score_start_range_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the input score start range.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the input score start\n                range", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the input score start range\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_input_score_start_range", 
               "doc": {
                  "headline": "Sets the input score start range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the new start range\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid\n        raise:  NoAccess - ``range`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the new start range\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid\n        :raise: ``NoAccess`` -- ``range`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_start_score_range", 
               "doc": {
                  "headline": "Clears the input score start.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_input_score_end_range_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the input score start range.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the input score start\n                range", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the input score start range\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_input_score_end_range", 
               "doc": {
                  "headline": "Sets the input score start range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the new start range\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid\n        raise:  NoAccess - ``range`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the new start range\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid\n        :raise: ``NoAccess`` -- ``range`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_input_score_end_range", 
               "doc": {
                  "headline": "Clears the input score start.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_output_score_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the output score start range.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the output score start\n                range", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the output score start range\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_output_score", 
               "doc": {
                  "headline": "Sets the output score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the new output score\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid\n        raise:  NoAccess - ``score`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the new output score\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid\n        :raise: ``NoAccess`` -- ``score`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_output_score", 
               "doc": {
                  "headline": "Clears the output score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_form_record", 
               "doc": {
                  "headline": "Gets the ``GradeFormRecord`` corresponding to the given grade record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): the grade record\n                type\n", 
               "return_doc": "        return: (osid.grading.records.GradeFormRecord) - the grade form\n                record", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(grade_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_record_type: the grade record type\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade form record\n        :rtype: ``osid.grading.records.GradeFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeFormRecord", 
         "shortname": "GradeFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSearchOrder", 
         "shortname": "GradeSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidSubjugateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidSubjugateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_grade_system", 
            "supports_grade_system_search_order", 
            "get_grade_system_search_order", 
            "order_by_input_score_start_range", 
            "order_by_input_score_end_range", 
            "order_by_output_score", 
            "get_grade_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_grade_system", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grade_system_search_order", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemSearchOrder`` interface is available for grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_order", 
               "doc": {
                  "headline": "Gets the search order for a grade system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - the grade system\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_input_score_start_range", 
               "doc": {
                  "headline": "Specified a preference for ordering results by start of the input score range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_input_score_end_range", 
               "doc": {
                  "headline": "Specified a preference for ordering results by end of the input score range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_output_score", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the output score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_search_order_record", 
               "doc": {
                  "headline": "Gets the grade search order record corresponding to the given grade record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    grade_record_type (osid.type.Type): a grade record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSearchOrderRecord) - the\n                grade search order record", 
               "error_doc": "        raise:  NullArgument - ``grade_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(grade_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_record_type: a grade record type\n        :type grade_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade search order record\n        :rtype: ``osid.grading.records.GradeSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSearchOrderRecord", 
         "shortname": "GradeSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeList", 
         "shortname": "GradeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradeList`` provides a means for accessing ``Grade`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gl.hasNext()) { Grade grade = gl.getNextGrade(); }\n\n    or\n      while (gl.hasNext()) {\n           Grade[] grades = gl.getNextGrades(gl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_grade", 
            "get_next_grades"
         ], 
         "methods": [
            {
               "name": "get_next_grade", 
               "doc": {
                  "headline": "Gets the next ``Grade`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the next ``Grade`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Grade`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Grade`` in this list. The ``has_next()`` method should be used to test that a next ``Grade`` is available before calling this method.\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_grades", 
               "doc": {
                  "headline": "Gets the next set of ``Grade`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Grade`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.grading.Grade) - an array of ``Grade``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Grade`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Grade`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystem", 
         "shortname": "GradeSystem", 
         "category": "objects", 
         "doc": {
            "headline": "A ``GradeSystem`` represents a grading system.", 
            "body": "    The system can be based on assigned Grades or based on a numeric\n    scale."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Aggregateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Aggregateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Aggregateable"
            }
         ], 
         "method_names": [
            "is_based_on_grades", 
            "get_grade_ids", 
            "get_grades", 
            "get_lowest_numeric_score", 
            "get_numeric_score_increment", 
            "get_highest_numeric_score", 
            "get_grade_system_record"
         ], 
         "methods": [
            {
               "name": "is_based_on_grades", 
               "doc": {
                  "headline": "Tests if the grading system is based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if the grading system is based on\n                grades, ``false`` if the system is a numeric score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if the grading system is based on grades, ``false`` if the system is a numeric score\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_ids", 
               "doc": {
                  "headline": "Gets the grade ``Ids`` in this system ranked from highest to lowest.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the list of grades ``Ids``", 
               "error_doc": "        raise:  IllegalState - ``is_based_on_grades()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of grades ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_based_on_grades()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grades", 
               "doc": {
                  "headline": "Gets the grades in this system ranked from highest to lowest.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeList) - the list of grades", 
               "error_doc": "        raise:  IllegalState - ``is_based_on_grades()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of grades\n        :rtype: ``osid.grading.GradeList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_based_on_grades()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_lowest_numeric_score", 
               "doc": {
                  "headline": "Gets the lowest number in a numeric grading system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the lowest number", 
               "error_doc": "        raise:  IllegalState - ``is_based_on_grades()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the lowest number\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_based_on_grades()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_score_increment", 
               "doc": {
                  "headline": "Gets the incremental step.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the increment", 
               "error_doc": "        raise:  IllegalState - ``is_based_on_grades()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the increment\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_based_on_grades()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_highest_numeric_score", 
               "doc": {
                  "headline": "Gets the highest number in a numeric grading system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the highest number", 
               "error_doc": "        raise:  IllegalState - ``is_based_on_grades()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the highest number\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_based_on_grades()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_record", 
               "doc": {
                  "headline": "Gets the grade system record corresponding to the given ``GradeSystem`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``grade_system_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(grade_system_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): the type of\n                the record to retrieve\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemRecord) - the grade\n                system record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_record_type: the type of the record to retrieve\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system record\n        :rtype: ``osid.grading.records.GradeSystemRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemRecord", 
         "shortname": "GradeSystemRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystem``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemQuery", 
         "shortname": "GradeSystemQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching grade systems.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidAggregateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidAggregateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableQuery"
            }
         ], 
         "method_names": [
            "match_based_on_grades", 
            "clear_based_on_grades_terms", 
            "match_grade_id", 
            "clear_grade_id_terms", 
            "supports_grade_query", 
            "get_grade_query", 
            "match_any_grade", 
            "clear_grade_terms", 
            "match_lowest_numeric_score", 
            "clear_lowest_numeric_score_terms", 
            "match_numeric_score_increment", 
            "clear_numeric_score_increment_terms", 
            "match_highest_numeric_score", 
            "clear_highest_numeric_score_terms", 
            "match_gradebook_column_id", 
            "clear_gradebook_column_id_terms", 
            "supports_gradebook_column_query", 
            "get_gradebook_column_query", 
            "match_any_gradebook_column", 
            "clear_gradebook_column_terms", 
            "match_gradebook_id", 
            "clear_gradebook_id_terms", 
            "supports_gradebook_query", 
            "get_gradebook_query", 
            "clear_gradebook_terms", 
            "get_grade_system_query_record"
         ], 
         "methods": [
            {
               "name": "match_based_on_grades", 
               "doc": {
                  "headline": "Matches grade systems based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_based_on_grades_terms", 
               "doc": {
                  "headline": "Clears the grade ``based`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_id", 
               "doc": {
                  "headline": "Sets the grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_id_terms", 
               "doc": {
                  "headline": "Clears the grade ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available for querying grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade", 
               "doc": {
                  "headline": "Matches grade systems with any grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade systems with\n                any grade, ``false`` to match systems with no grade\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade systems with any grade, ``false`` to match systems with no grade\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_terms", 
               "doc": {
                  "headline": "Clears the grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_lowest_numeric_score", 
               "doc": {
                  "headline": "Matches grade systems whose low end score falls in the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): low end of range\n        arg:    end (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param start: low end of range\n        :type start: ``decimal``\n        :param end: high end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_lowest_numeric_score_terms", 
               "doc": {
                  "headline": "Clears the lowest numeric score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_numeric_score_increment", 
               "doc": {
                  "headline": "Matches grade systems numeric score increment is between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): low end of range\n        arg:    end (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param start: low end of range\n        :type start: ``decimal``\n        :param end: high end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_numeric_score_increment_terms", 
               "doc": {
                  "headline": "Clears the numeric score increment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_highest_numeric_score", 
               "doc": {
                  "headline": "Matches grade systems whose high end score falls in the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): low end of range\n        arg:    end (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param start: low end of range\n        :type start: ``decimal``\n        :param end: high end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_highest_numeric_score_terms", 
               "doc": {
                  "headline": "Clears the highest numeric score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_column_id", 
               "doc": {
                  "headline": "Sets the gradebook column ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook column.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_gradebook_column", 
               "doc": {
                  "headline": "Matches grade systems assigned to any gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade systems mapped\n                to any column, ``false`` to match systems mapped to no\n                columns\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade systems mapped to any column, ``false`` to match systems mapped to no columns\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_gradebook_column_terms", 
               "doc": {
                  "headline": "Clears the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_terms", 
               "doc": {
                  "headline": "Clears the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query_record", 
               "doc": {
                  "headline": "Gets the grade system query record corresponding to the given ``GradeSystem`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): a grade\n                system record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemQueryRecord) - the\n                grade system query record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_record_type: a grade system record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system query record\n        :rtype: ``osid.grading.records.GradeSystemQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemQueryRecord", 
         "shortname": "GradeSystemQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemQueryInspector", 
         "shortname": "GradeSystemQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining grade system queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidAggregateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidAggregateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_based_on_grades_terms", 
            "get_grade_id_terms", 
            "get_grade_terms", 
            "get_lowest_numeric_score_terms", 
            "get_numeric_score_increment_terms", 
            "get_highest_numeric_score_terms", 
            "get_gradebook_column_id_terms", 
            "get_gradebook_column_terms", 
            "get_gradebook_id_terms", 
            "get_gradebook_terms", 
            "get_grade_system_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_based_on_grades_terms", 
               "doc": {
                  "headline": "Gets the grade-based systems terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the grade-based\n                systems terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade-based systems terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_id_terms", 
               "doc": {
                  "headline": "Gets the grade ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_terms", 
               "doc": {
                  "headline": "Gets the grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the grade terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_lowest_numeric_score_terms", 
               "doc": {
                  "headline": "Gets the lowest numeric score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the lowest\n                numeric score terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the lowest numeric score terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_numeric_score_increment_terms", 
               "doc": {
                  "headline": "Gets the numeric score increment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the numeric score\n                increment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the numeric score increment terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_highest_numeric_score_terms", 
               "doc": {
                  "headline": "Gets the highest numeric score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the highest\n                numeric score terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the highest numeric score terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook column ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_terms", 
               "doc": {
                  "headline": "Gets the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebook column terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column terms\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_terms", 
               "doc": {
                  "headline": "Gets the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query_inspector_record", 
               "doc": {
                  "headline": "Gets the grade system query inspector record corresponding to the given ``GradeSystem`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): a grade\n                system record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemQueryInspectorRecord) -\n                the grade system query inspector record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_record_type: a grade system record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system query inspector record\n        :rtype: ``osid.grading.records.GradeSystemQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemQueryInspectorRecord", 
         "shortname": "GradeSystemQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemForm", 
         "shortname": "GradeSystemForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``GradeSystems``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``GradeSystemAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidAggregateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidAggregateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableForm"
            }
         ], 
         "method_names": [
            "get_based_on_grades_metadata", 
            "set_base_on_grades", 
            "clear_based_on_grades", 
            "get_lowest_numeric_score_metadata", 
            "set_lowest_numeric_score", 
            "clear_lowest_score", 
            "get_numeric_score_increment_metadata", 
            "set_numeric_score_increment", 
            "clear_numeric_score_increment", 
            "get_highest_numeric_score_metadata", 
            "set_highest_numeric_score", 
            "clear_highest_numeric_score", 
            "get_grade_system_form_record"
         ], 
         "methods": [
            {
               "name": "get_based_on_grades_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grade-based designation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade-based\n                designation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade-based designation\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_base_on_grades", 
               "doc": {
                  "headline": "Sets the grade-based designation.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grades (boolean): the grade-based designation\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grades`` is invalid\n        raise:  NoAccess - ``grades`` cannot be modified", 
               "sphinx_param_doc": "        :param grades: the grade-based designation\n        :type grades: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grades`` is invalid\n        :raise: ``NoAccess`` -- ``grades`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "grades", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_based_on_grades", 
               "doc": {
                  "headline": "Clears the based on grades designation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_lowest_numeric_score_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the lowest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the lowest numeric score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the lowest numeric score\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_lowest_numeric_score", 
               "doc": {
                  "headline": "Sets the lowest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the lowest numeric score\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid\n        raise:  NoAccess - ``score`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the lowest numeric score\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid\n        :raise: ``NoAccess`` -- ``score`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_lowest_score", 
               "doc": {
                  "headline": "Clears the lowest score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_score_increment_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the lowest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the lowest numeric score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the lowest numeric score\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_numeric_score_increment", 
               "doc": {
                  "headline": "Sets the numeric score increment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    increment (decimal): the numeric score increment\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``increment`` is invalid\n        raise:  NoAccess - ``increment`` cannot be modified", 
               "sphinx_param_doc": "        :param increment: the numeric score increment\n        :type increment: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``increment`` is invalid\n        :raise: ``NoAccess`` -- ``increment`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "increment", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_numeric_score_increment", 
               "doc": {
                  "headline": "Clears the numeric score increment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_highest_numeric_score_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the highest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the highest numeric score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the highest numeric score\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_highest_numeric_score", 
               "doc": {
                  "headline": "Sets the highest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the highest numeric score\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid\n        raise:  NoAccess - ``score`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the highest numeric score\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid\n        :raise: ``NoAccess`` -- ``score`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_highest_numeric_score", 
               "doc": {
                  "headline": "Clears the highest numeric score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_form_record", 
               "doc": {
                  "headline": "Gets the ``GradeSystemFormRecord`` corresponding to the given grade system record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): the grade\n                system record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemFormRecord) - the grade\n                system form record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_record_type: the grade system record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system form record\n        :rtype: ``osid.grading.records.GradeSystemFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemFormRecord", 
         "shortname": "GradeSystemFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemSearchOrder", 
         "shortname": "GradeSystemSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidAggregateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidAggregateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_based_on_grades", 
            "order_by_lowest_numeric_score", 
            "order_by_numeric_score_increment", 
            "order_by_highest_numeric_score", 
            "get_grade_system_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_based_on_grades", 
               "doc": {
                  "headline": "Orders the results by systems based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_lowest_numeric_score", 
               "doc": {
                  "headline": "Orders the results by lowest score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_numeric_score_increment", 
               "doc": {
                  "headline": "Orders the results by score increment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_highest_numeric_score", 
               "doc": {
                  "headline": "Orders the results by highest score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_order_record", 
               "doc": {
                  "headline": "Gets the grade system search order record corresponding to the given grade entry record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    grade_system_record_type (osid.type.Type): a grade\n                system record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemSearchOrderRecord) -\n                the grade system search order record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_record_type: a grade system record type\n        :type grade_system_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system search order record\n        :rtype: ``osid.grading.records.GradeSystemSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemSearchOrderRecord", 
         "shortname": "GradeSystemSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemSearch", 
         "shortname": "GradeSystemSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing grade system searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_grade_systems", 
            "order_grade_system_results", 
            "get_grade_system_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_grade_systems", 
               "doc": {
                  "headline": "Execute this search among the given list of grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_ids (osid.id.IdList): list of grade systems\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_ids`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_ids: list of grade systems\n        :type grade_system_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "grade_system_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_grade_system_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_search_order\n                (osid.grading.GradeSystemSearchOrder): grade system\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_search_order`` is ``null``\n        raise:  Unsupported - ``grade_system_search_order`` is not of\n                this service", 
               "sphinx_param_doc": "        :param grade_system_search_order: grade system search order\n        :type grade_system_search_order: ``osid.grading.GradeSystemSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``grade_system_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeSystemSearchOrder", 
                     "var_name": "grade_system_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeSystemSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_search_record", 
               "doc": {
                  "headline": "Gets the grade system search record corresponding to the given grade system search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    grade_system_search_record_type (osid.type.Type): a\n                grade system search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemSearchRecord) - the\n                grade system search record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_search_record_type: a grade system search record type\n        :type grade_system_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system search record\n        :rtype: ``osid.grading.records.GradeSystemSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemSearchRecord", 
         "shortname": "GradeSystemSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemSearchResults", 
         "shortname": "GradeSystemSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_grade_systems", 
            "get_grade_system_query_inspector", 
            "get_grade_system_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_grade_systems", 
               "doc": {
                  "headline": "Gets the grade system list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemList) - the grade system list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system list\n        :rtype: ``osid.grading.GradeSystemList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query inspector\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_results_record", 
               "doc": {
                  "headline": "Gets the grade system search results record corresponding to the given grade system search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    grade_system_search_record_type (osid.type.Type): a\n                grade system search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeSystemSearchResultsRecord) -\n                the grade system search results record", 
               "error_doc": "        raise:  NullArgument - ``grade_system_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_system_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_system_search_record_type: a grade system search record type\n        :type grade_system_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade system search results record\n        :rtype: ``osid.grading.records.GradeSystemSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_system_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_system_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeSystemSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeSystemSearchResultsRecord", 
         "shortname": "GradeSystemSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeSystemSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeSystemReceiver", 
         "shortname": "GradeSystemReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The vault receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``GradeSystem`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_grade_system", 
            "changed_grade_system", 
            "deleted_grade_system"
         ], 
         "methods": [
            {
               "name": "new_grade_system", 
               "doc": {
                  "headline": "The callback for notifications of new grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the new\n                ``GradeSystem``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the new ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_grade_system", 
               "doc": {
                  "headline": "The callback for notification of updated grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the updated\n                ``GradeSystem``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the updated ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_grade_system", 
               "doc": {
                  "headline": "The callback for notification of deleted grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the ``Id`` of the deleted\n                ``GradeSystem``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_system_id: the ``Id`` of the deleted ``GradeSystem``\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeSystemList", 
         "shortname": "GradeSystemList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradeSystemList`` provides a means for accessing ``GradeSystem`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gsl.hasNext()) { GradeSystem system =\n    gsl.getNextGradeSystem(); }\n\n    or\n      while (gsl.hasNext()) {\n           GradeSystem[] systems = gsl.getNextGradeSystems(gsl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_grade_system", 
            "get_next_grade_systems"
         ], 
         "methods": [
            {
               "name": "get_next_grade_system", 
               "doc": {
                  "headline": "Gets the next ``GradeSystem`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the next ``GradeSystem`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``GradeSystem`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``GradeSystem`` in this list. The ``has_next()`` method should be used to test that a next ``GradeSystem`` is available before calling this method.\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_grade_systems", 
               "doc": {
                  "headline": "Gets the next set of ``GradeSystem`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``GradeSystem`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.grading.GradeSystem) - an array of ``GradeSystem``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``GradeSystem`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``GradeSystem`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntry", 
         "shortname": "GradeEntry", 
         "category": "objects", 
         "doc": {
            "headline": "A ``GradeEntry`` represents an entry in a ``Gradebook``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_gradebook_column_id", 
            "get_gradebook_column", 
            "get_key_resource_id", 
            "get_key_resource", 
            "is_derived", 
            "overrides_calculated_entry", 
            "get_overridden_calculated_entry_id", 
            "get_overridden_calculated_entry", 
            "is_ignored_for_calculations", 
            "is_graded", 
            "get_grade_id", 
            "get_grade", 
            "get_score", 
            "get_time_graded", 
            "get_grader_id", 
            "get_grader", 
            "get_grading_agent_id", 
            "get_grading_agent", 
            "get_grade_entry_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_column_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Id`` of the ``GradebookColumn``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Id`` of the ``GradebookColumn``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column", 
               "doc": {
                  "headline": "Gets the ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - the ``GradebookColumn``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``GradebookColumn``\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_key_resource_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the key resource of this entry.", 
                  "body": "        The key resource may be a student or other applicable key to\n        identify a row of grading entries."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - ``Id`` of the key resource", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``Id`` of the key resource\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_key_resource", 
               "doc": {
                  "headline": "Gets the key resource of this entry.", 
                  "body": "        The key resource may be a student or other applicable key to\n        identify a row of grading entries."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the key resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the key resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_derived", 
               "doc": {
                  "headline": "Tests if this is a calculated entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this entry is a calculated\n                entry, ``false`` otherwise. If ``true,`` then\n                ``overrides_calculated_entry()`` must be ``false``.", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this entry is a calculated entry, ``false`` otherwise. If ``true,`` then ``overrides_calculated_entry()`` must be ``false``.\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "overrides_calculated_entry", 
               "doc": {
                  "headline": "Tests if this is a manual entry that overrides a calculated entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this entry overrides a\n                calculated entry, ``false`` otherwise. If ``true,`` then\n                ``is_derived()`` must be ``false``.", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this entry overrides a calculated entry, ``false`` otherwise. If ``true,`` then ``is_derived()`` must be ``false``.\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_overridden_calculated_entry_id", 
               "doc": {
                  "headline": "Gets the calculated entry ``Id`` this entry overrides.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the calculated entry ``Id``", 
               "error_doc": "        raise:  IllegalState - ``overrides_derived_entry()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calculated entry ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``overrides_derived_entry()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_overridden_calculated_entry", 
               "doc": {
                  "headline": "Gets the calculated entry this entry overrides.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntry) - the calculated entry", 
               "error_doc": "        raise:  IllegalState - ``overrides_calculated_entry()`` is\n                ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calculated entry\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``overrides_calculated_entry()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_ignored_for_calculations", 
               "doc": {
                  "headline": "Tests if this is entry should be ignored in any averaging, scaling or curve calculation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this entry is ignored, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this entry is ignored, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "is_graded", 
               "doc": {
                  "headline": "Tests if a grade or score has been assigned to this entry.", 
                  "body": "        Generally, an entry is created with a grade or score."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade has been assigned,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade has been assigned, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_id", 
               "doc": {
                  "headline": "Gets the grade ``Id`` in this entry if the grading system is based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade ``Id``", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``GradeSystem.isBasedOnGrades()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``GradeSystem.isBasedOnGrades()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade", 
               "doc": {
                  "headline": "Gets the grade in this entry if the grading system is based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the grade", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``GradeSystem.isBasedOnGrades()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``GradeSystem.isBasedOnGrades()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_score", 
               "doc": {
                  "headline": "Gets the score in this entry if the grading system is not based on grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the score", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``GradeSystem.isBasedOnGrades()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``GradeSystem.isBasedOnGrades()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_time_graded", 
               "doc": {
                  "headline": "Gets the time the gradeable object was graded.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the timestamp of the\n                grading entry", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``is_derived()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the timestamp of the grading entry\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``is_derived()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grader_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Resource`` that created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Id`` of the ``Resource``", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``is_derived()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Id`` of the ``Resource``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``is_derived()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grader", 
               "doc": {
                  "headline": "Gets the ``Resource`` that created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the ``Resource``", 
               "error_doc": "        raise:  IllegalState - ``is_graded() is false or is_derived() is\n                true``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Resource``\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded() is false or is_derived() is true``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_grading_agent_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Agent`` that created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Id`` of the ``Agent``", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false`` or\n                ``is_derived()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Id`` of the ``Agent``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false`` or ``is_derived()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grading_agent", 
               "doc": {
                  "headline": "Gets the ``Agent`` that created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the ``Agent``", 
               "error_doc": "        raise:  IllegalState - ``is_graded() is false or is_derived() is\n                true``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded() is false or is_derived() is true``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_grade_entry_record", 
               "doc": {
                  "headline": "Gets the grade entry record corresponding to the given ``GradeEntry`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``grade_entry_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(grade_entry_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): the type of\n                the record to retrieve\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntryRecord) - the grade\n                entry record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: the type of the record to retrieve\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry record\n        :rtype: ``osid.grading.records.GradeEntryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntryRecord", 
         "shortname": "GradeEntryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntry``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntryQuery", 
         "shortname": "GradeEntryQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching grade entries.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_gradebook_column_id", 
            "clear_gradebook_column_id_terms", 
            "supports_gradebook_column_query", 
            "get_gradebook_column_query", 
            "clear_gradebook_column_terms", 
            "match_key_resource_id", 
            "clear_key_resource_id_terms", 
            "supports_key_resource_query", 
            "get_key_resource_query", 
            "match_any_key_resource", 
            "clear_key_resource_terms", 
            "match_derived", 
            "clear_derived_terms", 
            "match_overridden_grade_entry_id", 
            "clear_overridden_grade_entry_id_terms", 
            "supports_overridden_grade_entry_query", 
            "get_overridden_grade_entry_query", 
            "match_any_overridden_grade_entry", 
            "clear_overridden_grade_entry_terms", 
            "match_ignored_for_calculations", 
            "clear_ignored_for_calculations_terms", 
            "match_grade_id", 
            "clear_grade_id_terms", 
            "supports_grade_query", 
            "get_grade_query", 
            "match_any_grade", 
            "clear_grade_terms", 
            "match_score", 
            "match_any_score", 
            "clear_score_terms", 
            "match_time_graded", 
            "clear_time_graded_terms", 
            "match_grader_id", 
            "clear_grader_id_terms", 
            "supports_grader_query", 
            "get_grader_query", 
            "match_any_grader", 
            "clear_grader_terms", 
            "match_grading_agent_id", 
            "clear_grading_agent_id_terms", 
            "supports_grading_agent_query", 
            "get_grading_agent_query", 
            "match_any_grading_agent", 
            "clear_grading_agent_terms", 
            "match_gradebook_id", 
            "clear_gradebook_id_terms", 
            "supports_gradebook_query", 
            "get_gradebook_query", 
            "clear_gradebook_terms", 
            "get_grade_entry_query_record"
         ], 
         "methods": [
            {
               "name": "match_gradebook_column_id", 
               "doc": {
                  "headline": "Sets the gradebook column ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnQuery`` is available for querying creators.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook column.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_terms", 
               "doc": {
                  "headline": "Clears the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_key_resource_id", 
               "doc": {
                  "headline": "Sets the key resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_key_resource_id_terms", 
               "doc": {
                  "headline": "Clears the key resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_key_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQUery`` is available for querying key resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_key_resource_query", 
               "doc": {
                  "headline": "Gets the query for a key resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_key_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_key_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_key_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_key_resource", 
               "doc": {
                  "headline": "Matches grade entries with any key resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries with\n                any key resource, ``false`` to match entries with no key\n                resource\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries with any key resource, ``false`` to match entries with no key resource\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_key_resource_terms", 
               "doc": {
                  "headline": "Clears the key resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_derived", 
               "doc": {
                  "headline": "Matches derived grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match derived grade entries\n                , ``false`` to match manual entries\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match derived grade entries , ``false`` to match manual entries\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_derived_terms", 
               "doc": {
                  "headline": "Clears the derived terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_overridden_grade_entry_id", 
               "doc": {
                  "headline": "Sets the grade entry ``Id`` for an overridden calculated grade entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): a grade entry ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_id: a grade entry ``Id``\n        :type grade_entry_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_overridden_grade_entry_id_terms", 
               "doc": {
                  "headline": "Clears the overridden grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_overridden_grade_entry_query", 
               "doc": {
                  "headline": "Tests if a ``GradeEntry`` is available for querying overridden calculated grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade entry query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade entry query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_overridden_grade_entry_query", 
               "doc": {
                  "headline": "Gets the query for an overridden derived grade entry.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_overridden_grade_entry_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_overridden_grade_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_overridden_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_overridden_grade_entry", 
               "doc": {
                  "headline": "Matches grade entries overriding any calculated grade entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries\n                overriding any grade entry, ``false`` to match entries\n                not overriding any entry\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries overriding any grade entry, ``false`` to match entries not overriding any entry\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_overridden_grade_entry_terms", 
               "doc": {
                  "headline": "Clears the overridden grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ignored_for_calculations", 
               "doc": {
                  "headline": "Matches grade entries ignored for calculations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries ignored\n                for calculations, ``false`` to match entries used in\n                calculations\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries ignored for calculations, ``false`` to match entries used in calculations\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ignored_for_calculations_terms", 
               "doc": {
                  "headline": "Clears the ignored for calculation entries terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_id", 
               "doc": {
                  "headline": "Sets the grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_id_terms", 
               "doc": {
                  "headline": "Clears the grade ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available for querying grades.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade", 
               "doc": {
                  "headline": "Matches grade entries with any grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries with\n                any grade, ``false`` to match entries with no grade\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries with any grade, ``false`` to match entries with no grade\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_terms", 
               "doc": {
                  "headline": "Clears the grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_score", 
               "doc": {
                  "headline": "Matches grade entries which score is between the specified score inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_score", 
               "doc": {
                  "headline": "Matches grade entries with any score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries with\n                any score, ``false`` to match entries with no score\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries with any score, ``false`` to match entries with no score\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_score_terms", 
               "doc": {
                  "headline": "Clears the score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_time_graded", 
               "doc": {
                  "headline": "Matches grade entries which graded time is between the specified times inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of range\n        arg:    end (osid.calendaring.DateTime): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of range\n        :type end: ``osid.calendaring.DateTime``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_time_graded_terms", 
               "doc": {
                  "headline": "Clears the time graded terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grader_id", 
               "doc": {
                  "headline": "Sets the agent ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grader_id_terms", 
               "doc": {
                  "headline": "Clears the grader ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grader_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying graders.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grader_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grader", 
               "doc": {
                  "headline": "Matches grade entries with any grader.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries with\n                any grader, ``false`` to match entries with no grader\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries with any grader, ``false`` to match entries with no grader\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grader_terms", 
               "doc": {
                  "headline": "Clears the grader terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grading_agent_id", 
               "doc": {
                  "headline": "Sets the grading agent ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grading_agent_id_terms", 
               "doc": {
                  "headline": "Clears the grader ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grading_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available for querying grading agents.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grading_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grading_agent_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grading_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grading_agent", 
               "doc": {
                  "headline": "Matches grade entries with any grading agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match grade entries with\n                any grading agent, ``false`` to match entries with no\n                grading agent\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match grade entries with any grading agent, ``false`` to match entries with no grading agent\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grading_agent_terms", 
               "doc": {
                  "headline": "Clears the grading agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available for querying resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_terms", 
               "doc": {
                  "headline": "Clears the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query_record", 
               "doc": {
                  "headline": "Gets the grade entry query record corresponding to the given ``GradeEntry`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): a grade entry\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntryQueryRecord) - the grade\n                entry query record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: a grade entry record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry query record\n        :rtype: ``osid.grading.records.GradeEntryQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntryQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntryQueryRecord", 
         "shortname": "GradeEntryQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntryQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntryQueryInspector", 
         "shortname": "GradeEntryQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining grade entry queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_gradebook_column_id_terms", 
            "get_gradebook_column_terms", 
            "get_key_resource_id_terms", 
            "get_key_resource_terms", 
            "get_derived_terms", 
            "get_overridden_grade_entry_id_terms", 
            "get_overridden_grade_entry_terms", 
            "get_ignored_for_calculations_terms", 
            "get_grade_id_terms", 
            "get_grade_terms", 
            "get_score_terms", 
            "get_time_graded_terms", 
            "get_grader_id_terms", 
            "get_grader_terms", 
            "get_grading_agent_id_terms", 
            "get_grading_agent_terms", 
            "get_gradebook_id_terms", 
            "get_gradebook_terms", 
            "get_grade_entry_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook column ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_terms", 
               "doc": {
                  "headline": "Gets the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebook column terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column terms\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_key_resource_id_terms", 
               "doc": {
                  "headline": "Gets the key resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the key resource ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the key resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_key_resource_terms", 
               "doc": {
                  "headline": "Gets the key resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the key\n                resource terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the key resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_derived_terms", 
               "doc": {
                  "headline": "Gets the derived terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the derived terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the derived terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_overridden_grade_entry_id_terms", 
               "doc": {
                  "headline": "Gets the overridden calculated grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the overridden grade entry\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the overridden grade entry ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_overridden_grade_entry_terms", 
               "doc": {
                  "headline": "Gets the overriden derived grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQueryInspector) - the overridden\n                grade entry terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the overridden grade entry terms\n        :rtype: ``osid.grading.GradeEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ignored_for_calculations_terms", 
               "doc": {
                  "headline": "Gets the ignored for caluclation entries terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the ignored for\n                calculation terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ignored for calculation terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_id_terms", 
               "doc": {
                  "headline": "Gets the grade ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_terms", 
               "doc": {
                  "headline": "Gets the grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the grade terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_score_terms", 
               "doc": {
                  "headline": "Gets the score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the score terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the score terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_time_graded_terms", 
               "doc": {
                  "headline": "Gets the time graded terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeRangeTerm) - the time graded\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time graded terms\n        :rtype: ``osid.search.terms.DateTimeRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grader_id_terms", 
               "doc": {
                  "headline": "Gets the grader ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grader ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grader ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grader_terms", 
               "doc": {
                  "headline": "Gets the grader terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the grader\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grader terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grading_agent_id_terms", 
               "doc": {
                  "headline": "Gets the grading agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grading agent ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grading agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grading_agent_terms", 
               "doc": {
                  "headline": "Gets the grading agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the grading\n                agent terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grading agent terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_terms", 
               "doc": {
                  "headline": "Gets the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query_inspector_record", 
               "doc": {
                  "headline": "Gets the grade entry query inspector record corresponding to the given ``GradeEntry`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): a grade entry\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntryQueryInspectorRecord) -\n                the grade entry query inspector record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: a grade entry record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry query inspector record\n        :rtype: ``osid.grading.records.GradeEntryQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntryQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntryQueryInspectorRecord", 
         "shortname": "GradeEntryQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntryQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntryForm", 
         "shortname": "GradeEntryForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``GradeEntries``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``GradeEntryAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_ignored_for_calculations_metadata", 
            "set_ignored_for_calculations", 
            "clear_ignored_for_calculations", 
            "get_grade_metadata", 
            "set_grade", 
            "clear_grade", 
            "get_score_metadata", 
            "set_score", 
            "clear_score", 
            "get_grade_entry_form_record"
         ], 
         "methods": [
            {
               "name": "get_ignored_for_calculations_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the ignore flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the ignore flag", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the ignore flag\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_ignored_for_calculations", 
               "doc": {
                  "headline": "Sets the ignore for calculations flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    ignore (boolean): the new ignore flag\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``ignore`` is invalid\n        raise:  NoAccess - ``ignore`` cannot be modified", 
               "sphinx_param_doc": "        :param ignore: the new ignore flag\n        :type ignore: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``ignore`` is invalid\n        :raise: ``NoAccess`` -- ``ignore`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "ignore", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ignored_for_calculations", 
               "doc": {
                  "headline": "Clears the ignore for calculations flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_grade", 
               "doc": {
                  "headline": "Sets the grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the new grade\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid or\n                ``GradebookColumn.getGradeSystem().isBasedOnGrades()``\n                is ``false``\n        raise:  NoAccess - ``grade_id`` cannot be modified\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: the new grade\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid or ``GradebookColumn.getGradeSystem().isBasedOnGrades()`` is ``false``\n        :raise: ``NoAccess`` -- ``grade_id`` cannot be modified\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade", 
               "doc": {
                  "headline": "Clears the grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_score_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the score\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_score", 
               "doc": {
                  "headline": "Sets the score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    score (decimal): the new score\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``score`` is invalid or\n                ``GradebookColumn.getGradeSystem().isBasedOnGrades()``\n                is ``true``\n        raise:  NoAccess - ``score`` cannot be modified", 
               "sphinx_param_doc": "        :param score: the new score\n        :type score: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``score`` is invalid or ``GradebookColumn.getGradeSystem().isBasedOnGrades()`` is ``true``\n        :raise: ``NoAccess`` -- ``score`` cannot be modified", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "score", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_score", 
               "doc": {
                  "headline": "Clears the score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_form_record", 
               "doc": {
                  "headline": "Gets the ``GradeEntryFormRecord`` corresponding to the given grade entry record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): the grade\n                entry record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntryFormRecord) - the grade\n                entry form record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: the grade entry record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry form record\n        :rtype: ``osid.grading.records.GradeEntryFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntryFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntryFormRecord", 
         "shortname": "GradeEntryFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntryForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntrySearchOrder", 
         "shortname": "GradeEntrySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_gradebook_column", 
            "supports_gradebook_column_search_order", 
            "get_gradebook_column_search_order", 
            "order_by_key_resource", 
            "supports_key_resource_search_order", 
            "get_key_resource_search_order", 
            "order_by_derived", 
            "order_by_ignored_for_calculations", 
            "order_by_grade", 
            "supports_grade_search_order", 
            "get_grade_search_order", 
            "order_by_time_graded", 
            "order_by_grader", 
            "supports_grader_search_order", 
            "get_grader_search_order", 
            "order_by_grading_agent", 
            "supports_grading_agent_search_order", 
            "get_grading_agent_search_order", 
            "get_grade_entry_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_gradebook_column", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_gradebook_column_search_order", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column search order\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_search_order", 
               "doc": {
                  "headline": "Gets the search order for a gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSearchOrder) - the\n                gradebook column search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_gradebook_column_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column search order\n        :rtype: ``osid.grading.GradebookColumnSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_key_resource", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the key resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_key_resource_search_order", 
               "doc": {
                  "headline": "Tests if a ``ResourceSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a key resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a key resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_key_resource_search_order", 
               "doc": {
                  "headline": "Gets the search order for a resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the key resource\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_key_resource_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the key resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_key_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_key_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_derived", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the derived entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_ignored_for_calculations", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the ignore for calculations flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_grade", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the grade or score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grade_search_order", 
               "doc": {
                  "headline": "Tests if a ``GradeSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_search_order", 
               "doc": {
                  "headline": "Gets the search order for a grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - the grade search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_time_graded", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the time graded.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_grader", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the grader.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grader_search_order", 
               "doc": {
                  "headline": "Tests if a ``ResourceSearchOrder`` is available for grader resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grader_search_order", 
               "doc": {
                  "headline": "Gets the search order for a grader.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grader_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grader_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grader_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_grading_agent", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the grading agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grading_agent_search_order", 
               "doc": {
                  "headline": "Tests if an ``AgentSearchOrder`` is available fo grading agents.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grading_agent_search_order", 
               "doc": {
                  "headline": "Gets the search order for a grading agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_grading_agent_search_order()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grading_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grading_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_order_record", 
               "doc": {
                  "headline": "Gets the grade entry search order record corresponding to the given grade entry record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    grade_entry_record_type (osid.type.Type): a grade entry\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntrySearchOrderRecord) - the\n                grade entry search order record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_record_type: a grade entry record type\n        :type grade_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry search order record\n        :rtype: ``osid.grading.records.GradeEntrySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntrySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntrySearchOrderRecord", 
         "shortname": "GradeEntrySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntrySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntrySearch", 
         "shortname": "GradeEntrySearch", 
         "category": "searches", 
         "doc": {
            "headline": "``GradeEntrySearch`` defines the interface for specifying package search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_grade_entries", 
            "order_grade_entry_results", 
            "get_grade_entry_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_grade_entries", 
               "doc": {
                  "headline": "Execute this search among the given list of grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_ids (osid.id.IdList): list of grade entries\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_ids`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_ids: list of grade entries\n        :type grade_entry_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "grade_entry_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_grade_entry_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_search_order\n                (osid.grading.GradeEntrySearchOrder): package search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_search_order`` is ``null``\n        raise:  Unsupported - ``grade_entry_search_order`` is not of\n                this service", 
               "sphinx_param_doc": "        :param grade_entry_search_order: package search order\n        :type grade_entry_search_order: ``osid.grading.GradeEntrySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``grade_entry_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradeEntrySearchOrder", 
                     "var_name": "grade_entry_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradeEntrySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_search_record", 
               "doc": {
                  "headline": "Gets the grade entry search record corresponding to the given package search record ``Type``.", 
                  "body": "        This method ie used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    grade_entry_search_record_type (osid.type.Type): a grade\n                entry search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntrySearchRecord) - the\n                grade entry search record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_search_record_type: a grade entry search record type\n        :type grade_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry search record\n        :rtype: ``osid.grading.records.GradeEntrySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntrySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntrySearchRecord", 
         "shortname": "GradeEntrySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntrySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntrySearchResults", 
         "shortname": "GradeEntrySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_grade_entries", 
            "get_grade_entry_query_inspector", 
            "get_grade_entry_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_grade_entries", 
               "doc": {
                  "headline": "Gets the package list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - the grade entry list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry list\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_entry_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQueryInspector) - the grade\n                entry query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query inspector\n        :rtype: ``osid.grading.GradeEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_search_results_record", 
               "doc": {
                  "headline": "Gets the grade entry search results record corresponding to the given grade entry search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    grade_entry_search_record_type (osid.type.Type): a grade\n                entry search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradeEntrySearchResultsRecord) -\n                the grade entry search results record", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(grade_entry_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param grade_entry_search_record_type: a grade entry search record type\n        :type grade_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the grade entry search results record\n        :rtype: ``osid.grading.records.GradeEntrySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(grade_entry_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "grade_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradeEntrySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradeEntrySearchResultsRecord", 
         "shortname": "GradeEntrySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradeEntrySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradeEntryReceiver", 
         "shortname": "GradeEntryReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The grade entry receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted grade entries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_grade_entry", 
            "changed_grade_entry", 
            "deleted_grade_entry"
         ], 
         "methods": [
            {
               "name": "new_grade_entry", 
               "doc": {
                  "headline": "The callback for notifications of new grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the new\n                ``GradeEntry``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the new ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_grade_entry", 
               "doc": {
                  "headline": "The callback for notification of updated grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the updated\n                ``GradeEntry``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the updated ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_grade_entry", 
               "doc": {
                  "headline": "The callback for notification of deleted grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): the ``Id`` of the deleted\n                ``GradeEntry``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param grade_entry_id: the ``Id`` of the deleted ``GradeEntry``\n        :type grade_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradeEntryList", 
         "shortname": "GradeEntryList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradeEntryList`` provides a means for accessing ``GradeEntry`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gel.hasNext()) { GradeEntry entry =\n    gel.getNextGradeEntry(); }\n\n    or\n      while (gel.hasNext()) {\n           GradeEntry[] entries = gel.getNextGradeEntries(gel.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_grade_entry", 
            "get_next_grade_entries"
         ], 
         "methods": [
            {
               "name": "get_next_grade_entry", 
               "doc": {
                  "headline": "Gets the next ``GradeEntry`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntry) - the next ``GradeEntry`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``GradeEntry`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``GradeEntry`` in this list. The ``has_next()`` method should be used to test that a next ``GradeEntry`` is available before calling this method.\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_grade_entries", 
               "doc": {
                  "headline": "Gets the next set of ``GradeEntry`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``GradeEntry`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.grading.GradeEntry) - an array of ``GradeEntry``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``GradeEntry`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``GradeEntry`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.GradeEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.GradeEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumn", 
         "shortname": "GradebookColumn", 
         "category": "objects", 
         "doc": {
            "headline": "A ``GradebookColumn`` represents a series of grade entries in a gradebook.", 
            "body": "    Each GradeEntry in a column share the same ``GradeSystem``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_grade_system_id", 
            "get_grade_system", 
            "get_gradebook_column_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_id", 
               "doc": {
                  "headline": "Gets the ``GradeSystem Id`` in which this grade belongs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade system ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system", 
               "doc": {
                  "headline": "Gets the ``GradeSystem`` in which this grade belongs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the package grade system", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the package grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_gradebook_column_record", 
               "doc": {
                  "headline": "Gets the gradebook column record corresponding to the given ``GradeBookColumn`` record ``Type``.", 
                  "body": "        This method ie used to retrieve an object implementing the\n        requested record. The ``gradebook_column_record_type`` may be\n        the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(gradebook_column_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): the type\n                of the record to retrieve\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnRecord) - the\n                gradebook column record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: the type of the record to retrieve\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column record\n        :rtype: ``osid.grading.records.GradebookColumnRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnRecord", 
         "shortname": "GradebookColumnRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumn``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnQuery", 
         "shortname": "GradebookColumnQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching gradings.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_grade_system_id", 
            "clear_grade_system_id_terms", 
            "supports_grade_system_query", 
            "get_grade_system_query", 
            "match_any_grade_system", 
            "clear_grade_system_terms", 
            "match_grade_entry_id", 
            "clear_grade_entry_id_terms", 
            "supports_grade_entry_query", 
            "get_grade_entry_query", 
            "match_any_grade_entry", 
            "clear_grade_entry_terms", 
            "supports_gradebook_column_summary_query", 
            "get_gradebook_column_summary_query", 
            "clear_gradebook_column_summary_terms", 
            "match_gradebook_id", 
            "clear_gradebook_id_terms", 
            "supports_gradebook_query", 
            "get_gradebook_query", 
            "clear_gradebook_terms", 
            "get_gradebook_column_query_record"
         ], 
         "methods": [
            {
               "name": "match_grade_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system_id_terms", 
               "doc": {
                  "headline": "Clears the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available for querying grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_system", 
               "doc": {
                  "headline": "Matches gradebook columns with any grade system assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match columns with any\n                grade system, ``false`` to match columns with no grade\n                system\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match columns with any grade system, ``false`` to match columns with no grade system\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_system_terms", 
               "doc": {
                  "headline": "Clears the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_entry_id", 
               "doc": {
                  "headline": "Sets the grade entry ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): a grade entry ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_id: a grade entry ``Id``\n        :type grade_entry_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_entry_id_terms", 
               "doc": {
                  "headline": "Clears the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_query", 
               "doc": {
                  "headline": "Tests if a ``GradeEntryQuery`` is available for querying grade entries.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade entry query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade entry query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query", 
               "doc": {
                  "headline": "Gets the query for a grade entry.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_entry", 
               "doc": {
                  "headline": "Matches gradebook columns with any grade entry assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match columns with any\n                grade entry, ``false`` to match columns with no grade\n                entries\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match columns with any grade entry, ``false`` to match columns with no grade entries\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_entry_terms", 
               "doc": {
                  "headline": "Clears the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_summary_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnSummaryQuery`` is available for querying grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column summary query\n                interface is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column summary query interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_query", 
               "doc": {
                  "headline": "Gets the query interface for a gradebook column summary.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSummaryQuery) - the\n                gradebook column summary query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_gradebook_column_summary_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column summary query\n        :rtype: ``osid.grading.GradebookColumnSummaryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_summary_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_summary_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSummaryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_summary_terms", 
               "doc": {
                  "headline": "Clears the gradebook column summary terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available for querying grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets the query interface for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_terms", 
               "doc": {
                  "headline": "Clears the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query_record", 
               "doc": {
                  "headline": "Gets the gradebook column query record corresponding to the given ``GradebookColumn`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                gradebook column record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnQueryRecord) - the\n                gradebook column query record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a gradebook column record type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column query record\n        :rtype: ``osid.grading.records.GradebookColumnQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnQueryRecord", 
         "shortname": "GradebookColumnQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnQueryInspector", 
         "shortname": "GradebookColumnQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining gradebook column queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_grade_system_id_terms", 
            "get_grade_system_terms", 
            "get_grade_entry_id_terms", 
            "get_grade_entry_terms", 
            "get_gradebook_column_summary_terms", 
            "get_gradebook_id_terms", 
            "get_gradebook_terms", 
            "get_gradebook_column_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_terms", 
               "doc": {
                  "headline": "Gets the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_id_terms", 
               "doc": {
                  "headline": "Gets the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade entry ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_terms", 
               "doc": {
                  "headline": "Gets the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQueryInspector) - the grade\n                entry terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry terms\n        :rtype: ``osid.grading.GradeEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_terms", 
               "doc": {
                  "headline": "Gets the gradebook column summary terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSummaryQueryInspector) -\n                the gradebook column summary terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column summary terms\n        :rtype: ``osid.grading.GradebookColumnSummaryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSummaryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_terms", 
               "doc": {
                  "headline": "Gets the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query_inspector_record", 
               "doc": {
                  "headline": "Gets the gradebook column query inspector record corresponding to the given ``GradebookColumn`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                gradebook column record type\n", 
               "return_doc": "        return:\n                (osid.grading.records.GradebookColumnQueryInspectorRecor\n                d) - the gradebook column query inspector record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a gradebook column record type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column query inspector record\n        :rtype: ``osid.grading.records.GradebookColumnQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnQueryInspectorRecord", 
         "shortname": "GradebookColumnQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnForm", 
         "shortname": "GradebookColumnForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``GradebookColumns``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``GradebookAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_grade_system_metadata", 
            "set_grade_system", 
            "clear_grade_system", 
            "get_gradebook_column_form_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grade system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade system", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade system\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_grade_system", 
               "doc": {
                  "headline": "Sets the grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the new grade system\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_system_id`` is invalid\n        raise:  NoAccess - ``grade_system_id`` cannot be modified\n        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: the new grade system\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_system_id`` is invalid\n        :raise: ``NoAccess`` -- ``grade_system_id`` cannot be modified\n        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system", 
               "doc": {
                  "headline": "Clears the grade system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_form_record", 
               "doc": {
                  "headline": "Gets the ``GradebookColumnFormRecord`` corresponding to the given gradebook column record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                gradebook column record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnFormRecord) - the\n                gradebook column form record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a gradebook column record type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column form record\n        :rtype: ``osid.grading.records.GradebookColumnFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnFormRecord", 
         "shortname": "GradebookColumnFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSearchOrder", 
         "shortname": "GradebookColumnSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_grade_system", 
            "supports_grade_system_search_order", 
            "get_gradebook_column_summary_search_order", 
            "supports_gradebook_column_summary_search_order", 
            "get_grade_system_search_order", 
            "get_gradebook_column_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_grade_system", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grade_system_search_order", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemSearchOrder`` is available for grade systems.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_search_order", 
               "doc": {
                  "headline": "Gets the search order for a grade system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - the grade system\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_gradebook_column_summary_search_order", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnSummarySearchOrder`` is available for gradebook column summaries.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column summary\n                search order is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column summary search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_order", 
               "doc": {
                  "headline": "Gets the search order for a gradebook column summary search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnSummarySearchOrder) - the\n                gradebook column summary search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_gradebook_column_summary_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column summary search order\n        :rtype: ``osid.grading.GradebookColumnSummarySearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_summary_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_summary_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnSummarySearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_order_record", 
               "doc": {
                  "headline": "Gets the gradebook column search order record corresponding to the given gradebook column record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    gradebook_column_record_type (osid.type.Type): a\n                gradebook column record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnSearchOrderRecord)\n                - the gradebook column search order record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_record_type: a gradebook column record type\n        :type gradebook_column_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column search order record\n        :rtype: ``osid.grading.records.GradebookColumnSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSearchOrderRecord", 
         "shortname": "GradebookColumnSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSearch", 
         "shortname": "GradebookColumnSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``GradebookColumnSearch`` defines the interface for specifying grading search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_gradebook_columns", 
            "order_gradebook_column_results", 
            "get_gradebook_column_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_gradebook_columns", 
               "doc": {
                  "headline": "Execute this search among the given list of gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_ids (osid.id.IdList): list of gradebook\n                columns\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_ids`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_ids: list of gradebook columns\n        :type gradebook_column_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_column_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_gradebook_column_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_search_order\n                (osid.grading.GradebookColumnSearchOrder): gradebook\n                column search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_search_order`` is\n                ``null``\n        raise:  Unsupported - ``gradebook_column_search_order`` is not\n                of this service", 
               "sphinx_param_doc": "        :param gradebook_column_search_order: gradebook column search order\n        :type gradebook_column_search_order: ``osid.grading.GradebookColumnSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``gradebook_column_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookColumnSearchOrder", 
                     "var_name": "gradebook_column_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookColumnSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_search_record", 
               "doc": {
                  "headline": "Gets the gradebook column search record corresponding to the given gradebook column search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    gradebook_column_search_record_type (osid.type.Type): a\n                gradebook column search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnSearchRecord) - the\n                gradebook column search record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_search_record_type: a gradebook column search record type\n        :type gradebook_column_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column search record\n        :rtype: ``osid.grading.records.GradebookColumnSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSearchRecord", 
         "shortname": "GradebookColumnSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSearchResults", 
         "shortname": "GradebookColumnSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_gradebook_columns", 
            "get_gradebook_column_query_inspector", 
            "get_gradebook_column_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_columns", 
               "doc": {
                  "headline": "Gets the gradebook column list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnList) - the gradebook\n                column list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column list\n        :rtype: ``osid.grading.GradebookColumnList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebook column query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query inspector\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_search_results_record", 
               "doc": {
                  "headline": "Gets the gradebook column search results record corresponding to the given gradebook column search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    gradebook_column_search_record_type (osid.type.Type): a\n                gradebook column search record type\n", 
               "return_doc": "        return:\n                (osid.grading.records.GradebookColumnSearchResultsRecord\n                ) - the gradebook column search results record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_search_record_type: a gradebook column search record type\n        :type gradebook_column_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column search results record\n        :rtype: ``osid.grading.records.GradebookColumnSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSearchResultsRecord", 
         "shortname": "GradebookColumnSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnReceiver", 
         "shortname": "GradebookColumnReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The grade receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``GradebookColumns``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_gradebook_column", 
            "chaneged_gradebook_column", 
            "deleted_gradebook_column"
         ], 
         "methods": [
            {
               "name": "new_gradebook_column", 
               "doc": {
                  "headline": "The callback for notifications of new gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the new\n                ``GradebookColumn``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the new ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "chaneged_gradebook_column", 
               "doc": {
                  "headline": "The callback for notifications of new gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the new\n                ``GradebookColumn``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the new ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_gradebook_column", 
               "doc": {
                  "headline": "The callback for notification of deleted gradebook columns.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): the ``Id`` of the\n                deleted ``GradebookColumn``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_column_id: the ``Id`` of the deleted ``GradebookColumn``\n        :type gradebook_column_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnList", 
         "shortname": "GradebookColumnList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradebookColumnList`` provides a means for accessing ``GradebookColumn`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gcl.hasNext()) { GradebookColumn column =\n    gcl.getNextGradebookColumn(); }\n\n    or\n      while (gcl.hasNext()) {\n           GradebookColumn[] columns = gcl.getNextGradebookColumns(gcl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_gradebook_column", 
            "get_next_gradebook_columns"
         ], 
         "methods": [
            {
               "name": "get_next_gradebook_column", 
               "doc": {
                  "headline": "Gets the next ``GradebookColumn`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - the next\n                ``GradebookColumn`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``GradebookColumn`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``GradebookColumn`` in this list. The ``has_next()`` method should be used to test that a next ``GradebookColumn`` is available before calling this method.\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_gradebook_columns", 
               "doc": {
                  "headline": "Gets the next set of ``GradebookColumn`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``GradebookColumn`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - an array of\n                ``GradebookColumn`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``GradebookColumn`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``GradebookColumn`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSummary", 
         "shortname": "GradebookColumnSummary", 
         "category": "objects", 
         "doc": {
            "headline": "A ``GradebookColumnSummary`` is a summary of all entries within a gradebook column.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_gradebook_column_id", 
            "get_gradebook_column", 
            "get_mean", 
            "get_median", 
            "get_mode", 
            "get_rms", 
            "get_standard_deviation", 
            "get_sum", 
            "get_gradebook_column_summary_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_column_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Id`` of the ``GradebookColumn``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Id`` of the ``GradebookColumn``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column", 
               "doc": {
                  "headline": "Gets the ``GradebookColumn``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumn) - the ``GradebookColumn``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``GradebookColumn``\n        :rtype: ``osid.grading.GradebookColumn``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumn", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_mean", 
               "doc": {
                  "headline": "Gets the mean score.", 
                  "body": "        If this system is based on grades, the mean output score is\n        returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the mean score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the mean score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_median", 
               "doc": {
                  "headline": "Gets the median score.", 
                  "body": "        If this system is based on grades, the mean output score is\n        returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the median score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the median score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_mode", 
               "doc": {
                  "headline": "Gets the mode of the score.", 
                  "body": "        If this system is based on grades, the mode of the output score\n        is returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the median score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the median score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_rms", 
               "doc": {
                  "headline": "Gets the root mean square of the score.", 
                  "body": "        If this system is based on grades, the RMS of the output score\n        is returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the median score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the median score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_standard_deviation", 
               "doc": {
                  "headline": "Gets the standard deviation.", 
                  "body": "        If this system is based on grades, the spread of the output\n        scores is returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the standard deviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the standard deviation\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_sum", 
               "doc": {
                  "headline": "Gets the sum of the scores.", 
                  "body": "        If this system is based on grades, the sum of the output scores\n        is returned."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the median score", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the median score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_record", 
               "doc": {
                  "headline": "Gets the gradebook column summary record corresponding to the given ``GradebookColumnSummary`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``gradebook_column_summary_record_type``\n        may be the ``Type`` returned in ``get_record_types()`` or any of\n        its parents in a ``Type`` hierarchy where\n        ``has_record_type(gradebook_column_summary_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    gradebook_column_summary_record_type (osid.type.Type):\n                the type of the record to retrieve\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnSummaryRecord) -\n                the gradebook column summary record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_summary_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_summary_record_type)`\n                ` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_summary_record_type: the type of the record to retrieve\n        :type gradebook_column_summary_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column summary record\n        :rtype: ``osid.grading.records.GradebookColumnSummaryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_summary_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_summary_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_summary_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSummaryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSummaryRecord", 
         "shortname": "GradebookColumnSummaryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSummary``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSummaryQuery", 
         "shortname": "GradebookColumnSummaryQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching gradebook column summaries.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRuleQuery"
         ], 
         "inherit_shortnames": [
            "OsidRuleQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRuleQuery"
            }
         ], 
         "method_names": [
            "match_gradebook_column_id", 
            "clear_gradebook_column_id_terms", 
            "supports_gradebook_column_query", 
            "get_gradebook_column_query", 
            "match_any_gradebook_column", 
            "clear_gradebook_column_terms", 
            "match_mean", 
            "clear_mean_terms", 
            "match_minimum_mean", 
            "clear_minimum_mean_terms", 
            "match_median", 
            "clear_median_terms", 
            "match_minimum_median", 
            "clear_minimum_median_terms", 
            "match_mode", 
            "clear_mode_terms", 
            "match_minimum_mode", 
            "clear_minimum_mode_terms", 
            "match_rms", 
            "clear_rms_terms", 
            "match_minimum_rms", 
            "clear_minimum_rms_terms", 
            "match_standard_deviation", 
            "clear_standard_deviation_terms", 
            "match_minimum_standard_deviation", 
            "clear_minimum_standard_deviation_terms", 
            "match_sum", 
            "clear_sum_terms", 
            "match_minimum_sum", 
            "clear_minimum_sum_terms", 
            "match_gradebook_id", 
            "clear_gradebook_id_terms", 
            "supports_gradebook_query", 
            "get_gradebook_query", 
            "clear_gradebook_terms", 
            "get_gradebook_column_summary_query_record"
         ], 
         "methods": [
            {
               "name": "match_gradebook_column_id", 
               "doc": {
                  "headline": "Sets the gradebook column ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradeboo column\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradeboo column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnQuery`` is available for querying gradebook column.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook column.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_gradebook_column", 
               "doc": {
                  "headline": "Matches gradebook column derivations with any gradebookc olumn.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebook column\n                derivations with any gradebook column, ``false`` to\n                match gradebook column derivations with no gradebook\n                columns\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebook column derivations with any gradebook column, ``false`` to match gradebook column derivations with no gradebook columns\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_gradebook_column_terms", 
               "doc": {
                  "headline": "Clears the source grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_mean", 
               "doc": {
                  "headline": "Matches a mean between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_mean_terms", 
               "doc": {
                  "headline": "Clears the mean terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_mean", 
               "doc": {
                  "headline": "Matches a mean greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_mean_terms", 
               "doc": {
                  "headline": "Clears the minimum mean terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_median", 
               "doc": {
                  "headline": "Matches a median between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_median_terms", 
               "doc": {
                  "headline": "Clears the median terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_median", 
               "doc": {
                  "headline": "Matches a median greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_median_terms", 
               "doc": {
                  "headline": "Clears the minimum median terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_mode", 
               "doc": {
                  "headline": "Matches a mode between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_mode_terms", 
               "doc": {
                  "headline": "Clears the mode terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_mode", 
               "doc": {
                  "headline": "Matches a mode greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_mode_terms", 
               "doc": {
                  "headline": "Clears the minimum mode terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_rms", 
               "doc": {
                  "headline": "Matches a root mean square between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rms_terms", 
               "doc": {
                  "headline": "Clears the root mean square terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_rms", 
               "doc": {
                  "headline": "Matches a root mean square greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_rms_terms", 
               "doc": {
                  "headline": "Clears the minimum RMS terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_standard_deviation", 
               "doc": {
                  "headline": "Matches a standard deviation mean square between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_standard_deviation_terms", 
               "doc": {
                  "headline": "Clears the standard deviation terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_standard_deviation", 
               "doc": {
                  "headline": "Matches a standard deviation greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_standard_deviation_terms", 
               "doc": {
                  "headline": "Clears the minimum standard deviation terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_sum", 
               "doc": {
                  "headline": "Matches a sum mean square between the given values inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): low end of range\n        arg:    high (decimal): high end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``low`` is greater than ``high``", 
               "sphinx_param_doc": "        :param low: low end of range\n        :type low: ``decimal``\n        :param high: high end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``low`` is greater than ``high``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_sum_terms", 
               "doc": {
                  "headline": "Clears the sum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_sum", 
               "doc": {
                  "headline": "Matches a sum greater than or equal to the given value.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    value (decimal): minimum value\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param value: minimum value\n        :type value: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "value", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_sum_terms", 
               "doc": {
                  "headline": "Clears the minimum sum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_terms", 
               "doc": {
                  "headline": "Clears the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_query_record", 
               "doc": {
                  "headline": "Gets the gradebook column summary query record corresponding to the given ``GradebookColumnSummary`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    gradebook_column_summary_record_type (osid.type.Type): a\n                gradebook column summary record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnSummaryQueryRecord)\n                - the gradebook column summary query record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_summary_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_summary_record_type)`\n                ` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_summary_record_type: a gradebook column summary record type\n        :type gradebook_column_summary_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column summary query record\n        :rtype: ``osid.grading.records.GradebookColumnSummaryQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_summary_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_summary_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_summary_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSummaryQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSummaryQueryRecord", 
         "shortname": "GradebookColumnSummaryQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSummaryQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSummaryQueryInspector", 
         "shortname": "GradebookColumnSummaryQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining gradebook column summary queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRuleQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRuleQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRuleQueryInspector"
            }
         ], 
         "method_names": [
            "get_gradebook_column_id_terms", 
            "get_gradebook_column_terms", 
            "get_mean_terms", 
            "get_minimum_mean_terms", 
            "get_median_terms", 
            "get_minimum_median_terms", 
            "get_mode_terms", 
            "get_minimum_mode_terms", 
            "get_rms_terms", 
            "get_minimum_rms_terms", 
            "get_standard_deviation_terms", 
            "get_minimum_standard_deviation_terms", 
            "get_sum_terms", 
            "get_minimum_sum_terms", 
            "get_gradebook_id_terms", 
            "get_gradebook_terms", 
            "get_gradebook_column_summary_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook column ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_terms", 
               "doc": {
                  "headline": "Gets the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebookc column terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebookc column terms\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_mean_terms", 
               "doc": {
                  "headline": "Gets the mean terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the mean terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the mean terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_mean_terms", 
               "doc": {
                  "headline": "Gets the minimum mean terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum mean terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum mean terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_median_terms", 
               "doc": {
                  "headline": "Gets the median terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the median terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the median terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_median_terms", 
               "doc": {
                  "headline": "Gets the minimum median terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum median\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum median terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_mode_terms", 
               "doc": {
                  "headline": "Gets the mode terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the mode terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the mode terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_mode_terms", 
               "doc": {
                  "headline": "Gets the minimum mode terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum mode terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum mode terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rms_terms", 
               "doc": {
                  "headline": "Gets the rms terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the rms terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rms terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_rms_terms", 
               "doc": {
                  "headline": "Gets the minimum rms terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum rms terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum rms terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_standard_deviation_terms", 
               "doc": {
                  "headline": "Gets the standard deviation terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the standard\n                deviation terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the standard deviation terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_standard_deviation_terms", 
               "doc": {
                  "headline": "Gets the minimum standard deviation terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum standard\n                deviation terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum standard deviation terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_sum_terms", 
               "doc": {
                  "headline": "Gets the sum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the sum terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the sum terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_sum_terms", 
               "doc": {
                  "headline": "Gets the minimum sum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum sum terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum sum terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_terms", 
               "doc": {
                  "headline": "Gets the gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_summary_query_inspector_record", 
               "doc": {
                  "headline": "Gets the gradebook column summary query inspector record corresponding to the given ``GradebookColumnSummary`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_summary_record_type (osid.type.Type): a\n                gradebook column summry record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookColumnSummaryQueryInspect\n                orRecord) - the gradebook column summary query inspector\n                record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_summary_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_summary_record_record\n                _type)`` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_summary_record_type: a gradebook column summry record type\n        :type gradebook_column_summary_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column summary query inspector record\n        :rtype: ``osid.grading.records.GradebookColumnSummaryQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_summary_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_summary_record_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_summary_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSummaryQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSummaryQueryInspectorRecord", 
         "shortname": "GradebookColumnSummaryQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSummaryQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookColumnSummarySearchOrder", 
         "shortname": "GradebookColumnSummarySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRuleSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRuleSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRuleSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_mean", 
            "order_by_median", 
            "order_by_mode", 
            "order_by_rms", 
            "order_by_standard_deviation", 
            "order_by_sum", 
            "get_gradebook_column_summary_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_mean", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the mean.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_median", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the median.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_mode", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the mode.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_rms", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the root mean square.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_standard_deviation", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the standard deviation.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_sum", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the sum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_column_summary_search_order_record", 
               "doc": {
                  "headline": "Gets the gradebook column summary search order record corresponding to the given gradebook column summary record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    gradebook_column_summary_record_type (osid.type.Type): a\n                gradebook column summary record type\n", 
               "return_doc": "        return:\n                (osid.grading.records.GradebookColumnSummarySearchOrderR\n                ecord) - the gradebook column summary search order\n                record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_summary_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_column_summary_record_type)`\n                ` is ``false``", 
               "sphinx_param_doc": "        :param gradebook_column_summary_record_type: a gradebook column summary record type\n        :type gradebook_column_summary_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook column summary search order record\n        :rtype: ``osid.grading.records.GradebookColumnSummarySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_summary_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_column_summary_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_column_summary_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookColumnSummarySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookColumnSummarySearchOrderRecord", 
         "shortname": "GradebookColumnSummarySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookColumnSummarySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.Gradebook", 
         "shortname": "Gradebook", 
         "category": "objects", 
         "doc": {
            "headline": "A gradebook defines a collection of grade entries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_gradebook_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_record", 
               "doc": {
                  "headline": "Gets the gradebook record corresponding to the given ``Gradebook`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``gradebook_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(gradebook_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookRecord) - the gradebook\n                record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(gradebook_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook record\n        :rtype: ``osid.grading.records.GradebookRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookRecord", 
         "shortname": "GradebookRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Gradebook``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookQuery", 
         "shortname": "GradebookQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching gradebooks.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_grade_system_id", 
            "clear_grade_system_id_terms", 
            "supports_grade_system_query", 
            "get_grade_system_query", 
            "match_any_grade_system", 
            "clear_grade_system_terms", 
            "match_grade_entry_id", 
            "clear_grade_entry_id_terms", 
            "supports_grade_entry_query", 
            "get_grade_entry_query", 
            "match_any_grade_entry", 
            "clear_grade_entry_terms", 
            "match_gradebook_column_id", 
            "clear_gradebook_column_id_terms", 
            "supports_gradebook_column_query", 
            "get_gradebook_column_query", 
            "match_any_gradebook_column", 
            "clear_gradebook_column_terms", 
            "match_ancestor_gradebook_id", 
            "clear_ancestor_gradebook_id_terms", 
            "supports_ancestor_gradebook_query", 
            "get_ancestor_gradebook_query", 
            "match_any_ancestor_gradebook", 
            "clear_ancestor_gradebook_terms", 
            "match_descendant_gradebook_id", 
            "clear_descendant_gradebook_id_terms", 
            "supports_descendant_gradebook_query", 
            "get_descendant_gradebook_query", 
            "match_any_descendant_gradebook", 
            "clear_descendant_gradebook_terms", 
            "get_gradebook_query_record"
         ], 
         "methods": [
            {
               "name": "match_grade_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system_id_terms", 
               "doc": {
                  "headline": "Clears the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_system", 
               "doc": {
                  "headline": "Matches gradebooks that have any grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebooks with any\n                grade system, ``false`` to match gradebooks with no\n                grade system\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebooks with any grade system, ``false`` to match gradebooks with no grade system\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_system_terms", 
               "doc": {
                  "headline": "Clears the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_entry_id", 
               "doc": {
                  "headline": "Sets the grade entry ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_entry_id (osid.id.Id): a grade entry ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_entry_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_entry_id: a grade entry ``Id``\n        :type grade_entry_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_entry_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_entry_id_terms", 
               "doc": {
                  "headline": "Clears the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_entry_query", 
               "doc": {
                  "headline": "Tests if a ``GradeEntryQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade entry query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade entry query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_query", 
               "doc": {
                  "headline": "Gets the query for a grade entry.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQuery) - the grade entry query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry query\n        :rtype: ``osid.grading.GradeEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_entry", 
               "doc": {
                  "headline": "Matches gradebooks that have any grade entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebooks with any\n                grade entry, ``false`` to match gradebooks with no grade\n                entry\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebooks with any grade entry, ``false`` to match gradebooks with no grade entry\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_entry_terms", 
               "doc": {
                  "headline": "Clears the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_gradebook_column_id", 
               "doc": {
                  "headline": "Sets the gradebook column ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_column_id (osid.id.Id): a gradebook column\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_column_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_column_id: a gradebook column ``Id``\n        :type gradebook_column_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_column_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_column_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Clears the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_gradebook_column_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookColumnQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook column query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook column query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook column.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQuery) - the gradebook\n                column query", 
               "error_doc": "        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column query\n        :rtype: ``osid.grading.GradebookColumnQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_gradebook_column_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_gradebook_column", 
               "doc": {
                  "headline": "Matches gradebooks that have any column.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebooks with any\n                column, ``false`` to match gradebooks with no column\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebooks with any column, ``false`` to match gradebooks with no column\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_gradebook_column_terms", 
               "doc": {
                  "headline": "Clears the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query to match gradebooks that have the specified gradebook as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_gradebook_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_gradebook_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_gradebook", 
               "doc": {
                  "headline": "Matches gradebook with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebooks with any\n                ancestor, ``false`` to match root gradebooks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebooks with any ancestor, ``false`` to match root gradebooks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_gradebook_terms", 
               "doc": {
                  "headline": "Clears the ancestor gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_gradebook_id", 
               "doc": {
                  "headline": "Sets the gradebook ``Id`` for this query to match gradebooks that have the specified gradebook as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): a gradebook ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_id`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_id: a gradebook ``Id``\n        :type gradebook_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_gradebook_id_terms", 
               "doc": {
                  "headline": "Clears the descendant gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_gradebook_query", 
               "doc": {
                  "headline": "Tests if a ``GradebookQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a gradebook query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a gradebook query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_gradebook_query", 
               "doc": {
                  "headline": "Gets the query for a gradebook.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQuery) - the gradebook query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_descendant_gradebook_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query\n        :rtype: ``osid.grading.GradebookQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_gradebook_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_gradebook_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_gradebook", 
               "doc": {
                  "headline": "Matches gradebook with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match gradebooks with any\n                descendant, ``false`` to match leaf gradebooks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match gradebooks with any descendant, ``false`` to match leaf gradebooks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_gradebook_terms", 
               "doc": {
                  "headline": "Clears the descendant gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query_record", 
               "doc": {
                  "headline": "Gets the gradebook query record corresponding to the given ``Gradebook`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookQueryRecord) - the\n                gradebook query record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(gradebook_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook query record\n        :rtype: ``osid.grading.records.GradebookQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookQueryRecord", 
         "shortname": "GradebookQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookQueryInspector", 
         "shortname": "GradebookQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining gradebook queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_grade_system_id_terms", 
            "get_grade_system_terms", 
            "get_grade_entry_id_terms", 
            "get_grade_entry_terms", 
            "get_gradebook_column_id_terms", 
            "get_gradebook_column_terms", 
            "get_ancestor_gradebook_id_terms", 
            "get_ancestor_gradebook_terms", 
            "get_descendant_gradebook_id_terms", 
            "get_descendant_gradebook_terms", 
            "get_gradebook_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_grade_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_terms", 
               "doc": {
                  "headline": "Gets the grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_id_terms", 
               "doc": {
                  "headline": "Gets the grade entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade entry ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_entry_terms", 
               "doc": {
                  "headline": "Gets the grade entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeEntryQueryInspector) - the grade\n                entry terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade entry terms\n        :rtype: ``osid.grading.GradeEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_id_terms", 
               "doc": {
                  "headline": "Gets the gradebook column ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the gradebook column ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_column_terms", 
               "doc": {
                  "headline": "Gets the gradebook column terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookColumnQueryInspector) - the\n                gradebook column terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook column terms\n        :rtype: ``osid.grading.GradebookColumnQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookColumnQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor gradebook\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_gradebook_terms", 
               "doc": {
                  "headline": "Gets the ancestor gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the ancestor\n                gradebook terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_gradebook_id_terms", 
               "doc": {
                  "headline": "Gets the descendant gradebook ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant gradebook\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant gradebook ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_gradebook_terms", 
               "doc": {
                  "headline": "Gets the descendant gradebook terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the descendant\n                gradebook terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant gradebook terms\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_query_inspector_record", 
               "doc": {
                  "headline": "Gets the gradebook query inspector record corresponding to the given ``Gradebook`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookQueryInspectorRecord) -\n                the gradebook query inspector record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(gradebook_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook query inspector record\n        :rtype: ``osid.grading.records.GradebookQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookQueryInspectorRecord", 
         "shortname": "GradebookQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookForm", 
         "shortname": "GradebookForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Gradebooks``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``GradebookAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_gradebook_form_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_form_record", 
               "doc": {
                  "headline": "Gets the ``GradebookFormRecord`` corresponding to the given gradebook record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookFormRecord) - the\n                gradebook form record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(gradebook_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook form record\n        :rtype: ``osid.grading.records.GradebookFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookFormRecord", 
         "shortname": "GradebookFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookSearchOrder", 
         "shortname": "GradebookSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_gradebook_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_gradebook_search_order_record", 
               "doc": {
                  "headline": "Gets the gradebook search order record corresponding to the given gradebook record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    gradebook_record_type (osid.type.Type): a gradebook\n                record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookSearchOrderRecord) - the\n                gradebook search order record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(gradebook_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param gradebook_record_type: a gradebook record type\n        :type gradebook_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook search order record\n        :rtype: ``osid.grading.records.GradebookSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookSearchOrderRecord", 
         "shortname": "GradebookSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookSearch", 
         "shortname": "GradebookSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing gradebook searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_gradebooks", 
            "order_gradebook_results", 
            "get_gradebook_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_gradebooks", 
               "doc": {
                  "headline": "Execute this search among the given list of gradebooks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_ids (osid.id.IdList): list of gradebooks\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_ids`` is ``null``", 
               "sphinx_param_doc": "        :param gradebook_ids: list of gradebooks\n        :type gradebook_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "gradebook_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_gradebook_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_search_order\n                (osid.grading.GradebookSearchOrder): gradebook search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``gradebook_search_order`` is ``null``\n        raise:  Unsupported - ``gradebook_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param gradebook_search_order: gradebook search order\n        :type gradebook_search_order: ``osid.grading.GradebookSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``gradebook_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.GradebookSearchOrder", 
                     "var_name": "gradebook_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.GradebookSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_search_record", 
               "doc": {
                  "headline": "Gets the gradebook search record corresponding to the given gradebook search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    gradebook_search_record_type (osid.type.Type): a\n                gradebook search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookSearchRecord) - the\n                gradebook search record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_search_record_type: a gradebook search record type\n        :type gradebook_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook search record\n        :rtype: ``osid.grading.records.GradebookSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookSearchRecord", 
         "shortname": "GradebookSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookSearchResults", 
         "shortname": "GradebookSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_gradebooks", 
            "get_gradebook_query_inspector", 
            "get_gradebook_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_gradebooks", 
               "doc": {
                  "headline": "Gets the gradebook list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookList) - the gradebook list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook list\n        :rtype: ``osid.grading.GradebookList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_gradebook_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookQueryInspector) - the gradebook\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook query inspector\n        :rtype: ``osid.grading.GradebookQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_gradebook_search_results_record", 
               "doc": {
                  "headline": "Gets the gradebook search results record corresponding to the given gradebook search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    gradebook_search_record_type (osid.type.Type): a\n                gradebook search record type\n", 
               "return_doc": "        return: (osid.grading.records.GradebookSearchResultsRecord) -\n                the gradebook search results record", 
               "error_doc": "        raise:  NullArgument - ``gradebook_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(gradebook_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param gradebook_search_record_type: a gradebook search record type\n        :type gradebook_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the gradebook search results record\n        :rtype: ``osid.grading.records.GradebookSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``gradebook_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(gradebook_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "gradebook_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.grading.records.GradebookSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.records.GradebookSearchResultsRecord", 
         "shortname": "GradebookSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``GradebookSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.grading.GradebookReceiver", 
         "shortname": "GradebookReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The vault receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Gradebook`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_gradebook", 
            "new_ancestor_gradebook", 
            "new_descendant_gradebook", 
            "changed_gradebook", 
            "deleted_gradebook", 
            "deleted_ancestor_gradebook", 
            "deleted_descendant_gradebook"
         ], 
         "methods": [
            {
               "name": "new_gradebook", 
               "doc": {
                  "headline": "The callback for notifications of new gradebooks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the new\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the new ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_gradebook", 
               "doc": {
                  "headline": "The callback for notifications of new gradebook ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    ancestor_id (osid.id.Id):\n                ``has_record_type(gradebook_record_type) is false``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param ancestor_id: ``has_record_type(gradebook_record_type) is false``\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_gradebook", 
               "doc": {
                  "headline": "The callback for notifications of new gradebook descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Gradebook`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Gradebook`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_gradebook", 
               "doc": {
                  "headline": "The callback for notification of updated gradebooks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the updated\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the updated ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_gradebook", 
               "doc": {
                  "headline": "The callback for notification of deleted gradebooks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the deleted\n                ``Gradebook``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the deleted ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_gradebook", 
               "doc": {
                  "headline": "The callback for notifications of deleted gradebook ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Gradebook`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Gradebook`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_gradebook", 
               "doc": {
                  "headline": "The callback for notifications of deleted gradebook descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    gradebook_id (osid.id.Id): the ``Id`` of the\n                ``Gradebook``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Gradebook`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param gradebook_id: the ``Id`` of the ``Gradebook``\n        :type gradebook_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Gradebook`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "gradebook_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookList", 
         "shortname": "GradebookList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradebookList`` provides a means for accessing ``Gradebook`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gl.hasNext()) { Gradebook gradebook =\n    gl.getNextGradebook(); }\n\n    or\n      while (gl.hasNext()) {\n           Gradebook[] gradebooks = gl.getNextGradebooks(gl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_gradebook", 
            "get_next_gradebooks"
         ], 
         "methods": [
            {
               "name": "get_next_gradebook", 
               "doc": {
                  "headline": "Gets the next ``Gradebook`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the next ``Gradebook`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Gradebook`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Gradebook`` in this list. The ``has_next()`` method should be used to test that a next ``Gradebook`` is available before calling this method.\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_gradebooks", 
               "doc": {
                  "headline": "Gets the next set of ``Gradebook`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Gradebook`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.grading.Gradebook) - an array of ``Gradebook``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Gradebook`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Gradebook`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookNode", 
         "shortname": "GradebookNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``GradebookHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_gradebook", 
            "get_parent_gradebook_nodes", 
            "get_child_gradebook_nodes"
         ], 
         "methods": [
            {
               "name": "get_gradebook", 
               "doc": {
                  "headline": "Gets the ``Gradebook`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Gradebook) - the gradebook represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the gradebook represented by this node\n        :rtype: ``osid.grading.Gradebook``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Gradebook", 
               "errors": {}
            }, 
            {
               "name": "get_parent_gradebook_nodes", 
               "doc": {
                  "headline": "Gets the parents of this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.grading.GradebookNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_gradebook_nodes", 
               "doc": {
                  "headline": "Gets the children of this gradebook.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookNodeList) - the children of this\n                gradebook", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this gradebook\n        :rtype: ``osid.grading.GradebookNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.grading.GradebookNodeList", 
         "shortname": "GradebookNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``GradebookNodeList`` provides a means for accessing ``GradebookNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (gnl.hasNext()) { GradebookNode node =\n    gnl.getNextGradebookNode(); }\n\n    or\n      while (gnl.hasNext()) {\n           GradebookNode[] nodes = gnl.getNextGradebookNodes(gnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_gradebook_node", 
            "get_next_gradebook_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_gradebook_node", 
               "doc": {
                  "headline": "Gets the next ``GradebookNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradebookNode) - the next\n                ``GradebookNode`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``GradebookNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``GradebookNode`` in this list. The ``has_next()`` method should be used to test that a next ``GradebookNode`` is available before calling this method.\n        :rtype: ``osid.grading.GradebookNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradebookNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_gradebook_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``GradebookNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``GradebookNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.grading.GradebookNode) - an array of\n                ``GradebookNode`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``GradebookNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``GradebookNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.grading.GradebookNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.grading.GradebookNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.grading"
}
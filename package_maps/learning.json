{
   "name": "learning", 
   "version": "3.0.0", 
   "title": "Learning Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2009 Massachusetts Institute of Technology.\n\nCopyright (c) 2011 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Learning OSID manages learning objectives. A learning ``Objective``\ndescribes measurable learning goals.\n\nObjectives\n\n``Objectives`` describe measurable learning goals. A learning objective\nmay be measured by a related ``Assesment``.  ``Objectives`` may be\nmapped to levels, A level is represented by a ``Grade`` which is used to\nindicate a grade level or level of difficulty.\n\n``Objectives`` are hierarchical. An ``Objective`` with children\nrepresents an objective that is inclusive of all its children. For\nexample, an ``Objective`` that represents learning in arithmetic may be\ncomposed of objectives that represent learning in both addition and\nsubtraction.\n\n``Objectives`` may also have requisites. A requisite objective is one\nthat should be achieved before an objective is attempted.\n\nActivities\n\nAn ``Activity`` describes actions that one can do to meet a learning\nobjective. An ``Activity`` includes a list of ``Assets`` to read or\nwatch, or a list of ``Courses`` to take, or a list of learning\n``Assessments`` to practice. An ``Activity`` may also represent other\nlearning activities such as taking a course or practicing an instrument.\nAn ``Activity`` is specific to an ``Objective`` where the reusability is\nachieved based on what the ``Activity`` relates.\n\nProficiencies\n\nA ``Proficiency`` is an ``OsidRelationship`` measuring the competence of\na ``Resource`` with respect to an Objective.\n\nObjective Bank Cataloging\n\n``Objectives, Activities,`` and ``Proficiencies`` can be organized into\nhierarchical ``ObjectiveBanks`` for the purposes of categorization and\nfederation.\n\nConcept Mapping\n\nA concept can be modeled as a learning ``Objective`` without any related\n``Assessment`` or ``Activities``. In this scenario, an ``Objective``\nlooks much like the simpler ``Subject`` in the Ontology OSID. The\nOntology OSID is constrained to qualifying concepts while the relations\nfound in an ``Objective`` allow for the quantification of the learning\nconcept and providing paths to self-learning.\n\nThe Topology OSID may also be used to construct and view a concept map.\nWhile a Topology OSID Provider may be adapted from a Learning OSID or an\nOntology OSID, the topology for either would be interpreted from a\nmulti-parented hierarchy of the ``Objectives`` and ``Subjects``\nrespectively.\n\nCourses\n\nThe Learning OSID may be used in conjunction with the Course OSID to\nidentify dsired learning oitcomes from a course or to align the course\nactivities and syllabus with stated learning objectives. The Course OSID\ndescribes learning from a structured curriculum management point of view\nwhere the Learning OSID and allows for various objectives to be combined\nand related without any regard to a prescribed curriculum.\n\nSub Packages\n\nThe Learning OSID contains a Learning Batch OSID for bulk management of\n``Objectives,``  ``Activities,`` and ``Proficiencies`` .", 
   "interfaces": [
      {
         "fullname": "osid.learning.LearningProfile", 
         "shortname": "LearningProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``LearningProfile`` describes the interoperability among learning services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_objective_lookup", 
            "supports_objective_query", 
            "supports_objective_search", 
            "supports_objective_admin", 
            "supports_objective_notification", 
            "supports_objective_hierarchy", 
            "supports_objective_hierarchy_design", 
            "supports_objective_sequencing", 
            "supports_objective_objective_bank", 
            "supports_objective_objective_bank_assignment", 
            "supports_objective_smart_objective_bank", 
            "supports_objective_requisite", 
            "supports_objective_requisite_assignment", 
            "supports_activity_lookup", 
            "supports_activity_query", 
            "supports_activity_search", 
            "supports_activity_admin", 
            "supports_activity_notification", 
            "supports_activity_objective_bank", 
            "supports_activity_objective_bank_assignment", 
            "supports_activity_smart_objective_bank", 
            "supports_proficiency_lookup", 
            "supports_proficiency_query", 
            "supports_proficiency_search", 
            "supports_proficiency_admin", 
            "supports_proficiency_notification", 
            "supports_proficiency_objective_bank", 
            "supports_proficiency_objective_bank_assignment", 
            "supports_proficiency_smart_objective_bank", 
            "supports_my_learning_path", 
            "supports_learning_path", 
            "supports_objective_bank_lookup", 
            "supports_objective_bank_query", 
            "supports_objective_bank_search", 
            "supports_objective_bank_admin", 
            "supports_objective_bank_notification", 
            "supports_objective_bank_hierarchy", 
            "supports_objective_bank_hierarchy_design", 
            "supports_learning_batch", 
            "get_objective_record_types", 
            "supports_objective_record_type", 
            "get_objective_search_record_types", 
            "supports_objective_search_record_type", 
            "get_activity_record_types", 
            "supports_activity_record_type", 
            "get_activity_search_record_types", 
            "supports_activity_search_record_type", 
            "get_proficiency_record_types", 
            "supports_proficiency_record_type", 
            "get_proficiency_search_record_types", 
            "supports_proficiency_search_record_type", 
            "get_objective_bank_record_types", 
            "supports_objective_bank_record_type", 
            "get_objective_bank_search_record_types", 
            "supports_objective_bank_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_lookup", 
               "doc": {
                  "headline": "Tests if an objective lookup service is supported.", 
                  "body": "        An objective lookup service defines methods to access\n        objectives."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if objective lookup is supported, false\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if objective lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_query", 
               "doc": {
                  "headline": "Tests if an objective query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_search", 
               "doc": {
                  "headline": "Tests if an objective search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_admin", 
               "doc": {
                  "headline": "Tests if an objective administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_notification", 
               "doc": {
                  "headline": "Tests if objective notification is supported.", 
                  "body": "        Messages may be sent when objectives are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_hierarchy", 
               "doc": {
                  "headline": "Tests if an objective hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective hierarchy traversal\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_hierarchy_design", 
               "doc": {
                  "headline": "Tests if an objective hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_sequencing", 
               "doc": {
                  "headline": "Tests if an objective sequencing design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective sequencing is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective sequencing is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_objective_bank", 
               "doc": {
                  "headline": "Tests if an objective to objective bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective objective bank lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective objective bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_objective_bank_assignment", 
               "doc": {
                  "headline": "Tests if an objective to objective bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective objective bank\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective objective bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_smart_objective_bank", 
               "doc": {
                  "headline": "Tests if an objective smart objective bank cataloging service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective smart objective banks\n                are supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective smart objective banks are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_requisite", 
               "doc": {
                  "headline": "Tests if an objective requisite service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective requisite service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective requisite service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_requisite_assignment", 
               "doc": {
                  "headline": "Tests if an objective requisite assignment service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective requisite assignment\n                service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective requisite assignment service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_lookup", 
               "doc": {
                  "headline": "Tests if an activity lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_query", 
               "doc": {
                  "headline": "Tests if an activity query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_search", 
               "doc": {
                  "headline": "Tests if an activity search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_admin", 
               "doc": {
                  "headline": "Tests if an activity administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_notification", 
               "doc": {
                  "headline": "Tests if activity notification is supported.", 
                  "body": "        Messages may be sent when activities are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_objective_bank", 
               "doc": {
                  "headline": "Tests if an activity to objective bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity objective bank lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity objective bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_objective_bank_assignment", 
               "doc": {
                  "headline": "Tests if an activity to objective bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity objective bank\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity objective bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_smart_objective_bank", 
               "doc": {
                  "headline": "Tests if an activity smart objective bank cataloging service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if activity smart objective banks\n                are supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if activity smart objective banks are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_lookup", 
               "doc": {
                  "headline": "Tests if looking up proficiencies is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_query", 
               "doc": {
                  "headline": "Tests if querying proficiencies is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_search", 
               "doc": {
                  "headline": "Tests if searching proficiencies is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_admin", 
               "doc": {
                  "headline": "Tests if proficiencyadministrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_notification", 
               "doc": {
                  "headline": "Tests if a proficiencynotification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_objective_bank", 
               "doc": {
                  "headline": "Tests if a proficiency objective bank mapping lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a proficiency objective bank\n                lookup service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a proficiency objective bank lookup service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_objective_bank_assignment", 
               "doc": {
                  "headline": "Tests if a proficiency objective bank mapping service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency to objective bank\n                mapping service is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency to objective bank mapping service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_smart_objective_bank", 
               "doc": {
                  "headline": "Tests if a proficiency smart objective bank cataloging service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if proficiency smart objective\n                banks are supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if proficiency smart objective banks are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_my_learning_path", 
               "doc": {
                  "headline": "Tests if a learning path service is supported for the authenticated agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if learning path is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if learning path is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_learning_path", 
               "doc": {
                  "headline": "Tests if a learning path service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if learning path is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if learning path is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_lookup", 
               "doc": {
                  "headline": "Tests if an objective bank lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective bank lookup is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective bank lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_query", 
               "doc": {
                  "headline": "Tests if an objective bank query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective bank query is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective bank query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_search", 
               "doc": {
                  "headline": "Tests if an objective bank search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective bank search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective bank search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_admin", 
               "doc": {
                  "headline": "Tests if an objective bank administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective bank admin is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective bank admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_notification", 
               "doc": {
                  "headline": "Tests if objective bank notification is supported.", 
                  "body": "        Messages may be sent when objective banks are created, modified,\n        or deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if objective bank notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if objective bank notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if an objective bank hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank hierarchy\n                traversal is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_hierarchy_design", 
               "doc": {
                  "headline": "Tests if objective bank hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank hierarchy\n                design is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_learning_batch", 
               "doc": {
                  "headline": "Tests if a learning batch service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a learning batch service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a learning batch service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Objective`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Objective`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Objective`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Objective`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): a ``Type``\n                indicating an ``Objective`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param objective_record_type: a ``Type`` indicating an ``Objective`` record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Objective`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Objective`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Objective`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Objective`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_search_record_type (osid.type.Type): a\n                ``Type`` indicating an ``Objective`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param objective_search_record_type: a ``Type`` indicating an ``Objective`` search record type\n        :type objective_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Activity`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Activity`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Activity`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Activity`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): a ``Type``\n                indicating a ``Activity`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param activity_record_type: a ``Type`` indicating a ``Activity`` record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Activity`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Activity`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Activity`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Activity`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Activity`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``activity_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param activity_search_record_type: a ``Type`` indicating a ``Activity`` search record type\n        :type activity_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Proficiency`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Proficiency`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Proficiency`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Proficiency`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a ``Type``\n                indicating a ``Proficiency`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param proficiency_record_type: a ``Type`` indicating a ``Proficiency`` record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Proficiency`` search types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Proficiency`` search types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Proficiency`` search types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_proficiency_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Proficiency`` search type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``Proficiency`` search type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``proficiency_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param proficiency_search_record_type: a ``Type`` indicating a ``Proficiency`` search type\n        :type proficiency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_record_types", 
               "doc": {
                  "headline": "Gets the supported ``ObjectiveBank`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``ObjectiveBank`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``ObjectiveBank`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_record_type", 
               "doc": {
                  "headline": "Tests if the given ``ObjectiveBank`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): a ``Type``\n                indicating an ``ObjectiveBank`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given objective bank record\n                ``Type`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: a ``Type`` indicating an ``ObjectiveBank`` type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given objective bank record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_search_record_types", 
               "doc": {
                  "headline": "Gets the supported objective bank search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``ObjectiveBank`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``ObjectiveBank`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_search_record_type", 
               "doc": {
                  "headline": "Tests if the given objective bank search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_search_record_type (osid.type.Type): a\n                ``Type`` indicating an ``ObjectiveBank`` search record\n                type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record ``Type``\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param objective_bank_search_record_type: a ``Type`` indicating an ``ObjectiveBank`` search record type\n        :type objective_bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.LearningManager", 
         "shortname": "LearningManager", 
         "category": "managers", 
         "doc": {
            "headline": "The learning manager provides access to learning sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``ObjectiveLookupSession:`` a session to look up objectives\n      * ``ObjectiveLookupSession:`` a session to query objectives\n        ``None``\n      * ``ObjectiveSearchSession:`` a session to search objectives\n      * ``ObjectiveAdminSession:`` a session to create, modify and\n        delete objectives ``None``\n      * ``ObjectiveNotificationSession: a`` session to receive messages\n        pertaining to objective ```` changes\n      * ``ObjectiveHierarchySession:`` a session to traverse objective\n        hierarchies\n      * ``ObjectiveHierarchyDesignSession:`` a session to design\n        objective hierarchies\n      * ``ObjectiveSequencingSession:`` a session to sequence objectives\n      * ``ObjectiveObjectiveBankSession:`` a session for retriieving\n        objective and objective bank mappings\n      * ``ObjectiveObjectiveBankAssignmentSession:`` a session for\n        managing objective and objective bank mappings\n      * ``ObjectiveSmartObjectiveBankSession:`` a session for managing\n        dynamic objective banks\n      * ``ObjectiveRequisiteSession:`` a session to examine objective\n        requisites\n      * ``ObjectiveRequisiteAssignmentSession:`` a session to manage\n        objective requisites\n    \n      * ``ActivityLookupSession:`` a session to look up activities\n      * ``ActivityQuerySession:`` a session to query activities ``None``\n      * ``ActivitySearchSession:`` a session to search activities\n      * ``ActivityAdminSession:`` a session to create, modify and delete\n        activities ``None``\n      * ``ActivityNotificationSession: a`` session to receive messages\n        pertaining to activity ```` changes\n      * ``ActivityObjectiveBankSession:`` a session for retriieving\n        activity and objective bank mappings\n      * ``ActivityObjectiveBankAssignmentSession:`` a session for\n        managing activity and objective bank mappings\n      * ``ActivitySmartObjectiveBankSession:`` a session for managing\n        dynamic objective banks of activities\n    \n      * ``ProficiencyLookupSession:`` a session to retrieve\n        proficiencies\n      * ``ProficiencyQuerySession:`` a session to query proficiencies\n      * ``ProficiencySearchSession:`` a session to search for\n        proficiencies\n      * ``ProficiencyAdminSession:`` a session to create, update, and\n        delete proficiencies\n      * ``ProficiencyNotificationSession:`` a session to receive\n        notifications pertaining to proficiency changes\n      * ``ProficiencyObjectiveBankSession:`` a session to look up\n        proficiency to objective bank mappings\n      * ``ProficiencyObjectiveBankAssignmentSession:`` a session to\n        manage proficiency to objective bank mappings\n      * ``ProficiencySmartObjectiveBankSession:`` a session to manage\n        smart objective banks of proficiencies\n      * ``MyLearningPathSession:`` a session to examine learning paths\n        of objectives\n      * ``LearningPathSession:`` a session to examine learning paths of\n        objectives\n    \n      * ``ObjectiveBankLookupSession:`` a session to lookup objective\n        banks\n      * ``ObjectiveBankQuerySession:`` a session to query objective\n        banks\n      * ``ObjectiveBankSearchSession`` : a session to search objective\n        banks\n      * ``ObjectiveBankAdminSession`` : a session to create, modify and\n        delete objective banks\n      * ``ObjectiveBankNotificationSession`` : a session to receive\n        messages pertaining to objective bank changes\n      * ``ObjectiveBankHierarchySession:`` a session to traverse the\n        objective bank hierarchy\n      * ``ObjectiveBankHierarchyDesignSession:`` a session to manage the\n        objective bank hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.learning.LearningProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "LearningProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "learning", 
               "name": "LearningProfile"
            }
         ], 
         "method_names": [
            "get_objective_lookup_session", 
            "get_objective_lookup_session_for_objective_bank", 
            "get_objective_query_session", 
            "get_objective_query_session_for_objective_bank", 
            "get_objective_search_session", 
            "get_objective_search_session_for_objective_bank", 
            "get_objective_admin_session", 
            "get_objective_admin_session_for_objective_bank", 
            "get_objective_notification_session", 
            "get_objective_notification_session_for_objective_bank", 
            "get_objective_hierarchy_session", 
            "get_objective_hierarchy_session_for_objective_bank", 
            "get_objective_hierarchy_design_session", 
            "get_objective_hierarchy_design_session_for_objective_bank", 
            "get_objective_sequencing_session", 
            "get_objective_sequencing_session_for_objective_bank", 
            "get_objective_objective_bank_session", 
            "get_objective_objective_bank_assignment_session", 
            "get_objective_smart_objective_bank_session", 
            "get_objective_requisite_session", 
            "get_objective_requisite_session_for_objective_bank", 
            "get_objective_requisite_assignment_session", 
            "get_objective_requisite_assignment_session_for_objective_bank", 
            "get_activity_lookup_session", 
            "get_activity_lookup_session_for_objective_bank", 
            "get_activity_query_session", 
            "get_activity_query_session_for_objective_bank", 
            "get_activity_search_session", 
            "get_activity_search_session_for_objective_bank", 
            "get_activity_admin_session", 
            "get_activity_admin_session_for_objective_bank", 
            "get_activity_notification_session", 
            "get_activity_notification_session_for_objective_bank", 
            "get_activity_objective_bank_session", 
            "get_activity_objective_bank_assignment_session", 
            "get_activity_smart_objective_bank_session", 
            "get_proficiency_lookup_session", 
            "get_proficiency_lookup_session_for_objective_bank", 
            "get_proficiency_query_session", 
            "get_proficiency_query_session_for_objective_bank", 
            "get_proficiency_search_session", 
            "get_proficiency_search_session_for_objective_bank", 
            "get_proficiency_admin_session", 
            "get_proficiency_admin_session_for_objective_bank", 
            "get_proficiency_notification_session", 
            "get_proficiency_notification_session_for_objective_bank", 
            "get_proficiency_objective_bank_session", 
            "get_proficiency_objective_bank_assignment_session", 
            "get_proficiency_smart_objective_bank_session", 
            "get_my_learning_path_session", 
            "get_my_learning_path_session_for_objective_bank", 
            "get_learning_path_session", 
            "get_learning_path_session_for_objective_bank", 
            "get_objective_bank_lookup_session", 
            "get_objective_bank_query_session", 
            "get_objective_bank_search_session", 
            "get_objective_bank_admin_session", 
            "get_objective_bank_notification_session", 
            "get_objective_bank_hierarchy_session", 
            "get_objective_bank_hierarchy_design_session", 
            "get_learning_batch_manager"
         ], 
         "methods": [
            {
               "name": "get_objective_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveLookupSession) - an\n                ``ObjectiveLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveLookupSession``\n        :rtype: ``osid.learning.ObjectiveLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveLookupSession) - ``an\n                _objective_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_lookup_session``\n        :rtype: ``osid.learning.ObjectiveLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuerySession) - an\n                ``ObjectiveQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveQuerySession``\n        :rtype: ``osid.learning.ObjectiveQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveQuerySession) - ``an\n                _objective_query_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_query_session``\n        :rtype: ``osid.learning.ObjectiveQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchSession) - an\n                ``ObjectiveSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSearchSession``\n        :rtype: ``osid.learning.ObjectiveSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchSession) - ``an\n                _objective_search_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_search_session``\n        :rtype: ``osid.learning.ObjectiveSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveAdminSession) - an\n                ``ObjectiveAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveAdminSession``\n        :rtype: ``osid.learning.ObjectiveAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective admin service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveAdminSession) - ``an\n                _objective_admin_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_admin_session``\n        :rtype: ``osid.learning.ObjectiveAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to objective changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_receiver (osid.learning.ObjectiveReceiver):\n                the objective receiver\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNotificationSession) - an\n                ``ObjectiveNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``objective_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_receiver: the objective receiver\n        :type objective_receiver: ``osid.learning.ObjectiveReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveNotificationSession``\n        :rtype: ``osid.learning.ObjectiveNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveReceiver", 
                     "var_name": "objective_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveReceiver"
               ], 
               "return_type": "osid.learning.ObjectiveNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_receiver (osid.learning.ObjectiveReceiver):\n                the objective receiver\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNotificationSession) - ``an\n                _objective_notification_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_receiver`` or\n                ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_receiver: the objective receiver\n        :type objective_receiver: ``osid.learning.ObjectiveReceiver``\n        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_notification_session``\n        :rtype: ``osid.learning.ObjectiveNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_receiver`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveReceiver", 
                     "var_name": "objective_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session for traversing objective hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchySession) - an\n                ``ObjectiveHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchySession``\n        :rtype: ``osid.learning.ObjectiveHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective hierarchy traversal service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchySession) - an\n                ``ObjectiveHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchySession``\n        :rtype: ``osid.learning.ObjectiveHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session for designing objective hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchyDesignSession) - an\n                ``ObjectiveHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_hierarchy_design()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_design_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective hierarchy design service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchyDesignSession) - an\n                ``ObjectiveHierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_objective_hierarchy_design()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_sequencing_session", 
               "doc": {
                  "headline": "Gets the session for sequencing objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSequencingSession) - an\n                ``ObjectiveSequencingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_sequencing()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSequencingSession``\n        :rtype: ``osid.learning.ObjectiveSequencingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_sequencing()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_sequencing()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSequencingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_sequencing_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSequencingSession) - an\n                ``ObjectiveSequencingSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_sequencing()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSequencingSession``\n        :rtype: ``osid.learning.ObjectiveSequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_sequencing()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_sequencing()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveSequencingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_objective_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving objective to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveObjectiveBankSession) - an\n                ``ObjectiveObjectiveBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_objective_bank()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveObjectiveBankSession``\n        :rtype: ``osid.learning.ObjectiveObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveObjectiveBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning objective to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveObjectiveBankAssignmentSession)\n                - an ``ObjectiveObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveObjectiveBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSmartObjectiveBankSession) - an\n                ``ObjectiveSmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSmartObjectiveBankSession``\n        :rtype: ``osid.learning.ObjectiveSmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveSmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_session", 
               "doc": {
                  "headline": "Gets the session for examining objective requisites.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteSession) - an\n                ``ObjectiveRequisiteSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_requisite()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveRequisiteSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteSession) - an\n                ``ObjectiveRequisiteSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_requisite()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_assignment_session", 
               "doc": {
                  "headline": "Gets the session for managing objective requisites.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteAssignmentSession) - an\n                ``ObjectiveRequisiteAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_requisite_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveRequisiteAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_assignment_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteAssignmentSession) - an\n                ``ObjectiveRequisiteAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_objective_requisite_assignment()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityLookupSession) - an\n                ``ActivityLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ActivityLookupSession``\n        :rtype: ``osid.learning.ActivityLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ActivityLookupSession) - an\n                ``ActivityLookupSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityLookupSession``\n        :rtype: ``osid.learning.ActivityLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQuerySession) - a\n                ``ActivityQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ActivityQuerySession``\n        :rtype: ``osid.learning.ActivityQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ActivityQuerySession) - an\n                ``ActivityQuerySession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityQuerySession``\n        :rtype: ``osid.learning.ActivityQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivitySearchSession) - a\n                ``ActivitySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ActivitySearchSession``\n        :rtype: ``osid.learning.ActivitySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivitySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ActivitySearchSession) - an\n                ``ActivitySearchSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ActivitySearchSession``\n        :rtype: ``osid.learning.ActivitySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivitySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityAdminSession) - a\n                ``ActivityAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ActivityAdminSession``\n        :rtype: ``osid.learning.ActivityAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity admin service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ActivityAdminSession) - an\n                ``ActivityAdminSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityAdminSession``\n        :rtype: ``osid.learning.ActivityAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to activity changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_receiver (osid.learning.ActivityReceiver): the\n                activity receiver\n", 
               "return_doc": "        return: (osid.learning.ActivityNotificationSession) - an\n                ``ActivityNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``activity_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param activity_receiver: the activity receiver\n        :type activity_receiver: ``osid.learning.ActivityReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityNotificationSession``\n        :rtype: ``osid.learning.ActivityNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityReceiver", 
                     "var_name": "activity_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityReceiver"
               ], 
               "return_type": "osid.learning.ActivityNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_receiver (osid.learning.ActivityReceiver): the\n                activity receiver\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ActivityNotificationSession) - ``an\n                _activity_notification_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``activity_receiver`` or\n                ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param activity_receiver: the activity receiver\n        :type activity_receiver: ``osid.learning.ActivityReceiver``\n        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _activity_notification_session``\n        :rtype: ``osid.learning.ActivityNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``activity_receiver`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityReceiver", 
                     "var_name": "activity_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_objective_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving activity to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityObjectiveBankSession) - an\n                ``ActivityObjectiveBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_objective_bank()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ActivityObjectiveBankSession``\n        :rtype: ``osid.learning.ActivityObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityObjectiveBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning activity to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityObjectiveBankAssignmentSession) -\n                an ``ActivityObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_activity_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ActivityObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ActivityObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityObjectiveBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ActivitySmartObjectiveBankSession) - an\n                ``ActivitySmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_activity_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ActivitySmartObjectiveBankSession``\n        :rtype: ``osid.learning.ActivitySmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivitySmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyLookupSession) - a\n                ``ProficiencyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencyLookupSession``\n        :rtype: ``osid.learning.ProficiencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                obective bank\n", 
               "return_doc": "        return: (osid.learning.ProficiencyLookupSession) - a\n                ``ProficiencyLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``ObjectiveBank`` found by the given\n                ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the obective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyLookupSession``\n        :rtype: ``osid.learning.ProficiencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``ObjectiveBank`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyQuerySession) - a\n                ``ProficiencyQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencyQuerySession``\n        :rtype: ``osid.learning.ProficiencyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                obective bank\n", 
               "return_doc": "        return: (osid.learning.ProficiencyQuerySession) - a\n                ``ProficiencyQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``ObjectiveBank`` found by the given\n                ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the obective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyQuerySession``\n        :rtype: ``osid.learning.ProficiencyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``ObjectiveBank`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencySearchSession) - a\n                ``ProficiencySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencySearchSession``\n        :rtype: ``osid.learning.ProficiencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ProficiencySearchSession) - a\n                ``ProficiencySearchSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencySearchSession``\n        :rtype: ``osid.learning.ProficiencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyAdminSession) - a\n                ``ProficiencyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencyAdminSession``\n        :rtype: ``osid.learning.ProficiencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency administration service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyAdminSession) - a\n                ``ProficiencyAdminSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyAdminSession``\n        :rtype: ``osid.learning.ProficiencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_receiver\n                (osid.learning.ProficiencyReceiver): the notification\n                callback\n", 
               "return_doc": "        return: (osid.learning.ProficiencyNotificationSession) - a\n                ``ProficiencyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``proficiency_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proficiency_receiver: the notification callback\n        :type proficiency_receiver: ``osid.learning.ProficiencyReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyNotificationSession``\n        :rtype: ``osid.learning.ProficiencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyReceiver", 
                     "var_name": "proficiency_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyReceiver"
               ], 
               "return_type": "osid.learning.ProficiencyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_receiver\n                (osid.learning.ProficiencyReceiver): the notification\n                callback\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyNotificationSession) - a\n                ``ProficiencyNotificationSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``proficiency_receiver`` or\n                ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param proficiency_receiver: the notification callback\n        :type proficiency_receiver: ``osid.learning.ProficiencyReceiver``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyNotificationSession``\n        :rtype: ``osid.learning.ProficiencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``proficiency_receiver`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyReceiver", 
                     "var_name": "proficiency_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup proficiency/objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyObjectiveBankSession) - a\n                ``ProficiencyObjectiveBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_objective_bank()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencyObjectiveBankSession``\n        :rtype: ``osid.learning.ProficiencyObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyObjectiveBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning proficiencys to objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.learning.ProficiencyObjectiveBankAssignmentSession\n                ) - a ``ProficiencyObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ProficiencyObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ProficiencyObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyObjectiveBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ProficiencySmartObjectiveBankSession) - a\n                ``ProficiencySmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencySmartObjectiveBankSession``\n        :rtype: ``osid.learning.ProficiencySmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencySmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_learning_path_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my learning path service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.MyLearningPathSession) - a\n                ``MyLearningPathSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_learning_path()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MyLearningPathSession``\n        :rtype: ``osid.learning.MyLearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_learning_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_learning_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.MyLearningPathSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_learning_path_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my learning path service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.MyLearningPathSession) - a\n                ``MyLearningPathSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_learning_path()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``MyLearningPathSession``\n        :rtype: ``osid.learning.MyLearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_learning_path()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_learning_path()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.MyLearningPathSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_path_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the learning path service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.LearningPathSession) - a\n                ``LearningPathSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_learning_path()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LearningPathSession``\n        :rtype: ``osid.learning.LearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_learning_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.LearningPathSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_path_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the learning path service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.LearningPathSession) - a\n                ``LearningPathSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supporty_learning_path()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LearningPathSession``\n        :rtype: ``osid.learning.LearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supporty_learning_path()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_path()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.LearningPathSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankLookupSession) - an\n                ``ObjectiveBankLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_lookup() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankLookupSession``\n        :rtype: ``osid.learning.ObjectiveBankLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuerySession) - an\n                ``ObjectiveBankQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_query() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankQuerySession``\n        :rtype: ``osid.learning.ObjectiveBankQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankSearchSession) - an\n                ``ObjectiveBankSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_search() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankSearchSession``\n        :rtype: ``osid.learning.ObjectiveBankSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankAdminSession) - an\n                ``ObjectiveBankAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_admin() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankAdminSession``\n        :rtype: ``osid.learning.ObjectiveBankAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to objective bank service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_receiver\n                (osid.learning.ObjectiveBankReceiver): the objective\n                bank receiver\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNotificationSession) - an\n                ``ObjectiveBankNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_notification()\n                is false``", 
               "sphinx_param_doc": "        :param objective_bank_receiver: the objective bank receiver\n        :type objective_bank_receiver: ``osid.learning.ObjectiveBankReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankNotificationSession``\n        :rtype: ``osid.learning.ObjectiveBankNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankReceiver", 
                     "var_name": "objective_bank_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankReceiver"
               ], 
               "return_type": "osid.learning.ObjectiveBankNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing objective bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankHierarchySession) - an\n                ``ObjectiveBankHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_hierarchy() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankHierarchySession``\n        :rtype: ``osid.learning.ObjectiveBankHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing objective bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankHierarchyDesignSession) - an\n                ``ObjectiveBankHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_bank_hierarchy_design() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveBankHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_batch_manager", 
               "doc": {
                  "headline": "Gets a ``LearningBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.batch.LearningBatchManager) - a\n                ``LearningBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_learning_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LearningBatchManager``\n        :rtype: ``osid.learning.batch.LearningBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_learning_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.batch.LearningBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.LearningProxyManager", 
         "shortname": "LearningProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The learning manager provides access to learning sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy``. The\n    sessions included in this manager are:\n\n      * ``ObjectiveLookupSession:`` a session to look up objectives\n      * ``ObjectiveLookupSession:`` a session to query objectives\n        ``None``\n      * ``ObjectiveSearchSession:`` a session to search objectives\n      * ``ObjectiveAdminSession:`` a session to create, modify and\n        delete objectives ``None``\n      * ``ObjectiveNotificationSession: a`` session to receive messages\n        pertaining to objective ```` changes\n      * ``ObjectiveHierarchySession:`` a session to traverse objective\n        hierarchies\n      * ``ObjectiveHierarchyDesignSession:`` a session to design\n        objective hierarchies\n      * ``ObjectiveSequencingSession:`` a session to sequence objectives\n      * ``ObjectiveObjectiveBankSession:`` a session for retriieving\n        objective and objective bank mappings\n      * ``ObjectiveObjectiveBankAssignmentSession:`` a session for\n        managing objective and objective bank mappings\n      * ``ObjectiveSmartObjectiveBankSession:`` a session for managing\n        dynamic objective banks\n      * ``ObjectiveRequisiteSession:`` a session to examine objective\n        requisites\n      * ``ObjectiveRequisiteAssignmentSession:`` a session to manage\n        objective requisites\n    \n      * ``ActivityLookupSession:`` a session to look up activities\n      * ``ActivityQuerySession:`` a session to query activities ``None``\n      * ``ActivitySearchSession:`` a session to search activities\n      * ``ActivityAdminSession:`` a session to create, modify and delete\n        activities ``None``\n      * ``ActivityNotificationSession: a`` session to receive messages\n        pertaining to activity ```` changes\n      * ``ActivityObjectiveBankSession:`` a session for retriieving\n        activity and objective bank mappings\n      * ``ActivityObjectiveBankAssignmentSession:`` a session for\n        managing activity and objective bank mappings\n      * ``ActivitySmartObjectiveBankSession:`` a session for managing\n        dynamic objective banks of activities\n    \n      * ``ProficiencyLookupSession:`` a session to retrieve\n        proficiencies\n      * ``ProficiencyQuerySession:`` a session to query proficiencies\n      * ``ProficiencySearchSession:`` a session to search for\n        proficiencies\n      * ``ProficiencyAdminSession:`` a session to create, update, and\n        delete proficiencies\n      * ``ProficiencyNotificationSession:`` a session to receive\n        notifications pertaining to proficiency changes\n      * ``ProficiencyObjectiveBankSession:`` a session to look up\n        proficiency to objective bank mappings\n      * ``ProficiencyObjectiveBankAssignmentSession:`` a session to\n        manage proficiency to objective bank mappings\n      * ``ProficiencySmartObjectiveBankSession:`` a session to manage\n        smart objective banks of proficiencies\n      * ``MyLearningPathSession:`` a session to examine learning paths\n        of objectives\n      * ``LearningPathSession:`` a session to examine learning paths of\n        objectives\n    \n      * ``ObjectiveBankLookupSession:`` a session to lookup objective\n        banks\n      * ``ObjectiveBankQuerySession:`` a session to query objective\n        banks\n      * ``ObjectiveBankSearchSession`` : a session to search objective\n        banks\n      * ``ObjectiveBankAdminSession`` : a session to create, modify and\n        delete objective banks\n      * ``ObjectiveBankNotificationSession`` : a session to receive\n        messages pertaining to objective bank changes\n      * ``ObjectiveBankHierarchySession:`` a session to traverse the\n        objective bank hierarchy\n      * ``ObjectiveBankHierarchyDesignSession:`` a session to manage the\n        objective bank hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.learning.LearningProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "LearningProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "learning", 
               "name": "LearningProfile"
            }
         ], 
         "method_names": [
            "get_objective_lookup_session", 
            "get_objective_lookup_session_for_objective_bank", 
            "get_objective_query_session", 
            "get_objective_query_session_for_objective_bank", 
            "get_objective_search_session", 
            "get_objective_search_session_for_objective_bank", 
            "get_objective_admin_session", 
            "get_objective_admin_session_for_objective_bank", 
            "get_objective_notification_session", 
            "get_objective_notification_session_for_objective_bank", 
            "get_objective_hierarchy_session", 
            "get_objective_hierarchy_session_for_objective_bank", 
            "get_objective_hierarchy_design_session", 
            "get_objective_hierarchy_design_session_for_objective_bank", 
            "get_objective_sequencing_session", 
            "get_objective_sequencing_session_for_objective_bank", 
            "get_objective_objective_bank_session", 
            "get_objective_objective_bank_assignment_session", 
            "get_objective_smart_objective_bank_session", 
            "get_objective_requisite_session", 
            "get_objective_requisite_session_for_objective_bank", 
            "get_objective_requisite_assignment_session", 
            "get_objective_requisite_assignment_session_for_objective_bank", 
            "get_activity_lookup_session", 
            "get_activity_lookup_session_for_objective_bank", 
            "get_activity_query_session", 
            "get_activity_query_session_for_objective_bank", 
            "get_activity_search_session", 
            "get_activity_search_session_for_objective_bank", 
            "get_activity_admin_session", 
            "get_activity_admin_session_for_objective_bank", 
            "get_activity_notification_session", 
            "get_activity_notification_session_for_objective_bank", 
            "get_activity_objective_bank_session", 
            "get_activity_objective_bank_assignment_session", 
            "get_activity_smart_objective_bank_session", 
            "get_proficiency_lookup_session", 
            "get_proficiency_lookup_session_for_objective_bank", 
            "get_proficiency_query_session", 
            "get_proficiency_query_session_for_objective_bank", 
            "get_proficiency_search_session", 
            "get_proficiency_search_session_for_objective_bank", 
            "get_proficiency_admin_session", 
            "get_proficiency_admin_session_for_objective_bank", 
            "get_proficiency_notification_session", 
            "get_proficiency_notification_session_for_objective_bank", 
            "get_proficiency_objective_bank_session", 
            "get_proficiency_objective_bank_assignment_session", 
            "get_proficiency_smart_objective_bank_session", 
            "get_my_learning_path_session", 
            "get_my_learning_path_session_for_objective_bank", 
            "get_learning_path_session", 
            "get_learning_path_session_for_objective_bank", 
            "get_objective_bank_lookup_session", 
            "get_objective_bank_query_session", 
            "get_objective_bank_search_session", 
            "get_objective_bank_admin_session", 
            "get_objective_bank_notification_session", 
            "get_objective_bank_hierarchy_session", 
            "get_objective_bank_hierarchy_design_session", 
            "get_learning_batch_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_objective_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveLookupSession) - an\n                ``ObjectiveLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveLookupSession``\n        :rtype: ``osid.learning.ObjectiveLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveLookupSession) - ``an\n                _objective_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_lookup_session``\n        :rtype: ``osid.learning.ObjectiveLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveQuerySession) - an\n                ``ObjectiveQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveQuerySession``\n        :rtype: ``osid.learning.ObjectiveQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveQuerySession) - ``an\n                _objective_query_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_query_session``\n        :rtype: ``osid.learning.ObjectiveQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchSession) - an\n                ``ObjectiveSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSearchSession``\n        :rtype: ``osid.learning.ObjectiveSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchSession) - ``an\n                _objective_search_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_search_session``\n        :rtype: ``osid.learning.ObjectiveSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveAdminSession) - an\n                ``ObjectiveAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveAdminSession``\n        :rtype: ``osid.learning.ObjectiveAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective admin service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveAdminSession) - ``an\n                _objective_admin_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_admin_session``\n        :rtype: ``osid.learning.ObjectiveAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to objective changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_receiver (osid.learning.ObjectiveReceiver):\n                the objective receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNotificationSession) - an\n                ``ObjectiveNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``objective_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_receiver: the objective receiver\n        :type objective_receiver: ``osid.learning.ObjectiveReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveNotificationSession``\n        :rtype: ``osid.learning.ObjectiveNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveReceiver", 
                     "var_name": "objective_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_receiver (osid.learning.ObjectiveReceiver):\n                the objective receiver\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNotificationSession) - ``an\n                _objective_notification_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_receiver, objective_bank_id``\n                or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_receiver: the objective receiver\n        :type objective_receiver: ``osid.learning.ObjectiveReceiver``\n        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _objective_notification_session``\n        :rtype: ``osid.learning.ObjectiveNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_receiver, objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveReceiver", 
                     "var_name": "objective_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session for traversing objective hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchySession) - an\n                ``ObjectiveHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchySession``\n        :rtype: ``osid.learning.ObjectiveHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective hierarchy traversal service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchySession) - an\n                ``ObjectiveHierarchySession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_hierarchy()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchySession``\n        :rtype: ``osid.learning.ObjectiveHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session for designing objective hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchyDesignSession) - an\n                ``ObjectiveHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_hierarchy_design()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_hierarchy_design_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective hierarchy design service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveHierarchyDesignSession) - an\n                ``ObjectiveHierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_objective_hierarchy_design()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveHierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_sequencing_session", 
               "doc": {
                  "headline": "Gets the session for sequencing objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSequencingSession) - an\n                ``ObjectiveSequencingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_sequencing()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSequencingSession``\n        :rtype: ``osid.learning.ObjectiveSequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_sequencing()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_sequencing()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveSequencingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_sequencing_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSequencingSession) - an\n                ``ObjectiveSequencingSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_sequencing()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSequencingSession``\n        :rtype: ``osid.learning.ObjectiveSequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_sequencing()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_sequencing()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveSequencingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_objective_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving objective to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveObjectiveBankSession) - an\n                ``ObjectiveObjectiveBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_objective_bank()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveObjectiveBankSession``\n        :rtype: ``osid.learning.ObjectiveObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveObjectiveBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning objective to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveObjectiveBankAssignmentSession)\n                - an ``ObjectiveObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveObjectiveBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivitySmartObjectiveBankSession) - an\n                ``ObjectiveSmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveSmartObjectiveBankSession``\n        :rtype: ``osid.learning.ActivitySmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivitySmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_session", 
               "doc": {
                  "headline": "Gets the session for examining objective requisites.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteSession) - an\n                ``ObjectiveRequisiteSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_requisite()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteSession) - an\n                ``ObjectiveRequisiteSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_objective_requisite()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_assignment_session", 
               "doc": {
                  "headline": "Gets the session for managing objective requisites.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteAssignmentSession) - an\n                ``ObjectiveRequisiteAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_requisite_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_requisite_assignment_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the objective sequencing service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveRequisiteAssignmentSession) - an\n                ``ObjectiveRequisiteAssignmentSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_objective_requisite_assignment()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveRequisiteAssignmentSession``\n        :rtype: ``osid.learning.ObjectiveRequisiteAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_objective_requisite_assignment()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_requisite_assignment()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveRequisiteAssignmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityLookupSession) - an\n                ``ActivityLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityLookupSession``\n        :rtype: ``osid.learning.ActivityLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityLookupSession) - an\n                ``ActivityLookupSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityLookupSession``\n        :rtype: ``osid.learning.ActivityLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityQuerySession) - an\n                ``ActivityQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityQuerySession``\n        :rtype: ``osid.learning.ActivityQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityQuerySession) - an\n                ``ActivityQuerySession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityQuerySession``\n        :rtype: ``osid.learning.ActivityQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivitySearchSession) - an\n                ``ActivitySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivitySearchSession``\n        :rtype: ``osid.learning.ActivitySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivitySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivitySearchSession) - an\n                ``ActivitySearchSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivitySearchSession``\n        :rtype: ``osid.learning.ActivitySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivitySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityAdminSession) - an\n                ``ActivityAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityAdminSession``\n        :rtype: ``osid.learning.ActivityAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity admin service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityAdminSession) - a\n                ``ActivityAdminSession``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ActivityAdminSession``\n        :rtype: ``osid.learning.ActivityAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to activity changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_receiver (osid.learning.ActivityReceiver): the\n                activity receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityNotificationSession) - an\n                ``ActivityNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``activity_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param activity_receiver: the activity receiver\n        :type activity_receiver: ``osid.learning.ActivityReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityNotificationSession``\n        :rtype: ``osid.learning.ActivityNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityReceiver", 
                     "var_name": "activity_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the activity notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_receiver (osid.learning.ActivityReceiver): the\n                activity receiver\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityNotificationSession) - ``an\n                _activity_notification_session``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``activity_receiver, objective_bank_id``\n                or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_activity_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param activity_receiver: the activity receiver\n        :type activity_receiver: ``osid.learning.ActivityReceiver``\n        :param objective_bank_id: the ``Id`` of the objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _activity_notification_session``\n        :rtype: ``osid.learning.ActivityNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``activity_receiver, objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_activity_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityReceiver", 
                     "var_name": "activity_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_objective_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving activity to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityObjectiveBankSession) - an\n                ``ActivityObjectiveBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_activity_objective_bank()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityObjectiveBankSession``\n        :rtype: ``osid.learning.ActivityObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityObjectiveBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning activity to objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivityObjectiveBankAssignmentSession) -\n                an ``ActivityObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_activity_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivityObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ActivityObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivityObjectiveBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ActivitySmartObjectiveBankSession) - an\n                ``ActivitySmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_activity_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ActivitySmartObjectiveBankSession``\n        :rtype: ``osid.learning.ActivitySmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_activity_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ActivitySmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyLookupSession) - a\n                ``ProficiencyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyLookupSession``\n        :rtype: ``osid.learning.ProficiencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_lookup_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency lookup service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                obective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyLookupSession) - a\n                ``ProficiencyLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``ObjectiveBank`` found by the given\n                ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the obective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyLookupSession``\n        :rtype: ``osid.learning.ProficiencyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``ObjectiveBank`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyQuerySession) - a\n                ``ProficiencyQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyQuerySession``\n        :rtype: ``osid.learning.ProficiencyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency query service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                obective bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyQuerySession) - a\n                ``ProficiencyQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``ObjectiveBank`` found by the given\n                ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the obective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyQuerySession``\n        :rtype: ``osid.learning.ProficiencyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``ObjectiveBank`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencySearchSession) - a\n                ``ProficiencySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencySearchSession``\n        :rtype: ``osid.learning.ProficiencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency search service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencySearchSession) - a\n                ``ProficiencySearchSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencySearchSession``\n        :rtype: ``osid.learning.ProficiencySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyAdminSession) - a\n                ``ProficiencyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyAdminSession``\n        :rtype: ``osid.learning.ProficiencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_admin_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency administration service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyAdminSession) - a\n                ``ProficiencyAdminSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyAdminSession``\n        :rtype: ``osid.learning.ProficiencyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_receiver\n                (osid.learning.ProficiencyReceiver): the notification\n                callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyNotificationSession) - a\n                ``ProficiencyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``proficiency_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proficiency_receiver: the notification callback\n        :type proficiency_receiver: ``osid.learning.ProficiencyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyNotificationSession``\n        :rtype: ``osid.learning.ProficiencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyReceiver", 
                     "var_name": "proficiency_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_notification_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the proficiency notification service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_receiver\n                (osid.learning.ProficiencyReceiver): the notification\n                callback\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyNotificationSession) - a\n                ``ProficiencyNotificationSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``proficiency_receiver,\n                objective_bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_proficiency_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param proficiency_receiver: the notification callback\n        :type proficiency_receiver: ``osid.learning.ProficiencyReceiver``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyNotificationSession``\n        :rtype: ``osid.learning.ProficiencyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``proficiency_receiver, objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyReceiver", 
                     "var_name": "proficiency_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup proficiency/objective bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencyObjectiveBankSession) - a\n                ``ProficiencyObjectiveBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_objective_bank()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyObjectiveBankSession``\n        :rtype: ``osid.learning.ProficiencyObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyObjectiveBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_objective_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning proficiencies to objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return:\n                (osid.learning.ProficiencyObjectiveBankAssignmentSession\n                ) - a ``ProficiencyObjectiveBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_objective_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencyObjectiveBankAssignmentSession``\n        :rtype: ``osid.learning.ProficiencyObjectiveBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_objective_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_objective_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencyObjectiveBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_smart_objective_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic objective banks of proficiencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ProficiencySmartObjectiveBankSession) - a\n                ``ProficiencySmartObjectiveBankSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_proficiency_smart_objective_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ProficiencySmartObjectiveBankSession``\n        :rtype: ``osid.learning.ProficiencySmartObjectiveBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_proficiency_smart_objective_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_proficiency_smart_objective_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ProficiencySmartObjectiveBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_learning_path_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my learning path service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.MyLearningPathSession) - a\n                ``MyLearningPathSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_learning_path()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyLearningPathSession``\n        :rtype: ``osid.learning.MyLearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_learning_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_learning_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.MyLearningPathSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_learning_path_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the my learning path service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.MyLearningPathSession) - a\n                ``MyLearningPathSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_learning_path()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyLearningPathSession``\n        :rtype: ``osid.learning.MyLearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_learning_path()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_learning_path()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.MyLearningPathSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_path_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the learning path service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.LearningPathSession) - a\n                ``LearningPathSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_learning_path()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LearningPathSession``\n        :rtype: ``osid.learning.LearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_learning_path()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_path()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.LearningPathSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_path_session_for_objective_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the learning path service for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.LearningPathSession) - a\n                ``LearningPathSession``", 
               "error_doc": "        raise:  NotFound - no objective bank found by the given ``Id``\n        raise:  NullArgument - ``objective_bank_id`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supporty_learning_path()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LearningPathSession``\n        :rtype: ``osid.learning.LearningPathSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no objective bank found by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supporty_learning_path()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_path()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.LearningPathSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankLookupSession) - an\n                ``ObjectiveBankLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_lookup() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankLookupSession``\n        :rtype: ``osid.learning.ObjectiveBankLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuerySession) - an\n                ``ObjectiveBankQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_query() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankQuerySession``\n        :rtype: ``osid.learning.ObjectiveBankQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankSearchSession) - an\n                ``ObjectiveBankSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_search() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankSearchSession``\n        :rtype: ``osid.learning.ObjectiveBankSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the objective bank administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankAdminSession) - an\n                ``ObjectiveBankAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_admin() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankAdminSession``\n        :rtype: ``osid.learning.ObjectiveBankAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to objective bank service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_receiver\n                (osid.learning.ObjectiveBankReceiver): the objective\n                bank receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNotificationSession) - an\n                ``ObjectiveBankNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_receiver`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_notification()\n                is false``", 
               "sphinx_param_doc": "        :param objective_bank_receiver: the objective bank receiver\n        :type objective_bank_receiver: ``osid.learning.ObjectiveBankReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankNotificationSession``\n        :rtype: ``osid.learning.ObjectiveBankNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankReceiver", 
                     "var_name": "objective_bank_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing objective bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankHierarchySession) - an\n                ``ObjectiveBankHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_objective_bank_hierarchy() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankHierarchySession``\n        :rtype: ``osid.learning.ObjectiveBankHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing objective bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankHierarchyDesignSession) - an\n                ``ObjectiveBankHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_objective_bank_hierarchy_design() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ObjectiveBankHierarchyDesignSession``\n        :rtype: ``osid.learning.ObjectiveBankHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_objective_bank_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.learning.ObjectiveBankHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_learning_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``LearningBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.batch.LearningBatchProxyManager) - a\n                ``LearningBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_learning_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LearningBatchProxyManager``\n        :rtype: ``osid.learning.batch.LearningBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_learning_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.batch.LearningBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveLookupSession", 
         "shortname": "ObjectiveLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Objective`` s.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_objectives", 
            "use_comparative_objective_view", 
            "use_plenary_objective_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_objective", 
            "get_objectives_by_ids", 
            "get_objectives_by_genus_type", 
            "get_objectives_by_parent_genus_type", 
            "get_objectives_by_record_type", 
            "get_objectives"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_objectives", 
               "doc": {
                  "headline": "Tests if this user can perform ``Objective`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_view", 
               "doc": {
                  "headline": "A complete view of the ``Objective`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include objectives in objective banks\n        which are children of this objective bank in the objective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective", 
               "doc": {
                  "headline": "Gets the ``Objective`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Objective`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``Objective`` and retained\n        for compatibility."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.Objective) - the objective", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the objective\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_ids", 
               "doc": {
                  "headline": "Gets an ``ObjectiveList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        objectives specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Objectives`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``objective_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_ids: the list of ``Ids`` to retrieve\n        :type objective_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``objective_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``ObjectiveList`` corresponding to the given objective genus ``Type`` which does not include objectives of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objectives\n        or an error results. Otherwise, the returned list may contain\n        only those objectives that are accessible through this session."
               }, 
               "arg_doc": "        arg:    objective_genus_type (osid.type.Type): an objective\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_genus_type: an objective genus type\n        :type objective_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``ObjectiveList`` corresponding to the given objective genus ``Type`` and include any additional objective with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objectives\n        or an error results. Otherwise, the returned list may contain\n        only those objectives that are accessible through this session"
               }, 
               "arg_doc": "        arg:    objective_genus_type (osid.type.Type): an objective\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_genus_type: an objective genus type\n        :type objective_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_record_type", 
               "doc": {
                  "headline": "Gets an ``ObjectiveList`` containing the given objective record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objectives\n        or an error results. Otherwise, the returned list may contain\n        only those objectives that are accessible through this session."
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): an objective\n                record type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_record_type: an objective record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives", 
               "doc": {
                  "headline": "Gets all ``Objectives``.", 
                  "body": "        In plenary mode, the returned list contains all known objectives\n        or an error results. Otherwise, the returned list may contain\n        only those objectives that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - an ``ObjectiveList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ObjectiveList``\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveQuerySession", 
         "shortname": "ObjectiveQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Objective`` objects.", 
            "body": "    The search query is constructed using the ``ObjectiveQuery``. The\n    objective record ``Type`` also specifies the record for the\n    objective query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include objectives in\n        objective banks of which this objective bank is a ancestor in\n        the objective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        objectives in this objective bank\n\n    \n    Objectives may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ObjectiveQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_search_objectives", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_objective_query", 
            "get_objectives_by_query"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_objectives", 
               "doc": {
                  "headline": "Tests if this user can perform ``Objectives`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include objectives in objective banks\n        which are children of this objective bank in the objective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query", 
               "doc": {
                  "headline": "Gets an objective query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {}
            }, 
            {
               "name": "get_objectives_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Objectives`` matching the given objective query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_query (osid.learning.ObjectiveQuery): the\n                objective query\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``ObjectiveList``", 
               "error_doc": "        raise:  NullArgument - ``objective_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_query`` is not of this service", 
               "sphinx_param_doc": "        :param objective_query: the objective query\n        :type objective_query: ``osid.learning.ObjectiveQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveList``\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveQuery", 
                     "var_name": "objective_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveQuery"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveSearchSession", 
         "shortname": "ObjectiveSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Objective`` objects.", 
            "body": "    The search query is constructed using the ``ObjectiveQuery``. The\n    objective record ``Type`` also specifies the record for the\n    objective query.\n\n    ``get_objectives_by_query()`` is the basic search method and returns\n    a list of ``Objectives``. A more advanced search may be performed\n    with ``getObjectivesBySearch()``. It accepts a ``ObjectiveSearch``\n    in addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_objectives_by_search()`` returns an ``ObjectiveSearchResults``\n    that can be used to access the resulting ``ObjectiveList`` or be\n    used to perform a search within the result set through\n    ``ObjectiveSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include objectives in\n        objective banks of which this objective bank is a ancestor in\n        the objective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        objectives in this objective bank\n\n    \n    Objectives may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ObjectiveQuery``."
         }, 
         "inherit_fullnames": [
            "osid.learning.ObjectiveQuerySession"
         ], 
         "inherit_shortnames": [
            "ObjectiveQuerySession"
         ], 
         "inherit_pkg_names": [
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "learning", 
               "name": "ObjectiveQuerySession"
            }
         ], 
         "method_names": [
            "get_objective_search", 
            "get_objective_search_order", 
            "get_objectives_by_search", 
            "get_objective_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_objective_search", 
               "doc": {
                  "headline": "Gets an objective search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearch) - the objective search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective search\n        :rtype: ``osid.learning.ObjectiveSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearch", 
               "errors": {}
            }, 
            {
               "name": "get_objective_search_order", 
               "doc": {
                  "headline": "Gets a n objective search order.", 
                  "body": "        The ``ObjectiveSearchOrder`` is supplied to an\n        ``ObjectiveSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchOrder) - the objective\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective search order\n        :rtype: ``osid.learning.ObjectiveSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_objectives_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_query (osid.learning.ObjectiveQuery): the\n                objective search query\n        arg:    objective_search (osid.learning.ObjectiveSearch): the\n                objective search\n", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``objective_query`` or\n                ``objective_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_search`` or\n                ``objective_query`` is not of this service", 
               "sphinx_param_doc": "        :param objective_query: the objective search query\n        :type objective_query: ``osid.learning.ObjectiveQuery``\n        :param objective_search: the objective search\n        :type objective_search: ``osid.learning.ObjectiveSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.learning.ObjectiveSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_query`` or ``objective_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_search`` or ``objective_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveQuery", 
                     "var_name": "objective_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.learning.ObjectiveSearch", 
                     "var_name": "objective_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveQuery", 
                  "osid.learning.ObjectiveSearch"
               ], 
               "return_type": "osid.learning.ObjectiveSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_from_inspector", 
               "doc": {
                  "headline": "Gets an objective query from an inspector.", 
                  "body": "        The inspector is available from an ``ObjectiveSearchResults``."
               }, 
               "arg_doc": "        arg:    objective_query_inspector\n                (osid.learning.ObjectiveQueryInspector): an objective\n                bank query inspector\n", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  NullArgument - ``objective_query_inspector`` is ``null``\n        raise:  Unsupported - ``objective_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param objective_query_inspector: an objective bank query inspector\n        :type objective_query_inspector: ``osid.learning.ObjectiveQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``objective_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveQueryInspector", 
                     "var_name": "objective_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveQueryInspector"
               ], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveAdminSession", 
         "shortname": "ObjectiveAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Objectives``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Objective,`` a ``ObjectiveForm`` is requested using\n    ``get_objective_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``ObjectiveForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``ObjectiveForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ObjectiveForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``ObjectiveForms`` are requested to the ``Objective``\n    ``Id`` that is to be updated using ``getObjectiveFormForUpdate()``.\n    Similarly, the ``ObjectiveForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``ObjectiveForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Objectives``. To unmap an\n    ``Objective`` from the current ``ObjectiveBank,`` the\n    ``ObjectiveObjectiveBankAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``Objective`` itself thus\n    removing it from all known ``ObjectiveBank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_create_objectives", 
            "can_create_objective_with_record_types", 
            "get_objective_form_for_create", 
            "create_objective", 
            "can_update_objectives", 
            "get_objective_form_for_update", 
            "update_objective", 
            "can_delete_objectives", 
            "delete_objective", 
            "can_manage_objective_aliases", 
            "alias_objective"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_objectives", 
               "doc": {
                  "headline": "Tests if this user can create ``Objectives``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an Objective\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Objective`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Objective`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_objective_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Objective`` using the desired record types.", 
                  "body": "        While ``LearningManager.getObjectiveRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Objective``.\n        Providing an empty array tests if an ``Objective`` can be\n        created with no records."
               }, 
               "arg_doc": "        arg:    objective_record_types (osid.type.Type[]): array of\n                objective record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Objective`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param objective_record_types: array of objective record types\n        :type objective_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Objective`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "objective_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_form_for_create", 
               "doc": {
                  "headline": "Gets the objective form for creating new objectives.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    objective_record_types (osid.type.Type[]): array of\n                objective record types\n", 
               "return_doc": "        return: (osid.learning.ObjectiveForm) - the objective form", 
               "error_doc": "        raise:  NullArgument - ``objective_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param objective_record_types: array of objective record types\n        :type objective_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the objective form\n        :rtype: ``osid.learning.ObjectiveForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "objective_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.learning.ObjectiveForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_objective", 
               "doc": {
                  "headline": "Creates a new ``Objective``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_form (osid.learning.ObjectiveForm): the form\n                for this ``Objective``\n", 
               "return_doc": "        return: (osid.learning.Objective) - the new ``Objective``", 
               "error_doc": "        raise:  IllegalState - ``objective_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``objective_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_form`` did not originate from\n                ``get_objective_form_for_create()``", 
               "sphinx_param_doc": "        :param objective_form: the form for this ``Objective``\n        :type objective_form: ``osid.learning.ObjectiveForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Objective``\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``objective_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``objective_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_form`` did not originate from ``get_objective_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveForm", 
                     "var_name": "objective_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveForm"
               ], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_objectives", 
               "doc": {
                  "headline": "Tests if this user can update ``Objectives``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Objective`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if objective modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if objective modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_form_for_update", 
               "doc": {
                  "headline": "Gets the objective form for updating an existing objective.", 
                  "body": "        A new objective form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveForm) - the objective form", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the objective form\n        :rtype: ``osid.learning.ObjectiveForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_objective", 
               "doc": {
                  "headline": "Updates an existing objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_form (osid.learning.ObjectiveForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``objective_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``objective_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_form`` did not originate from\n                ``get_objective_form_for_update()``", 
               "sphinx_param_doc": "        :param objective_form: the form containing the elements to be updated\n        :type objective_form: ``osid.learning.ObjectiveForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``objective_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``objective_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_form`` did not originate from ``get_objective_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveForm", 
                     "var_name": "objective_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_objectives", 
               "doc": {
                  "headline": "Tests if this user can delete ``Objectives``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Objective`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Objective`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Objective`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_objective", 
               "doc": {
                  "headline": "Deletes the ``Objective`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Objective`` was not found identified by\n                the given ``Id``\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to delete\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Objective`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_objective_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Objectives``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Objective`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Objective`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_objective", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Objective`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Objective`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another objective, it is\n        reassigned to the given objective ``Id``."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an\n                ``Objective``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveNotificationSession", 
         "shortname": "ObjectiveNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``Objective`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The views defined in this session correspond to the views in the\n    ``ObjectiveLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_register_for_objective_notifications", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "register_for_new_objectives", 
            "register_for_new_objective_ancestors", 
            "register_for_new_objective_descendants", 
            "register_for_changed_objectives", 
            "register_for_changed_objective", 
            "register_for_deleted_objectives", 
            "register_for_deleted_objective", 
            "register_for_deleted_objective_ancestors", 
            "register_for_deleted_objective_descendants"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_objective_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Objective`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for objectives in\n        objective banks which are children of this objective bank in the\n        objective bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_objectives", 
               "doc": {
                  "headline": "Register for notifications of new objectives.", 
                  "body": "        ``ObjectiveReceiver.newObjective()`` is invoked when a new\n        objective is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_objective_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified objective in the objective hierarchy.", 
                  "body": "        ``ObjectiveReceiver.newObjectiveAncestor()`` is invoked when the\n        specified objetcive experiences an addition in ancestry."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the objective\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the objective to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_objective_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified objective in the objective hierarchy.", 
                  "body": "        ``ObjectiveReceiver.newObjectiveDescendant()`` is invoked when\n        the specified objective experiences an addition in descendants."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the Id of the objective to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_id: the Id of the objective to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_objectives", 
               "doc": {
                  "headline": "Registers for notification of updated objectives.", 
                  "body": "        ``ObjectiveReceiver.changedObjective()`` is invoked when an\n        objective is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_objective", 
               "doc": {
                  "headline": "Registers for notification of an updated objective.", 
                  "body": "        ``ObjectiveReceiver.changedObjective()`` is invoked when the\n        specified objective is changed."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objectives", 
               "doc": {
                  "headline": "Registers for notification of deleted objectives.", 
                  "body": "        ``ObjectiveReceiver.deletedObjective()`` is invoked when an\n        objective is removed from this objective bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective", 
               "doc": {
                  "headline": "Registers for notification of a deleted objective.", 
                  "body": "        ``ObjectiveReceiver.changedObjective()`` is invoked when the\n        specified objective is removed from this objective bank."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objectiveid is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objectiveid is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified objective in the objective hierarchy.", 
                  "body": "        ``ObjectiveReceiver.deletedObjectiveAncestor()`` is invoked when\n        the specified objective experiences a removal of an ancestor."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the objective\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the objective to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified objective in the objective hierarchy.", 
                  "body": "        ``ObjectiveReceiver.deletedObjectiveDescednant()`` is invoked\n        when the specified objective experiences a removal of one of its\n        descendants."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the objective\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the objective to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveHierarchySession", 
         "shortname": "ObjectiveHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Objective`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Objective that contains its\n    child objectives``. The hierarchy may be traversed recursively to\n    establish the tree structure through ``get_parent_objectives()`` and\n    ``getChildObjectives()``. To relate these ``Ids`` to another OSID,\n    ``get_objective_nodes()`` can be used for retrievals that can be\n    used for bulk lookups in other OSIDs. Any ``Objective`` available in\n    the Learning OSID is known to this hierarchy but does not appear in\n    the hierarchy traversal until added as a root node or a child of\n    another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_objectives()`` or ``get_child_objectives()``\n    in lieu of a ``PermissionDenied`` error that may disrupt the\n    traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: objective elements may be silently omitted or\n        re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_hierarchy_id", 
            "get_objective_hierarchy", 
            "can_access_objective_hierarchy", 
            "use_comparative_objective_view", 
            "use_plenary_objective_view", 
            "get_root_objective_ids", 
            "get_root_objectives", 
            "has_parent_objectives", 
            "is_parent_of_objective", 
            "get_parent_objective_ids", 
            "get_parent_objectives", 
            "is_ancestor_of_objective", 
            "has_child_objectives", 
            "is_child_of_objective", 
            "get_child_objective_ids", 
            "get_child_objectives", 
            "is_descendant_of_objective", 
            "get_objective_node_ids", 
            "get_objective_nodes"
         ], 
         "methods": [
            {
               "name": "get_objective_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_objective_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer traversal\n        functions to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_view", 
               "doc": {
                  "headline": "The returns from the objective methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_objective_ids", 
               "doc": {
                  "headline": "Gets the root objective ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root objective ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root objective ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_objectives", 
               "doc": {
                  "headline": "Gets the root objective in this objective hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the root objective", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root objective\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_objectives", 
               "doc": {
                  "headline": "Tests if the ``Objective`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if the objective has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the objective has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_objective", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``objective_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``objective_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_objective_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the objective", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the objective\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_objectives", 
               "doc": {
                  "headline": "Gets the parents of the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the parents of the\n                objective", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the objective\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_objective", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``objective_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``objective_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_objectives", 
               "doc": {
                  "headline": "Tests if an objective has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``objective_id`` has\n                children, ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``objective_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_objective", 
               "doc": {
                  "headline": "Tests if an objective is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``objective_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``objective_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_objective_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the objective", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` to query\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the objective\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_objectives", 
               "doc": {
                  "headline": "Gets the children of the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the children of the\n                objective", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` to query\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the objective\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_objective", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``objective_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``objective_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a catalog node", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` to query\n        :type objective_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a catalog node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNode) - an objective node", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` to query\n        :type objective_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an objective node\n        :rtype: ``osid.learning.ObjectiveNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.learning.ObjectiveNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveHierarchyDesignSession", 
         "shortname": "ObjectiveHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Objective`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Objective``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_hierarchy_id", 
            "get_objective_hierarchy", 
            "can_modify_objective_hierarchy", 
            "add_root_objective", 
            "remove_root_objective", 
            "add_child_objective", 
            "remove_child_objective", 
            "remove_child_objectives"
         ], 
         "methods": [
            {
               "name": "get_objective_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_objective_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_objective", 
               "doc": {
                  "headline": "Adds a root objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_id`` is already in hierarchy\n        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_objective", 
               "doc": {
                  "headline": "Removes a root objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_objective", 
               "doc": {
                  "headline": "Adds a child to an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``objective_id`` or ``child_id`` not found\n        raise:  NullArgument - ``objective_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``objective_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_objective", 
               "doc": {
                  "headline": "Removes a child from an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``objective_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``objective_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_objectives", 
               "doc": {
                  "headline": "Removes all children from an objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of an objective\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of an objective\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveSequencingSession", 
         "shortname": "ObjectiveSequencingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to sequence the objectives in the objective hierarchy.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_hierarchy_id", 
            "get_objective_hierarchy", 
            "can_sequence_objectives", 
            "move_objective_ahead", 
            "move_objective_behind", 
            "sequence_objectives"
         ], 
         "methods": [
            {
               "name": "get_objective_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_sequence_objectives", 
               "doc": {
                  "headline": "Tests if this user can sequence objectives.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if sequencing objectives is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if sequencing objectives is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "move_objective_ahead", 
               "doc": {
                  "headline": "Moves an objective ahead of a refrence objective under the given parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_objective_id (osid.id.Id): the ``Id`` of the\n                parent objective\n        arg:    reference_objective_id (osid.id.Id): the ``Id`` of the\n                objective\n        arg:    objective_id (osid.id.Id): the ``Id`` of the objective\n                to move ahead of ``reference_objective_id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_objective_id,\n                reference_objective_id,`` or ``objective_id`` not found,\n                or ``reference_objective_id`` or ``objective_id`` is not\n                a child of ``parent_objective_id``\n        raise:  NullArgument - ``parent_objective_id,\n                reference_objective_id,`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_objective_id: the ``Id`` of the parent objective\n        :type parent_objective_id: ``osid.id.Id``\n        :param reference_objective_id: the ``Id`` of the objective\n        :type reference_objective_id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of the objective to move ahead of ``reference_objective_id``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_objective_id, reference_objective_id,`` or ``objective_id`` not found, or ``reference_objective_id`` or ``objective_id`` is not a child of ``parent_objective_id``\n        :raise: ``NullArgument`` -- ``parent_objective_id, reference_objective_id,`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "move_objective_behind", 
               "doc": {
                  "headline": "Moves an objective behind a refrence objective under the given parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_objective_id (osid.id.Id): the ``Id`` of the\n                parent objective\n        arg:    reference_objective_id (osid.id.Id): the ``Id`` of the\n                objective\n        arg:    objective_id (osid.id.Id): the ``Id`` of the objective\n                to move behind ``reference_objective_id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_objective_id,\n                reference_objective_id,`` or ``objective_id`` not found,\n                or ``reference_objective_id`` or ``objective_id`` is not\n                a child of ``parent_objective_id``\n        raise:  NullArgument - ``parent_objective_id,\n                reference_objective_id,`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_objective_id: the ``Id`` of the parent objective\n        :type parent_objective_id: ``osid.id.Id``\n        :param reference_objective_id: the ``Id`` of the objective\n        :type reference_objective_id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of the objective to move behind ``reference_objective_id``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_objective_id, reference_objective_id,`` or ``objective_id`` not found, or ``reference_objective_id`` or ``objective_id`` is not a child of ``parent_objective_id``\n        :raise: ``NullArgument`` -- ``parent_objective_id, reference_objective_id,`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "sequence_objectives", 
               "doc": {
                  "headline": "Sequences a set of objectives under a parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_objective_id (osid.id.Id): the ``Id`` of the\n                parent objective\n        arg:    objective_ids (osid.id.Id[]): the ``Id`` of the\n                objectives\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_id`` or an ``objective_id`` not\n                found, or an ``objective_id`` is not a child of\n                ``parent_objective_id``\n        raise:  NullArgument - ``paren_objectivet_id`` or\n                ``objective_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_objective_id: the ``Id`` of the parent objective\n        :type parent_objective_id: ``osid.id.Id``\n        :param objective_ids: the ``Id`` of the objectives\n        :type objective_ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_id`` or an ``objective_id`` not found, or an ``objective_id`` is not a child of ``parent_objective_id``\n        :raise: ``NullArgument`` -- ``paren_objectivet_id`` or ``objective_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "objective_ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveObjectiveBankSession", 
         "shortname": "ObjectiveObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Objective`` to ``ObjectiveBank`` mappings.", 
            "body": "    An ``Objective`` may appear in multiple ``ObjectiveBanks``. Each\n    ``ObjectiveBank`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_objective_objective_bank_mappings", 
            "use_comparative_objective_bank_view", 
            "use_plenary_objective_bank_view", 
            "get_objective_ids_by_objective_bank", 
            "get_objectives_by_objective_bank", 
            "get_objective_ids_by_objective_banks", 
            "get_objectives_by_objective_banks", 
            "get_objective_bank_ids_by_objective", 
            "get_objective_banks_by_objective"
         ], 
         "methods": [
            {
               "name": "can_lookup_objective_objective_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of objective/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Objective`` and ``ObjectiveBank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective_ids_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Objective``  ``Ids`` associated with an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related objectives", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related objectives\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Objectives`` associated with an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - list of related\n                objective ``Ids``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related objective ``Ids``\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_ids_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Objective Ids`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of objective\n                bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of objective ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objective bank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of objective ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Objectives`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of objective\n                bank ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - list of objectives", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objective bank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_bank_ids_by_objective", 
               "doc": {
                  "headline": "Gets the list of ``ObjectiveBank``  ``Ids`` mapped to an ``Objective``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of an ``Objective``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of objective bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of an ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_objective", 
               "doc": {
                  "headline": "Gets the list of ``ObjectiveBanks`` mapped to an ``Objective``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of an ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - list of objective\n                banks", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of an ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective banks\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveObjectiveBankAssignmentSession", 
         "shortname": "ObjectiveObjectiveBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Objectives`` to ``ObjectiveBanks``.", 
            "body": "    An ``Objective`` may map to multiple ``ObjectiveBanks`` and removing\n    the last reference to an ``Objective`` is the equivalent of deleting\n    it. Each ``ObjectiveBank`` may have its own authorizations governing\n    who is allowed to operate on it.\n\n    Moving or adding a reference of an ``Objective`` to another\n    ``ObjectiveBank`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_objectives", 
            "can_assign_objectives_to_objective_bank", 
            "get_assignable_objective_bank_ids", 
            "get_assignable_objective_bank_ids_for_objective", 
            "assign_objective_to_objective_bank", 
            "unassign_objective_from_objective_bank"
         ], 
         "methods": [
            {
               "name": "can_assign_objectives", 
               "doc": {
                  "headline": "Tests if this user can alter objective/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_objectives_to_objective_bank", 
               "doc": {
                  "headline": "Tests if this user can alter objective/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank node in which any objective can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objective bank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids_for_objective", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank node in which a specific objective can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objective bank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_objective_to_objective_bank", 
               "doc": {
                  "headline": "Adds an existing ``Objective`` to an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_id`` already mapped to\n                ``objective_bank_id``\n        raise:  NotFound - ``objective_id`` or ``objective_bank_id`` not\n                found\n        raise:  NullArgument - ``objective_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_id`` already mapped to ``objective_bank_id``\n        :raise: ``NotFound`` -- ``objective_id`` or ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_objective_from_objective_bank", 
               "doc": {
                  "headline": "Removes an ``Objective`` from an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or ``objective_bank_id`` not\n                found or ``objective_id`` not mapped to\n                ``objective_bank_id``\n        raise:  NullArgument - ``objective_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``objective_bank_id`` not found or ``objective_id`` not mapped to ``objective_bank_id``\n        :raise: ``NullArgument`` -- ``objective_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveSmartObjectiveBankSession", 
         "shortname": "ObjectiveSmartObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``ObjectiveQuery`` can be retrieved from this session and mapped\n    to this ``ObjectiveBank`` to create a virtual collection of\n    ``Objectives``. The objectives may be sequenced using the\n    ``ObjectiveSearchOrder`` from this session.\n\n    This ``ObjectiveBank`` has a default query that matches any\n    objective and a default search order that specifies no sequencing.\n    The queries may be examined using an ``ObjectiveQueryInspector``.\n    The query may be modified by converting the inspector back to an\n    ``ObjectiveQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_manage_smart_objective_banks", 
            "get_objective_query", 
            "get_objective_search_order", 
            "apply_objective_query", 
            "inspect_objective_query", 
            "apply_objective_sequencing", 
            "get_objective_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart objective banks.", 
                  "body": "        A return of true does not guarantee successful assessment. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart objective bank management\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart objective bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query", 
               "doc": {
                  "headline": "Gets an objective query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {}
            }, 
            {
               "name": "get_objective_search_order", 
               "doc": {
                  "headline": "Gets an objective search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchOrder) - the objective\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective search order\n        :rtype: ``osid.learning.ObjectiveSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_objective_query", 
               "doc": {
                  "headline": "Applies an objective query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_query (osid.learning.ObjectiveQuery): the\n                objective query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``objective_query`` not of this service", 
               "sphinx_param_doc": "        :param objective_query: the objective query\n        :type objective_query: ``osid.learning.ObjectiveQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``objective_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveQuery", 
                     "var_name": "objective_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_objective_query", 
               "doc": {
                  "headline": "Gets an objective query inspector for this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the objective\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query inspector\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_objective_sequencing", 
               "doc": {
                  "headline": "Applies an objective search order to this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_search_order\n                (osid.learning.ObjectiveSearchOrder): the objective\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``objective_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param objective_search_order: the objective search order\n        :type objective_search_order: ``osid.learning.ObjectiveSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``objective_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveSearchOrder", 
                     "var_name": "objective_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_from_inspector", 
               "doc": {
                  "headline": "Gets an objective query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_query_inspector\n                (osid.learning.ObjectiveQueryInspector): a query\n                inspector\n", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  NullArgument - ``objective_query_inspector`` is ``null``\n        raise:  Unsupported - ``objective_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param objective_query_inspector: a query inspector\n        :type objective_query_inspector: ``osid.learning.ObjectiveQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``objective_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveQueryInspector", 
                     "var_name": "objective_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveQueryInspector"
               ], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveRequisiteSession", 
         "shortname": "ObjectiveRequisiteSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving objective requisites.", 
            "body": "    A requisite is a set of ``Objectives`` that should be achieved\n    before another ``Objective`` is attempted.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * isolated objective bank view: All objective methods in this\n        session operate, retrieve and pertain to objectives defined\n        explicitly in the current objective bank. Using an isolated view\n        is useful for managing objectives with the\n        ``ObjectiveAdminSession.``\n      * federated objective bank view: All objective methods in this\n        session operate, retrieve and pertain to all objectives defined\n        in this objective bank and any other objective banks implicitly\n        available in this objective bank through objective bank\n        inheritence.\n\n    \n    Objectives may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Objective``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_objective_prerequisites", 
            "use_comparative_objective_view", 
            "use_plenary_objective_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_requisite_objectives", 
            "get_all_requisite_objectives", 
            "get_dependent_objectives", 
            "is_objective_required", 
            "get_equivalent_objectives"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_objective_prerequisites", 
               "doc": {
                  "headline": "Tests if this user can perform ``Objective`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_view", 
               "doc": {
                  "headline": "A complete view of the ``Objective`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include objectives in objective banks\n        which are children of this objective bank in the objective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_requisite_objectives", 
               "doc": {
                  "headline": "Gets a list of ``Objectives`` that are the immediate requisites for the given ``Objective``.", 
                  "body": "        In plenary mode, the returned list contains all of the immediate\n        requisites, or an error results if an ``Objective`` is not found\n        or inaccessible. Otherwise, inaccessible ``Objectives`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned requisite\n                ``Objectives``", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned requisite ``Objectives``\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_all_requisite_objectives", 
               "doc": {
                  "headline": "Gets a list of ``Objectives`` that are the requisites for the given ``Objective`` including the requistes of the requisites, and so on.", 
                  "body": "        In plenary mode, the returned list contains all of the immediate\n        requisites, or an error results if an ``Objective`` is not found\n        or inaccessible. Otherwise, inaccessible ``Objectives`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_dependent_objectives", 
               "doc": {
                  "headline": "Gets a list of ``Objectives`` that require the given ``Objective``.", 
                  "body": "        In plenary mode, the returned list contains all of the immediate\n        requisites, or an error results if an Objective is not found or\n        inaccessible. Otherwise, inaccessible ``Objectives`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_objective_required", 
               "doc": {
                  "headline": "Tests if an objective is required before proceeding with an objective.", 
                  "body": "        One objective may indirectly depend on another objective by way\n        of one or more other objectives."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the dependent\n                ``Objective``\n        arg:    required_objective_id (osid.id.Id): ``Id`` of the\n                required ``Objective``\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``objective_id`` depends on\n                ``required_objective_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the dependent ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param required_objective_id: ``Id`` of the required ``Objective``\n        :type required_objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``objective_id`` depends on ``required_objective_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "required_objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_equivalent_objectives", 
               "doc": {
                  "headline": "Gets a list of ``Objectives`` that are equivalent to the given ``Objective`` for the purpose of requisites.", 
                  "body": "        An equivalent objective can satisfy the given objective. In\n        plenary mode, the returned list contains all of the equivalent\n        requisites, or an error results if an Objective is not found or\n        inaccessible. Otherwise, inaccessible ``Objectives`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned\n                ``Objective`` list", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Objective`` list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveRequisiteAssignmentSession", 
         "shortname": "ObjectiveRequisiteAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to manage requisites.", 
            "body": "    Each ``ObjectiveBank`` may have its own authorizations governing who\n    is allowed to operate on it.\n\n    Moving or adding a reference of an ``Objective`` to another\n    ``ObjectiveBank`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_assign_requisites", 
            "assign_objective_requisite", 
            "unassign_objective_requisite", 
            "assign_equivalent_objective", 
            "unassign_equivalent_objective"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_assign_requisites", 
               "doc": {
                  "headline": "Tests if this user can manage objective requisites.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "assign_objective_requisite", 
               "doc": {
                  "headline": "Creates a requirement dependency between two ``Objectives``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the dependent\n                ``Objective``\n        arg:    requisite_objective_id (osid.id.Id): the ``Id`` of the\n                required ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_id`` already mapped to\n                ``requisite_objective_id``\n        raise:  NotFound - ``objective_id`` or\n                ``requisite_objective_id`` not found\n        raise:  NullArgument - ``objective_id`` or\n                ``requisite_objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the dependent ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param requisite_objective_id: the ``Id`` of the required ``Objective``\n        :type requisite_objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_id`` already mapped to ``requisite_objective_id``\n        :raise: ``NotFound`` -- ``objective_id`` or ``requisite_objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``requisite_objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "requisite_objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_objective_requisite", 
               "doc": {
                  "headline": "Removes an ``Objective`` requisite from an ``Objective``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    requisite_objective_id (osid.id.Id): the ``Id`` of the\n                required ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or\n                ``requisite_objective_id`` not found or ``objective_id``\n                not mapped to ``requisite_objective_id``\n        raise:  NullArgument - ``objective_id`` or\n                ``requisite_objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param requisite_objective_id: the ``Id`` of the required ``Objective``\n        :type requisite_objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``requisite_objective_id`` not found or ``objective_id`` not mapped to ``requisite_objective_id``\n        :raise: ``NullArgument`` -- ``objective_id`` or ``requisite_objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "requisite_objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "assign_equivalent_objective", 
               "doc": {
                  "headline": "Makes an objective equivalent to another objective for the purposes of satisfying a requisite.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the principal\n                ``Objective``\n        arg:    equivalent_objective_id (osid.id.Id): the ``Id`` of the\n                equivalent ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_id`` already mapped to\n                ``equiavelnt_objective_id``\n        raise:  NotFound - ``objective_id`` or\n                ``equivalent_objective_id`` not found\n        raise:  NullArgument - ``objective_id`` or\n                ``equivalent_objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the principal ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param equivalent_objective_id: the ``Id`` of the equivalent ``Objective``\n        :type equivalent_objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_id`` already mapped to ``equiavelnt_objective_id``\n        :raise: ``NotFound`` -- ``objective_id`` or ``equivalent_objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``equivalent_objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "equivalent_objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_equivalent_objective", 
               "doc": {
                  "headline": "Removes an ``Objective`` requisite from an ``Objective``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the principal\n                ``Objective``\n        arg:    equivalent_objective_id (osid.id.Id): the ``Id`` of the\n                equivalent ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or\n                ``equivalent_objective_id`` not found or\n                ``objective_id`` is already equivalent to\n                ``equivalent_objective_id``\n        raise:  NullArgument - ``objective_id`` or\n                ``equivalent_objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the principal ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param equivalent_objective_id: the ``Id`` of the equivalent ``Objective``\n        :type equivalent_objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``equivalent_objective_id`` not found or ``objective_id`` is already equivalent to ``equivalent_objective_id``\n        :raise: ``NullArgument`` -- ``objective_id`` or ``equivalent_objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "equivalent_objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityLookupSession", 
         "shortname": "ActivityLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Activity`` objects.", 
            "body": "    The ``Activity`` represents something to perform in order to achieve\n    a learning objective.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * isolated objective bank view: All activity methods in this\n        session operate, retrieve and pertain to activities defined\n        explicitly in the current objective bank. Using an isolated view\n        is useful for managing activities with the\n        ``ActivityAdminSession.``\n      * federated objective bank view: All activity methods in this\n        session operate, retrieve and pertain to all activities defined\n        in this objective bank and any other objective banks implicitly\n        available in this objective bank through objective bank\n        inheritence.\n\n    \n    Activities may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Activity``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_activities", 
            "use_comparative_activity_view", 
            "use_plenary_activity_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_activity", 
            "get_activities_by_ids", 
            "get_activities_by_genus_type", 
            "get_activities_by_parent_genus_type", 
            "get_activities_by_record_type", 
            "get_activities_for_objective", 
            "get_activities_for_objectives", 
            "get_activities_by_asset", 
            "get_activities_by_assets", 
            "get_activities"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_activities", 
               "doc": {
                  "headline": "Tests if this user can perform ``Activity`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_activity_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_activity_view", 
               "doc": {
                  "headline": "A complete view of the ``Activity`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include activities in objective banks\n        which are children of this objective bank in the objective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_activity", 
               "doc": {
                  "headline": "Gets the ``Activity`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Activity`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Activity`` and retained for\n        compatibility."
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): ``Id`` of the ``Activity``\n", 
               "return_doc": "        return: (osid.learning.Activity) - the activity", 
               "error_doc": "        raise:  NotFound - ``activity_id`` not found\n        raise:  NullArgument - ``activity_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: ``Id`` of the ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the activity\n        :rtype: ``osid.learning.Activity``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``activity_id`` not found\n        :raise: ``NullArgument`` -- ``activity_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.Activity", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_ids", 
               "doc": {
                  "headline": "Gets an ``ActivityList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        activities specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Activities`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    activity_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - the returned ``Activity``\n                list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``activity_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_ids: the list of ``Ids`` to retrieve\n        :type activity_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Activity`` list\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``activity_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "activity_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``ActivityList`` corresponding to the given activity genus ``Type`` which does not include activities of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known activities\n        or an error results. Otherwise, the returned list may contain\n        only those activities that are accessible through this session."
               }, 
               "arg_doc": "        arg:    activity_genus_type (osid.type.Type): an activity genus\n                type\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - the returned ``Activity``\n                list", 
               "error_doc": "        raise:  NullArgument - ``activity_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_genus_type: an activity genus type\n        :type activity_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Activity`` list\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``ActivityList`` corresponding to the given activity genus ``Type`` and include any additional activity with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known activities\n        or an error results. Otherwise, the returned list may contain\n        only those activities that are accessible through this session."
               }, 
               "arg_doc": "        arg:    activity_genus_type (osid.type.Type): an activity genus\n                type\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - the returned ``Activity``\n                list", 
               "error_doc": "        raise:  NullArgument - ``activity_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_genus_type: an activity genus type\n        :type activity_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Activity`` list\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ActivityList`` containing the given activity record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known activities\n        or an error results. Otherwise, the returned list may contain\n        only those activities that are accessible through this session."
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): an activity\n                record type\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - the returned ``Activity``\n                list", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_record_type: an activity record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Activity`` list\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_for_objective", 
               "doc": {
                  "headline": "Gets the activities for the given objective.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        activities mapped to the objective ``Id`` or an error results if\n        an Id in the supplied list is not found or inaccessible.\n        Otherwise, inaccessible ``Activities`` may be omitted from the\n        list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): ``Id`` of the ``Objective``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of enrollments", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of enrollments\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_for_objectives", 
               "doc": {
                  "headline": "Gets the activities for the given objectives.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        activities specified in the objective ``Id`` list, in the order\n        of the list, including duplicates, or an error results if a\n        course offering ``Id`` in the supplied list is not found or\n        inaccessible. Otherwise, inaccessible ``Activities`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.IdList): list of objective\n                ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of activities", 
               "error_doc": "        raise:  NotFound - an ``objective_id`` not found\n        raise:  NullArgument - ``objective_id_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_ids: list of objective ``Ids``\n        :type objective_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of activities\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``objective_id_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_asset", 
               "doc": {
                  "headline": "Gets the activities for the given asset.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        activities mapped to the asset ``Id`` or an error results if an\n        ``Id`` in the supplied list is not found or inaccessible.\n        Otherwise, inaccessible ``Activities`` may be omitted from the\n        list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    asset_id (osid.id.Id): ``Id`` of an ``Asset``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of activities", 
               "error_doc": "        raise:  NotFound - ``asset_id`` not found\n        raise:  NullArgument - ``asset_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param asset_id: ``Id`` of an ``Asset``\n        :type asset_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of activities\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``asset_id`` not found\n        :raise: ``NullArgument`` -- ``asset_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "asset_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_assets", 
               "doc": {
                  "headline": "Gets the activities for the given asset.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        activities mapped to the asset ``Id`` or an error results if an\n        ``Id`` in the supplied list is not found or inaccessible.\n        Otherwise, inaccessible ``Activities`` may be omitted from the\n        list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    asset_ids (osid.id.IdList): ``Ids`` of ``Assets``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of activities", 
               "error_doc": "        raise:  NotFound - an ``asset_id`` not found\n        raise:  NullArgument - ``asset_id_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param asset_ids: ``Ids`` of ``Assets``\n        :type asset_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of activities\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``asset_id`` not found\n        :raise: ``NullArgument`` -- ``asset_id_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "asset_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities", 
               "doc": {
                  "headline": "Gets all ``Activities``.", 
                  "body": "        In plenary mode, the returned list contains all known activites\n        or an error results. Otherwise, the returned list may contain\n        only those activities that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityList) - a ``ActivityList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ActivityList``\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityQuerySession", 
         "shortname": "ActivityQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Activity`` objects.", 
            "body": "    The search query is constructed using the ``ActivityQuery``. The\n    activity record ``Type`` also specifies the record for the activity\n    query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include activities in\n        objective banks of which this objective bank is a ancestor in\n        the objective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        activities in this objective bank\n\n    \n    Activities may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ActivityQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_search_activities", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_activity_query", 
            "get_activities_by_query"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_activities", 
               "doc": {
                  "headline": "Tests if this user can perform ``Activity`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include activities in objective banks\n        which are children of this objective bank in the objective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query", 
               "doc": {
                  "headline": "Gets an activity query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {}
            }, 
            {
               "name": "get_activities_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Activities`` matching the given activity query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_query (osid.learning.ActivityQuery): the\n                activity query\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - the returned\n                ``ActivityList``", 
               "error_doc": "        raise:  NullArgument - ``activity_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``activity_query`` is not of this service", 
               "sphinx_param_doc": "        :param activity_query: the activity query\n        :type activity_query: ``osid.learning.ActivityQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ActivityList``\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``activity_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityQuery", 
                     "var_name": "activity_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityQuery"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivitySearchSession", 
         "shortname": "ActivitySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Activity`` objects.", 
            "body": "    The search query is constructed using the ``ActivityQuery``. The\n    activity record ``Type`` also specifies the record for the activity\n    query.\n\n    ``get_activities_by_query()`` is the basic search method and returns\n    a list of ``Activities``. A more advanced search may be performed\n    with ``getActivitiesBySearch()``. It accepts a ``ActivitySearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_activities_by_search()`` returns an ``ActivitySearchResults``\n    that can be used to access the resulting ``ActivityList`` or be used\n    to perform a search within the result set through\n    ``ActivitySearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include activities in\n        objective banks of which this objective bank is a ancestor in\n        the objective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        activities in this objective bank\n\n    \n    Activities may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ActivityQuery``."
         }, 
         "inherit_fullnames": [
            "osid.learning.ActivityQuerySession"
         ], 
         "inherit_shortnames": [
            "ActivityQuerySession"
         ], 
         "inherit_pkg_names": [
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "learning", 
               "name": "ActivityQuerySession"
            }
         ], 
         "method_names": [
            "get_activity_search", 
            "get_activity_search_order", 
            "get_activities_by_search", 
            "get_activity_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_activity_search", 
               "doc": {
                  "headline": "Gets an activity search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivitySearch) - the activity search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity search\n        :rtype: ``osid.learning.ActivitySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivitySearch", 
               "errors": {}
            }, 
            {
               "name": "get_activity_search_order", 
               "doc": {
                  "headline": "Gets an activity search order.", 
                  "body": "        The ``ActivitySearchOrder`` is supplied to a ``ActivitySearch``\n        to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivitySearchOrder) - the activity\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity search order\n        :rtype: ``osid.learning.ActivitySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivitySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_activities_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_query (osid.learning.ActivityQuery): the\n                activity query\n        arg:    activitiesearch (osid.learning.ActivitySearch): the\n                activity search\n", 
               "return_doc": "        return: (osid.learning.ActivitySearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``activity_query`` or ``activitiesearch``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``activitiesearch`` or ``activity_query``\n                is not of this service", 
               "sphinx_param_doc": "        :param activity_query: the activity query\n        :type activity_query: ``osid.learning.ActivityQuery``\n        :param activitiesearch: the activity search\n        :type activitiesearch: ``osid.learning.ActivitySearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.learning.ActivitySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_query`` or ``activitiesearch`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``activitiesearch`` or ``activity_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityQuery", 
                     "var_name": "activity_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.learning.ActivitySearch", 
                     "var_name": "activitiesearch", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityQuery", 
                  "osid.learning.ActivitySearch"
               ], 
               "return_type": "osid.learning.ActivitySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_from_inspector", 
               "doc": {
                  "headline": "Gets an activity query from an inspector.", 
                  "body": "        The inspector is available from an ``ActivitySearchResults``."
               }, 
               "arg_doc": "        arg:    activity_query_inspector\n                (osid.learning.ActivityQueryInspector): an activity bank\n                query inspector\n", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "        raise:  NullArgument - ``activity_query_inspector`` is ``null``\n        raise:  Unsupported - ``activity_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param activity_query_inspector: an activity bank query inspector\n        :type activity_query_inspector: ``osid.learning.ActivityQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``activity_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityQueryInspector", 
                     "var_name": "activity_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityQueryInspector"
               ], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityAdminSession", 
         "shortname": "ActivityAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Activities``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Activity,`` an ``ActivityForm`` is requested using\n    ``get_activity_form_for_create()`` specifying the desired objective\n    and record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``ActivityForm`` will indicate that it is to be used with a\n    create operation and can be used to examine metdata or validate data\n    prior to creation. Once the ``ActivityForm`` is submiited to a\n    create operation, it cannot be reused with another create operation\n    unless the first operation was unsuccessful. Each ``ActivityForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``ActivityForms`` are requested to the ``Activity``\n    ``Id`` that is to be updated using ``getActivityFormForUpdate()``.\n    Similarly, the ``ActivityForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``ActivityForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Activities``. To unmap an\n    ``Activity`` from the current ``ObjectiveBank,`` the\n    ``ActivityObjectiveBankAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``Activity`` itself thus\n    removing it from all known ``ObjectiveBank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_create_activities", 
            "can_create_activity_with_record_types", 
            "get_activity_form_for_create", 
            "create_activity", 
            "can_update_activities", 
            "get_activity_form_for_update", 
            "update_activity", 
            "can_delete_activities", 
            "delete_activity", 
            "can_manage_activity_aliases", 
            "alias_activity"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_activities", 
               "doc": {
                  "headline": "Tests if this user can create ``Activities``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Activity`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Activity`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Activity`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_activity_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Activity`` using the desired record types.", 
                  "body": "        While ``LearningManager.getActivityRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Activity``.\n        Providing an empty array tests if an ``Activity`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    activity_record_types (osid.type.Type[]): array of\n                activity record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Activity`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``activity_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param activity_record_types: array of activity record types\n        :type activity_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Activity`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "activity_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_form_for_create", 
               "doc": {
                  "headline": "Gets the activity form for creating new activities.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    activity_record_types (osid.type.Type[]): array of\n                activity record types\n", 
               "return_doc": "        return: (osid.learning.ActivityForm) - the activity form", 
               "error_doc": "        raise:  NotFound - ``objective_id`` is not found\n        raise:  NullArgument - ``objective_id`` or\n                ``activity_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param activity_record_types: array of activity record types\n        :type activity_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the activity form\n        :rtype: ``osid.learning.ActivityForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id`` or ``activity_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "activity_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.learning.ActivityForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_activity", 
               "doc": {
                  "headline": "Creates a new ``Activity``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_form (osid.learning.ActivityForm): the form for\n                this ``Activity``\n", 
               "return_doc": "        return: (osid.learning.Activity) - the new ``Activity``", 
               "error_doc": "        raise:  IllegalState - ``activity_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``activity_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``activity_form`` did not originate from\n                ``get_activity_form_for_create()``", 
               "sphinx_param_doc": "        :param activity_form: the form for this ``Activity``\n        :type activity_form: ``osid.learning.ActivityForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Activity``\n        :rtype: ``osid.learning.Activity``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``activity_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``activity_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``activity_form`` did not originate from ``get_activity_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityForm", 
                     "var_name": "activity_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityForm"
               ], 
               "return_type": "osid.learning.Activity", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_activities", 
               "doc": {
                  "headline": "Tests if this user can update ``Activities``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Activity`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if activity modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if activity modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_activity_form_for_update", 
               "doc": {
                  "headline": "Gets the activity form for updating an existing activity.", 
                  "body": "        A new activity form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n", 
               "return_doc": "        return: (osid.learning.ActivityForm) - the activity form", 
               "error_doc": "        raise:  NotFound - ``activity_id`` is not found\n        raise:  NullArgument - ``activity_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the activity form\n        :rtype: ``osid.learning.ActivityForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``activity_id`` is not found\n        :raise: ``NullArgument`` -- ``activity_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_activity", 
               "doc": {
                  "headline": "Updates an existing activity,.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_form (osid.learning.ActivityForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``activity_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``activity_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``activity_form`` did not originate from\n                ``get_activity_form_for_update()``", 
               "sphinx_param_doc": "        :param activity_form: the form containing the elements to be updated\n        :type activity_form: ``osid.learning.ActivityForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``activity_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``activity_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``activity_form`` did not originate from ``get_activity_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityForm", 
                     "var_name": "activity_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_activities", 
               "doc": {
                  "headline": "Tests if this user can delete ``Activities``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Activity`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Activity`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Activity`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_activity", 
               "doc": {
                  "headline": "Deletes the ``Activity`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n                to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Activity`` was not found identified by\n                the given ``Id``\n        raise:  NullArgument - ``activity_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity`` to delete\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Activity`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``activity_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_activity_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for activities.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Activity`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Activity`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_activity", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Activity`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Activity`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another activity, it is\n        reassigned to the given activity ``Id``."
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of an ``Activity``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``activity_id`` not found\n        raise:  NullArgument - ``activity_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of an ``Activity``\n        :type activity_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``activity_id`` not found\n        :raise: ``NullArgument`` -- ``activity_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityNotificationSession", 
         "shortname": "ActivityNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``Activity`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``ActivityLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_register_for_activity_notifications", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "register_for_new_activities", 
            "register_for_new_activities_for_objective", 
            "register_for_changed_activities", 
            "register_for_changed_activities_for_objective", 
            "register_for_changed_activity", 
            "register_for_deleted_activities", 
            "register_for_deleted_activities_for_objective", 
            "register_for_deleted_activity"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_activity_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Activity`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for activities in\n        objective banks which are children of this objective bank in the\n        objective bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_activities", 
               "doc": {
                  "headline": "Register for notifications of new activities.", 
                  "body": "        ``ActivityReceiver.newActivity()`` is invoked when a new\n        activity is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_activities_for_objective", 
               "doc": {
                  "headline": "Register for notifications of new activities for the given objective.", 
                  "body": "        ``ActivityReceiver.newActivity()`` is invoked when a new\n        activity is created."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Activity`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Activity`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_activities", 
               "doc": {
                  "headline": "Registers for notification of updated activities.", 
                  "body": "        ``ActivityReceiver.changedActivity()`` is invoked when an\n        activity is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_activities_for_objective", 
               "doc": {
                  "headline": "Registers for notification of updated activities.", 
                  "body": "        ``ActivityReceiver.changedActivity()`` is invoked when an\n        activity is changed."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_activity", 
               "doc": {
                  "headline": "Registers for notification of an updated activity.", 
                  "body": "        ``ActivityReceiver.changedActivity()`` is invoked when the\n        specified activity is changed."
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity`` to monitor\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_activities", 
               "doc": {
                  "headline": "Registers for notification of deleted activities.", 
                  "body": "        ``ActivityReceiver.deletedActivity()`` is invoked when an\n        activity is removed from this objective bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_activities_for_objective", 
               "doc": {
                  "headline": "Registers for notification of deleted activities.", 
                  "body": "        ``ActivityReceiver.deletedActivity()`` is invoked when an\n        activity is removed from this objective bank."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_activity", 
               "doc": {
                  "headline": "Registers for notification of a deleted activity.", 
                  "body": "        ``ActivityReceiver.changedActivity()`` is invoked when the\n        specified activity is removed from this objective bank."
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity`` to monitor\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityObjectiveBankSession", 
         "shortname": "ActivityObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Activity`` to ``ObjectiveBank`` mappings.", 
            "body": "    An ``Activity`` may appear in multiple ``ObjectiveBanks``. Each\n    ``ObjectiveBank`` may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_activity_objective_bank_mappings", 
            "use_comparative_objective_bank_view", 
            "use_plenary_objective_bank_view", 
            "get_activity_ids_by_objective_bank", 
            "get_activities_by_objective_bank", 
            "get_activity_ids_by_objective_banks", 
            "get_activities_by_objective_banks", 
            "get_objective_bank_ids_by_activity", 
            "get_objective_banks_by_activity"
         ], 
         "methods": [
            {
               "name": "can_lookup_activity_objective_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of activity/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Activity`` and ``ObjectiveBank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_activity_ids_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Activity``  ``Ids`` associated with an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related activity ``Ids``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related activity ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Activities`` associated with an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of related\n                activities", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related activities\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activity_ids_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Activity Ids`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of objective\n                bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of activity ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objective bank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of activity ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_activities_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Activities`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of objective\n                bank ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ActivityList) - list of activities", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objective bank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of activities\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_bank_ids_by_activity", 
               "doc": {
                  "headline": "Gets the list of ``ObjectiveBank Ids`` mapped to a ``Activity``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): ``Id`` of a ``Activity``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of objective bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``activity_id`` is not found\n        raise:  NullArgument - ``activity_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: ``Id`` of a ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``activity_id`` is not found\n        :raise: ``NullArgument`` -- ``activity_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_activity", 
               "doc": {
                  "headline": "Gets the list of ``ObjectiveBanks`` mapped to a ``Activity``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): ``Id`` of a ``Activity``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - list of objective\n                bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``activity_id`` is not found\n        raise:  NullArgument - ``activity_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: ``Id`` of a ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective bank ``Ids``\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``activity_id`` is not found\n        :raise: ``NullArgument`` -- ``activity_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityObjectiveBankAssignmentSession", 
         "shortname": "ActivityObjectiveBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Activities`` to ``ObjectiveBanks``.", 
            "body": "    An ``Activity`` may map to multiple ``ObjectiveBanks`` and removing\n    the last reference to a ``Activity`` is the equivalent of deleting\n    it. Each ``ObjectiveBank`` may have its own authorizations governing\n    who is allowed to operate on it.\n\n    Moving or adding a reference of an ``Activity`` to another\n    ``ObjectiveBank`` is not a copy operation (eg: does not change its\n    ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_activities", 
            "can_assign_activities_to_objective_bank", 
            "get_assignable_objective_bank_ids", 
            "get_assignable_objective_bank_ids_for_activity", 
            "assign_activity_to_objective_bank", 
            "unassign_activity_from_objective_bank"
         ], 
         "methods": [
            {
               "name": "can_assign_activities", 
               "doc": {
                  "headline": "Tests if this user can alter activity/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_activities_to_objective_bank", 
               "doc": {
                  "headline": "Tests if this user can alter activity/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank node in which any activity can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objective bank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids_for_activity", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank node in which a specific activity can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objective bank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``activity_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param activity_id: the ``Id`` of the ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_activity_to_objective_bank", 
               "doc": {
                  "headline": "Adds an existing ``Activity`` to a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``activity_id`` already mapped to\n                ``objective_bank_id``\n        raise:  NotFound - ``activity_id`` or ``objective_bank_id`` not\n                found\n        raise:  NullArgument - ``activity_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity``\n        :type activity_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``activity_id`` already mapped to ``objective_bank_id``\n        :raise: ``NotFound`` -- ``activity_id`` or ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``activity_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_activity_from_objective_bank", 
               "doc": {
                  "headline": "Removes a ``Activity`` from a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the ``Activity``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``activity_id`` or ``objective_bank_id`` not\n                found or ``activity_id`` not mapped to\n                ``objective_bank_id``\n        raise:  NullArgument - ``activity_id`` or ``objective_bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the ``Activity``\n        :type activity_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``activity_id`` or ``objective_bank_id`` not found or ``activity_id`` not mapped to ``objective_bank_id``\n        :raise: ``NullArgument`` -- ``activity_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivitySmartObjectiveBankSession", 
         "shortname": "ActivitySmartObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``ActivityQuery`` can be retrieved from this session and mapped\n    to this ``ObjectiveBank`` to create a virtual collection of\n    activities. The activities may be sequenced using the\n    ``ActivitySearchOrder`` from this session.\n\n    This ``ObjectiveBank`` has a default query that matches any activity\n    and a default search order that specifies no sequencing. The queries\n    may be examined using an ``ActivityQueryInspector``. The query may\n    be modified by converting the inspector back to an\n    ``ActivityQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_manage_smart_objective_banks", 
            "get_activity_query", 
            "get_activity_search_order", 
            "apply_activity_query", 
            "inspect_activity_query", 
            "apply_activity_sequencing", 
            "get_activity_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the ``ObjectiveBank``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank`` associated with this session\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart objective banks.", 
                  "body": "        A return of true does not guarantee successful assessment. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart objective bank management\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart objective bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query", 
               "doc": {
                  "headline": "Gets an activity query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {}
            }, 
            {
               "name": "get_activity_search_order", 
               "doc": {
                  "headline": "Gets an activity search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivitySearchOrder) - the activity\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity search order\n        :rtype: ``osid.learning.ActivitySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivitySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_activity_query", 
               "doc": {
                  "headline": "Applies an activity query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_query (osid.learning.ActivityQuery): the\n                activity query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``activity_query`` not of this service", 
               "sphinx_param_doc": "        :param activity_query: the activity query\n        :type activity_query: ``osid.learning.ActivityQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``activity_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityQuery", 
                     "var_name": "activity_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_activity_query", 
               "doc": {
                  "headline": "Gets an activity query inspector for this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQueryInspector) - the activity\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity query inspector\n        :rtype: ``osid.learning.ActivityQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_activity_sequencing", 
               "doc": {
                  "headline": "Applies an activity search order to this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_search_order\n                (osid.learning.ActivitySearchOrder): the activity search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``activity_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param activity_search_order: the activity search order\n        :type activity_search_order: ``osid.learning.ActivitySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``activity_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivitySearchOrder", 
                     "var_name": "activity_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivitySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_from_inspector", 
               "doc": {
                  "headline": "Gets an activity query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_query_inspector\n                (osid.learning.ActivityQueryInspector): an activity\n                query inspector\n", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "        raise:  NullArgument - ``activity_query_inspector`` is ``null``\n        raise:  Unsupported - ``activity_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param activity_query_inspector: an activity query inspector\n        :type activity_query_inspector: ``osid.learning.ActivityQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``activity_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivityQueryInspector", 
                     "var_name": "activity_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivityQueryInspector"
               ], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyLookupSession", 
         "shortname": "ProficiencyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving proficiencies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_proficiencies", 
            "use_comparative_proficiency_view", 
            "use_plenary_proficiency_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "use_effective_proficiency_view", 
            "use_any_effective_proficiency_view", 
            "get_proficiency", 
            "get_proficiencies_by_ids", 
            "get_proficiencies_by_genus_type", 
            "get_proficiencies_by_parent_genus_type", 
            "get_proficiencies_by_record_type", 
            "get_proficiencies_on_date", 
            "get_proficiencies_by_genus_type_on_date", 
            "get_proficiencies_for_objective", 
            "get_proficiencies_for_objective_on_date", 
            "get_proficiencies_by_genus_type_for_objective", 
            "get_proficiencies_by_genus_type_for_objective_on_date", 
            "get_proficiencies_for_objectives", 
            "get_proficiencies_for_resource", 
            "get_proficiencies_for_resource_on_date", 
            "get_proficiencies_by_genus_type_for_resource", 
            "get_proficiencies_by_genus_type_for_resource_on_date", 
            "get_proficiencies_for_resources", 
            "get_proficiencies_for_objective_and_resource", 
            "get_proficiencies_for_objective_and_resource_on_date", 
            "get_proficiencies_by_genus_type_for_objective_and_resource", 
            "get_proficiencies_by_genus_type_for_objective_and_resource_on_date", 
            "get_proficiencies"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Proficiency`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_proficiency_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_proficiency_view", 
               "doc": {
                  "headline": "A complete view of the ``Proficiency`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include proficiencies in objective banks\n        which are children of this objective bank in the obective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_proficiency_view", 
               "doc": {
                  "headline": "Only proficiencies whose effective dates are current are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_proficiency_view", 
               "doc": {
                  "headline": "All proficienies of any effective dates are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency", 
               "doc": {
                  "headline": "Gets the ``Proficiency`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency`` to retrieve\n", 
               "return_doc": "        return: (osid.learning.Proficiency) - the returned\n                ``Proficiency``", 
               "error_doc": "        raise:  NotFound - no ``Proficiency`` found with the given\n                ``Id``\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency`` to retrieve\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency``\n        :rtype: ``osid.learning.Proficiency``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Proficiency`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.Proficiency", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_ids", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``proficiency_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_ids: the list of ``Ids`` to retrieve\n        :type proficiency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``proficiency_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "proficiency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` corresponding to the given proficiency genus ``Type`` which does not include proficiencies of types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` corresponding to the given proficiency genus ``Type`` and include any additional proficiencies with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` containing the given proficiency record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a proficiency\n                record type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_record_type: a proficiency record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` effecyive during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` of the given proficiency genus type effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``proficiency_genus_type, from,`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``proficiency_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_objective", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_objective_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given objective effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``objective_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``objective_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_objective", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given objective and proficiency genus ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` or\n                ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` or ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_objective_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` of the given proficiency genus type relating to the given objective effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``objective_id, proficiency_genus_type,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``objective_id, proficiency_genus_type, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_objectives", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.IdList): the objective ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_ids: the objective ``Ids``\n        :type objective_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_resource", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given resource effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_resource", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given resource and proficiency genus ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or\n                ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` of the given proficiency genus type relating to the given resource effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, proficiency_genus_type,\n                from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, proficiency_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_resources", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given resources.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_ids (osid.id.IdList): the resource ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_ids: the resource ``Ids``\n        :type resource_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "resource_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_objective_and_resource", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given objective and resource ````.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_for_objective_and_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` relating to the given resource and objective effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``objective_id, resource_id, from`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``objective_id, resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_objective_and_resource", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` of the given genus type relating to the given objective and resource ````.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_id, resource_id`` or\n                ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id, resource_id`` or ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_genus_type_for_objective_and_resource_on_date", 
               "doc": {
                  "headline": "Gets a ``ProficiencyList`` of the given genus type relating to the given resource and objective effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    proficiency_genus_type (osid.type.Type): a proficiency\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``Proficiency`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``objective_id, resource_id,\n                proficiency_genus_type, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param proficiency_genus_type: a proficiency genus type\n        :type proficiency_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Proficiency`` list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``objective_id, resource_id, proficiency_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies", 
               "doc": {
                  "headline": "Gets all ``Proficiencies``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - a list of\n                ``Proficiencies``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Proficiencies``\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyQuerySession", 
         "shortname": "ProficiencyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Proficiency`` objects.", 
            "body": "    The search query is constructed using the ``ProficiencyQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include proficiencies in\n        objective banks of which this objective bank is an ancestor in\n        the obective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        proficiencies in this objective bank\n\n    \n    Proficiencies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ProficiencyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_search_proficiencies", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "get_proficiency_query", 
            "get_proficiencies_by_query"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Proficiency`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include proficiencies in objective banks\n        which are children of this objective bank in the obective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this objective bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_query", 
               "doc": {
                  "headline": "Gets a proficiency query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyQuery) - the proficiency query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency query\n        :rtype: ``osid.learning.ProficiencyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_proficiencies_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Proficiencies`` matching the given proficiency query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_query (osid.learning.ProficiencyQuery): the\n                proficiency query\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the returned\n                ``ProficiencyList``", 
               "error_doc": "        raise:  NullArgument - ``proficiency_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``proficiency_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param proficiency_query: the proficiency query\n        :type proficiency_query: ``osid.learning.ProficiencyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ProficiencyList``\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``proficiency_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyQuery", 
                     "var_name": "proficiency_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyQuery"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencySearchSession", 
         "shortname": "ProficiencySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Proficiency`` objects.", 
            "body": "    The search query is constructed using the ``ProficiencyQuery``.\n\n    ``get_proficiencies_by_query()`` is the basic search method and\n    returns a list of ``Proficiencies``. A more advanced search may be\n    performed with ``getProficienciesBySearch()``. It accepts a\n    ``ProficiencySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_proficiencies_by_search()`` returns a\n    ``ProficiencySearchResults`` that can be used to access the\n    resulting ``ProficiencyList`` or be used to perform a search within\n    the result set through ``ProficiencySearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated objective bank view: searches include proficiencies in\n        objective banks of which this objective bank is an ancestor in\n        the obective bank hierarchy\n      * isolated objective bank view: searches are restricted to\n        proficiencies in this objective bank\n\n    \n    Proficiencies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``ProficiencyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.learning.ProficiencyQuerySession"
         ], 
         "inherit_shortnames": [
            "ProficiencyQuerySession"
         ], 
         "inherit_pkg_names": [
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "learning", 
               "name": "ProficiencyQuerySession"
            }
         ], 
         "method_names": [
            "get_proficiency_search", 
            "get_proficiency_search_order", 
            "get_proficiencies_by_search", 
            "get_proficiency_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_proficiency_search", 
               "doc": {
                  "headline": "Gets a proficiency search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencySearch) - the proficiency\n                search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency search\n        :rtype: ``osid.learning.ProficiencySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencySearch", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_search_order", 
               "doc": {
                  "headline": "Gets a proficiency search order.", 
                  "body": "        The ``ProficiencySearchOrder`` is supplied to a\n        ``ProficiencySearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencySearchOrder) - the proficiency\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency search order\n        :rtype: ``osid.learning.ProficiencySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_proficiencies_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_query (osid.learning.ProficiencyQuery): the\n                proficiency query\n        arg:    proficiency_search (osid.learning.ProficiencySearch):\n                the proficiency search\n", 
               "return_doc": "        return: (osid.learning.ProficiencySearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``proficiency_query`` or\n                ``proficiency_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``proficiency_query`` or\n                ``proficiency_search`` is not of this service", 
               "sphinx_param_doc": "        :param proficiency_query: the proficiency query\n        :type proficiency_query: ``osid.learning.ProficiencyQuery``\n        :param proficiency_search: the proficiency search\n        :type proficiency_search: ``osid.learning.ProficiencySearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.learning.ProficiencySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_query`` or ``proficiency_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``proficiency_query`` or ``proficiency_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyQuery", 
                     "var_name": "proficiency_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.learning.ProficiencySearch", 
                     "var_name": "proficiency_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyQuery", 
                  "osid.learning.ProficiencySearch"
               ], 
               "return_type": "osid.learning.ProficiencySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_from_inspector", 
               "doc": {
                  "headline": "Gets a proficiency query from an inspector.", 
                  "body": "        The inspector is available from a ``ProficiencySearchResults``."
               }, 
               "arg_doc": "        arg:    proficiency_query_inspector\n                (osid.learning.ProficiencyQueryInspector): a proficiency\n                query inspector\n", 
               "return_doc": "        return: (osid.learning.ProficiencyQuery) - the proficiency query", 
               "error_doc": "        raise:  NullArgument - ``proficiency_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``proficiency_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param proficiency_query_inspector: a proficiency query inspector\n        :type proficiency_query_inspector: ``osid.learning.ProficiencyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the proficiency query\n        :rtype: ``osid.learning.ProficiencyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``proficiency_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyQueryInspector", 
                     "var_name": "proficiency_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyQueryInspector"
               ], 
               "return_type": "osid.learning.ProficiencyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyAdminSession", 
         "shortname": "ProficiencyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Proficiencies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Proficiency,`` a ``ProficiencyForm`` is requested using\n    ``get_proficiency_form_for_create()`` specifying the desired\n    relationship peers and record ``Types`` or none if no record\n    ``Types`` are needed. The returned ``ProficiencyForm`` will indicate\n    that it is to be used with a create operation and can be used to\n    examine metdata or validate data prior to creation. Once the\n    ``ProficiencyForm`` is submiited to a create operation, it cannot be\n    reused with another create operation unless the first operation was\n    unsuccessful. Each ``ProficiencyForm`` corresponds to an attempted\n    transaction.\n    \n    For updates, ``ProficiencyForms`` are requested to the\n    ``Proficiency``  ``Id`` that is to be updated using\n    ``getProficiencyFormForUpdate()``. Similarly, the\n    ``ProficiencyForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``ProficiencyForm`` can only be used once for a successful update\n    and cannot be reused.\n    \n    The delete operations delete ``Proficiencies``. To unmap a\n    ``Proficiency`` from the current ``ObjectiveBank,`` the\n    ``ProficiencyObjectiveBankAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``Proficiency`` itself thus\n    removing it from all known ``ObjectiveBank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_create_proficiencies", 
            "can_create_proficiency_with_record_types", 
            "get_proficiency_form_for_create", 
            "create_proficiency", 
            "can_update_proficiencies", 
            "get_proficiency_form_for_update", 
            "update_proficiency", 
            "can_delete_proficiencies", 
            "delete_proficiency", 
            "delete_proficiencies", 
            "can_manage_proficiency_aliases", 
            "alias_proficiency"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can create ``Proficiencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Proficiency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Proficiency`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Proficiency`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_proficiency_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Proficiency`` using the desired record types.", 
                  "body": "        While ``LearningManager.getProficiencyRecordTypes()`` can be\n        used to examine which records are supported, this method tests\n        which record(s) are required for creating a specific\n        ``Proficiency``. Providing an empty array tests if a\n        ``Proficiency`` can be created with no records."
               }, 
               "arg_doc": "        arg:    proficiency_record_types (osid.type.Type[]): array of\n                proficiency record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Proficiency`` creation using\n                the specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param proficiency_record_types: array of proficiency record types\n        :type proficiency_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Proficiency`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "proficiency_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_form_for_create", 
               "doc": {
                  "headline": "Gets the proficiency form for creating new proficiencies.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    proficiency_record_types (osid.type.Type[]): array of\n                proficiency record types\n", 
               "return_doc": "        return: (osid.learning.ProficiencyForm) - the proficiency form", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or ``resource_id`` is not\n                found\n        raise:  NullArgument - ``objective_id, resource_id,`` or\n                ``proficieny_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param proficiency_record_types: array of proficiency record types\n        :type proficiency_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the proficiency form\n        :rtype: ``osid.learning.ProficiencyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``resource_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_id, resource_id,`` or ``proficieny_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "proficiency_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.learning.ProficiencyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_proficiency", 
               "doc": {
                  "headline": "Creates a new ``Proficiency``.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    proficiency_form (osid.learning.ProficiencyForm): the\n                form for this ``Proficiency``\n", 
               "return_doc": "        return: (osid.learning.Proficiency) - the new ``Proficiency``", 
               "error_doc": "        raise:  IllegalState - ``proficiency_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``proficiency_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``proficiency_form`` did not originate\n                from ``get_proficiency_form_for_create()``", 
               "sphinx_param_doc": "        :param proficiency_form: the form for this ``Proficiency``\n        :type proficiency_form: ``osid.learning.ProficiencyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Proficiency``\n        :rtype: ``osid.learning.Proficiency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``proficiency_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``proficiency_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``proficiency_form`` did not originate from ``get_proficiency_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyForm", 
                     "var_name": "proficiency_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyForm"
               ], 
               "return_type": "osid.learning.Proficiency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can update ``Proficiencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Proficiency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Proficiency`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Proficiency`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_form_for_update", 
               "doc": {
                  "headline": "Gets the proficiency form for updating an existing proficiency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyForm) - the proficiency form", 
               "error_doc": "        raise:  NotFound - ``proficiency_id`` is not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the proficiency form\n        :rtype: ``osid.learning.ProficiencyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``proficiency_id`` is not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_proficiency", 
               "doc": {
                  "headline": "Updates an existing proficiency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_form (osid.learning.ProficiencyForm): the\n                form containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``proficiency_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``proficiency_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``proficiency_form`` did not originate\n                from ``get_proficiency_form_for_update()``", 
               "sphinx_param_doc": "        :param proficiency_form: the form containing the elements to be updated\n        :type proficiency_form: ``osid.learning.ProficiencyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``proficiency_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``proficiency_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``proficiency_form`` did not originate from ``get_proficiency_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyForm", 
                     "var_name": "proficiency_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can delete ``Proficiencies``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Proficiency`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Proficiency`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Proficiency`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_proficiency", 
               "doc": {
                  "headline": "Deletes a ``Proficiency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``proficiency_id`` not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency`` to remove\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``proficiency_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "delete_proficiencies", 
               "doc": {
                  "headline": "Deletes all proficiencies in this ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_proficiency_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for proficiency entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Proficiency`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Proficiency`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_proficiency", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Proficiency`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Proficiency`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another proficiency, it is\n        reassigned to the given proficiency ``Id``."
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of a\n                ``Proficiency``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``proficiency_id`` not found\n        raise:  NullArgument - ``proficiency_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of a ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``proficiency_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyNotificationSession", 
         "shortname": "ProficiencyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Proficiency`` objects in this ``ObjectiveBank``.", 
            "body": "    This also includes existing proficiencies that may appear or\n    disappear due to changes in the ``ObjectiveBank`` hierarchy, This\n    session is intended for consumers needing to synchronize their state\n    with this service without the use of polling. Notifications are\n    cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``ProficiencyLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_register_for_proficiency_notifications", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "register_for_new_proficiencies", 
            "register_for_new_proficiencies_by_genus_type", 
            "register_for_new_proficiencies_for_objective", 
            "register_for_new_proficiencies_for_resource", 
            "register_for_changed_proficiencies", 
            "register_for_changed_proficiencies_by_genus_type", 
            "register_for_changed_proficiencies_for_objective", 
            "register_for_changed_proficiencies_for_resource", 
            "register_for_changed_proficiency", 
            "register_for_deleted_proficiencies", 
            "register_for_deleted_proficiencies_by_genus_type", 
            "register_for_deleted_proficiencies_for_objective", 
            "register_for_deleted_proficiencies_for_resource", 
            "register_for_deleted_proficiency"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_proficiency_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Proficiency`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include proficiencies in objective banks\n        which are children of this objective bank in the obective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_proficiencies", 
               "doc": {
                  "headline": "Register for notifications of new proficiencies.", 
                  "body": "        ``ProficiencyReceiver.newProficiency()`` is invoked when a new\n        ``Proficiency`` appears in this objective bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_proficiencies_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of new proficiencies with the given genus type.", 
                  "body": "        ``ProficiencyReceiver.newProficiency()`` is invoked when a new\n        ``Proficiency`` appears for the given resource in this objective\n        bank."
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): the genus type\n                of a proficiency to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: the genus type of a proficiency to monitor\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_proficiencies_for_objective", 
               "doc": {
                  "headline": "Register for notifications of new proficiencies.", 
                  "body": "        ``ProficiencyReceiver.newProficiency()`` is invoked when a new\n        ``Proficiency`` appears for the given objective in this\n        objective bank."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of a resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of a resource to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_proficiencies_for_resource", 
               "doc": {
                  "headline": "Register for notifications of new proficiencies.", 
                  "body": "        ``ProficiencyReceiver.newProficiency()`` is invoked when a new\n        ``Proficiency`` appears for the given resource in this objective\n        bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of a resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of a resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_proficiencies", 
               "doc": {
                  "headline": "Registers for notification of updated proficiencies.", 
                  "body": "        ``ProficiencyReceiver.changedProficiency()`` is invoked when a\n        proficiency in this objective bank is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_proficiencies_by_genus_type", 
               "doc": {
                  "headline": "Registers for notification of updated proficiencies of the given genus type.", 
                  "body": "        ``ProficiencyReceiver.changedProficiency()`` is invoked when a\n        proficiency in this objective bank is changed."
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): the genus type\n                of the ``Proficiency`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_genus_t_ype`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: the genus type of the ``Proficiency`` to monitor\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_genus_t_ype`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_proficiencies_for_objective", 
               "doc": {
                  "headline": "Registers for notification of an updated proficiency.", 
                  "body": "        ``ProficiencyReceiver.changedProficiency()`` is invoked when the\n        specified proficiency related to the given objective is changed\n        in this objective bank."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_proficiencies_for_resource", 
               "doc": {
                  "headline": "Registers for notification of an updated proficiency.", 
                  "body": "        ``ProficiencyReceiver.changedProficiency()`` is invoked when the\n        specified proficiency related to the given resource is changed\n        in this objective bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_proficiency", 
               "doc": {
                  "headline": "Registers for notification of an updated proficiency.", 
                  "body": "        ``ProficiencyReceiver.changedProficiency()`` is invoked when the\n        specified proficiency in this objective bank is changed."
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency`` to monitor\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_proficiencies", 
               "doc": {
                  "headline": "Registers for notification of deleted proficiencies.", 
                  "body": "        ``ProficiencyReceiver.deletedProficiency()`` is invoked when a\n        proficiency is deleted or removed from this objective bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_proficiencies_by_genus_type", 
               "doc": {
                  "headline": "Registers for notification of deleted proficiencies of the given genus type.", 
                  "body": "        ``ProficiencyReceiver.deletedProficiency()`` is invoked when a\n        proficiency is deleted or removed from this objective bank."
               }, 
               "arg_doc": "        arg:    proficiency_genus_type (osid.type.Type): the genus type\n                of the ``Proficiency`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_genus_type: the genus type of the ``Proficiency`` to monitor\n        :type proficiency_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_proficiencies_for_objective", 
               "doc": {
                  "headline": "Registers for notification of a deleted proficiency.", 
                  "body": "        ``ProficiencyReceiver.deletedProficiency()`` is invoked when the\n        specified proficiency related to the objective is deleted or\n        removed from this objective bank."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to monitor\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_proficiencies_for_resource", 
               "doc": {
                  "headline": "Registers for notification of a deleted proficiency.", 
                  "body": "        ``ProficiencyReceiver.deletedProficiency()`` is invoked when the\n        specified proficiency related to the resource is deleted or\n        removed from this objective bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_proficiency", 
               "doc": {
                  "headline": "Registers for notification of a deleted proficiency.", 
                  "body": "        ``ProficiencyReceiver.deletedProficiency()`` is invoked when the\n        specified proficiency is deleted or removed from this objective\n        bank."
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency`` to monitor\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyObjectiveBankSession", 
         "shortname": "ProficiencyObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Proficiency`` to ``ObjectiveBank`` mappings.", 
            "body": "    A ``Proficiency`` may appear in multiple ``ObjectiveBank`` objects.\n    Each objective bank may have its own authorizations governing who is\n    allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_proficiency_objective_bank_mappings", 
            "use_comparative_proficiency_objective_bank_view", 
            "use_plenary_proficiency_objective_bank_view", 
            "get_proficiency_ids_by_objective_bank", 
            "get_proficiencies_by_objective_bank", 
            "get_proficiency_ids_by_objective_banks", 
            "get_proficiencies_by_objective_banks", 
            "get_objective_bank_ids_by_proficiency", 
            "get_objective_banks_by_proficiency"
         ], 
         "methods": [
            {
               "name": "can_lookup_proficiency_objective_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of proficiency/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_proficiency_objective_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_proficiency_objective_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Proficiency`` and ``ObjectiveBank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_ids_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Proficiency Ids`` associated with a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related proficiency ``Ids``", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related proficiency ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_objective_bank", 
               "doc": {
                  "headline": "Gets the list of ``Proficiencies`` associated with a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - list of related\n                proficiencies", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related proficiencies\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiency_ids_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Proficiency Ids`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of\n                objectiveBank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of proficiency ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objectiveBank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of proficiency ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_proficiencies_by_objective_banks", 
               "doc": {
                  "headline": "Gets the list of ``Proficiencies`` corresponding to a list of ``ObjectiveBanks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of\n                objectiveBank ``Ids``\n", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - list of proficiencies", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objectiveBank ``Ids``\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of proficiencies\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_bank_ids_by_proficiency", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Ids`` mapped to a ``Proficiency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): ``Id`` of a ``Proficiency``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of objective banks", 
               "error_doc": "        raise:  NotFound - ``proficiency_id`` is not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: ``Id`` of a ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective banks\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``proficiency_id`` is not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_proficiency", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBanks`` mapped to a ``Proficiency``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): ``Id`` of a ``Proficiency``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - list of objective\n                banks", 
               "error_doc": "        raise:  NotFound - ``proficiency_id`` is not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: ``Id`` of a ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of objective banks\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``proficiency_id`` is not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyObjectiveBankAssignmentSession", 
         "shortname": "ProficiencyObjectiveBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Proficiencies`` to ``ObjectiveBank`` objects.", 
            "body": "    A ``Proficiency`` may appear in multiple ``ObjectiveBank`` objects\n    and removing the last reference to a ``Proficiency`` is the\n    equivalent of deleting it. Each ``ObjectiveBank`` may have its own\n    authorizations governing who is allowed to operate on it.\n\n    Adding a reference of a ``Proficiency`` to another ``ObjectiveBank``\n    is not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_proficiencies", 
            "can_assign_proficiencies_to_objective_bank", 
            "get_assignable_objective_bank_ids", 
            "get_assignable_objective_bank_ids_for_proficiency", 
            "assign_proficiency_to_objective_bank", 
            "unassign_proficiency_from_objective_bank"
         ], 
         "methods": [
            {
               "name": "can_assign_proficiencies", 
               "doc": {
                  "headline": "Tests if this user can alter proficiency/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_proficiencies_to_objective_bank", 
               "doc": {
                  "headline": "Tests if this user can alter proficiency/objective bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank proficiency in which any proficiency can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objectiveBank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objectiveBank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_objective_bank_ids_for_proficiency", 
               "doc": {
                  "headline": "Gets a list of objective banks including and under the given objective bank proficiency in which a specific proficiency can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable objectiveBank\n                ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` or\n                ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param proficiency_id: the ``Id`` of the ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable objectiveBank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_proficiency_to_objective_bank", 
               "doc": {
                  "headline": "Adds an existing ``Proficiency`` to a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``proficiency_id`` is already mapped to\n                ``objective_bank_id``\n        raise:  NotFound - ``proficiency_id`` or ``objective_bank_id``\n                not found\n        raise:  NullArgument - ``proficiency_id`` or\n                ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``proficiency_id`` is already mapped to ``objective_bank_id``\n        :raise: ``NotFound`` -- ``proficiency_id`` or ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_proficiency_from_objective_bank", 
               "doc": {
                  "headline": "Removes a ``Proficiency`` from a ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the\n                ``Proficiency``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``proficiency_id`` or ``objective_bank_id``\n                not found or ``proficiency_id`` not mapped to\n                ``objective_bank_id``\n        raise:  NullArgument - ``proficiency_id`` or\n                ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``proficiency_id`` or ``objective_bank_id`` not found or ``proficiency_id`` not mapped to ``objective_bank_id``\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencySmartObjectiveBankSession", 
         "shortname": "ProficiencySmartObjectiveBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``ProficiencyQuery`` can be retrieved from this session and mapped\n    to this ``ObjectiveBank`` to create a virtual collection of\n    ``Proficiencies``. The proficiencies may be sequenced using the\n    ``ProficiencySearchOrder`` from this session.\n\n    This ``ObjectiveBank`` has a default query that matches any\n    proficiency and a default search order that specifies no sequencing.\n    The queries may be examined using a ``ProficiencyQueryInspector``.\n    The query may be modified by converting the inspector back to a\n    ``ProficiencyQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_manage_smart_objective_banks", 
            "get_proficiency_query", 
            "get_proficiency_search_order", 
            "apply_proficiency_query", 
            "inspect_proficiency_query", 
            "apply_proficiency_sequencing", 
            "get_proficiency_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``Familt``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart objective banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart objective bank methods\n                are not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart objective bank methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_query", 
               "doc": {
                  "headline": "Gets a proficiency query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyQuery) - the proficiency query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency query\n        :rtype: ``osid.learning.ProficiencyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_search_order", 
               "doc": {
                  "headline": "Gets a proficiency search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencySearchOrder) - the proficiency\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency search order\n        :rtype: ``osid.learning.ProficiencySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_proficiency_query", 
               "doc": {
                  "headline": "Applies a proficiency query to this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_query (osid.learning.ProficiencyQuery): the\n                proficiency query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``proficiency_query`` not of this service", 
               "sphinx_param_doc": "        :param proficiency_query: the proficiency query\n        :type proficiency_query: ``osid.learning.ProficiencyQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``proficiency_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyQuery", 
                     "var_name": "proficiency_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_proficiency_query", 
               "doc": {
                  "headline": "Gets a proficiency query inspector for this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyQueryInspector) - the\n                proficiency query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency query inspector\n        :rtype: ``osid.learning.ProficiencyQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_proficiency_sequencing", 
               "doc": {
                  "headline": "Applies a proficiency search order to this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_search_order\n                (osid.learning.ProficiencySearchOrder): the proficiency\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``proficiency_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param proficiency_search_order: the proficiency search order\n        :type proficiency_search_order: ``osid.learning.ProficiencySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``proficiency_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencySearchOrder", 
                     "var_name": "proficiency_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_from_inspector", 
               "doc": {
                  "headline": "Gets a proficiency query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_query_inspector\n                (osid.learning.ProficiencyQueryInspector): a proficiency\n                query inspector\n", 
               "return_doc": "        return: (osid.learning.ProficiencyQuery) - the proficiency query", 
               "error_doc": "        raise:  NullArgument - ``relatinship_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``proficiency_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param proficiency_query_inspector: a proficiency query inspector\n        :type proficiency_query_inspector: ``osid.learning.ProficiencyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the proficiency query\n        :rtype: ``osid.learning.ProficiencyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relatinship_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``proficiency_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencyQueryInspector", 
                     "var_name": "proficiency_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencyQueryInspector"
               ], 
               "return_type": "osid.learning.ProficiencyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.MyLearningPathSession", 
         "shortname": "MyLearningPathSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for finding learning paths through an objective hierarchy based on proficiencies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_learning_paths", 
            "use_comparative_proficiency_view", 
            "use_plenary_proficiency_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "find_path", 
            "find_path_at_proficiency", 
            "get_objectives_by_completion"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_learning_paths", 
               "doc": {
                  "headline": "Tests if this user can perform learning path lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_proficiency_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_proficiency_view", 
               "doc": {
                  "headline": "A complete view of the ``Proficiency`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include proficiencies in objective banks\n        which are children of this objective bank in the obective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "find_path", 
               "doc": {
                  "headline": "Gets the shortest path to an objective.", 
                  "body": "        The path is a list of objectives for which there is a deficient\n        proficiency."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "find_path_at_proficiency", 
               "doc": {
                  "headline": "Gets the shortest path to an objective.", 
                  "body": "        The path is a list of objectives for which there is a\n        proficiency less than the given proficiency."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n        arg:    grade_id (osid.id.Id): the ``Id`` of a proficiency level\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``proficiency_id`` or ``grade_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n        :param grade_id: the ``Id`` of a proficiency level\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``grade_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_by_completion", 
               "doc": {
                  "headline": "Gets the list of objectives for there is a minimum completion.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n        arg:    completion (cardinal): the minimum completion as a\n                percentage number\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` not found\n        raise:  NullArgument - ``proficiency_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n        :param completion: the minimum completion as a percentage number\n        :type completion: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "completion", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.LearningPathSession", 
         "shortname": "LearningPathSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for finding learning paths through an objective hierarchy based on proficiencies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_id", 
            "get_objective_bank", 
            "can_lookup_learning_paths", 
            "use_comparative_proficiency_view", 
            "use_plenary_proficiency_view", 
            "use_federated_objective_bank_view", 
            "use_isolated_objective_bank_view", 
            "find_path_for_resource", 
            "find_path_for_resource_at_proficiency", 
            "get_objectives_for_resource_by_completion"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_id", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``ObjectiveBank Id`` associated with\n                this session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``ObjectiveBank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the obective bank", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the obective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_learning_paths", 
               "doc": {
                  "headline": "Tests if this user can perform learning path lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_proficiency_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_proficiency_view", 
               "doc": {
                  "headline": "A complete view of the ``Proficiency`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_objective_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include proficiencies in objective banks\n        which are children of this objective bank in the obective bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_objective_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this objective bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "find_path_for_resource", 
               "doc": {
                  "headline": "Gets the shortest path to an objective.", 
                  "body": "        The path is a list of objectives for which the resource has a\n        deficient proficiency."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or ``resource_id`` not found\n        raise:  NullArgument - ``proficiency_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "find_path_for_resource_at_proficiency", 
               "doc": {
                  "headline": "Gets the shortest path to an objective.", 
                  "body": "        The path is a list of objectives for which the resource has a\n        proficiency less than the given proficiency."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    grade_id (osid.id.Id): the ``Id`` of a proficiency level\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or ``resource_id`` not found\n        raise:  NullArgument - ``proficiency_id, resource_id`` or\n                ``grade_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param grade_id: the ``Id`` of a proficiency level\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id, resource_id`` or ``grade_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objectives_for_resource_by_completion", 
               "doc": {
                  "headline": "Gets the list of objectives for a resource that have a minimum completion.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective`` to reach\n        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n        arg:    completion (cardinal): the minimum completion as a\n                percentage number\n", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the returned list of\n                objectives", 
               "error_doc": "        raise:  NotFound - ``objective_id`` or ``resource_id`` not found\n        raise:  NullArgument - ``proficiency_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective`` to reach\n        :type objective_id: ``osid.id.Id``\n        :param resource_id: the ``Id`` of the ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param completion: the minimum completion as a percentage number\n        :type completion: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the returned list of objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_id`` or ``resource_id`` not found\n        :raise: ``NullArgument`` -- ``proficiency_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "completion", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "cardinal"
               ], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankLookupSession", 
         "shortname": "ObjectiveBankLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``ObjectiveBank`` objects.", 
            "body": "    The ``ObjectiveBank`` represents a collection of ``Objectives\n    Activities`` , and ``Proficiencies``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``ObjectiveBanks`` it can access, without breaking\n    execution. However, an administrative application may require all\n    ``ObjectiveBank`` elements to be available.\n    \n    ``ObjectiveBanks`` may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``ObjectiveBank``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_objective_banks", 
            "use_comparative_objective_bank_view", 
            "use_plenary_objective_bank_view", 
            "get_objective_bank", 
            "get_objective_banks_by_ids", 
            "get_objective_banks_by_genus_type", 
            "get_objective_banks_by_parent_genus_type", 
            "get_objective_banks_by_record_type", 
            "get_objective_banks_by_provider", 
            "get_objective_banks"
         ], 
         "methods": [
            {
               "name": "can_lookup_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can perform ``ObjectiveBank`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``ObjectiveBank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``ObjectiveBank`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``ObjectiveBank`` and\n        retained for compatility."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the objective bank", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the objective bank\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_ids", 
               "doc": {
                  "headline": "Gets a ``ObjectiveBankList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the objective\n        banks specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``ObjectiveBank`` objects may be omitted from the\n        list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): the list of ``Ids``\n                to retrieve\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBank`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``objective_bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_ids: the list of ``Ids`` to retrieve\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBank`` list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ObjectiveBankList`` corresponding to the given objective bank genus ``Type`` which does not include objective banks of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objective\n        banks or an error results. Otherwise, the returned list may\n        contain only those objective banks that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    objective_bank_genus_type (osid.type.Type): an objective\n                bank genus type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBank`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_genus_type: an objective bank genus type\n        :type objective_bank_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBank`` list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ObjectiveBankList`` corresponding to the given objective bank genus ``Type`` and include any additional objective banks with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objective\n        banks or an error results. Otherwise, the returned list may\n        contain only those objective banks that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    objective_bank_genus_type (osid.type.Type): an objective\n                bank genus type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBank`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_genus_type: an objective bank genus type\n        :type objective_bank_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBank`` list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ObjectiveBankList`` containing the given objective bank record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known objective\n        banks or an error results. Otherwise, the returned list may\n        contain only those objective banks that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBank`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBank`` list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks_by_provider", 
               "doc": {
                  "headline": "Gets a ``ObjectiveBankList`` for the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known objective\n        banks or an error results. Otherwise, the returned list may\n        contain only those objective banks that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBank`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBank`` list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_banks", 
               "doc": {
                  "headline": "Gets all ``ObjectiveBanks``.", 
                  "body": "        In plenary mode, the returned list contains all known objective\n        banks or an error results. Otherwise, the returned list may\n        contain only those objective banks that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - a\n                ``ObjectiveBankList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ObjectiveBankList``\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankQuerySession", 
         "shortname": "ObjectiveBankQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``ObjectiveBank`` objects.", 
            "body": "    The search query is constructed using the ``ObjectiveBankQuery``.\n\n    ``ObjectiveBanks`` may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``ObjectiveBankQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_objective_banks", 
            "get_objective_bank_query", 
            "get_objective_banks_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can perform ``ObjectiveBank`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query", 
               "doc": {
                  "headline": "Gets an objective bank query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - an objective bank\n                query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {}
            }, 
            {
               "name": "get_objective_banks_by_query", 
               "doc": {
                  "headline": "Gets a list of ``ObjectiveBank`` objects matching the given objectiove bank query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_query (osid.learning.ObjectiveBankQuery):\n                the objective bank query\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the returned\n                ``ObjectiveBankList``", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_bank_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param objective_bank_query: the objective bank query\n        :type objective_bank_query: ``osid.learning.ObjectiveBankQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ObjectiveBankList``\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_bank_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankQuery", 
                     "var_name": "objective_bank_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankQuery"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankSearchSession", 
         "shortname": "ObjectiveBankSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``ObjectiveBank`` objects.", 
            "body": "    The search query is constructed using the ``ObjectiveBankQuery``.\n\n    ``get_objective_banks_by_query()`` is the basic search method and\n    returns a list of ``ObjectiveBank`` objects.A more advanced search\n    may be performed with ``getObjectiveBanksBySearch()``. It accepts a\n    ``ObjectiveBankSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_objective_banks_by_search()`` returns a\n    ``ObjectiveBankSearchResults`` that can be used to access the\n    resulting ``ObjectiveBankList`` or be used to perform a search\n    within the result set through ``ObjectiveBankSearch``.\n    \n    ``ObjectiveBanks`` may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``ObjectiveBankQuery``."
         }, 
         "inherit_fullnames": [
            "osid.learning.ObjectiveBankQuerySession"
         ], 
         "inherit_shortnames": [
            "ObjectiveBankQuerySession"
         ], 
         "inherit_pkg_names": [
            "learning"
         ], 
         "inheritance": [
            {
               "pkg_name": "learning", 
               "name": "ObjectiveBankQuerySession"
            }
         ], 
         "method_names": [
            "get_objective_bank_search", 
            "get_objective_bank_search_order", 
            "get_objective_banks_by_search", 
            "get_objective_bank_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_search", 
               "doc": {
                  "headline": "Gets an objective bank search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankSearch) - an objective bank\n                search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an objective bank search\n        :rtype: ``osid.learning.ObjectiveBankSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankSearch", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_search_order", 
               "doc": {
                  "headline": "Gets an objective bank search order.", 
                  "body": "        The ``ObjectiveBankSearchOrder`` is supplied to a\n        ``ObjectiveBankSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankSearchOrder) - the objective\n                bank search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank search order\n        :rtype: ``osid.learning.ObjectiveBankSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_objective_banks_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_query (osid.learning.ObjectiveBankQuery):\n                the objective bank query\n        arg:    objective_bank_search\n                (osid.learning.ObjectiveBankSearch): the objective bank\n                search\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankSearchResults) - the search\n                results", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_query`` or\n                ``objective_bank_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_bank_query`` or\n                ``objective_bank_search`` is not of this service", 
               "sphinx_param_doc": "        :param objective_bank_query: the objective bank query\n        :type objective_bank_query: ``osid.learning.ObjectiveBankQuery``\n        :param objective_bank_search: the objective bank search\n        :type objective_bank_search: ``osid.learning.ObjectiveBankSearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.learning.ObjectiveBankSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_query`` or ``objective_bank_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_bank_query`` or ``objective_bank_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankQuery", 
                     "var_name": "objective_bank_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.learning.ObjectiveBankSearch", 
                     "var_name": "objective_bank_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankQuery", 
                  "osid.learning.ObjectiveBankSearch"
               ], 
               "return_type": "osid.learning.ObjectiveBankSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_query_from_inspector", 
               "doc": {
                  "headline": "Gets an objective bank query from an inspector.", 
                  "body": "        The inspector is available from an\n        ``ObjectiveBankSearchResults``."
               }, 
               "arg_doc": "        arg:    objective_bank_query_inspector\n                (osid.learning.ObjectiveBankQueryInspector): an\n                objective bank query inspector\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``objective_bank_query_inspector`` is not\n                of this service", 
               "sphinx_param_doc": "        :param objective_bank_query_inspector: an objective bank query inspector\n        :type objective_bank_query_inspector: ``osid.learning.ObjectiveBankQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``objective_bank_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankQueryInspector", 
                     "var_name": "objective_bank_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankQueryInspector"
               ], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankAdminSession", 
         "shortname": "ObjectiveBankAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``ObjectiveBanks``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``ObjectiveBank,`` an ``ObjectiveBankForm`` is requested using\n    ``get_objective_bank_form_for_create()`` specifying the desired\n    record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``ObjectiveBankForm`` will indicate that it is to be used\n    with a create operation and can be used to examine metdata or\n    validate data prior to creation. Once the ``ObjectiveBankForm`` is\n    submiited to a create operation, it cannot be reused with another\n    create operation unless the first operation was unsuccessful. Each\n    ``ObjectiveBankForm`` corresponds to an attempted transaction.\n    \n    For updates, ``ObjectiveBankForms`` are requested to the\n    ``ObjectiveBank``  ``Id`` that is to be updated using\n    ``getObjectiveBankFormForUpdate()``. Similarly, the\n    ``ObjectiveBankForm`` has metadata about the data that can be\n    updated and it can perform validation before submitting the update.\n    The ``ObjectiveBankForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``ObjectiveBanks``. It is safer to\n    remove all mappings to the ``ObjectiveBank`` catalogs before\n    deletion.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_objective_banks", 
            "can_create_objective_bank_with_record_types", 
            "get_objective_bank_form_for_create", 
            "create_objective_bank", 
            "can_update_objective_banks", 
            "get_objective_bank_form_for_update", 
            "update_objective_bank", 
            "can_delete_objective_banks", 
            "delete_objective_bank", 
            "can_manage_objective_bank_aliases", 
            "alias_objective_bank"
         ], 
         "methods": [
            {
               "name": "can_create_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can create ``ObjectiveBanks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``ObjectiveBank`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ObjectiveBank`` creation is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ObjectiveBank`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_objective_bank_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``ObjectiveBank`` using the desired record types.", 
                  "body": "        While ``LearningManager.getObjectiveBankRecordTypes()`` can be\n        used to examine which records are supported, this method tests\n        which record(s) are required for creating a specific\n        ``ObjectiveBank``. Providing an empty array tests if an\n        ``ObjectiveBank`` can be created with no records."
               }, 
               "arg_doc": "        arg:    objective_bank_record_types (osid.type.Type[]): array of\n                objective bank record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``ObjectiveBank`` creation using\n                the specified ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_types`` is\n                ``null``", 
               "sphinx_param_doc": "        :param objective_bank_record_types: array of objective bank record types\n        :type objective_bank_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``ObjectiveBank`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "objective_bank_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_form_for_create", 
               "doc": {
                  "headline": "Gets the objective bank form for creating new objective banks.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    objective_bank_record_types (osid.type.Type[]): array of\n                objective bank record types\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankForm) - the objective bank\n                form", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_types`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types.", 
               "sphinx_param_doc": "        :param objective_bank_record_types: array of objective bank record types\n        :type objective_bank_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the objective bank form\n        :rtype: ``osid.learning.ObjectiveBankForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types.", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "objective_bank_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.learning.ObjectiveBankForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_objective_bank", 
               "doc": {
                  "headline": "Creates a new ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_form (osid.learning.ObjectiveBankForm):\n                the form for this ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the new\n                ``ObjectiveBank``", 
               "error_doc": "        raise:  IllegalState - ``objective_bank_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``objective_bank_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_bank_form`` did not originate\n                from ``get_objective_bank_form_for_create()``", 
               "sphinx_param_doc": "        :param objective_bank_form: the form for this ``ObjectiveBank``\n        :type objective_bank_form: ``osid.learning.ObjectiveBankForm``\n", 
               "sphinx_return_doc": "        :return: the new ``ObjectiveBank``\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``objective_bank_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``objective_bank_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_bank_form`` did not originate from ``get_objective_bank_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankForm", 
                     "var_name": "objective_bank_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankForm"
               ], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can update ``ObjectiveBanks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``ObjectiveBank`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ObjectiveBank`` modification\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ObjectiveBank`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_form_for_update", 
               "doc": {
                  "headline": "Gets the objective bank form for updating an existing objective bank.", 
                  "body": "        A new objective bank form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankForm) - the objective bank\n                form", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the objective bank form\n        :rtype: ``osid.learning.ObjectiveBankForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_objective_bank", 
               "doc": {
                  "headline": "Updates an existing objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_form (osid.learning.ObjectiveBankForm):\n                the form containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``objective_bank_form`` already used in\n                an update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``objective_bank_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``objective_bank_form did not originate\n                from get_objective_bank_form_for_update()``", 
               "sphinx_param_doc": "        :param objective_bank_form: the form containing the elements to be updated\n        :type objective_bank_form: ``osid.learning.ObjectiveBankForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``objective_bank_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``objective_bank_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``objective_bank_form did not originate from get_objective_bank_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankForm", 
                     "var_name": "objective_bank_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_objective_banks", 
               "doc": {
                  "headline": "Tests if this user can delete objective banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``ObjectiveBank`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ObjectiveBank`` deletion is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ObjectiveBank`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_objective_bank", 
               "doc": {
                  "headline": "Deletes an ``ObjectiveBank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank`` to remove\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_objective_bank_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``ObjectiveBanks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``ObjectiveBank`` aliasing is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``ObjectiveBank`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_objective_bank", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``ObjectiveBank`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``ObjectiveBank`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another objective bank, it\n        is reassigned to the given objective bank ``Id``."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                ``ObjectiveBank``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankNotificationSession", 
         "shortname": "ObjectiveBankNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``ObjectiveBank`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session i"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_objective_bank_notifications", 
            "register_for_new_objective_banks", 
            "register_for_new_objective_bank_ancestors", 
            "register_for_new_objective_bank_descendants", 
            "register_for_changed_objective_banks", 
            "register_for_changed_objective_bank", 
            "register_for_deleted_objective_banks", 
            "register_for_deleted_objective_bank", 
            "register_for_deleted_objective_bank_ancestors", 
            "register_for_deleted_objective_bank_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_objective_bank_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``ObjectiveBank`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_objective_banks", 
               "doc": {
                  "headline": "Register for notifications of new objective banks.", 
                  "body": "        ``ObjectiveBankReceiver.newObjectiveBank()`` is invoked when a\n        new ``ObjectiveBank`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_objective_bank_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is added to the specified objective bank in the objective bank hierarchy.", 
                  "body": "        ``ObjectiveBankReceiver.newObjectiveBankAncestor()`` is invoked\n        when the specified objective bank experiences an addition in\n        ancestry."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_objective_bank_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is added to the specified objective bank in the objective bank hierarchy.", 
                  "body": "        ``ObjectiveBankReceiver.newObjectiveBankDescendant()`` is\n        invoked when the specified objective bank experiences an\n        addition in descendants."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_objective_banks", 
               "doc": {
                  "headline": "Registers for notification of updated objective banks.", 
                  "body": "        ``ObjectiveBankReceiver.changedObjectiveBank()`` is invoked when\n        an objective bank is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_objective_bank", 
               "doc": {
                  "headline": "Registers for notification of an updated objective bank.", 
                  "body": "        ``ObjectiveBankReceiver.changedObjectiveBank()`` is invoked when\n        the specified objective bank is changed."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_banks", 
               "doc": {
                  "headline": "Registers for notification of deleted objective banks.", 
                  "body": "        ``ObjectiveBankReceiver.deletedObjectiveBank()`` is invoked when\n        a calenedar is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_bank", 
               "doc": {
                  "headline": "Registers for notification of a deleted objective bank.", 
                  "body": "        ``ObjectiveBankReceiver.deletedObjectiveBank()`` is invoked when\n        the specified objective bank is deleted."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_bank_ancestors", 
               "doc": {
                  "headline": "Registers for notification if an ancestor is removed from the specified objective bank in the objective bank hierarchy.", 
                  "body": "        ``ObjectiveBankReceiver.deletedObjectiveBankAncestor()`` is\n        invoked when the specified objective bank experiences a removal\n        of an ancestor."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_objective_bank_descendants", 
               "doc": {
                  "headline": "Registers for notification if a descendant is removed from fthe specified objective bank in the objective bank hierarchy.", 
                  "body": "        ``ObjectiveBankReceiver.deletedObjectiveBankDescednant()`` is\n        invoked when the specified objective bank experiences a removal\n        of one of its descendants."
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                objective bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the objective bank to monitor\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankHierarchySession", 
         "shortname": "ObjectiveBankHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``ObjectiveBank`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``ObjectiveBank``. The\n    hierarchy may be traversed recursively to establish the tree\n    structure through ``get_parent_objective_banks()`` and\n    ``getChildObjectiveBanks()``. To relate these ``Ids`` to another\n    OSID, ``get_objective_bank_nodes()`` can be used for retrievals that\n    can be used for bulk lookups in other OSIDs. Any ``ObjectiveBank``\n    available in the ObjectiveBanking OSID is known to this hierarchy\n    but does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_objective_banks()`` or\n    ``get_child_objective_banks()`` in lieu of a ``PermissionDenied``\n    error that may disrupt the traversal through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: objective bank elements may be silently\n        omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_hierarchy_id", 
            "get_objective_bank_hierarchy", 
            "can_access_objective_bank_hierarchy", 
            "use_comparative_objective_bank_view", 
            "use_plenary_objective_bank_view", 
            "get_root_objective_bank_ids", 
            "get_root_objective_banks", 
            "has_parent_objective_banks", 
            "is_parent_of_objective_bank", 
            "get_parent_objective_bank_ids", 
            "get_parent_objective_banks", 
            "is_ancestor_of_objective_bank", 
            "has_child_objective_banks", 
            "is_child_of_objective_bank", 
            "get_child_objective_bank_ids", 
            "get_child_objective_banks", 
            "is_descendant_of_objective_bank", 
            "get_objective_bank_node_ids", 
            "get_objective_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_objective_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer traversal\n        functions to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_objective_bank_view", 
               "doc": {
                  "headline": "The returns from the objective bank methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_objective_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_objective_bank_ids", 
               "doc": {
                  "headline": "Gets the root objective bank ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root objective bank ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root objective bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_objective_banks", 
               "doc": {
                  "headline": "Gets the root objective banks in this objective bank hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the root objective\n                banks", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root objective banks\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_objective_banks", 
               "doc": {
                  "headline": "Tests if the ``ObjectiveBank`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the objective bank has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the objective bank has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_objective_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``objective_bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``objective_bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_objective_bank_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the objective\n                bank", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the objective bank\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_objective_banks", 
               "doc": {
                  "headline": "Gets the parents of the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the parents of the\n                objective bank", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the objective bank\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_objective_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``objective_bank_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``objective_bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_objective_banks", 
               "doc": {
                  "headline": "Tests if an objective bank has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``objective_bank_id`` has\n                children, ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``objective_bank_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_objective_bank", 
               "doc": {
                  "headline": "Tests if an objective bank is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``objective_bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``objective_bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_objective_bank_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the objective bank", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` to query\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the objective bank\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_objective_banks", 
               "doc": {
                  "headline": "Gets the children of the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the children of the\n                objective bank", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` to query\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the objective bank\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_objective_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``objective_bank_id,`` ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not found\n        raise:  NullArgument - ``id`` or ``objective_bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``objective_bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_bank_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a catalog node", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` to query\n        :type objective_bank_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a catalog node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_objective_bank_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNode) - an objective bank\n                node", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` to query\n        :type objective_bank_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an objective bank node\n        :rtype: ``osid.learning.ObjectiveBankNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.learning.ObjectiveBankNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankHierarchyDesignSession", 
         "shortname": "ObjectiveBankHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``ObjectiveBank`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``ObjectiveBank``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_objective_bank_hierarchy_id", 
            "get_objective_bank_hierarchy", 
            "can_modify_objective_bank_hierarchy", 
            "add_root_objective_bank", 
            "remove_root_objective_bank", 
            "add_child_objective_bank", 
            "remove_child_objective_bank", 
            "remove_child_objective_banks"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_objective_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_objective_bank", 
               "doc": {
                  "headline": "Adds a root objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_bank_id`` is already in\n                hierarchy\n        raise:  NotFound - ``objective_bank_id`` not found\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_bank_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``objective_bank_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_objective_bank", 
               "doc": {
                  "headline": "Removes a root objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` is not a root\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` is not a root\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_objective_bank", 
               "doc": {
                  "headline": "Adds a child to an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``objective_bank_id`` is already a\n                parent of ``child_id``\n        raise:  NotFound - ``objective_bank_id`` or ``child_id`` not\n                found\n        raise:  NullArgument - ``objective_bank_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``objective_bank_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``objective_bank_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_objective_bank", 
               "doc": {
                  "headline": "Removes a child from an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n        arg:    child_id (osid.id.Id): the ``Id`` of the child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not a parent of\n                ``child_id``\n        raise:  NullArgument - ``objective_bank_id`` or ``child_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``objective_bank_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_objective_banks", 
               "doc": {
                  "headline": "Removes all children from an objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of an\n                objective bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``objective_bank_id`` not in hierarchy\n        raise:  NullArgument - ``objective_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of an objective bank\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``objective_bank_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.Objective", 
         "shortname": "Objective", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Objective`` is a statable learning objective.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Federateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Federateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Federateable"
            }
         ], 
         "method_names": [
            "has_assessment", 
            "get_assessment_id", 
            "get_assessment", 
            "has_knowledge_category", 
            "get_knowledge_category_id", 
            "get_knowledge_category", 
            "has_cognitive_process", 
            "get_cognitive_process_id", 
            "get_cognitive_process", 
            "get_objective_record"
         ], 
         "methods": [
            {
               "name": "has_assessment", 
               "doc": {
                  "headline": "Tests if an assessment is associated with this objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment exists, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment exists, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_id", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` associated with this learning objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the assessment ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_assessment()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment", 
               "doc": {
                  "headline": "Gets the assessment associated with this learning objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Assessment) - the assessment", 
               "error_doc": "        raise:  IllegalState - ``has_assessment()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_knowledge_category", 
               "doc": {
                  "headline": "Tests if this objective has a knowledge dimension.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a knowledge category exists,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a knowledge category exists, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_knowledge_category_id", 
               "doc": {
                  "headline": "Gets the grade ``Id`` associated with the knowledge dimension.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_knowledge_category()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_knowledge_category()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_knowledge_category", 
               "doc": {
                  "headline": "Gets the grade associated with the knowledge dimension.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the grade", 
               "error_doc": "        raise:  IllegalState - ``has_knowledge_category()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_knowledge_category()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_cognitive_process", 
               "doc": {
                  "headline": "Tests if this objective has a cognitive process type.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a cognitive process exists,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a cognitive process exists, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_cognitive_process_id", 
               "doc": {
                  "headline": "Gets the grade ``Id`` associated with the cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_cognitive_process()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_cognitive_process()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_cognitive_process", 
               "doc": {
                  "headline": "Gets the grade associated with the cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the grade", 
               "error_doc": "        raise:  IllegalState - ``has_cognitive_process()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_cognitive_process()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_objective_record", 
               "doc": {
                  "headline": "Gets the objective bank record corresponding to the given ``Objective`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``objective_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(objective_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): an objective\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveRecord) - the objective\n                record", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(objective_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_record_type: an objective record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective record\n        :rtype: ``osid.learning.records.ObjectiveRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveRecord", 
         "shortname": "ObjectiveRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Objective``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveQuery", 
         "shortname": "ObjectiveQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching objectives.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidFederateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidFederateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQuery"
            }
         ], 
         "method_names": [
            "match_assessment_id", 
            "clear_assessment_id_terms", 
            "supports_assessment_query", 
            "get_assessment_query", 
            "match_any_assessment", 
            "clear_assessment_terms", 
            "match_knowledge_category_id", 
            "clear_knowledge_category_id_terms", 
            "supports_knowledge_category_query", 
            "get_knowledge_category_query", 
            "match_any_knowledge_category", 
            "clear_knowledge_category_terms", 
            "match_cognitive_process_id", 
            "clear_cognitive_process_id_terms", 
            "supports_cognitive_process_query", 
            "get_cognitive_process_query", 
            "match_any_cognitive_process", 
            "clear_cognitive_process_terms", 
            "match_activity_id", 
            "clear_activity_id_terms", 
            "supports_activity_query", 
            "get_activity_query", 
            "match_any_activity", 
            "clear_activity_terms", 
            "match_requisite_objective_id", 
            "clear_requisite_objective_id_terms", 
            "supports_requisite_objective_query", 
            "get_requisite_objective_query", 
            "match_any_requisite_objective", 
            "clear_requisite_objective_terms", 
            "match_dependent_objective_id", 
            "clear_dependent_objective_id_terms", 
            "supports_depndent_objective_query", 
            "get_dependent_objective_query", 
            "match_any_dependent_objective", 
            "clear_dependent_objective_terms", 
            "match_equivalent_objective_id", 
            "clear_equivalent_objective_id_terms", 
            "supports_equivalent_objective_query", 
            "get_equivalent_objective_query", 
            "match_any_equivalent_objective", 
            "clear_equivalent_objective_terms", 
            "match_ancestor_objective_id", 
            "clear_ancestor_objective_id_terms", 
            "supports_ancestor_objective_query", 
            "get_ancestor_objective_query", 
            "match_any_ancestor_objective", 
            "clear_ancestor_objective_terms", 
            "match_descendant_objective_id", 
            "clear_descendant_objective_id_terms", 
            "supports_descendant_objective_query", 
            "get_descendant_objective_query", 
            "match_any_descendant_objective", 
            "clear_descendant_objective_terms", 
            "match_objective_bank_id", 
            "clear_objective_bank_id_terms", 
            "supports_objective_bank_query", 
            "get_objective_bank_query", 
            "clear_objective_bank_terms", 
            "get_objective_query_record"
         ], 
         "methods": [
            {
               "name": "match_assessment_id", 
               "doc": {
                  "headline": "Sets the assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_id_terms", 
               "doc": {
                  "headline": "Clears the assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available for querying activities.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets the query for an assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment", 
               "doc": {
                  "headline": "Matches an objective that has any assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                assessment, ``false`` to match objectives with no\n                assessment\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any assessment, ``false`` to match objectives with no assessment\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_terms", 
               "doc": {
                  "headline": "Clears the assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_knowledge_category_id", 
               "doc": {
                  "headline": "Sets the knowledge category ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_knowledge_category_id_terms", 
               "doc": {
                  "headline": "Clears the knowledge category ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_knowledge_category_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available for querying knowledge categories.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_knowledge_category_query", 
               "doc": {
                  "headline": "Gets the query for a knowledge category.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_knowledge_category_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_knowledge_category_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_knowledge_category_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_knowledge_category", 
               "doc": {
                  "headline": "Matches an objective that has any knowledge category.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                knowledge category, ``false`` to match objectives with\n                no knowledge category\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any knowledge category, ``false`` to match objectives with no knowledge category\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_knowledge_category_terms", 
               "doc": {
                  "headline": "Clears the knowledge category terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_cognitive_process_id", 
               "doc": {
                  "headline": "Sets the cognitive process ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_cognitive_process_id_terms", 
               "doc": {
                  "headline": "Clears the cognitive process ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_cognitive_process_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available for querying cognitive processes.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_cognitive_process_query", 
               "doc": {
                  "headline": "Gets the query for a cognitive process.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_cognitive_process_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_cognitive_process_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_cognitive_process_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_cognitive_process", 
               "doc": {
                  "headline": "Matches an objective that has any cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                cognitive process, ``false`` to match objectives with no\n                cognitive process\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any cognitive process, ``false`` to match objectives with no cognitive process\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_cognitive_process_terms", 
               "doc": {
                  "headline": "Clears the cognitive process terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_activity_id", 
               "doc": {
                  "headline": "Sets the activity ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): an activity ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_id`` is ``null``", 
               "sphinx_param_doc": "        :param activity_id: an activity ``Id``\n        :type activity_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_activity_id_terms", 
               "doc": {
                  "headline": "Clears the activity ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_query", 
               "doc": {
                  "headline": "Tests if an ``ActivityQuery`` is available for querying activities.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an activity query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an activity query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query", 
               "doc": {
                  "headline": "Gets the query for an activity.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "        raise:  Unimplemented - ``supports_activity_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_activity_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_activity", 
               "doc": {
                  "headline": "Matches an objective that has any related activity.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                activity, ``false`` to match objectives with no activity\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any activity, ``false`` to match objectives with no activity\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_activity_terms", 
               "doc": {
                  "headline": "Clears the activity terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_requisite_objective_id", 
               "doc": {
                  "headline": "Sets the requisite objective ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    requisite_objective_id (osid.id.Id): a requisite\n                objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``requisite_objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param requisite_objective_id: a requisite objective ``Id``\n        :type requisite_objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``requisite_objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "requisite_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_requisite_objective_id_terms", 
               "doc": {
                  "headline": "Clears the requisite objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_requisite_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available for querying requisite objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_requisite_objective_query", 
               "doc": {
                  "headline": "Gets the query for a requisite objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_requisite_objective_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_requisite_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_requisite_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_requisite_objective", 
               "doc": {
                  "headline": "Matches an objective that has any related requisite.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                requisite, ``false`` to match objectives with no\n                requisite\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any requisite, ``false`` to match objectives with no requisite\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_requisite_objective_terms", 
               "doc": {
                  "headline": "Clears the requisite objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_dependent_objective_id", 
               "doc": {
                  "headline": "Sets the dependent objective ``Id`` to query objectives dependent on the given objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    dependent_objective_id (osid.id.Id): a dependent\n                objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``dependent_objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param dependent_objective_id: a dependent objective ``Id``\n        :type dependent_objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``dependent_objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "dependent_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_dependent_objective_id_terms", 
               "doc": {
                  "headline": "Clears the dependent objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_depndent_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available for querying dependent objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_dependent_objective_query", 
               "doc": {
                  "headline": "Gets the query for a dependent objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_dependent_objective_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_dependent_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_dependent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_dependent_objective", 
               "doc": {
                  "headline": "Matches an objective that has any related dependents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                dependent, ``false`` to match objectives with no\n                dependents\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any dependent, ``false`` to match objectives with no dependents\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_dependent_objective_terms", 
               "doc": {
                  "headline": "Clears the dependent objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_equivalent_objective_id", 
               "doc": {
                  "headline": "Sets the equivalent objective ``Id`` to query equivalents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    equivalent_objective_id (osid.id.Id): an equivalent\n                objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``equivalent_objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param equivalent_objective_id: an equivalent objective ``Id``\n        :type equivalent_objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``equivalent_objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "equivalent_objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_equivalent_objective_id_terms", 
               "doc": {
                  "headline": "Clears the equivalent objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_equivalent_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available for querying equivalent objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_equivalent_objective_query", 
               "doc": {
                  "headline": "Gets the query for an equivalent objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_equivalent_objective_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_equivalent_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_equivalent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_equivalent_objective", 
               "doc": {
                  "headline": "Matches an objective that has any related equivalents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                equivalent, ``false`` to match objectives with no\n                equivalents\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any equivalent, ``false`` to match objectives with no equivalents\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_equivalent_objective_terms", 
               "doc": {
                  "headline": "Clears the equivalent objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_objective_id", 
               "doc": {
                  "headline": "Sets the objective ``Id`` for this query to match objectives that have the specified objective as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_objective_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_query", 
               "doc": {
                  "headline": "Gets the query for an objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_objective_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_objective", 
               "doc": {
                  "headline": "Matches objectives that have any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objective with any\n                ancestor, ``false`` to match root objectives\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objective with any ancestor, ``false`` to match root objectives\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_objective_terms", 
               "doc": {
                  "headline": "Clears the ancestor objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_objective_id", 
               "doc": {
                  "headline": "Sets the objective ``Id`` for this query to match objectives that have the specified objective as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_objective_id_terms", 
               "doc": {
                  "headline": "Clears the descendant objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_query", 
               "doc": {
                  "headline": "Gets the query for an objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_descendant_objective_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_objective", 
               "doc": {
                  "headline": "Matches objectives that have any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objectives with any\n                ancestor, ``false`` to match leaf objectives\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objectives with any ancestor, ``false`` to match leaf objectives\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_objective_terms", 
               "doc": {
                  "headline": "Clears the descendant objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_objective_bank_id", 
               "doc": {
                  "headline": "Sets the objective bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): an objective bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: an objective bank ``Id``\n        :type objective_bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_id_terms", 
               "doc": {
                  "headline": "Clears the objective bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_query", 
               "doc": {
                  "headline": "Tests if a ``ObjectiveBankQuery`` is available for querying objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query", 
               "doc": {
                  "headline": "Gets the query for an objective bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_terms", 
               "doc": {
                  "headline": "Clears the objective bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query_record", 
               "doc": {
                  "headline": "Gets the objective query record corresponding to the given ``Objective`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): an objective\n                query record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveQueryRecord) - the\n                objective query record", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(objective_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_record_type: an objective query record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective query record\n        :rtype: ``osid.learning.records.ObjectiveQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveQueryRecord", 
         "shortname": "ObjectiveQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveQueryInspector", 
         "shortname": "ObjectiveQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining objective queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidFederateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidFederateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_assessment_id_terms", 
            "get_assessment_terms", 
            "get_knowledge_category_id_terms", 
            "get_knowledge_category_terms", 
            "get_cognitive_process_id_terms", 
            "get_cognitive_process_terms", 
            "get_requisite_objective_id_terms", 
            "get_requisite_objective_terms", 
            "get_dependent_objective_id_terms", 
            "get_dependent_objective_terms", 
            "get_equivalent_objective_id_terms", 
            "get_equivalent_objective_terms", 
            "get_ancestor_objective_id_terms", 
            "get_ancestor_objective_terms", 
            "get_descendant_objective_id_terms", 
            "get_descendant_objective_terms", 
            "get_activity_id_terms", 
            "get_activity_terms", 
            "get_objective_bank_id_terms", 
            "get_objective_bank_terms", 
            "get_objective_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_id_terms", 
               "doc": {
                  "headline": "Gets the asset ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the asset ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_terms", 
               "doc": {
                  "headline": "Gets the asset query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetQueryInspector) - the asset terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset terms\n        :rtype: ``osid.repository.AssetQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_knowledge_category_id_terms", 
               "doc": {
                  "headline": "Gets the knowledge category ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the knowledge category\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the knowledge category ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_knowledge_category_terms", 
               "doc": {
                  "headline": "Gets the knowledge category query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the knowledge\n                category terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the knowledge category terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_cognitive_process_id_terms", 
               "doc": {
                  "headline": "Gets the cognitive process ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the cognitive process\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the cognitive process ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_cognitive_process_terms", 
               "doc": {
                  "headline": "Gets the cognitive process query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the cognitive\n                process terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the cognitive process terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_requisite_objective_id_terms", 
               "doc": {
                  "headline": "Gets the requisite objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_requisite_objective_terms", 
               "doc": {
                  "headline": "Gets the requisite objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_dependent_objective_id_terms", 
               "doc": {
                  "headline": "Gets the requisite objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_dependent_objective_terms", 
               "doc": {
                  "headline": "Gets the requisite objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_equivalent_objective_id_terms", 
               "doc": {
                  "headline": "Gets the equivalent objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_equivalent_objective_terms", 
               "doc": {
                  "headline": "Gets the equivalent objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_terms", 
               "doc": {
                  "headline": "Gets the ancestor objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_id_terms", 
               "doc": {
                  "headline": "Gets the descendant objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_terms", 
               "doc": {
                  "headline": "Gets the descendant objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_activity_id_terms", 
               "doc": {
                  "headline": "Gets the activity ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the activity ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_activity_terms", 
               "doc": {
                  "headline": "Gets the activity query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQueryInspector) - the activity\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity terms\n        :rtype: ``osid.learning.ActivityQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_id_terms", 
               "doc": {
                  "headline": "Gets the objective bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective bank ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_terms", 
               "doc": {
                  "headline": "Gets the objective bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the\n                objective bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank terms\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query_inspector_record", 
               "doc": {
                  "headline": "Gets the objective query inspector record corresponding to the given ``Objective`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): an objective\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveQueryInspectorRecord) -\n                the objective query inspector record", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(objective_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_record_type: an objective record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective query inspector record\n        :rtype: ``osid.learning.records.ObjectiveQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveQueryInspectorRecord", 
         "shortname": "ObjectiveQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveForm", 
         "shortname": "ObjectiveForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Objectives``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ObjectiveAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidFederateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidFederateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableForm"
            }
         ], 
         "method_names": [
            "get_assessment_metadata", 
            "set_assessment", 
            "clear_assessment", 
            "get_knowledge_category_metadata", 
            "set_knowledge_category", 
            "clear_knowledge_category", 
            "get_cognitive_process_metadata", 
            "set_cognitive_process", 
            "clear_cognitive_process", 
            "get_objective_form_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_metadata", 
               "doc": {
                  "headline": "Gets the metadata for an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the assessment", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the assessment\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_assessment", 
               "doc": {
                  "headline": "Sets the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the new assessment\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``assessment_id`` is invalid\n        raise:  NoAccess - ``assessment_id`` cannot be modified\n        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: the new assessment\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``assessment_id`` is invalid\n        :raise: ``NoAccess`` -- ``assessment_id`` cannot be modified\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment", 
               "doc": {
                  "headline": "Clears the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_knowledge_category_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a knowledge category.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the knowledge category", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the knowledge category\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_knowledge_category", 
               "doc": {
                  "headline": "Sets the knowledge category.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the new knowledge category\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid\n        raise:  NoAccess - ``grade_id`` cannot be modified\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: the new knowledge category\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid\n        :raise: ``NoAccess`` -- ``grade_id`` cannot be modified\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_knowledge_category", 
               "doc": {
                  "headline": "Clears the knowledge category.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_cognitive_process_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the cognitive process", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the cognitive process\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_cognitive_process", 
               "doc": {
                  "headline": "Sets the cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the new cognitive process\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid\n        raise:  NoAccess - ``grade_id`` cannot be modified\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: the new cognitive process\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid\n        :raise: ``NoAccess`` -- ``grade_id`` cannot be modified\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_cognitive_process", 
               "doc": {
                  "headline": "Clears the cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_form_record", 
               "doc": {
                  "headline": "Gets the ``ObjectiveFormRecord`` corresponding to the given objective record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): the objective\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveFormRecord) - the\n                objective form record", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(objective_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_record_type: the objective record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective form record\n        :rtype: ``osid.learning.records.ObjectiveFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveFormRecord", 
         "shortname": "ObjectiveFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveSearchOrder", 
         "shortname": "ObjectiveSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidFederateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidFederateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidFederateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_assessment", 
            "supports_assessment_search_order", 
            "get_assessment_search_order", 
            "order_by_knowledge_category", 
            "supports_knowledge_category_search_order", 
            "get_knowledge_category_search_order", 
            "order_by_cognitive_process", 
            "supports_cognitive_process_search_order", 
            "get_cognitive_process_search_order", 
            "get_objective_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_assessment", 
               "doc": {
                  "headline": "Specified a preference for ordering results by the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_assessment_search_order", 
               "doc": {
                  "headline": "Tests if an ``AssessmentSearchOrder`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_search_order", 
               "doc": {
                  "headline": "Gets the search order for an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchOrder) - the assessment\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment search order\n        :rtype: ``osid.assessment.AssessmentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_knowledge_category", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the knowledge category.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_knowledge_category_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_knowledge_category_search_order", 
               "doc": {
                  "headline": "Gets a grade search order to order on knolwgedge category.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_knowledge_category_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_knowledge_category_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_knowledge_category_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_cognitive_process", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_cognitive_process_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_cognitive_process_search_order", 
               "doc": {
                  "headline": "Gets a grade search order to order on cognitive process.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_cognitive_process_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_cognitive_process_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_cognitive_process_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_order_record", 
               "doc": {
                  "headline": "Gets the objective search order record corresponding to the given objective record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    objective_record_type (osid.type.Type): an objective\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveSearchOrderRecord) - the\n                objective search order record", 
               "error_doc": "        raise:  NullArgument - ``objective_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(objective_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_record_type: an objective record type\n        :type objective_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective search order record\n        :rtype: ``osid.learning.records.ObjectiveSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveSearchOrderRecord", 
         "shortname": "ObjectiveSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveSearch", 
         "shortname": "ObjectiveSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``ObjectiveSearch`` defines the interface for specifying objective search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_objectives", 
            "order_objective_results", 
            "get_objective_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_objectives", 
               "doc": {
                  "headline": "Execute this search among the given list of objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.IdList): list of objectives\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_ids`` is ``null``", 
               "sphinx_param_doc": "        :param objective_ids: list of objectives\n        :type objective_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_objective_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_search_order\n                (osid.learning.ObjectiveSearchOrder): objective search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_search_order`` is ``null``\n        raise:  Unsupported - ``objective_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param objective_search_order: objective search order\n        :type objective_search_order: ``osid.learning.ObjectiveSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``objective_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveSearchOrder", 
                     "var_name": "objective_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_search_record", 
               "doc": {
                  "headline": "Gets the objective search record corresponding to the given objective search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    objective_search_record_type (osid.type.Type): an\n                objective search record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveSearchRecord) - the\n                objective search record", 
               "error_doc": "        raise:  NullArgument - ``objective_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_search_record_type(objective_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_search_record_type: an objective search record type\n        :type objective_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective search record\n        :rtype: ``osid.learning.records.ObjectiveSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(objective_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveSearchRecord", 
         "shortname": "ObjectiveSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveSearchResults", 
         "shortname": "ObjectiveSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_objectives", 
            "get_objective_query_inspector", 
            "get_objective_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_objectives", 
               "doc": {
                  "headline": "Gets the objective list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the objective list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective list\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_search_results_record", 
               "doc": {
                  "headline": "Gets the objective search results record corresponding to the given objective search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    objective_search_record_type (osid.type.Type): an\n                objective search record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveSearchResultsRecord) -\n                the objective search results record", 
               "error_doc": "        raise:  NullArgument - ``objective_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_search_record_type(objective_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param objective_search_record_type: an objective search record type\n        :type objective_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective search results record\n        :rtype: ``osid.learning.records.ObjectiveSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(objective_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveSearchResultsRecord", 
         "shortname": "ObjectiveSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveReceiver", 
         "shortname": "ObjectiveReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The objective receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Objectives``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_objective", 
            "new_ancestor_objective", 
            "new_descendant_objective", 
            "changed_objective", 
            "deleted_objective", 
            "deleted_ancestor_objective", 
            "deleted_descendant_objective"
         ], 
         "methods": [
            {
               "name": "new_objective", 
               "doc": {
                  "headline": "The callback for notifications of new objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the new\n                ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the new ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_objective", 
               "doc": {
                  "headline": "The callback for notifications of new objective ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new\n                ``Objective`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``Objective`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_objective", 
               "doc": {
                  "headline": "The callback for notifications of new objective descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``Objective`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``Objective`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_objective", 
               "doc": {
                  "headline": "The callback for notification of updated objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the updated\n                ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the updated ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_objective", 
               "doc": {
                  "headline": "The callback for notification of deleted objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the deleted\n                ``Objective``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the deleted ``Objective``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_objective", 
               "doc": {
                  "headline": "The callback for notifications of deleted objective ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``Objective`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``Objective`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_objective", 
               "doc": {
                  "headline": "The callback for notifications of deleted objective descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): the ``Id`` of the\n                ``Objective``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``Objective`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_id: the ``Id`` of the ``Objective``\n        :type objective_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``Objective`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveList", 
         "shortname": "ObjectiveList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ObjectiveList`` provides a means for accessing ``Objective`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ol.hasNext()) { Objective objective =\n    ol.getNextObjective(); }\n\n    or\n      while (ol.hasNext()) {\n           Objective[] objectives = ol.getNextObjectives(ol.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_objective", 
            "get_next_objectives"
         ], 
         "methods": [
            {
               "name": "get_next_objective", 
               "doc": {
                  "headline": "Gets the next ``Objective`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Objective) - the next ``Objective`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Objective`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Objective`` in this list. The ``has_next()`` method should be used to test that a next ``Objective`` is available before calling this method.\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_objectives", 
               "doc": {
                  "headline": "Gets the next set of ``Objective`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Objective`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.Objective) - an array of ``Objective``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Objective`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Objective`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveNode", 
         "shortname": "ObjectiveNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``ObjectiveHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_objective", 
            "get_parent_objective_nodes", 
            "get_child_objective_nodes"
         ], 
         "methods": [
            {
               "name": "get_objective", 
               "doc": {
                  "headline": "Gets the ``Objective`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Objective) - the objective represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective represented by this node\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Objective", 
               "errors": {}
            }, 
            {
               "name": "get_parent_objective_nodes", 
               "doc": {
                  "headline": "Gets the parents of this objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.learning.ObjectiveNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_objective_nodes", 
               "doc": {
                  "headline": "Gets the children of this objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveNodeList) - the children of this\n                objective", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this objective\n        :rtype: ``osid.learning.ObjectiveNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveNodeList", 
         "shortname": "ObjectiveNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ObjectiveNodeList`` provides a means for accessing ``ObjectiveNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (onl.hasNext()) { ObjectiveNode node =\n    onl.getNextObjectiveNode(); }\n\n    or\n      while (onl.hasNext()) {\n           ObjectiveNode[] nodes = onl.getNextObjectiveNodes(onl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_objective_node", 
            "get_next_objective_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_objective_node", 
               "doc": {
                  "headline": "Gets the next ``ObjectiveNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveNode) - the next\n                ``ObjectiveNode`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``ObjectiveNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ObjectiveNode`` in this list. The ``has_next()`` method should be used to test that a next ``ObjectiveNode`` is available before calling this method.\n        :rtype: ``osid.learning.ObjectiveNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_objective_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``ObjectiveNode`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ObjectiveNode`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveNode) - an array of\n                ``ObjectiveNode`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ObjectiveNode`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ObjectiveNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.ObjectiveNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.ObjectiveNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.Activity", 
         "shortname": "Activity", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Activity`` represents learning material or other learning activities to meet an objective.", 
            "body": "    An Activity has may relate to a set of ``Asssts`` for self learning,\n    recommended ``Courses`` to take, or a learning ``Assessment``. The\n    learning ``Assessment`` differs from the ``Objective``\n    ``Assessment`` in that the latter used to test for proficiency in\n    the ``Objective``.\n\n    Generally, an ``Activity`` should focus on one of assets, courses,\n    assessments, or some other specific activity related to the\n    objective described or related in the ``ActivityRecord``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Subjugateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Subjugateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Subjugateable"
            }
         ], 
         "method_names": [
            "get_objective_id", 
            "get_objective", 
            "is_asset_based_activity", 
            "get_asset_ids", 
            "get_assets", 
            "is_course_based_activity", 
            "get_course_ids", 
            "get_courses", 
            "is_assessment_based_activity", 
            "get_assessment_ids", 
            "get_assessments", 
            "get_activity_record"
         ], 
         "methods": [
            {
               "name": "get_objective_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the related objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the objective ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective", 
               "doc": {
                  "headline": "Gets the related objective.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Objective) - the related objective", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the related objective\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_asset_based_activity", 
               "doc": {
                  "headline": "Tests if this is an asset based activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this activity is based on\n                assets, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this activity is based on assets, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_asset_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of any assets associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - list of asset ``Ids``", 
               "error_doc": "        raise:  IllegalState - ``is_asset_based_activity()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of asset ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_asset_based_activity()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assets", 
               "doc": {
                  "headline": "Gets any assets associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetList) - list of assets", 
               "error_doc": "        raise:  IllegalState - ``is_asset_based_activity()`` is\n                ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of assets\n        :rtype: ``osid.repository.AssetList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_asset_based_activity()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_course_based_activity", 
               "doc": {
                  "headline": "Tests if this is a course based activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this activity is based on\n                courses, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this activity is based on courses, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_course_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of any courses associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - list of course ``Ids``", 
               "error_doc": "        raise:  IllegalState - ``is_course_based_activity()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of course ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_course_based_activity()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_courses", 
               "doc": {
                  "headline": "Gets any courses associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.course.CourseList) - list of courses", 
               "error_doc": "        raise:  IllegalState - ``is_course_based_activity()`` is\n                ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of courses\n        :rtype: ``osid.course.CourseList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_course_based_activity()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.course.CourseList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_assessment_based_activity", 
               "doc": {
                  "headline": "Tests if this is an assessment based activity.", 
                  "body": "        These assessments are for learning the objective and not for\n        assessing prodiciency in the objective."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this activity is based on\n                assessments, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this activity is based on assessments, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of any assessments associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - list of assessment ``Ids``", 
               "error_doc": "        raise:  IllegalState - ``is_assessment_based_activity()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of assessment ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_assessment_based_activity()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessments", 
               "doc": {
                  "headline": "Gets any assessments associated with this activity.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - list of assessments", 
               "error_doc": "        raise:  IllegalState - ``is_assessment_based_activity()`` is\n                ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: list of assessments\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_assessment_based_activity()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_activity_record", 
               "doc": {
                  "headline": "Gets the activity record corresponding to the given ``Activity`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``activity_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(activity_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.learning.records.ActivityRecord) - the activity\n                record", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(activity_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activity_record_type: the type of the record to retrieve\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity record\n        :rtype: ``osid.learning.records.ActivityRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(activity_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivityRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivityRecord", 
         "shortname": "ActivityRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Activity``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivityQuery", 
         "shortname": "ActivityQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching activities.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidSubjugateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidSubjugateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQuery"
            }
         ], 
         "method_names": [
            "match_objective_id", 
            "clear_objective_id_terms", 
            "supports_objective_query", 
            "get_objective_query", 
            "clear_objective_terms", 
            "match_asset_id", 
            "clear_asset_id_terms", 
            "supports_asset_query", 
            "get_asset_query", 
            "match_any_asset", 
            "clear_asset_terms", 
            "match_course_id", 
            "clear_course_id_terms", 
            "supports_course_query", 
            "get_course_query", 
            "match_any_course", 
            "clear_course_terms", 
            "match_assessment_id", 
            "clear_assessment_id_terms", 
            "supports_assessment_query", 
            "get_assessment_query", 
            "match_any_assessment", 
            "clear_assessment_terms", 
            "match_objective_bank_id", 
            "clear_objective_bank_id_terms", 
            "supports_objective_bank_query", 
            "get_objective_bank_query", 
            "clear_objective_bank_terms", 
            "get_activity_query_record"
         ], 
         "methods": [
            {
               "name": "match_objective_id", 
               "doc": {
                  "headline": "Sets the objective ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_id_terms", 
               "doc": {
                  "headline": "Clears the objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available for querying objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query", 
               "doc": {
                  "headline": "Gets the query for an objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_terms", 
               "doc": {
                  "headline": "Clears the objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_asset_id", 
               "doc": {
                  "headline": "Sets the asset ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    asset_id (osid.id.Id): an asset ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``asset_id`` is ``null``", 
               "sphinx_param_doc": "        :param asset_id: an asset ``Id``\n        :type asset_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``asset_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "asset_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_asset_id_terms", 
               "doc": {
                  "headline": "Clears the asset ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_asset_query", 
               "doc": {
                  "headline": "Tests if an ``AssetQuery`` is available for querying objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an robjective query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an robjective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_asset_query", 
               "doc": {
                  "headline": "Gets the query for an asset.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetQuery) - the asset query", 
               "error_doc": "        raise:  Unimplemented - ``supports_asset_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset query\n        :rtype: ``osid.repository.AssetQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_asset_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_asset", 
               "doc": {
                  "headline": "Matches an activity that has any objective assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match activities with any\n                asset, ``false`` to match activities with no asset\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match activities with any asset, ``false`` to match activities with no asset\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_asset_terms", 
               "doc": {
                  "headline": "Clears the asset terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_course_id", 
               "doc": {
                  "headline": "Sets the course ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    course_id (osid.id.Id): a course ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``course_id`` is ``null``", 
               "sphinx_param_doc": "        :param course_id: a course ``Id``\n        :type course_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``course_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "course_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_course_id_terms", 
               "doc": {
                  "headline": "Clears the course ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_course_query", 
               "doc": {
                  "headline": "Tests if a ``CourseQuery`` is available for querying courses.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a course query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a course query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_course_query", 
               "doc": {
                  "headline": "Gets the query for a course.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.course.CourseQuery) - the course query", 
               "error_doc": "        raise:  Unimplemented - ``supports_course_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the course query\n        :rtype: ``osid.course.CourseQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_course_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_course_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.course.CourseQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_course", 
               "doc": {
                  "headline": "Matches an activity that has any course assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match activities with any\n                courses, ``false`` to match activities with no courses\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match activities with any courses, ``false`` to match activities with no courses\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_course_terms", 
               "doc": {
                  "headline": "Clears the course terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_id", 
               "doc": {
                  "headline": "Sets the assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_id_terms", 
               "doc": {
                  "headline": "Clears the assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available for querying assessments.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets the query for a assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment", 
               "doc": {
                  "headline": "Matches an activity that has any assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match activities with any\n                assessments, ``false`` to match activities with no\n                assessments\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match activities with any assessments, ``false`` to match activities with no assessments\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_terms", 
               "doc": {
                  "headline": "Clears the assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_objective_bank_id", 
               "doc": {
                  "headline": "Sets the objective bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): an objective bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: an objective bank ``Id``\n        :type objective_bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_id_terms", 
               "doc": {
                  "headline": "Clears the objective bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_query", 
               "doc": {
                  "headline": "Tests if a ``ObjectiveBankQuery`` is available for querying resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query", 
               "doc": {
                  "headline": "Gets the query for an objective bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_terms", 
               "doc": {
                  "headline": "Clears the objective bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query_record", 
               "doc": {
                  "headline": "Gets the activity query record corresponding to the given ``Activity`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): an activity query\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivityQueryRecord) - the\n                activity query record", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(activity_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activity_record_type: an activity query record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity query record\n        :rtype: ``osid.learning.records.ActivityQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(activity_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivityQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivityQueryRecord", 
         "shortname": "ActivityQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ActivityQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivityQueryInspector", 
         "shortname": "ActivityQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining activity queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidSubjugateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidSubjugateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_objective_id_terms", 
            "get_objective_terms", 
            "get_asset_id_terms", 
            "get_asset_terms", 
            "get_course_id_terms", 
            "get_course_terms", 
            "get_assessment_id_terms", 
            "get_assessment_terms", 
            "get_objective_bank_id_terms", 
            "get_objective_bank_terms", 
            "get_activity_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_objective_id_terms", 
               "doc": {
                  "headline": "Gets the objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_terms", 
               "doc": {
                  "headline": "Gets the objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the objective\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_asset_id_terms", 
               "doc": {
                  "headline": "Gets the asset ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the asset ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_asset_terms", 
               "doc": {
                  "headline": "Gets the asset query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.repository.AssetQueryInspector) - the asset terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the asset terms\n        :rtype: ``osid.repository.AssetQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.repository.AssetQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_course_id_terms", 
               "doc": {
                  "headline": "Gets the course ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the course ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the course ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_course_terms", 
               "doc": {
                  "headline": "Gets the course query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.course.CourseQueryInspector) - the course terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the course terms\n        :rtype: ``osid.course.CourseQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.course.CourseQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_id_terms", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment terms\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_id_terms", 
               "doc": {
                  "headline": "Gets the objective bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective bank ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_terms", 
               "doc": {
                  "headline": "Gets the objective bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the\n                objective bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank terms\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query_inspector_record", 
               "doc": {
                  "headline": "Gets the activity query inspector record corresponding to the given ``Activity`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): an activity\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivityQueryInspectorRecord) -\n                the activity query inspector record", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(activity_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activity_record_type: an activity record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity query inspector record\n        :rtype: ``osid.learning.records.ActivityQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(activity_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivityQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivityQueryInspectorRecord", 
         "shortname": "ActivityQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ActivityQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivityForm", 
         "shortname": "ActivityForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Activities``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ActivityAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidSubjugateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidSubjugateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableForm"
            }
         ], 
         "method_names": [
            "get_assets_metadata", 
            "set_assets", 
            "clear_assets", 
            "get_courses_metadata", 
            "set_courses", 
            "clear_courses", 
            "get_assessments_metadata", 
            "set_assessments", 
            "clear_assessments", 
            "get_activity_form_record"
         ], 
         "methods": [
            {
               "name": "get_assets_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the assets.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the assets", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the assets\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_assets", 
               "doc": {
                  "headline": "Sets the assets.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    asset_ids (osid.id.Id[]): the asset ``Ids``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``asset_ids`` is invalid\n        raise:  NullArgument - ``asset_ids`` is ``null``\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param asset_ids: the asset ``Ids``\n        :type asset_ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``asset_ids`` is invalid\n        :raise: ``NullArgument`` -- ``asset_ids`` is ``null``\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "asset_ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assets", 
               "doc": {
                  "headline": "Clears the assets.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_courses_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the courses.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the courses", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the courses\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_courses", 
               "doc": {
                  "headline": "Sets the courses.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    course_ids (osid.id.Id[]): the course ``Ids``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``course_ids`` is invalid\n        raise:  NullArgument - ``course_ids`` is ``null``\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param course_ids: the course ``Ids``\n        :type course_ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``course_ids`` is invalid\n        :raise: ``NullArgument`` -- ``course_ids`` is ``null``\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "course_ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_courses", 
               "doc": {
                  "headline": "Clears the courses.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessments_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the assessments.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the assessments", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the assessments\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_assessments", 
               "doc": {
                  "headline": "Sets the assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_ids (osid.id.Id[]): the assessment ``Ids``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``assessment_ids`` is invalid\n        raise:  NullArgument - ``assessment_ids`` is ``null``\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param assessment_ids: the assessment ``Ids``\n        :type assessment_ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``assessment_ids`` is invalid\n        :raise: ``NullArgument`` -- ``assessment_ids`` is ``null``\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "assessment_ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessments", 
               "doc": {
                  "headline": "Clears the assessments.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_form_record", 
               "doc": {
                  "headline": "Gets the ``ActivityFormRecord`` corresponding to the given activity record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): the activity\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivityFormRecord) - the\n                activity form record", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(activity_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activity_record_type: the activity record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity form record\n        :rtype: ``osid.learning.records.ActivityFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(activity_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivityFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivityFormRecord", 
         "shortname": "ActivityFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ActivityForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivitySearchOrder", 
         "shortname": "ActivitySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidSubjugateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidSubjugateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_objective", 
            "supports_objective_search_order", 
            "get_objective_search_order", 
            "get_activity_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_objective", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_objective_search_order", 
               "doc": {
                  "headline": "Tests if an objective search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_search_order", 
               "doc": {
                  "headline": "Gets an objective search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchOrder) - an objective\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an objective search order\n        :rtype: ``osid.learning.ObjectiveSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_order_record", 
               "doc": {
                  "headline": "Gets the activity search order record corresponding to the given activity record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    activity_record_type (osid.type.Type): an activity\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivitySearchOrderRecord) - the\n                activity search order record", 
               "error_doc": "        raise:  NullArgument - ``activity_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(activity_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activity_record_type: an activity record type\n        :type activity_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity search order record\n        :rtype: ``osid.learning.records.ActivitySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(activity_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activity_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivitySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivitySearchOrderRecord", 
         "shortname": "ActivitySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ActivitySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivitySearch", 
         "shortname": "ActivitySearch", 
         "category": "searches", 
         "doc": {
            "headline": "``ActivitySearch`` defines the interface for specifying activity search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_activities", 
            "order_activity_results", 
            "get_activity_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_activities", 
               "doc": {
                  "headline": "Execute this search among the given list of activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_ids (osid.id.IdList): list of activities\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_ids`` is ``null``", 
               "sphinx_param_doc": "        :param activity_ids: list of activities\n        :type activity_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "activity_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_activity_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activitiesearch_order\n                (osid.learning.ActivitySearchOrder): activity search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activitiesearch_order`` is ``null``\n        raise:  Unsupported - ``activitiesearch_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param activitiesearch_order: activity search order\n        :type activitiesearch_order: ``osid.learning.ActivitySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activitiesearch_order`` is ``null``\n        :raise: ``Unsupported`` -- ``activitiesearch_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ActivitySearchOrder", 
                     "var_name": "activitiesearch_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ActivitySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_search_record", 
               "doc": {
                  "headline": "Gets the activity record corresponding to the given activity search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    activitiesearch_record_type (osid.type.Type): an\n                activity search record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivitySearchRecord) - the\n                activity search record", 
               "error_doc": "        raise:  NullArgument - ``activitiesearch_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_search_record_type(activitiesearch_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activitiesearch_record_type: an activity search record type\n        :type activitiesearch_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity search record\n        :rtype: ``osid.learning.records.ActivitySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activitiesearch_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(activitiesearch_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activitiesearch_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivitySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivitySearchRecord", 
         "shortname": "ActivitySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ActivitySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivitySearchResults", 
         "shortname": "ActivitySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_activities", 
            "get_activity_query_inspector", 
            "get_activity_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_activities", 
               "doc": {
                  "headline": "Gets the activity list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityList) - the activity list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity list\n        :rtype: ``osid.learning.ActivityList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_activity_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.learning.ActivityQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_activity_search_results_record", 
               "doc": {
                  "headline": "Gets the activity search results record corresponding to the given activity search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    activitiesearch_record_type (osid.type.Type): an\n                activity search record type\n", 
               "return_doc": "        return: (osid.learning.records.ActivitySearchResultsRecord) -\n                the activity search results record", 
               "error_doc": "        raise:  NullArgument - ``activitiesearch_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_search_record_type(activitiesearch_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param activitiesearch_record_type: an activity search record type\n        :type activitiesearch_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the activity search results record\n        :rtype: ``osid.learning.records.ActivitySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activitiesearch_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(activitiesearch_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "activitiesearch_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ActivitySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ActivitySearchResultsRecord", 
         "shortname": "ActivitySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ActivitySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ActivityReceiver", 
         "shortname": "ActivityReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The activity receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Activities``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_activity", 
            "changed_activity", 
            "deleted_activity"
         ], 
         "methods": [
            {
               "name": "new_activity", 
               "doc": {
                  "headline": "The callback for notifications of new activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the new\n                ``Activity``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the new ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_activity", 
               "doc": {
                  "headline": "The callback for notification of updated activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the updated\n                ``Activity``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the updated ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_activity", 
               "doc": {
                  "headline": "The callback for notification of deleted activities.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): the ``Id`` of the deleted\n                ``Activity``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param activity_id: the ``Id`` of the deleted ``Activity``\n        :type activity_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ActivityList", 
         "shortname": "ActivityList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ActivityList`` provides a means for accessing ``Activity`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (al.hasNext()) { Activity activity =\n    al.getNextActivity(); }\n\n    or\n      while (al.hasNext()) {\n           Activity[] activities = al.getNextActivities(al.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_activity", 
            "get_next_activities"
         ], 
         "methods": [
            {
               "name": "get_next_activity", 
               "doc": {
                  "headline": "Gets the next ``Activity`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Activity) - the next ``Activity`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Activity`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Activity`` in this list. The ``has_next()`` method should be used to test that a next ``Activity`` is available before calling this method.\n        :rtype: ``osid.learning.Activity``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Activity", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_activities", 
               "doc": {
                  "headline": "Gets the next set of ``Activity`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Activity`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.Activity) - an array of ``Activity``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Activity`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Activity`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.Activity``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.Activity", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.Proficiency", 
         "shortname": "Proficiency", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Proficiency`` represents a competency of a leraning objective.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_resource_id", 
            "get_resource", 
            "get_objective_id", 
            "get_objective", 
            "get_completion", 
            "has_level", 
            "get_level_id", 
            "get_level", 
            "get_proficiency_record"
         ], 
         "methods": [
            {
               "name": "get_resource_id", 
               "doc": {
                  "headline": "Gets the resource ``Id`` to whom this proficiency applies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_resource", 
               "doc": {
                  "headline": "Gets the resource to whom this proficiency applies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_objective_id", 
               "doc": {
                  "headline": "Gets the objective ``Id`` to whom this proficiency applies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the objective ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_objective", 
               "doc": {
                  "headline": "Gets the objective to whom this proficiency applies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Objective) - the objective", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective\n        :rtype: ``osid.learning.Objective``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Objective", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_completion", 
               "doc": {
                  "headline": "Gets the completion of this objective as a percentage 0-100.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the completion", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the completion\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {}
            }, 
            {
               "name": "has_level", 
               "doc": {
                  "headline": "Tests if a proficiency level is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a level is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a level is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_id", 
               "doc": {
                  "headline": "Gets the proficiency level expressed as a grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_level()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_level()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_level", 
               "doc": {
                  "headline": "Gets the proficiency level expressed as a grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the grade", 
               "error_doc": "        raise:  IllegalState - ``has_level()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_level()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_proficiency_record", 
               "doc": {
                  "headline": "Gets the proficiency record corresponding to the given ``Proficiency`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``proficiency_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(proficiency_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): the type of\n                proficiency record to retrieve\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencyRecord) - the\n                proficiency record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_record_type: the type of proficiency record to retrieve\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency record\n        :rtype: ``osid.learning.records.ProficiencyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencyRecord", 
         "shortname": "ProficiencyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Proficiency``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencyQuery", 
         "shortname": "ProficiencyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching proficiencies.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_resource_id", 
            "clear_resource_id_terms", 
            "supports_resource_query", 
            "get_resource_query", 
            "clear_resource_terms", 
            "match_objective_id", 
            "clear_objective_id_terms", 
            "supports_objective_query", 
            "get_objective_query", 
            "match_any_objective", 
            "clear_objective_terms", 
            "match_completion", 
            "clear_completion_terms", 
            "match_minimum_completion", 
            "clear_minimum_completion_terms", 
            "match_level_id", 
            "clear_level_id_terms", 
            "supports_level_query", 
            "get_level_query", 
            "match_any_level", 
            "clear_level_terms", 
            "match_objective_bank_id", 
            "clear_objective_bank_id_terms", 
            "supports_objective_bank_query", 
            "get_objective_bank_query", 
            "clear_objective_bank_terms", 
            "get_proficiency_query_record"
         ], 
         "methods": [
            {
               "name": "match_resource_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` if a positive match, ``false``\n                for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` if a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_objective_id", 
               "doc": {
                  "headline": "Sets the objective ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_id_terms", 
               "doc": {
                  "headline": "Clears the objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available for querying objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an robjective query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an robjective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query", 
               "doc": {
                  "headline": "Gets the query for an objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_objective", 
               "doc": {
                  "headline": "Matches an activity that has any objective assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match activities with any\n                objective, ``false`` to match activities with no\n                objective\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match activities with any objective, ``false`` to match activities with no objective\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_objective_terms", 
               "doc": {
                  "headline": "Clears the objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_completion", 
               "doc": {
                  "headline": "Sets the completion for this query to match completion percentages between the given range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (decimal): start of range\n        arg:    end (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``decimal``\n        :param end: end of range\n        :type end: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_completion_terms", 
               "doc": {
                  "headline": "Clears the completion terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_completion", 
               "doc": {
                  "headline": "Sets the minimum completion for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    completion (decimal): completion percentage\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param completion: completion percentage\n        :type completion: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "completion", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_minimum_completion_terms", 
               "doc": {
                  "headline": "Clears the minimum completion terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_level_id", 
               "doc": {
                  "headline": "Sets the level grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level_id_terms", 
               "doc": {
                  "headline": "Clears all level ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_level_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_level", 
               "doc": {
                  "headline": "Matches an assessment offered that has any level assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                level, ``false`` to match offerings with no levsls\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any level, ``false`` to match offerings with no levsls\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_level_terms", 
               "doc": {
                  "headline": "Clears all level terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_objective_bank_id", 
               "doc": {
                  "headline": "Sets the objective bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): an objective bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: an objective bank ``Id``\n        :type objective_bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_id_terms", 
               "doc": {
                  "headline": "Clears the objective bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_bank_query", 
               "doc": {
                  "headline": "Tests if a ``ObjectiveBankQuery`` is available for querying resources.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query", 
               "doc": {
                  "headline": "Gets the query for an objective bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_bank_terms", 
               "doc": {
                  "headline": "Clears the objective bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_query_record", 
               "doc": {
                  "headline": "Gets the proficiency query record corresponding to the given ``Proficiency`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a proficiency\n                offered record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencyQueryRecord) - the\n                proficiency offered query record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_record_type: a proficiency offered record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency offered query record\n        :rtype: ``osid.learning.records.ProficiencyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencyQueryRecord", 
         "shortname": "ProficiencyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencyQueryInspector", 
         "shortname": "ProficiencyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining proficiency queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_resource_id_terms", 
            "get_resource_terms", 
            "get_objective_id_terms", 
            "get_objective_terms", 
            "get_completion_terms", 
            "get_minimum_completion_terms", 
            "get_level_id_terms", 
            "get_level_terms", 
            "get_objective_bank_id_terms", 
            "get_objective_bank_terms", 
            "get_proficiency_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_resource_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_terms", 
               "doc": {
                  "headline": "Gets the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_id_terms", 
               "doc": {
                  "headline": "Gets the objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_terms", 
               "doc": {
                  "headline": "Gets the objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the objective\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_completion_terms", 
               "doc": {
                  "headline": "Gets the completion terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the completion\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the completion terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_completion_terms", 
               "doc": {
                  "headline": "Gets the minimum completion terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalTerm) - the minimum completion\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum completion terms\n        :rtype: ``osid.search.terms.DecimalTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalTerm", 
               "errors": {}
            }, 
            {
               "name": "get_level_id_terms", 
               "doc": {
                  "headline": "Gets the level ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the level ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_level_terms", 
               "doc": {
                  "headline": "Gets the level query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the level terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_id_terms", 
               "doc": {
                  "headline": "Gets the objective bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective bank ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_terms", 
               "doc": {
                  "headline": "Gets the objective bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the\n                objective bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank terms\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_query_inspector_record", 
               "doc": {
                  "headline": "Gets the proficiency query inspector record corresponding to the given ``Proficiency`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a proficiency\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencyQueryInspectorRecord)\n                - the proficiency query inspector record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_record_type: a proficiency record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency query inspector record\n        :rtype: ``osid.learning.records.ProficiencyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencyQueryInspectorRecord", 
         "shortname": "ProficiencyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencyForm", 
         "shortname": "ProficiencyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Proficiencies``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ProficiencyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_completion_metadata", 
            "set_completion", 
            "clear_completion", 
            "get_level_metadata", 
            "set_level", 
            "clear_level", 
            "get_proficiency_form_record"
         ], 
         "methods": [
            {
               "name": "get_completion_metadata", 
               "doc": {
                  "headline": "Gets the metadata for completion percentage.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the completion percentage", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the completion percentage\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_completion", 
               "doc": {
                  "headline": "Sets the completion percentage.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    completion (decimal): the completion percentage\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``completion`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param completion: the completion percentage\n        :type completion: ``decimal``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``completion`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "completion", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_completion", 
               "doc": {
                  "headline": "Clears the completion.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_level_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade level", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade level\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_level", 
               "doc": {
                  "headline": "Sets the level expressed as a ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade (osid.grading.Grade): the level\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``grade`` is ``null``", 
               "sphinx_param_doc": "        :param grade: the level\n        :type grade: ``osid.grading.Grade``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``grade`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.grading.Grade", 
                     "var_name": "grade", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.grading.Grade"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level", 
               "doc": {
                  "headline": "Clears the level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_form_record", 
               "doc": {
                  "headline": "Gets the ``ProficiencyFormRecord`` corresponding to the given proficiency record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a proficiency\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencyFormRecord) - the\n                proficiency form record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_record_type: a proficiency record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency form record\n        :rtype: ``osid.learning.records.ProficiencyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencyFormRecord", 
         "shortname": "ProficiencyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencySearchOrder", 
         "shortname": "ProficiencySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_resource", 
            "supports_resource_search_order", 
            "get_resource_search_order", 
            "order_by_objective", 
            "supports_objective_search_order", 
            "get_objective_search_order", 
            "order_by_completion", 
            "order_by_level", 
            "supports_level_search_order", 
            "get_level_search_order", 
            "get_proficiency_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_resource", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_resource_search_order", 
               "doc": {
                  "headline": "Tests if a resource search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_order", 
               "doc": {
                  "headline": "Gets a resource search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - a resource search\n                order", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_objective", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_objective_search_order", 
               "doc": {
                  "headline": "Tests if an objective search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_search_order", 
               "doc": {
                  "headline": "Gets an objective search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveSearchOrder) - an objective\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an objective search order\n        :rtype: ``osid.learning.ObjectiveSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_completion", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the completion.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_level", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the level.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_level_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_search_order", 
               "doc": {
                  "headline": "Gets a grade search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_order_record", 
               "doc": {
                  "headline": "Gets the proficiency search order record corresponding to the given proficiency record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    proficiency_record_type (osid.type.Type): a proficiency\n                record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencySearchOrderRecord) -\n                the proficiency search order record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_record_type: a proficiency record type\n        :type proficiency_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency search order record\n        :rtype: ``osid.learning.records.ProficiencySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencySearchOrderRecord", 
         "shortname": "ProficiencySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencySearch", 
         "shortname": "ProficiencySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing proficiency searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_proficiencies", 
            "order_proficiency_results", 
            "get_proficiency_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_proficiencies", 
               "doc": {
                  "headline": "Execute this search among the given list of proficiencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_ids (osid.id.IdList): list of proficiencies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_ids`` is ``null``", 
               "sphinx_param_doc": "        :param proficiency_ids: list of proficiencies\n        :type proficiency_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "proficiency_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_proficiency_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_search_order\n                (osid.learning.ProficiencySearchOrder): proficiency\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``proficiency_search_order`` is ``null``\n        raise:  Unsupported - ``proficiency_search_order`` is not of\n                this service", 
               "sphinx_param_doc": "        :param proficiency_search_order: proficiency search order\n        :type proficiency_search_order: ``osid.learning.ProficiencySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``proficiency_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ProficiencySearchOrder", 
                     "var_name": "proficiency_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ProficiencySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_search_record", 
               "doc": {
                  "headline": "Gets the proficiency search record corresponding to the given proficiency search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    proficiency_search_record_type (osid.type.Type): a\n                proficiency search record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencySearchRecord) - the\n                proficiency search record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_search_record_type: a proficiency search record type\n        :type proficiency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency search record\n        :rtype: ``osid.learning.records.ProficiencySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencySearchRecord", 
         "shortname": "ProficiencySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencySearchResults", 
         "shortname": "ProficiencySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_proficiencies", 
            "get_proficiency_query_inspector", 
            "get_proficiency_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_proficiencies", 
               "doc": {
                  "headline": "Gets the proficiency list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyList) - the proficiency list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency list\n        :rtype: ``osid.learning.ProficiencyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_proficiency_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ProficiencyQueryInspector) - the\n                proficiency query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the proficiency query inspector\n        :rtype: ``osid.learning.ProficiencyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ProficiencyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_proficiency_search_results_record", 
               "doc": {
                  "headline": "Gets the proficiency search results record corresponding to the given proficiency search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    proficiency_search_record_type (osid.type.Type): a\n                proficiency search record type\n", 
               "return_doc": "        return: (osid.learning.records.ProficiencySearchResultsRecord) -\n                the proficiency search results record", 
               "error_doc": "        raise:  NullArgument - ``proficiency_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(proficiency_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proficiency_search_record_type: a proficiency search record type\n        :type proficiency_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the proficiency search results record\n        :rtype: ``osid.learning.records.ProficiencySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proficiency_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(proficiency_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "proficiency_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ProficiencySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ProficiencySearchResultsRecord", 
         "shortname": "ProficiencySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ProficiencySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ProficiencyReceiver", 
         "shortname": "ProficiencyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The proficiency receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted proficiencies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_proficiency", 
            "changed_proficiency", 
            "deleted_proficiency"
         ], 
         "methods": [
            {
               "name": "new_proficiency", 
               "doc": {
                  "headline": "The callback for notifications of new proficiencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the new\n                ``Proficiency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the new ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_proficiency", 
               "doc": {
                  "headline": "The callback for notification of updated proficiencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the updated\n                ``Proficiency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the updated ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_proficiency", 
               "doc": {
                  "headline": "The callback for notification of deleted proficiencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proficiency_id (osid.id.Id): the ``Id`` of the deleted\n                ``Proficiency``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param proficiency_id: the ``Id`` of the deleted ``Proficiency``\n        :type proficiency_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "proficiency_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ProficiencyList", 
         "shortname": "ProficiencyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ProficiencyList`` provides a means for accessing ``Proficiency`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (pl.hasNext()) { Proficiency proficiency =\n    pl.getNextProficiency(); }\n\n    or\n      while (pl.hasNext()) {\n           Proficiency[] proficiencies = pl.getNextProficiencies(pl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_proficiency", 
            "get_next_proficiencies"
         ], 
         "methods": [
            {
               "name": "get_next_proficiency", 
               "doc": {
                  "headline": "Gets the next ``Proficiency`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.Proficiency) - the next ``Proficiency``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``Proficiency`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Proficiency`` in this list. The ``has_next()`` method should be used to test that a next ``Proficiency`` is available before calling this method.\n        :rtype: ``osid.learning.Proficiency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.Proficiency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_proficiencies", 
               "doc": {
                  "headline": "Gets the next set of ``Proficiency`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Proficiency`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.Proficiency) - an array of\n                ``Proficiency`` elements.The length of the array is less\n                than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Proficiency`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Proficiency`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.Proficiency``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.Proficiency", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBank", 
         "shortname": "ObjectiveBank", 
         "category": "objects", 
         "doc": {
            "headline": "an objective bank defines a collection of objectives.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_objective_bank_record"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_record", 
               "doc": {
                  "headline": "Gets the objective bank record corresponding to the given ``ObjectiveBank`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``objective_bank_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(objective_bank_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankRecord) - the\n                objective bank record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(objective_bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank record\n        :rtype: ``osid.learning.records.ObjectiveBankRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankRecord", 
         "shortname": "ObjectiveBankRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ObjectiveBank``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankQuery", 
         "shortname": "ObjectiveBankQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching objective banks.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_objective_id", 
            "clear_objective_id_terms", 
            "supports_objective_query", 
            "get_objective_query", 
            "match_any_objective", 
            "clear_objective_terms", 
            "match_activity_id", 
            "clear_activity_id_terms", 
            "supports_activity_query", 
            "get_activity_query", 
            "match_any_activity", 
            "clear_activity_terms", 
            "match_ancestor_objective_bank_id", 
            "clear_ancestor_objective_bank_id_terms", 
            "supports_ancestor_objective_bank_query", 
            "get_ancestor_objective_bank_query", 
            "match_any_ancestor_objective_bank", 
            "clear_ancestor_objective_bank_terms", 
            "match_descendant_objective_bank_id", 
            "clear_descendant_objective_bank_id_terms", 
            "supports_descendant_objective_bank_query", 
            "get_descendant_objective_bank_query", 
            "match_any_descendant_objective_bank", 
            "clear_descendant_objective_bank_terms", 
            "get_objective_bank_query_record"
         ], 
         "methods": [
            {
               "name": "match_objective_id", 
               "doc": {
                  "headline": "Sets the objective ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): an objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: an objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_objective_id_terms", 
               "doc": {
                  "headline": "Clears the objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_objective_query", 
               "doc": {
                  "headline": "Gets the query for an objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the objective query", 
               "error_doc": "        raise:  Unimplemented - ``supports_objective_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_objective", 
               "doc": {
                  "headline": "Matches an objective bank that has any objective assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objective banks with\n                any objective, ``false`` to match objective banks with\n                no objectives\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objective banks with any objective, ``false`` to match objective banks with no objectives\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_objective_terms", 
               "doc": {
                  "headline": "Clears the objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_activity_id", 
               "doc": {
                  "headline": "Sets the activity ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    activity_id (osid.id.Id): an activity ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``activity_id`` is ``null``", 
               "sphinx_param_doc": "        :param activity_id: an activity ``Id``\n        :type activity_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``activity_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "activity_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_activity_id_terms", 
               "doc": {
                  "headline": "Clears the activity ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_activity_query", 
               "doc": {
                  "headline": "Tests if a ``ActivityQuery`` is available for querying activities.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an activity query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an activity query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_activity_query", 
               "doc": {
                  "headline": "Gets the query for an activity.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQuery) - the activity query", 
               "error_doc": "        raise:  Unimplemented - ``supports_activity_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity query\n        :rtype: ``osid.learning.ActivityQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_activity_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_activity_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_activity", 
               "doc": {
                  "headline": "Matches an objective bank that has any activity assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objective banks with\n                any activity, ``false`` to match objective banks with no\n                activities\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objective banks with any activity, ``false`` to match objective banks with no activities\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_activity_terms", 
               "doc": {
                  "headline": "Clears the activity terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_objective_bank_id", 
               "doc": {
                  "headline": "Sets the objective bank ``Id`` for this query to match objective banks that have the specified objective bank as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): an objective bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: an objective bank ``Id``\n        :type objective_bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_objective_bank_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor objective bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_objective_bank_query", 
               "doc": {
                  "headline": "Tests if a ``ObjectiveBankQuery`` is available for querying ancestor objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_bank_query", 
               "doc": {
                  "headline": "Gets the query for an objective bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_ancestor_objective_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_objective_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_calndar_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_objective_bank", 
               "doc": {
                  "headline": "Matches an objective bank that has any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objective banks with\n                any ancestor, ``false`` to match root objective banks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objective banks with any ancestor, ``false`` to match root objective banks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_objective_bank_terms", 
               "doc": {
                  "headline": "Clears the ancestor objective bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_objective_bank_id", 
               "doc": {
                  "headline": "Sets the objective bank ``Id`` for this query to match objective banks that have the specified objective bank as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): an objective bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_id: an objective bank ``Id``\n        :type objective_bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_objective_bank_id_terms", 
               "doc": {
                  "headline": "Clears the descendant objective bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_objective_bank_query", 
               "doc": {
                  "headline": "Tests if a ``ObjectiveBankQuery`` is available for querying descendant objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an objective bank query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an objective bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_bank_query", 
               "doc": {
                  "headline": "Gets the query for an objective bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQuery) - the objective bank\n                query", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_descendant_objective_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank query\n        :rtype: ``osid.learning.ObjectiveBankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_objective_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_calndar_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_objective_bank", 
               "doc": {
                  "headline": "Matches an objective bank that has any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match objective banks with\n                any descendant, ``false`` to match leaf objective banks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match objective banks with any descendant, ``false`` to match leaf objective banks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_objective_bank_terms", 
               "doc": {
                  "headline": "Clears the descendant objective bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query_record", 
               "doc": {
                  "headline": "Gets the objective bank query record corresponding to the given ``ObjectiveBank`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankQueryRecord) - the\n                objective bank query record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(objective_bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank query record\n        :rtype: ``osid.learning.records.ObjectiveBankQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankQueryRecord", 
         "shortname": "ObjectiveBankQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveBankQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankQueryInspector", 
         "shortname": "ObjectiveBankQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining objective bank queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_objective_id_terms", 
            "get_objective_terms", 
            "get_activity_id_terms", 
            "get_activity_terms", 
            "get_ancestor_objective_bank_id_terms", 
            "get_ancestor_objective_bank_terms", 
            "get_descendant_objective_bank_id_terms", 
            "get_descendant_objective_bank_terms", 
            "get_objective_bank_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_objective_id_terms", 
               "doc": {
                  "headline": "Gets the objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the objective ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_objective_terms", 
               "doc": {
                  "headline": "Gets the objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the objective\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_activity_id_terms", 
               "doc": {
                  "headline": "Gets the activity ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the activity ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_activity_terms", 
               "doc": {
                  "headline": "Gets the activity query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ActivityQueryInspector) - the activity\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the activity terms\n        :rtype: ``osid.learning.ActivityQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ActivityQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_bank_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor objective bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor objective bank\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor objective bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_objective_bank_terms", 
               "doc": {
                  "headline": "Gets the ancestor objective bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the\n                ancestor objective bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor objective bank terms\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_bank_id_terms", 
               "doc": {
                  "headline": "Gets the descendant objective bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant objective\n                bank ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant objective bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_objective_bank_terms", 
               "doc": {
                  "headline": "Gets the descendant objective bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the\n                descendant objective bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant objective bank terms\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_query_inspector_record", 
               "doc": {
                  "headline": "Gets the objective bank query inspector record corresponding to the given ``ObjectiveBank`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return:\n                (osid.learning.records.ObjectiveBankQueryInspectorRecord\n                ) - the objective bank query inspector record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(objective_bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank query inspector record\n        :rtype: ``osid.learning.records.ObjectiveBankQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankQueryInspectorRecord", 
         "shortname": "ObjectiveBankQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ObjectiveBankQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankForm", 
         "shortname": "ObjectiveBankForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating objective banks.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ObjectiveBankAdminSession``. For each data element that may be\n    set, metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_objective_bank_form_record"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_form_record", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBankFormRecord`` corresponding to the given objective bank record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankFormRecord) - the\n                objective bank form record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(objective_bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank form record\n        :rtype: ``osid.learning.records.ObjectiveBankFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankFormRecord", 
         "shortname": "ObjectiveBankFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ObjectiveBankForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankSearchOrder", 
         "shortname": "ObjectiveBankSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_objective_bank_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_objective_bank_search_order_record", 
               "doc": {
                  "headline": "Gets the objective bank search order record corresponding to the given objective bank record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    objective_bank_record_type (osid.type.Type): an\n                objective bank record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankSearchOrderRecord) -\n                the objective bank search order record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(objective_bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param objective_bank_record_type: an objective bank record type\n        :type objective_bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank search order record\n        :rtype: ``osid.learning.records.ObjectiveBankSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(objective_bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankSearchOrderRecord", 
         "shortname": "ObjectiveBankSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ObjectiveBankSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankSearch", 
         "shortname": "ObjectiveBankSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing objective bank searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_objective_banks", 
            "order_objective_bank_results", 
            "get_objective_bank_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_objective_banks", 
               "doc": {
                  "headline": "Execute this search among the given list of objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_ids (osid.id.IdList): list of objective\n                banks\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective bank_ids`` is ``null``", 
               "sphinx_param_doc": "        :param objective_bank_ids: list of objective banks\n        :type objective_bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective bank_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_objective_bank_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_search_order\n                (osid.learning.ObjectiveBankSearchOrder): objective bank\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_search_order`` is\n                ``null``\n        raise:  Unsupported - ``objective_bank_search_order`` is not of\n                this service", 
               "sphinx_param_doc": "        :param objective_bank_search_order: objective bank search order\n        :type objective_bank_search_order: ``osid.learning.ObjectiveBankSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``objective_bank_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.learning.ObjectiveBankSearchOrder", 
                     "var_name": "objective_bank_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.learning.ObjectiveBankSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_search_record", 
               "doc": {
                  "headline": "Gets the objective bank search record corresponding to the given objective bank search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    objective_bank_search_record_type (osid.type.Type): an\n                objective bank search record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankSearchRecord) - the\n                objective bank search record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_search_record_type(objective\n                bank_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_search_record_type: an objective bank search record type\n        :type objective_bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank search record\n        :rtype: ``osid.learning.records.ObjectiveBankSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(objective bank_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankSearchRecord", 
         "shortname": "ObjectiveBankSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ObjectiveBankSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankSearchResults", 
         "shortname": "ObjectiveBankSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_objective_banks", 
            "get_objective_bank_query_inspector", 
            "get_objective_bank_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_objective_banks", 
               "doc": {
                  "headline": "Gets the objective bank list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankList) - the objective bank\n                list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank list\n        :rtype: ``osid.learning.ObjectiveBankList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_objective_bank_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.learning.ObjectiveBankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_objective_bank_search_results_record", 
               "doc": {
                  "headline": "Gets the objective bank search results record corresponding to the given objective bank search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    objective_bank_search_record_type (osid.type.Type): an\n                objective bank search record type\n", 
               "return_doc": "        return: (osid.learning.records.ObjectiveBankSearchResultsRecord)\n                - the objective bank search results record", 
               "error_doc": "        raise:  NullArgument - ``objective_bank_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_search_record_type(objective\n                bank_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param objective_bank_search_record_type: an objective bank search record type\n        :type objective_bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the objective bank search results record\n        :rtype: ``osid.learning.records.ObjectiveBankSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_bank_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_search_record_type(objective bank_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "objective_bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.learning.records.ObjectiveBankSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.records.ObjectiveBankSearchResultsRecord", 
         "shortname": "ObjectiveBankSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ObjectiveBankSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankReceiver", 
         "shortname": "ObjectiveBankReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The vault receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``ObjectiveBank`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_objective_bank", 
            "new_ancestor_objective_bank", 
            "new_descendant_objective_bank", 
            "changed_objective_bank", 
            "deleted_objective_bank", 
            "deleted_ancestor_objective_bank", 
            "deleted_descendant_objective_bank"
         ], 
         "methods": [
            {
               "name": "new_objective_bank", 
               "doc": {
                  "headline": "The callback for notifications of new objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the new\n                ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the new ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_objective_bank", 
               "doc": {
                  "headline": "The callback for notifications of new objective bank ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new\n                ``ObjectiveBank`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ``ObjectiveBank`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_objective_bank", 
               "doc": {
                  "headline": "The callback for notifications of new objective bank descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                ``ObjectiveBank`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new ``ObjectiveBank`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_objective_bank", 
               "doc": {
                  "headline": "The callback for notification of updated objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                updated ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the updated ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_objective_bank", 
               "doc": {
                  "headline": "The callback for notification of deleted objective banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                deleted ``ObjectiveBank``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the deleted ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_objective_bank", 
               "doc": {
                  "headline": "The callback for notifications of deleted objective bank ancestors.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ``ObjectiveBank`` ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ``ObjectiveBank`` ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_objective_bank", 
               "doc": {
                  "headline": "The callback for notifications of deleted objective bank descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_bank_id (osid.id.Id): the ``Id`` of the\n                ``ObjectiveBank``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the removed\n                ``ObjectiveBank`` descendant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param objective_bank_id: the ``Id`` of the ``ObjectiveBank``\n        :type objective_bank_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the removed ``ObjectiveBank`` descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankList", 
         "shortname": "ObjectiveBankList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ObjectiveBankList`` provides a means for accessing ``ObjectiveBank`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (obl.hasNext()) { ObjectiveBank objectiveBanks =\n    obl.getNextObjectiveBank(); }\n\n    or\n      while (obl.hasNext()) {\n           ObjectiveBank[] objectivBanks = obl.getNextObjectiveBanks(obl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_objective_bank", 
            "get_next_objective_banks"
         ], 
         "methods": [
            {
               "name": "get_next_objective_bank", 
               "doc": {
                  "headline": "Gets the next ``ObjectiveBank`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the next\n                ``ObjectiveBank`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``ObjectiveBank`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ObjectiveBank`` in this list. The ``has_next()`` method should be used to test that a next ``ObjectiveBank`` is available before calling this method.\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_objective_banks", 
               "doc": {
                  "headline": "Gets the next set of ``ObjectiveBank`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ObjectiveBank`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - an array of\n                ``ObjectiveBank`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ObjectiveBank`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ObjectiveBank`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankNode", 
         "shortname": "ObjectiveBankNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``ObjectiveBankHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_objective_bank", 
            "get_parent_objective_bank_nodes", 
            "get_child_objective_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_objective_bank", 
               "doc": {
                  "headline": "Gets the ``ObjectiveBank`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBank) - the objective bank\n                represented by this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the objective bank represented by this node\n        :rtype: ``osid.learning.ObjectiveBank``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBank", 
               "errors": {}
            }, 
            {
               "name": "get_parent_objective_bank_nodes", 
               "doc": {
                  "headline": "Gets the parents of this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNodeList) - the parents of\n                the ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.learning.ObjectiveBankNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_objective_bank_nodes", 
               "doc": {
                  "headline": "Gets the children of this objective bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNodeList) - the children of\n                this objective bank", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this objective bank\n        :rtype: ``osid.learning.ObjectiveBankNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.learning.ObjectiveBankNodeList", 
         "shortname": "ObjectiveBankNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ObjectiveBankNodeList`` provides a means for accessing ``ObjectiveBankNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (obnl.hasNext()) { ObjectiveBankNode node bank =\n    obnl.getNextObjectiveBankNode(); }\n\n    or\n      while (obnl.hasNext()) {\n           ObjectiveBankNode[] nodes = obnl.getNextObjectiveBankNodes(obnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_objective_bank_node", 
            "get_next_objective_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_objective_bank_node", 
               "doc": {
                  "headline": "Gets the next ``ObjectiveBankNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNode) - the next\n                ``ObjectiveBankNode`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``ObjectiveBankNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ObjectiveBankNode`` in this list. The ``has_next()`` method should be used to test that a next ``ObjectiveBankNode`` is available before calling this method.\n        :rtype: ``osid.learning.ObjectiveBankNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveBankNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_objective_bank_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``ObjectiveBankNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ObjectiveBankNode``\n                elements requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.learning.ObjectiveBankNode) - an array of\n                ``ObjectiveBankNode`` elements.The length of the array\n                is less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ObjectiveBankNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ObjectiveBankNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.learning.ObjectiveBankNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.learning.ObjectiveBankNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.learning"
}
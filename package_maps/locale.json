{
   "name": "locale", 
   "version": "3.0.0", 
   "title": "Locale Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may modify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Locale OSID provides the service of localizing applications defining\ninterfaces for string translation, measurement unit conversion, calendar\nconversion, spatial conversion, and currency conversion.\n\nString Translation\n\nThe Locale OSID can access and manage string translations using the\n``TranslationSession`` and ``TranslationAdminSession`` respectively.\nTranslations map a pair of strings with language and script Types. The\ntranslation services provide a simple means for an OSID Consumer to\nlocalize known display strings for an application.\n\nNumeric Formatting\n\nThe ``NumericFormattingSession`` provides the service of converting\nnumbers to display strings and parsing display strings into numbers. The\nformat of the display string is identified by a numeric format ``Type``.\nIt supports the various numeric types defined among OSID Primitives such\nas integers, decimals, and cardinal numbers.\n\nCalendar Formatting\n\nThe ``CalendarFormattingSession`` converts ``DateTime`` and ``Time``\nOSID Primitives to display strings and parses display strings back into\n``DateTimes`` and ``Times``. The display string formats are specified by\na date format ``Type`` and time format ``Type`` respectively. The\ncalendaring and time systems implemented by ``DateTime`` and ``Time``\nare specified by a calendar ``Type`` and time ``Type``. Conversions\namong calendaring systems are performed using the\n``CalendarConversionSession``.\n\nCurrency Formatting\n\nThe ``CurrencyFormattingSession`` converts currency amounts to display\nstrings and parses display strings into currency amounts. The format of\nthe display string is identified by both a currency and a numeric format\n``Type``. Conversions among currencies are performed using the\n``CurrencyConversionSession``.\n\nCoordinate Formatting\n\nThe ``CoordinateFormattingSession`` converts ``Coordinate`` OSID\nPrimitives to display strings and parses display strings back into\n``Coordinates``. The display string formats are specified by a\ncoordinate format ``Type``. The coordinate data is identified by the\ncoordinate record ``Type``. Conversions among calendaring systems are\nperformed using the ``CoordinateConversionSession``.\n\nUnit Conversion\n\nThe ``UnitConversionSession`` converts units of measurement among unit\ntypes. The unit types may represent different units within the same\nsystem of measurement or units among different measurement systems where\na conversion exists.\n\nCurrency Conversion\n\nThe ``CurrencyConversionSession`` converts a currency amount from one\ncurrency system to another where a means for transforming the currency\nvalues exists.\n\nSpatial Unit Conversion\n\nThe ``SpatialUnitConversionSession`` converts a spatial units from one\nspatial system to another where a means for transforming the spatial\nunits exists.\n\nText Format Conversion\n\nThe ``FormatConversionSession`` converts text from one format to\nanother.\n\n\n\nInformational Objects\n\nThe Locale OSID includes a ``CalendarInfo`` and ``TimeInfo`` interfaces\nfor inspecting the details of the respective ``Types`` to assist in\ndisplaying calendars and clocks without knowledge of the specific\nsystem.\n\nThe ``Locale`` interface defines a set of types that together define the\nformatting, language, calendaring, and currency for a locale or culture.\nLocale is referenced in OsidSessions to convey the localization of the\nservice.", 
   "interfaces": [
      {
         "fullname": "osid.locale.LocaleProfile", 
         "shortname": "LocaleProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The locale profile describes the interoperability of locale services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_translation", 
            "supports_translation_admin", 
            "supports_numeric_formatting", 
            "supports_calendar_formatting", 
            "supports_currency_formatting", 
            "supports_coordinate_formatting", 
            "supports_unit_conversion", 
            "supports_currency_conversion", 
            "supports_calendar_conversion", 
            "supports_coordinate_conversion", 
            "supports_spatial_unit_conversion", 
            "supports_format_conversion", 
            "supports_calendar_info", 
            "supports_language_types_for_translation", 
            "get_language_types_for_source", 
            "get_source_language_types", 
            "get_script_types_for_language_type", 
            "supports_numeric_format_types", 
            "get_numeric_format_types", 
            "supports_calendar_types_for_formatting", 
            "get_calendar_types_for_formatting", 
            "get_date_format_types_for_calendar_type", 
            "get_time_types_for_formatting", 
            "get_time_format_types_for_time_type", 
            "supports_currency_types_for_formatting", 
            "get_currency_types_for_formatting", 
            "get_currency_format_types_for_currency_type", 
            "supports_coordinate_types_for_formatting", 
            "get_coordinate_types_for_formatting", 
            "get_coordinate_format_types_for_coordinate_type", 
            "supports_unit_types_for_conversion", 
            "get_unit_types_for_source", 
            "get_source_unit_types", 
            "supports_currency_types_for_conversion", 
            "get_currency_types_for_source", 
            "get_source_currency_types", 
            "supports_calendar_types_for_conversion", 
            "get_calendar_types_for_source", 
            "get_source_calendar_types", 
            "supports_time_types_for_conversion", 
            "get_time_types_for_source", 
            "get_source_time_types", 
            "get_time_types_for_calendar_type", 
            "get_calendar_types_for_time_type", 
            "supports_calendar_time_types", 
            "supports_coordinate_types_for_conversion", 
            "get_coordinate_types_for_source", 
            "get_source_coordinate_types", 
            "supports_spatial_unit_record_types_for_conversion", 
            "get_spatial_unit_record_types_for_source", 
            "get_source_spatial_unit_record_types", 
            "supports_format_types_for_conversion", 
            "get_format_types_for_source", 
            "get_source_format_types"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if visible federation is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_translation", 
               "doc": {
                  "headline": "Tests if translation is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if translation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if translation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_translation_admin", 
               "doc": {
                  "headline": "Tests if translation administration is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if translation administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if translation administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_numeric_formatting", 
               "doc": {
                  "headline": "Tests if numeric formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if numeric formatting is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if numeric formatting is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_calendar_formatting", 
               "doc": {
                  "headline": "Tests if calendar formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if calendar formatting is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if calendar formatting is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_currency_formatting", 
               "doc": {
                  "headline": "Tests if currency formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if currency formatting is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if currency formatting is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_coordinate_formatting", 
               "doc": {
                  "headline": "Tests if coordinate formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if coordinate formatting is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if coordinate formatting is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_unit_conversion", 
               "doc": {
                  "headline": "Tests if unit conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if unit conversion is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if unit conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_currency_conversion", 
               "doc": {
                  "headline": "Tests if currency conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if currency conversion is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if currency conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_calendar_conversion", 
               "doc": {
                  "headline": "Tests if calendar conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if calendar conversion is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if calendar conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_coordinate_conversion", 
               "doc": {
                  "headline": "Tests if coordnate conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if coordinate conversion is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if coordinate conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_spatial_unit_conversion", 
               "doc": {
                  "headline": "Tests if spatial unit conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if spatial unit conversion is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if spatial unit conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_format_conversion", 
               "doc": {
                  "headline": "Tests if format conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if format conversion is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if format conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_calendar_info", 
               "doc": {
                  "headline": "Tests if a calendar informational service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if calendar info is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if calendar info is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_language_types_for_translation", 
               "doc": {
                  "headline": "Tests if a given language translation is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n        arg:    target_language_type (osid.type.Type): the type of the\n                target language\n        arg:    target_script_type (osid.type.Type): the type of the\n                target script\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                translation is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_language_type,\n                source_script_type, target_language_type`` or\n                ``target_script_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n        :param target_language_type: the type of the target language\n        :type target_language_type: ``osid.type.Type``\n        :param target_script_type: the type of the target script\n        :type target_script_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target translation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type, source_script_type, target_language_type`` or ``target_script_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_script_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_language_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target language types for a given source language type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported types for\n                the given source language type", 
               "error_doc": "        raise:  NullArgument - ``source_language_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported types for the given source language type\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_language_types", 
               "doc": {
                  "headline": "Gets all the source language types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported language\n                types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported language types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_script_types_for_language_type", 
               "doc": {
                  "headline": "Gets the list of script types available for a given language type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    language_type (osid.type.Type): the type of the language\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported script\n                types for the given language type", 
               "error_doc": "        raise:  NullArgument - ``language_type`` is ``null``", 
               "sphinx_param_doc": "        :param language_type: the type of the language\n        :type language_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported script types for the given language type\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``language_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "language_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_numeric_format_types", 
               "doc": {
                  "headline": "Tests if a given numeric format type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    numeric_format_type (osid.type.Type): the type of the\n                numeric format\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given numeric format type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``numeric_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param numeric_format_type: the type of the numeric format\n        :type numeric_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given numeric format type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``numeric_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_format_types", 
               "doc": {
                  "headline": "Gets all the numeric format types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported numeric\n                format types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported numeric format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_calendar_types_for_formatting", 
               "doc": {
                  "headline": "Tests if a given calendaring formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    time_type (osid.type.Type): the type of the time system\n        arg:    date_format_type (osid.type.Type): the type of the\n                output date format\n        arg:    time_format_type (osid.type.Type): the type of the\n                output time format\n", 
               "return_doc": "        return: (boolean) - ``true`` if formatting with the given types\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``calendar_type, calendar_format_type,\n                time_type,`` or ``time_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n        :param date_format_type: the type of the output date format\n        :type date_format_type: ``osid.type.Type``\n        :param time_format_type: the type of the output time format\n        :type time_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if formatting with the given types is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type, calendar_format_type, time_type,`` or ``time_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "date_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_types_for_formatting", 
               "doc": {
                  "headline": "Gets all the calendar types for which formats are available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of calendar types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of calendar types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_date_format_types_for_calendar_type", 
               "doc": {
                  "headline": "Gets the list of date format types for a given calendar type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported date format\n                types", 
               "error_doc": "        raise:  NullArgument - ``calendar_type`` is ``null``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported date format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_time_types_for_formatting", 
               "doc": {
                  "headline": "Gets all the time types for which formatting is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of time types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of time types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_time_format_types_for_time_type", 
               "doc": {
                  "headline": "Gets the list of time format types for a given time type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    time_type (osid.type.Type): the type of the time\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported time format\n                types", 
               "error_doc": "        raise:  NullArgument - ``time_type`` is ``null``", 
               "sphinx_param_doc": "        :param time_type: the type of the time\n        :type time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported time format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``time_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_currency_types_for_formatting", 
               "doc": {
                  "headline": "Tests if a given currency formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    currency_type (osid.type.Type): the type of the currency\n        arg:    numeric_format_type (osid.type.Type): the type of the\n                output currency format\n", 
               "return_doc": "        return: (boolean) - ``true`` if formatting with the given types\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``currency_type`` or\n                ``numeric_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param currency_type: the type of the currency\n        :type currency_type: ``osid.type.Type``\n        :param numeric_format_type: the type of the output currency format\n        :type numeric_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if formatting with the given types is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``currency_type`` or ``numeric_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_types_for_formatting", 
               "doc": {
                  "headline": "Gets all the currency types for which formatting is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of currency types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of currency types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_currency_format_types_for_currency_type", 
               "doc": {
                  "headline": "Gets the list of currency format types for a given currency type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    currency_type (osid.type.Type): the type of the currency\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported currency\n                format types", 
               "error_doc": "        raise:  NullArgument - ``currency_type`` is ``null``", 
               "sphinx_param_doc": "        :param currency_type: the type of the currency\n        :type currency_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported currency format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``currency_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "currency_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_coordinate_types_for_formatting", 
               "doc": {
                  "headline": "Tests if a given coordinate formatting is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate_type (osid.type.Type): the type of the\n                coordinate\n        arg:    coordinate_format_type (osid.type.Type): the type of the\n                output coordinate format\n", 
               "return_doc": "        return: (boolean) - ``true`` if formatting with the given types\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``cooridinate_type`` or\n                ``coodinate_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param coordinate_type: the type of the coordinate\n        :type coordinate_type: ``osid.type.Type``\n        :param coordinate_format_type: the type of the output coordinate format\n        :type coordinate_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if formatting with the given types is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``cooridinate_type`` or ``coodinate_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_types_for_formatting", 
               "doc": {
                  "headline": "Gets all the coordinate types for which formatting is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of coordinate types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of coordinate types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_coordinate_format_types_for_coordinate_type", 
               "doc": {
                  "headline": "Gets the list of coordinate format types for a given coordinate type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate_type (osid.type.Type): the type of the\n                coordinate\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported coordinate\n                format types", 
               "error_doc": "        raise:  NullArgument - ``coordinater_type`` is ``null``", 
               "sphinx_param_doc": "        :param coordinate_type: the type of the coordinate\n        :type coordinate_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported coordinate format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinater_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_unit_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given measure conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_unit_type (osid.type.Type): the type of the\n                source measure\n        arg:    target_unit_type (osid.type.Type): the type of the\n                target measure\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_unit_type`` or\n                ``target_unit_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_unit_type: the type of the source measure\n        :type source_unit_type: ``osid.type.Type``\n        :param target_unit_type: the type of the target measure\n        :type target_unit_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_unit_type`` or ``target_unit_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_unit_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_unit_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_unit_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target measure types for a given source measure type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_unit_type (osid.type.Type): the type of the\n                source measure\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported target\n                measure types", 
               "error_doc": "        raise:  NullArgument - ``source_unit_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_unit_type: the type of the source measure\n        :type source_unit_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported target measure types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_unit_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_unit_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_unit_types", 
               "doc": {
                  "headline": "Gets all the source unit types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source unit\n                types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source unit types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_currency_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given currency conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_type (osid.type.Type): the type of the\n                source currency\n        arg:    target_currency_type (osid.type.Type): the type of the\n                target currency\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_currency_type`` or\n                ``target_currency_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_currency_type: the type of the source currency\n        :type source_currency_type: ``osid.type.Type``\n        :param target_currency_type: the type of the target currency\n        :type target_currency_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_currency_type`` or ``target_currency_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_currency_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target currency types for a given source currency type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_type (osid.type.Type): the type of the\n                source currency\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported currency\n                types", 
               "error_doc": "        raise:  NullArgument - ``source_currency_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_currency_type: the type of the source currency\n        :type source_currency_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported currency types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_currency_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_currency_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_currency_types", 
               "doc": {
                  "headline": "Gets the list of source currency types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source\n                currency types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source currency types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_calendar_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given calendar conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_calendar_type (osid.type.Type): the type of the\n                source calendar\n        arg:    target_calendar_type (osid.type.Type): the type of the\n                target calendar\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_calendar_type`` or\n                ``target_calendar_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_calendar_type: the type of the source calendar\n        :type source_calendar_type: ``osid.type.Type``\n        :param target_calendar_type: the type of the target calendar\n        :type target_calendar_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_calendar_type`` or ``target_calendar_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_calendar_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target calendar types for a given source calendar type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_calendar_type (osid.type.Type): the type of the\n                source calendar\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported calendar\n                types", 
               "error_doc": "        raise:  NullArgument - ``source_calendar_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_calendar_type: the type of the source calendar\n        :type source_calendar_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported calendar types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_calendar_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_calendar_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_calendar_types", 
               "doc": {
                  "headline": "Gets the list of source calendar types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source\n                calendar types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source calendar types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_time_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given time conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_time_type (osid.type.Type): the type of the\n                source time\n        arg:    target_time_type (osid.type.Type): the type of the\n                target time\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_time_type`` or\n                ``target_time_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_time_type: the type of the source time\n        :type source_time_type: ``osid.type.Type``\n        :param target_time_type: the type of the target time\n        :type target_time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_time_type`` or ``target_time_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_time_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target time types for a given source time type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_time_type (osid.type.Type): the type of the\n                source time\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported time types", 
               "error_doc": "        raise:  NullArgument - ``source_time_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_time_type: the type of the source time\n        :type source_time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported time types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_time_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_time_types", 
               "doc": {
                  "headline": "Gets the list of source time types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source time\n                types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source time types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "get_time_types_for_calendar_type", 
               "doc": {
                  "headline": "Gets the list of time types supported for a given calendar type where they are both used in a ``DateTime``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported time types", 
               "error_doc": "        raise:  NullArgument - ``calendar_type`` is ``null``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported time types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_types_for_time_type", 
               "doc": {
                  "headline": "Gets the list of calendar types supported for a given time type where they are both used in a ``DateTime``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    time_type (osid.type.Type): the type of the time system\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported calendar\n                types", 
               "error_doc": "        raise:  NullArgument - ``time_type`` is ``null``", 
               "sphinx_param_doc": "        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported calendar types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``time_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_calendar_time_types", 
               "doc": {
                  "headline": "Tests if a given calendar and time type are used together in a ``DateTime``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    time_type (osid.type.Type): the type of the time system\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given calendar and time\n                types are supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``calendar_type`` or ``time_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given calendar and time types are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type`` or ``time_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_coordinate_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given coordinate type for conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate_type (osid.type.Type): the type of the\n                source coordinate\n        arg:    target_coordinate_type (osid.type.Type): the type of the\n                target coordinate\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_coordinate_type`` or\n                ``target_coordinate_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_coordinate_type: the type of the source coordinate\n        :type source_coordinate_type: ``osid.type.Type``\n        :param target_coordinate_type: the type of the target coordinate\n        :type target_coordinate_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_coordinate_type`` or ``target_coordinate_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_coordinate_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target coordinate types for a given source coordinate type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate_type (osid.type.Type): the type of the\n                source coordinate\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported target\n                coordinate types", 
               "error_doc": "        raise:  NullArgument - ``source_coordinate_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_coordinate_type: the type of the source coordinate\n        :type source_coordinate_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported target coordinate types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_coordinate_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_coordinate_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_coordinate_types", 
               "doc": {
                  "headline": "Gets the list of source coordinate types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source\n                coordinate types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source coordinate types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_spatial_unit_record_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given spatial unit conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit_record_type (osid.type.Type): the\n                type of the source spatial unit record\n        arg:    target_spatial_unit_record_type (osid.type.Type): the\n                type of the target spatial unit record\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_spatial_unit_record_type`` or\n                ``target_spatial_unit_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_spatial_unit_record_type: the type of the source spatial unit record\n        :type source_spatial_unit_record_type: ``osid.type.Type``\n        :param target_spatial_unit_record_type: the type of the target spatial unit record\n        :type target_spatial_unit_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_spatial_unit_record_type`` or ``target_spatial_unit_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_spatial_unit_record_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_spatial_unit_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_record_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target spatial unit types for a given source spatial unit type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit_record_type (osid.type.Type): the\n                type of the source spatial unit record\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported target\n                spatial unit record types", 
               "error_doc": "        raise:  NullArgument - ``source_spatial_unit_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param source_spatial_unit_record_type: the type of the source spatial unit record\n        :type source_spatial_unit_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported target spatial unit record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_spatial_unit_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_spatial_unit_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_spatial_unit_record_types", 
               "doc": {
                  "headline": "Gets the list of source spatial unit record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source\n                spatial unit record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source spatial unit record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_format_types_for_conversion", 
               "doc": {
                  "headline": "Tests if a given format conversion is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_format_type (osid.type.Type): the type of the\n                source format\n        arg:    target_format_type (osid.type.Type): the type of the\n                target format\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given source and target\n                conversion is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``source_format_type`` or\n                ``target_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_format_type: the type of the source format\n        :type source_format_type: ``osid.type.Type``\n        :param target_format_type: the type of the target format\n        :type target_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given source and target conversion is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_format_type`` or ``target_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_format_types_for_source", 
               "doc": {
                  "headline": "Gets the list of target format types for a given source spatial unit type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_format_type (osid.type.Type): the type of the\n                source format\n", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported target\n                format types", 
               "error_doc": "        raise:  NullArgument - ``source_format_type`` is ``null``", 
               "sphinx_param_doc": "        :param source_format_type: the type of the source format\n        :type source_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the list of supported target format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_format_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.type.TypeList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_source_format_types", 
               "doc": {
                  "headline": "Gets the list of source format types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - the list of supported source\n                format types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the list of supported source format types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.locale.LocaleManager", 
         "shortname": "LocaleManager", 
         "category": "managers", 
         "doc": {
            "headline": "The locale manager provides access to locale sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``TranslationSession:`` a session translate strings\n      * ``TranslationAdminSession: a`` session to update the string\n        translations for a locale\n      * ``NumericFormattingSession:`` a session for formatting and\n        parsing numbers\n      * ``CalendarFormattingSession:`` a session for formatting and\n        parsing dates and times\n      * ``CurrencyFormattingSession`` : a session for formatting and\n        parsing currency amounts\n      * ``CoordinateFormattingSession:`` a session for formatting and\n        parsing coordinates\n      * ``UnitConversionSession:`` a session to convert measurement\n        units ``None``\n      * ``CurrencyConversionSession:`` a session to convert currency\n      * ``CalendarConversionSession:`` a session to convert dates across\n        calendars\n      * ``CoordinateConversionSession:`` a session to convert coordinate\n        systems\n      * ``SpatialUnitConversionSession:`` a session to convert spatial\n        units\n      * ``FormatConversionSession:`` a session to convert text formats\n      * ``CalendarInfoSession:`` a session for examining calendaring and\n        time systems\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.locale.LocaleProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "LocaleProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "locale"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "locale", 
               "name": "LocaleProfile"
            }
         ], 
         "method_names": [
            "get_translation_session", 
            "get_translation_session_for_type", 
            "get_translation_admin_session", 
            "get_translation_admin_session_for_type", 
            "get_numeric_formatting_session", 
            "get_numeric_formatting_session_for_type", 
            "get_calendar_formatting_session", 
            "get_calendar_formatting_session_for_type", 
            "get_currency_formatting_session", 
            "get_currency_formatting_session_for_type", 
            "get_coordinate_formatting_session", 
            "get_coordinate_formatting_session_for_type", 
            "get_unit_conversion_session", 
            "get_currency_conversion_session", 
            "get_currency_conversion_session_for_type", 
            "get_calendar_conversion_session", 
            "get_calendar_conversion_session_for_type", 
            "get_coordinate_conversion_session", 
            "get_coordinate_conversion_session_for_type", 
            "get_spatial_unit_conversion_session", 
            "get_spatial_unit_conversion_session_for_type", 
            "get_format_conversion_session", 
            "get_format_conversion_session_for_type", 
            "get_calendar_info_session", 
            "get_calendar_info_session_for_type"
         ], 
         "methods": [
            {
               "name": "get_translation_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the language translation service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.TranslationSession) - a\n                ``TranslationSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``TranslationSession``\n        :rtype: ``osid.locale.TranslationSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.TranslationSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the language translation service and the given language and script types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n        arg:    target_language_type (osid.type.Type): the type of the\n                target language\n        arg:    target_script_type (osid.type.Type): the type of the\n                target script\n", 
               "return_doc": "        return: (osid.locale.TranslationSession) - a\n                ``TranslationSession``", 
               "error_doc": "        raise:  NullArgument - ``source_language_type,\n                source_script_type, target_language_type`` or\n                ``target_script_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_language_types_for_translation(source_languag\n                e_type, source_script_type, target_language_type,\n                target_script_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n        :param target_language_type: the type of the target language\n        :type target_language_type: ``osid.type.Type``\n        :param target_script_type: the type of the target script\n        :type target_script_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationSession``\n        :rtype: ``osid.locale.TranslationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type, source_script_type, target_language_type`` or ``target_script_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_language_types_for_translation(source_language_type, source_script_type, target_language_type, target_script_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_script_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.TranslationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_admin_session", 
               "doc": {
                  "headline": "Gets a language translation administration service for updating a locale dictionary.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.TranslationAdminSession) - a\n                ``TranslationAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``TranslationAdminSession``\n        :rtype: ``osid.locale.TranslationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.TranslationAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_admin_session_for_type", 
               "doc": {
                  "headline": "Gets a language trabslation administration service for updating a locale dictionary using the given language and script types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n        arg:    target_language_type (osid.type.Type): the type of the\n                target language\n        arg:    target_script_type (osid.type.Type): the type of the\n                target script\n", 
               "return_doc": "        return: (osid.locale.TranslationAdminSession) - a\n                ``TranslationAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``source_language_type,\n                source_script_type, target_language_type`` or\n                ``target_script_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation_admin()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_language_types_for_translation(source_languag\n                e_type, source_script_type, target_language_type,\n                target_script_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n        :param target_language_type: the type of the target language\n        :type target_language_type: ``osid.type.Type``\n        :param target_script_type: the type of the target script\n        :type target_script_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationAdminSession``\n        :rtype: ``osid.locale.TranslationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type, source_script_type, target_language_type`` or ``target_script_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation_admin()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_language_types_for_translation(source_language_type, source_script_type, target_language_type, target_script_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_script_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.TranslationAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the numeric formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.NumericFormattingSession) - a\n                ``NumericFormattingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_numeric_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``NumericFormattingSession``\n        :rtype: ``osid.locale.NumericFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_numeric_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_numeric_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.NumericFormattingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the numeric formatting service and the given numeric format type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    numeric_format_type (osid.type.Type): the type of the\n                numeric format\n", 
               "return_doc": "        return: (osid.locale.NumericFormattingSession) - a\n                ``NumericFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``numeric_format_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_numeric_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_numeric_format_type(numeric_format_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param numeric_format_type: the type of the numeric format\n        :type numeric_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``NumericFormattingSession``\n        :rtype: ``osid.locale.NumericFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``numeric_format_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_numeric_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_numeric_format_type(numeric_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_numeric_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.NumericFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarFormattingSession) - a\n                ``CalendarFormattingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CalendarFormattingSession``\n        :rtype: ``osid.locale.CalendarFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarFormattingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar formatting service and the given calendar and time types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    calendar_format_type (osid.type.Type): the type of the\n                calendar format\n        arg:    time_type (osid.type.Type): the type of the time system\n        arg:    time_format_type (osid.type.Type): the type of the time\n                format\n", 
               "return_doc": "        return: (osid.locale.CalendarFormattingSession) - a\n                ``CalendarFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``calendar_type, calendar_format_type,\n                time_type`` or ``time_format_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_types_for_formattinge(calendar_type,\n                calendar_format_type, time_type, time_format_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param calendar_format_type: the type of the calendar format\n        :type calendar_format_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n        :param time_format_type: the type of the time format\n        :type time_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarFormattingSession``\n        :rtype: ``osid.locale.CalendarFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type, calendar_format_type, time_type`` or ``time_format_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_types_for_formattinge(calendar_type, calendar_format_type, time_type, time_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CalendarFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CurrencyFormattingSession) - a\n                ``CurrencyFormattingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CurrencyFormattingSession``\n        :rtype: ``osid.locale.CurrencyFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CurrencyFormattingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency formatting service and the given currency and numeric format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    currency_type (osid.type.Type): the type of the currency\n        arg:    numeric_format_type (osid.type.Type): the type of the\n                numeric format\n", 
               "return_doc": "        return: (osid.locale.CurrencyFormattingSession) - a\n                ``CurrencyFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``currency_type`` or\n                ``numeric_format_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_currency_types_for_fomatting(currency_type,\n                numeric_format_type)`` is ``false``", 
               "sphinx_param_doc": "        :param currency_type: the type of the currency\n        :type currency_type: ``osid.type.Type``\n        :param numeric_format_type: the type of the numeric format\n        :type numeric_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyFormattingSession``\n        :rtype: ``osid.locale.CurrencyFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``currency_type`` or ``numeric_format_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_currency_types_for_fomatting(currency_type, numeric_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CurrencyFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CoordinateFormattingSession) - a\n                ``CoordinateFormattingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CoordinateFormattingSession``\n        :rtype: ``osid.locale.CoordinateFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CoordinateFormattingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate formatting service and the given coordinate and format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate_type (osid.type.Type): the type of the\n                coordinate\n        arg:    coordinate_format_type (osid.type.Type): the type of the\n                coordinate format\n", 
               "return_doc": "        return: (osid.locale.CoordinateFormattingSession) - a\n                ``CoordinateFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``coordinate_type`` or\n                ``coordinate_format_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_coordinate_types_for_fomatting(coordinate_typ\n                e, coordinate_format_type)`` is ``false``", 
               "sphinx_param_doc": "        :param coordinate_type: the type of the coordinate\n        :type coordinate_type: ``osid.type.Type``\n        :param coordinate_format_type: the type of the coordinate format\n        :type coordinate_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateFormattingSession``\n        :rtype: ``osid.locale.CoordinateFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinate_type`` or ``coordinate_format_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_coordinate_types_for_fomatting(coordinate_type, coordinate_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CoordinateFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_unit_conversion_session", 
               "doc": {
                  "headline": "Gets a unit conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.UnitConversionSession) - a\n                ``UnitConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_unit_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``UnitConversionSession``\n        :rtype: ``osid.locale.UnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_unit_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_unit_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.UnitConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_conversion_session", 
               "doc": {
                  "headline": "Gets a currency conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CurrencyConversionSession) - a\n                ``CurrencyConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CurrencyConversionSession``\n        :rtype: ``osid.locale.CurrencyConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CurrencyConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency conversion service and the given currency types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_type (osid.type.Type): the type of the\n                source currency\n        arg:    target_currency_type (osid.type.Type): the type of the\n                target currency\n", 
               "return_doc": "        return: (osid.locale.CurrencyConversionSession) - a\n                ``CurrencyConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_currency_type`` or\n                ``target_currency_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_currency_types_for_conversion(source_currency\n                _type, target_currency_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_currency_type: the type of the source currency\n        :type source_currency_type: ``osid.type.Type``\n        :param target_currency_type: the type of the target currency\n        :type target_currency_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyConversionSession``\n        :rtype: ``osid.locale.CurrencyConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_currency_type`` or ``target_currency_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_currency_types_for_conversion(source_currency_type, target_currency_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_currency_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CurrencyConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_conversion_session", 
               "doc": {
                  "headline": "Gets a calendar conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarConversionSession) - a\n                ``CalendarConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CalendarConversionSession``\n        :rtype: ``osid.locale.CalendarConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar conversion service and the given calendar types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_calendar_type (osid.type.Type): the type of the\n                source calendar\n        arg:    source_time_type (osid.type.Type): the type of the\n                source time\n        arg:    target_calendar_type (osid.type.Type): the type of the\n                target calendar\n        arg:    target_time_type (osid.type.Type): the type of the\n                target time\n", 
               "return_doc": "        return: (osid.locale.CalendarConversionSession) - a\n                ``CalendarConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_calendar_type,\n                source_time_type,``  ``target_calendar_type`` or\n                ``target_time_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_types_for_conversion(source_calendar\n                _type, target_calendar_type)`` or\n                ``supports_time_types_for_conversion(source_time_type,\n                target_time_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_calendar_type: the type of the source calendar\n        :type source_calendar_type: ``osid.type.Type``\n        :param source_time_type: the type of the source time\n        :type source_time_type: ``osid.type.Type``\n        :param target_calendar_type: the type of the target calendar\n        :type target_calendar_type: ``osid.type.Type``\n        :param target_time_type: the type of the target time\n        :type target_time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarConversionSession``\n        :rtype: ``osid.locale.CalendarConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_calendar_type, source_time_type,``  ``target_calendar_type`` or ``target_time_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_types_for_conversion(source_calendar_type, target_calendar_type)`` or ``supports_time_types_for_conversion(source_time_type, target_time_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CalendarConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_conversion_session", 
               "doc": {
                  "headline": "Gets a coordinate conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CoordinateConversionSession) - a\n                ``CoordinateConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CoordinateConversionSession``\n        :rtype: ``osid.locale.CoordinateConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CoordinateConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate conversion service and the given coordinate types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate_type (osid.type.Type): the type of the\n                source coordinate\n        arg:    target_coordinate_type (osid.type.Type): the type of the\n                target coordinate\n", 
               "return_doc": "        return: (osid.locale.CoordinateConversionSession) - a\n                ``CoordinateConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_coordinate_type`` or\n                ``target_coordinate_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported - ``supports_coordinate_record_types_for_con\n                version(source_coordinate_type ,\n                target_coordinate_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_coordinate_type: the type of the source coordinate\n        :type source_coordinate_type: ``osid.type.Type``\n        :param target_coordinate_type: the type of the target coordinate\n        :type target_coordinate_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateConversionSession``\n        :rtype: ``osid.locale.CoordinateConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_coordinate_type`` or ``target_coordinate_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_coordinate_record_types_for_conversion(source_coordinate_type, target_coordinate_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_coordinate_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CoordinateConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_conversion_session", 
               "doc": {
                  "headline": "Gets a spatial unit conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.SpatialUnitConversionSession) - a\n                ``SpatialUnitConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_spatial_unit_conversion()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``SpatialUnitConversionSession``\n        :rtype: ``osid.locale.SpatialUnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_spatial_unit_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_spatial_unit_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.SpatialUnitConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the spatial unit conversion service and the given spatial unit record types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit_record_type (osid.type.Type): the\n                type of the source spatial unit record\n        arg:    target_spatial_unit_record_type (osid.type.Type): the\n                type of the target spatial unit record\n", 
               "return_doc": "        return: (osid.locale.SpatialUnitConversionSession) - a\n                ``SpatialUnitConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_spatial_unit_record_type`` or\n                ``target_spatial_unit_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_spatial_unit_conversion()``\n                or ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported - ``supports_spatial_unit_record_types_for_c\n                onversion(source_spatial_unit_ record_type,\n                target_spatial_unit_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_spatial_unit_record_type: the type of the source spatial unit record\n        :type source_spatial_unit_record_type: ``osid.type.Type``\n        :param target_spatial_unit_record_type: the type of the target spatial unit record\n        :type target_spatial_unit_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``SpatialUnitConversionSession``\n        :rtype: ``osid.locale.SpatialUnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_spatial_unit_record_type`` or ``target_spatial_unit_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_spatial_unit_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_spatial_unit_record_types_for_conversion(source_spatial_unit_record_type, target_spatial_unit_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_spatial_unit_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_spatial_unit_record_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_spatial_unit_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.SpatialUnitConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_format_conversion_session", 
               "doc": {
                  "headline": "Gets a text format conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.FormatConversionSession) - a\n                ``FormatConversionSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_format_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FormatConversionSession``\n        :rtype: ``osid.locale.FormatConversionSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_format_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_format_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.FormatConversionSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_format_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the text format conversion service and the given format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_format_type (osid.type.Type): the type of the\n                text format\n        arg:    target_format_type (osid.type.Type): the type of the\n                text format\n", 
               "return_doc": "        return: (osid.locale.FormatConversionSession) - a\n                ``FormatConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_format_type`` or\n                ``target_format_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_format_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_format_types_for_conversion(source_format_typ\n                e, target_format_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_format_type: the type of the text format\n        :type source_format_type: ``osid.type.Type``\n        :param target_format_type: the type of the text format\n        :type target_format_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``FormatConversionSession``\n        :rtype: ``osid.locale.FormatConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_format_type`` or ``target_format_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_format_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_format_types_for_conversion(source_format_type, target_format_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_format_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_format_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.FormatConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_info_session", 
               "doc": {
                  "headline": "Gets a calendar informational session session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarInfoSession) - a\n                ``CalendarInfoSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_info()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``CalendarInfoSession``\n        :rtype: ``osid.locale.CalendarInfoSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_info()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_info()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarInfoSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_info_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar informational service and the given calendar and time types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    time_type (osid.type.Type): the type of the time system\n", 
               "return_doc": "        return: (osid.locale.CalendarInfoSession) - a\n                ``CalendarInfoSession``", 
               "error_doc": "        raise:  NullArgument - ``calendar_type`` or ``time_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_type()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_time_types(calendar_type,\n                time_type)`` is ``false``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarInfoSession``\n        :rtype: ``osid.locale.CalendarInfoSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type`` or ``time_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_type()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_time_types(calendar_type, time_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_info()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.locale.CalendarInfoSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.LocaleProxyManager", 
         "shortname": "LocaleProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The locale manager provides access to locale sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy`` for\n    passing information from server environments. The sessions included\n    in this manager are:\n\n      * ``TranslationSession:`` a session translate strings\n      * ``TranslationAdminSession: a`` session to update the string\n        translations for a locale\n      * ``NumericFormattingSession:`` a session for formatting and\n        parsing numbers\n      * ``CalendarFormattingSession:`` a session for formatting and\n        parsing dates and times\n      * ``CurrencyFormattingSession`` : a session for formatting and\n        parsing currency amounts\n      * ``CoordinateFormattingSession:`` a session for formatting and\n        parsing coordinates\n      * ``UnitConversionSession:`` a session to convert measurement\n        units ``None``\n      * ``CurrencyConversionSession:`` a session to convert currency\n      * ``CalendarConversionSession:`` a session to convert dates across\n        calendars\n      * ``CoordinateConversionSession:`` a session to convert coordinate\n        systems\n      * ``SpatialUnitConversionSession:`` a session to convert spatial\n        units\n      * ``FormatConversionSession:`` a session to convert text formats\n      * ``CalendarInfoSession:`` a session for examining calendaring and\n        time systems\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.locale.LocaleProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "LocaleProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "locale"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "locale", 
               "name": "LocaleProfile"
            }
         ], 
         "method_names": [
            "get_translation_session", 
            "get_translation_session_for_type", 
            "get_translation_admin_session", 
            "get_translation_admin_session_for_type", 
            "get_numeric_formatting_session", 
            "get_numeric_formatting_session_for_type", 
            "get_calendar_formatting_session", 
            "get_calendar_formatting_session_for_type", 
            "get_currency_formatting_session", 
            "get_currency_formatting_session_for_type", 
            "get_coordinate_formatting_session", 
            "get_coordinate_formatting_session_for_type", 
            "get_unit_conversion_session", 
            "get_currency_conversion_session", 
            "get_currency_conversion_session_for_type", 
            "get_calendar_conversion_session", 
            "get_calendar_conversion_session_for_type", 
            "get_coordinate_conversion_session", 
            "get_coordinate_conversion_session_for_type", 
            "get_spatial_unit_conversion_session", 
            "get_spatial_unit_conversion_session_for_type", 
            "get_format_conversion_session", 
            "get_format_conversion_session_for_type", 
            "get_calendar_info_session", 
            "get_calendar_info_session_for_type"
         ], 
         "methods": [
            {
               "name": "get_translation_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the language translation service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.TranslationSession) - a\n                ``TranslationSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationSession``\n        :rtype: ``osid.locale.TranslationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.TranslationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the language translation service and the given language and script types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n        arg:    target_language_type (osid.type.Type): the type of the\n                target language\n        arg:    target_script_type (osid.type.Type): the type of the\n                target script\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.TranslationSession) - a\n                ``TranslationSession``", 
               "error_doc": "        raise:  NullArgument - ``source_language_type,\n                source_script_type, target_language_type,\n                target_script_type`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_language_types_for_translation(source_languag\n                e_type, source_script_type, target_language_type,\n                target_script_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n        :param target_language_type: the type of the target language\n        :type target_language_type: ``osid.type.Type``\n        :param target_script_type: the type of the target script\n        :type target_script_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationSession``\n        :rtype: ``osid.locale.TranslationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type, source_script_type, target_language_type, target_script_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_language_types_for_translation(source_language_type, source_script_type, target_language_type, target_script_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.TranslationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_admin_session", 
               "doc": {
                  "headline": "Gets a language translation administration service for updating a locale dictionary.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.TranslationAdminSession) - a\n                ``TranslationAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationAdminSession``\n        :rtype: ``osid.locale.TranslationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.TranslationAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_translation_admin_session_for_type", 
               "doc": {
                  "headline": "Gets a language trabslation administration service for updating a locale dictionary using the given language and script types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_language_type (osid.type.Type): the type of the\n                source language\n        arg:    source_script_type (osid.type.Type): the type of the\n                source script\n        arg:    target_language_type (osid.type.Type): the type of the\n                target language\n        arg:    target_script_type (osid.type.Type): the type of the\n                target script\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.TranslationAdminSession) - a\n                ``TranslationAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``source_language_type,\n                source_script_type, target_language_type,\n                target_script_type`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_translation_admin()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_language_types_for_translation(source_languag\n                e_type, source_script_type, target_language_type,\n                target_script_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_language_type: the type of the source language\n        :type source_language_type: ``osid.type.Type``\n        :param source_script_type: the type of the source script\n        :type source_script_type: ``osid.type.Type``\n        :param target_language_type: the type of the target language\n        :type target_language_type: ``osid.type.Type``\n        :param target_script_type: the type of the target script\n        :type target_script_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``TranslationAdminSession``\n        :rtype: ``osid.locale.TranslationAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_language_type, source_script_type, target_language_type, target_script_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_translation_admin()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_language_types_for_translation(source_language_type, source_script_type, target_language_type, target_script_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_translation_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_language_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_script_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.TranslationAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the numeric formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.NumericFormattingSession) - a\n                ``NumericFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_numeric_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``NumericFormattingSession``\n        :rtype: ``osid.locale.NumericFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_numeric_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_numeric_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.NumericFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_numeric_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the numeric formatting service and the given numeric format type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    numeric_format_type (osid.type.Type): the type of the\n                numeric format\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.NumericFormattingSession) - a\n                ``NumericFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``numeric_format_type`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_numeric_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_numeric_format_type(numeric_format_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param numeric_format_type: the type of the numeric format\n        :type numeric_format_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``NumericFormattingSession``\n        :rtype: ``osid.locale.NumericFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``numeric_format_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_numeric_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_numeric_format_type(numeric_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_numeric_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.NumericFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarFormattingSession) - a\n                ``CalendarFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarFormattingSession``\n        :rtype: ``osid.locale.CalendarFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar formatting service and the given calendar and time types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    calendar_format_type (osid.type.Type): the type of the\n                calendar format\n        arg:    time_type (osid.type.Type): the type of the time system\n        arg:    time_format_type (osid.type.Type): the type of the time\n                format\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarFormattingSession) - a\n                ``CalendarFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``calendar_type, calendar_format_type,\n                time_typ, time_format_type`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_types_for_formattinge(calendar_type,\n                calendar_format_type, time_type, time_format_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param calendar_format_type: the type of the calendar format\n        :type calendar_format_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n        :param time_format_type: the type of the time format\n        :type time_format_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarFormattingSession``\n        :rtype: ``osid.locale.CalendarFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type, calendar_format_type, time_typ, time_format_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_types_for_formattinge(calendar_type, calendar_format_type, time_type, time_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CurrencyFormattingSession) - a\n                ``CurrencyFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyFormattingSession``\n        :rtype: ``osid.locale.CurrencyFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CurrencyFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency formatting service and the given currency and numeric format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    currency_type (osid.type.Type): the type of the currency\n        arg:    numeric_format_type (osid.type.Type): the type of the\n                numeric format\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CurrencyFormattingSession) - a\n                ``CurrencyFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``currency_type, numeric_format_type`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_currency_types_for_fomatting(currency_type,\n                numeric_format_type)`` is ``false``", 
               "sphinx_param_doc": "        :param currency_type: the type of the currency\n        :type currency_type: ``osid.type.Type``\n        :param numeric_format_type: the type of the numeric format\n        :type numeric_format_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyFormattingSession``\n        :rtype: ``osid.locale.CurrencyFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``currency_type, numeric_format_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_currency_types_for_fomatting(currency_type, numeric_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "numeric_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CurrencyFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_formatting_session", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate formatting service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CoordinateFormattingSession) - a\n                ``CoordinateFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_formatting()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateFormattingSession``\n        :rtype: ``osid.locale.CoordinateFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_formatting()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_formatting()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CoordinateFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_formatting_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate formatting service and the given coordinate and format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate_type (osid.type.Type): the type of the\n                coordinate\n        arg:    coordinate_format_type (osid.type.Type): the type of the\n                coordinate format\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CoordinateFormattingSession) - a\n                ``CoordinateFormattingSession``", 
               "error_doc": "        raise:  NullArgument - ``coordinate_type,\n                coordinate_format_type,`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_formatting()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_coordinate_types_for_fomatting(coordinate_typ\n                e, coordinate_format_type)`` is ``false``", 
               "sphinx_param_doc": "        :param coordinate_type: the type of the coordinate\n        :type coordinate_type: ``osid.type.Type``\n        :param coordinate_format_type: the type of the coordinate format\n        :type coordinate_format_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateFormattingSession``\n        :rtype: ``osid.locale.CoordinateFormattingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``coordinate_type, coordinate_format_type,`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_formatting()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_coordinate_types_for_fomatting(coordinate_type, coordinate_format_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_formatting()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "coordinate_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CoordinateFormattingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_unit_conversion_session", 
               "doc": {
                  "headline": "Gets a unit conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.UnitConversionSession) - a\n                ``UnitConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_unit_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``UnitConversionSession``\n        :rtype: ``osid.locale.UnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_unit_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_unit_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.UnitConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_conversion_session", 
               "doc": {
                  "headline": "Gets a currency conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CurrencyConversionSession) - a\n                ``CurrencyConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyConversionSession``\n        :rtype: ``osid.locale.CurrencyConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CurrencyConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_currency_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the currency conversion service and the given currency types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_type (osid.type.Type): the type of the\n                source currency\n        arg:    target_currency_type (osid.type.Type): the type of the\n                target currency\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CurrencyConversionSession) - a\n                ``CurrencyConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_currency_type,\n                target_currency_type`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_currency_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_currency_types_for_conversion(source_currency\n                _type, target_currency_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_currency_type: the type of the source currency\n        :type source_currency_type: ``osid.type.Type``\n        :param target_currency_type: the type of the target currency\n        :type target_currency_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CurrencyConversionSession``\n        :rtype: ``osid.locale.CurrencyConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_currency_type, target_currency_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_currency_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_currency_types_for_conversion(source_currency_type, target_currency_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_currency_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_currency_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CurrencyConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_conversion_session", 
               "doc": {
                  "headline": "Gets a calendar conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarConversionSession) - a\n                ``CalendarConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarConversionSession``\n        :rtype: ``osid.locale.CalendarConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar conversion service and the given calendar types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_calendar_type (osid.type.Type): the type of the\n                source calendar\n        arg:    source_time_type (osid.type.Type): the type of the\n                source time\n        arg:    target_calendar_type (osid.type.Type): the type of the\n                target calendar\n        arg:    target_time_type (osid.type.Type): the type of the\n                target time\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarConversionSession) - a\n                ``CalendarConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_calendar_type, source_time_type,\n                target_calendar_type, target_time_type`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_types_for_conversion(source_calendar\n                _type, target_calendar_type)`` or\n                ``supports_time_types_for_conversion(source_time_type,\n                target_time_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_calendar_type: the type of the source calendar\n        :type source_calendar_type: ``osid.type.Type``\n        :param source_time_type: the type of the source time\n        :type source_time_type: ``osid.type.Type``\n        :param target_calendar_type: the type of the target calendar\n        :type target_calendar_type: ``osid.type.Type``\n        :param target_time_type: the type of the target time\n        :type target_time_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarConversionSession``\n        :rtype: ``osid.locale.CalendarConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_calendar_type, source_time_type, target_calendar_type, target_time_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_types_for_conversion(source_calendar_type, target_calendar_type)`` or ``supports_time_types_for_conversion(source_time_type, target_time_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_conversion_session", 
               "doc": {
                  "headline": "Gets a coordinate conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CoordinateConversionSession) - a\n                ``CoordinateConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateConversionSession``\n        :rtype: ``osid.locale.CoordinateConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CoordinateConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_coordinate_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the coordinate conversion service and the given coordinate types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate_type (osid.type.Type): the type of the\n                source coordinate\n        arg:    target_coordinate_type (osid.type.Type): the type of the\n                target coordinate\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CoordinateConversionSession) - a\n                ``CoordinateConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_coordinate_type,``\n                ``target_coordinate_type,`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_coordinate_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported - ``supports_coordinate_record_types_for_con\n                version(source_coordinate_type ,\n                target_coordinate_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_coordinate_type: the type of the source coordinate\n        :type source_coordinate_type: ``osid.type.Type``\n        :param target_coordinate_type: the type of the target coordinate\n        :type target_coordinate_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CoordinateConversionSession``\n        :rtype: ``osid.locale.CoordinateConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_coordinate_type,``  ``target_coordinate_type,`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_coordinate_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_coordinate_record_types_for_conversion(source_coordinate_type, target_coordinate_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_coordinate_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_coordinate_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CoordinateConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_conversion_session", 
               "doc": {
                  "headline": "Gets a spatial unit conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.SpatialUnitConversionSession) - a\n                ``SpatialUnitConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_spatial_unit_conversion()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SpatialUnitConversionSession``\n        :rtype: ``osid.locale.SpatialUnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_spatial_unit_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_spatial_unit_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.SpatialUnitConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_spatial_unit_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the spatial unit conversion service and the given spatial unit record types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit_record_type (osid.type.Type): the\n                type of the source spatial unit record\n        arg:    target_spatial_unit_record_type (osid.type.Type): the\n                type of the target spatial unit record\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.SpatialUnitConversionSession) - a\n                ``SpatialUnitConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_spatial_unit_record_type,``\n                ``target_spatial_unit_record_type or`` proxy is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_spatial_unit_conversion()``\n                or ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported - ``supports_spatial_unit_record_types_for_c\n                onversion(source_spatial_unit_ record_type,\n                target_spatial_unit_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_spatial_unit_record_type: the type of the source spatial unit record\n        :type source_spatial_unit_record_type: ``osid.type.Type``\n        :param target_spatial_unit_record_type: the type of the target spatial unit record\n        :type target_spatial_unit_record_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``SpatialUnitConversionSession``\n        :rtype: ``osid.locale.SpatialUnitConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_spatial_unit_record_type,``  ``target_spatial_unit_record_type or`` proxy is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_spatial_unit_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_spatial_unit_record_types_for_conversion(source_spatial_unit_record_type, target_spatial_unit_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_spatial_unit_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_spatial_unit_record_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_spatial_unit_record_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.SpatialUnitConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_format_conversion_session", 
               "doc": {
                  "headline": "Gets a text format conversion session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.FormatConversionSession) - a\n                ``FormatConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_format_conversion()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FormatConversionSession``\n        :rtype: ``osid.locale.FormatConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_format_conversion()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_format_conversion()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.FormatConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_format_conversion_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the text format conversion service and the given format types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_format_type (osid.type.Type): the type of the\n                text format\n        arg:    target_format_type (osid.type.Type): the type of the\n                text format\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.FormatConversionSession) - a\n                ``FormatConversionSession``", 
               "error_doc": "        raise:  NullArgument - ``source_format_type,\n                target_format_type`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_format_conversion()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_format_types_for_conversion(source_format_typ\n                e, target_format_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param source_format_type: the type of the text format\n        :type source_format_type: ``osid.type.Type``\n        :param target_format_type: the type of the text format\n        :type target_format_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FormatConversionSession``\n        :rtype: ``osid.locale.FormatConversionSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_format_type, target_format_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_format_conversion()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_format_types_for_conversion(source_format_type, target_format_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_format_conversion()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_format_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.FormatConversionSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_info_session", 
               "doc": {
                  "headline": "Gets a calendar informational session session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarInfoSession) - a\n                ``CalendarInfoSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_info()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarInfoSession``\n        :rtype: ``osid.locale.CalendarInfoSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_info()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_info()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarInfoSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_calendar_info_session_for_type", 
               "doc": {
                  "headline": "Gets an ``OsidSession`` associated with the calendar informational service and the given calendar and time types.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    calendar_type (osid.type.Type): the type of the calendar\n        arg:    time_type (osid.type.Type): the type of the time system\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.locale.CalendarInfoSession) - a\n                ``CalendarInfoSession``", 
               "error_doc": "        raise:  NullArgument - ``calendar_type, time_type`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_calendar_type()`` or\n                ``supports_visible_federation()`` is ``false``\n        raise:  Unsupported -\n                ``supports_calendar_time_types(calendar_type,\n                time_type)`` is ``false``", 
               "sphinx_param_doc": "        :param calendar_type: the type of the calendar\n        :type calendar_type: ``osid.type.Type``\n        :param time_type: the type of the time system\n        :type time_type: ``osid.type.Type``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``CalendarInfoSession``\n        :rtype: ``osid.locale.CalendarInfoSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``calendar_type, time_type`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_calendar_type()`` or ``supports_visible_federation()`` is ``false``\n        :raise: ``Unsupported`` -- ``supports_calendar_time_types(calendar_type, time_type)`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_calendar_info()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "calendar_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "time_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.type.Type", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.locale.CalendarInfoSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.TranslationSession", 
         "shortname": "TranslationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to translate text between a source and target locale.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_language_type", 
            "get_source_script_type", 
            "get_target_language_type", 
            "get_target_script_type", 
            "can_translate", 
            "get_translation", 
            "translate_string", 
            "translate_strings"
         ], 
         "methods": [
            {
               "name": "get_source_language_type", 
               "doc": {
                  "headline": "Gets the source language used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_source_script_type", 
               "doc": {
                  "headline": "Gets the source script used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source script", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source script\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_language_type", 
               "doc": {
                  "headline": "Gets the target language used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_script_type", 
               "doc": {
                  "headline": "Gets the target script used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target script", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target script\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_translate", 
               "doc": {
                  "headline": "Tests if this user can perform language translations.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if translation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if translation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_translation", 
               "doc": {
                  "headline": "Translates the given string into the target language.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    string (string): the ``string`` to translate\n", 
               "return_doc": "        return: (string) - the translated ``string``", 
               "error_doc": "        raise:  NotFound - no translation found\n        raise:  NullArgument - ``null`` argument provided\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param string: the ``string`` to translate\n        :type string: ``string``\n", 
               "sphinx_return_doc": "        :return: the translated ``string``\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no translation found\n        :raise: ``NullArgument`` -- ``null`` argument provided\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "string", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "string", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "translate_string", 
               "doc": {
                  "headline": "Translates the given string into the target language.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    string (string): the ``string`` to translate\n        arg:    default_string (string): the default ``string`` if no\n                translation available.\n", 
               "return_doc": "        return: (string) - the translated ``string`` or the given\n                default value if no translation available.", 
               "error_doc": "        raise:  NullArgument - ``null`` argument provided\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param string: the ``string`` to translate\n        :type string: ``string``\n        :param default_string: the default ``string`` if no translation available.\n        :type default_string: ``string``\n", 
               "sphinx_return_doc": "        :return: the translated ``string`` or the given default value if no translation available.\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``null`` argument provided\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "string", 
                     "array": false
                  }, 
                  {
                     "arg_type": "string", 
                     "var_name": "default_string", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "string"
               ], 
               "return_type": "string", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "translate_strings", 
               "doc": {
                  "headline": "Translates the given strings into the target language.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    strings (string[]): the ``string`` to translate\n        arg:    default_strings (string[]): the default ``string`` if no\n                translation available.\n", 
               "return_doc": "        return: (string) - the translated ``strings`` or the given\n                default value if no translation available.", 
               "error_doc": "        raise:  NullArgument - ``null`` argument provided\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param strings: the ``string`` to translate\n        :type strings: ``string[]``\n        :param default_strings: the default ``string`` if no translation available.\n        :type default_strings: ``string[]``\n", 
               "sphinx_return_doc": "        :return: the translated ``strings`` or the given default value if no translation available.\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``null`` argument provided\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string[]", 
                     "var_name": "strings", 
                     "array": true
                  }, 
                  {
                     "arg_type": "string[]", 
                     "var_name": "default_strings", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "string[]", 
                  "string[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.TranslationAdminSession", 
         "shortname": "TranslationAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to translate and format text between a source and target locale.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_language_type", 
            "get_source_script_type", 
            "get_target_language_type", 
            "get_target_script_type", 
            "can_update_translation", 
            "add_translation", 
            "remove_translation"
         ], 
         "methods": [
            {
               "name": "get_source_language_type", 
               "doc": {
                  "headline": "Gets the source language used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_source_script_type", 
               "doc": {
                  "headline": "Gets the source script used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source script", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source script\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_language_type", 
               "doc": {
                  "headline": "Gets the target language used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_script_type", 
               "doc": {
                  "headline": "Gets the target script used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target script", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target script\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_update_translation", 
               "doc": {
                  "headline": "Tests if this user can update localization strings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing translation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing translation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_translation", 
               "doc": {
                  "headline": "Adds or updates a string translation.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_text (string): the source ``string``\n        arg:    target_text (string): the translated string\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_text`` or ``target_text`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_text: the source ``string``\n        :type source_text: ``string``\n        :param target_text: the translated string\n        :type target_text: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_text`` or ``target_text`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "source_text", 
                     "array": false
                  }, 
                  {
                     "arg_type": "string", 
                     "var_name": "target_text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_translation", 
               "doc": {
                  "headline": "Removes a translation.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_text (string): the source ``string``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_text`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_text: the source ``string``\n        :type source_text: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_text`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "source_text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.NumericFormattingSession", 
         "shortname": "NumericFormattingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to format and parse numbers.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_numeric_format_type", 
            "can_format_numbers", 
            "cardinal_to_string", 
            "cardinals_to_strings", 
            "string_to_cardinal", 
            "decimal_to_string", 
            "decimals_to_strings", 
            "decimal_to_string", 
            "integer_to_string", 
            "integers_to_strings", 
            "integer_to_string"
         ], 
         "methods": [
            {
               "name": "get_numeric_format_type", 
               "doc": {
                  "headline": "Gets the numeric format type used in this session.", 
                  "body": "        The numeric format type indicates the format of a number used in\n        a culture, such as the use of a period for a decimal place."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_format_numbers", 
               "doc": {
                  "headline": "Tests if this user can format and parse numbers.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if translation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if translation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "cardinal_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a cardinal.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    c (cardinal): a cardinal value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param c: a cardinal value\n        :type c: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "c", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "string", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "cardinals_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of an array of cardinals.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    c (cardinal[]): a cardinal value array\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  NullArgument - ``c`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param c: a cardinal value array\n        :type c: ``cardinal[]``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``c`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal[]", 
                     "var_name": "c", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "cardinal[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_cardinal", 
               "doc": {
                  "headline": "Parses a cardinal string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    str (string): a cardinal string\n", 
               "return_doc": "        return: (cardinal) - the cardinal value", 
               "error_doc": "        raise:  InvalidArgument - ``str`` not of\n                ``get_numeric_format_type()``\n        raise:  NullArgument - ``str`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param str: a cardinal string\n        :type str: ``string``\n", 
               "sphinx_return_doc": "        :return: the cardinal value\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``str`` not of ``get_numeric_format_type()``\n        :raise: ``NullArgument`` -- ``str`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "str", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "decimal_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a decimal.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    d (decimal): a decimal value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param d: a decimal value\n        :type d: ``decimal``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "d", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal"
               ], 
               "return_type": "string", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "decimals_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of an array of decimals.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    d (decimal[]): a decimals value array\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  NullArgument - ``d`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param d: a decimals value array\n        :type d: ``decimal[]``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``d`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal[]", 
                     "var_name": "d", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "decimal[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "decimal_to_string", 
               "doc": {
                  "headline": "Parses a decimal string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    str (string): a decimal string\n", 
               "return_doc": "        return: (decimal) - the decimal value", 
               "error_doc": "        raise:  InvalidArgument - ``str`` not of\n                ``get_numeric_format_type()``\n        raise:  NullArgument - ``str`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param str: a decimal string\n        :type str: ``string``\n", 
               "sphinx_return_doc": "        :return: the decimal value\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``str`` not of ``get_numeric_format_type()``\n        :raise: ``NullArgument`` -- ``str`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "str", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "decimal", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "integer_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a integer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    i (integer): an integer value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param i: an integer value\n        :type i: ``integer``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "i", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer"
               ], 
               "return_type": "string", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "integers_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of an array of integers.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    i (integer[]): an integer value array\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  NullArgument - ``i`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param i: an integer value array\n        :type i: ``integer[]``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``i`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer[]", 
                     "var_name": "i", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "integer[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "integer_to_string", 
               "doc": {
                  "headline": "Parses an integer string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    str (string): an integer string\n", 
               "return_doc": "        return: (integer) - the integer value", 
               "error_doc": "        raise:  InvalidArgument - ``str`` not of\n                ``get_numeric_format_type()``\n        raise:  NullArgument - ``str`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param str: an integer string\n        :type str: ``string``\n", 
               "sphinx_return_doc": "        :return: the integer value\n        :rtype: ``integer``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``str`` not of ``get_numeric_format_type()``\n        :raise: ``NullArgument`` -- ``str`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "str", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "integer", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CalendarFormattingSession", 
         "shortname": "CalendarFormattingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to format and parse date times of the calendar and time type defined.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_calendar_type", 
            "get_time_type", 
            "get_date_format_type", 
            "get_time_format_type", 
            "can_display_primitives", 
            "datetime_to_string", 
            "datetimes_to_strings", 
            "string_to_date_time", 
            "time_to_string", 
            "times_to_strings", 
            "string_to_time", 
            "duration_to_string", 
            "durations_to_strings", 
            "string_to_duration"
         ], 
         "methods": [
            {
               "name": "get_calendar_type", 
               "doc": {
                  "headline": "Gets the calendar type for the datetimes used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the calendar type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calendar type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_time_type", 
               "doc": {
                  "headline": "Gets the time type for the times used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_date_format_type", 
               "doc": {
                  "headline": "Gets the date format type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target language", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target language\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_time_format_type", 
               "doc": {
                  "headline": "Gets the time format type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target script", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target script\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_display_primitives", 
               "doc": {
                  "headline": "Tests if this user can format and parse date times.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if translation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if translation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "datetime_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a datetime.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    datetime (osid.calendaring.DateTime): a datetime value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  InvalidArgument - ``datetime.get_calendar_type() !=\n                get_calendar_type()`` or ``datetime.get_time_type() !=\n                get_time_type()``\n        raise:  NullArgument - ``datetime`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param datetime: a datetime value\n        :type datetime: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``datetime.get_calendar_type() != get_calendar_type()`` or ``datetime.get_time_type() != get_time_type()``\n        :raise: ``NullArgument`` -- ``datetime`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "datetime", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "datetimes_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of a list of datetimes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    datetimes (osid.calendaring.DateTimeList): a datetime\n                value list\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  InvalidArgument - ``datetime.get_calendar_type() !=\n                get_calendar_type()`` or ``datetime.get_time_type() !=\n                get_time_type()``\n        raise:  NullArgument - ``datetimes`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param datetimes: a datetime value list\n        :type datetimes: ``osid.calendaring.DateTimeList``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``datetime.get_calendar_type() != get_calendar_type()`` or ``datetime.get_time_type() != get_time_type()``\n        :raise: ``NullArgument`` -- ``datetimes`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTimeList", 
                     "var_name": "datetimes", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTimeList"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_date_time", 
               "doc": {
                  "headline": "Parses a date time string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    s (string): a datetime string\n", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the date time value", 
               "error_doc": "        raise:  InvalidArgument - ``s`` is not of\n                ``get_date_format_type()`` or ``s`` is not of\n                ``get_time_format_type()``\n        raise:  NullArgument - ``s`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param s: a datetime string\n        :type s: ``string``\n", 
               "sphinx_return_doc": "        :return: the date time value\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``s`` is not of ``get_date_format_type()`` or ``s`` is not of ``get_time_format_type()``\n        :raise: ``NullArgument`` -- ``s`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "s", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "time_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    time (osid.calendaring.Time): a time value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  InvalidArgument - ``time.get_time_type() !=\n                get_time_type()``\n        raise:  NullArgument - ``time`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param time: a time value\n        :type time: ``osid.calendaring.Time``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``time.get_time_type() != get_time_type()``\n        :raise: ``NullArgument`` -- ``time`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.Time", 
                     "var_name": "time", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.Time"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "times_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of a list of times.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    times (osid.calendaring.TimeList): a time value list\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  InvalidArgument - ``time.get_time_type()`` !=\n                ``get_time_type()``\n        raise:  NullArgument - ``times`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param times: a time value list\n        :type times: ``osid.calendaring.TimeList``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``time.get_time_type()`` != ``get_time_type()``\n        :raise: ``NullArgument`` -- ``times`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.TimeList", 
                     "var_name": "times", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.TimeList"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_time", 
               "doc": {
                  "headline": "Parses a time string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    s (string): a time string\n", 
               "return_doc": "        return: (osid.calendaring.Time) - the time value", 
               "error_doc": "        raise:  InvalidArgument - ``s`` is not of\n                ``get_time_format_type()``\n        raise:  NullArgument - ``s`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param s: a time string\n        :type s: ``string``\n", 
               "sphinx_return_doc": "        :return: the time value\n        :rtype: ``osid.calendaring.Time``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``s`` is not of ``get_time_format_type()``\n        :raise: ``NullArgument`` -- ``s`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "s", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "osid.calendaring.Time", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "duration_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a duration.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    duration (osid.calendaring.Duration): a duration value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  InvalidArgument - ``duration.get_calendar_type() !=``\n                ``get_calendar_type()`` or ``duration.get_time_type() !=\n                get_time_type()``\n        raise:  NullArgument - ``duration`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param duration: a duration value\n        :type duration: ``osid.calendaring.Duration``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``duration.get_calendar_type() !=``  ``get_calendar_type()`` or ``duration.get_time_type() != get_time_type()``\n        :raise: ``NullArgument`` -- ``duration`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "duration", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.Duration"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "durations_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of a list of durations.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    durations (osid.calendaring.DurationList): a duration\n                value list\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  InvalidArgument - ``duration.get_calendar_type() !=``\n                ``get_calendar_type()`` or ``duration.get_time_type() !=\n                get_time_type()``\n        raise:  NullArgument - ``durations`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param durations: a duration value list\n        :type durations: ``osid.calendaring.DurationList``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``duration.get_calendar_type() !=``  ``get_calendar_type()`` or ``duration.get_time_type() != get_time_type()``\n        :raise: ``NullArgument`` -- ``durations`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DurationList", 
                     "var_name": "durations", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DurationList"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_duration", 
               "doc": {
                  "headline": "Parses a duration string.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    s (string): a duration string\n", 
               "return_doc": "        return: (osid.calendaring.Duration) - the duration value", 
               "error_doc": "        raise:  InvalidArgument - ``s`` is not of\n                ``get_date_format_type()`` or ``s`` is not of\n                ``get_time_format_type()``\n        raise:  NullArgument - ``s`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param s: a duration string\n        :type s: ``string``\n", 
               "sphinx_return_doc": "        :return: the duration value\n        :rtype: ``osid.calendaring.Duration``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``s`` is not of ``get_date_format_type()`` or ``s`` is not of ``get_time_format_type()``\n        :raise: ``NullArgument`` -- ``s`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "s", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "osid.calendaring.Duration", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CurrencyFormattingSession", 
         "shortname": "CurrencyFormattingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to format and parse currency amounts.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_currency_type", 
            "get_numeric_format_type", 
            "can_format_currencies", 
            "currency_to_string", 
            "currencies_to_strings", 
            "string_to_currency"
         ], 
         "methods": [
            {
               "name": "get_currency_type", 
               "doc": {
                  "headline": "Gets the currency type for amounts used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the currency type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the currency type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_numeric_format_type", 
               "doc": {
                  "headline": "Gets the numeric format type for the amounts used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the numeric format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the numeric format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_format_currencies", 
               "doc": {
                  "headline": "Tests if this user can format and parse currencies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if translation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if translation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "currency_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a currency including the currency symbol indicated by the currency type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    amount (osid.financials.Currency): a currency value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  InvalidArgument - ``amount.get_currency_type() !=\n                get_currency_type()``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param amount: a currency value\n        :type amount: ``osid.financials.Currency``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``amount.get_currency_type() != get_currency_type()``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.financials.Currency", 
                     "var_name": "amount", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.financials.Currency"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "currencies_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of a list of currency amounts including the currency symbols indicated by the currency type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    amounts (osid.financials.Currency[]): an array of\n                amounts\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  InvalidArgument - ``amount.get_currency_type() !=\n                get_currency_type()``\n        raise:  NullArgument - ``amounts`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param amounts: an array of amounts\n        :type amounts: ``osid.financials.Currency[]``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``amount.get_currency_type() != get_currency_type()``\n        :raise: ``NullArgument`` -- ``amounts`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.financials.Currency[]", 
                     "var_name": "amounts", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.financials.Currency[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_currency", 
               "doc": {
                  "headline": "Parses a currency amount.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    s (string): a currency string\n", 
               "return_doc": "        return: (osid.financials.Currency) - the currency amount", 
               "error_doc": "        raise:  InvalidArgument - s is not of ``get_currency_type()`` or\n                s is not of ``get_numeric_format_type()``\n        raise:  NullArgument - ``s`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param s: a currency string\n        :type s: ``string``\n", 
               "sphinx_return_doc": "        :return: the currency amount\n        :rtype: ``osid.financials.Currency``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- s is not of ``get_currency_type()`` or s is not of ``get_numeric_format_type()``\n        :raise: ``NullArgument`` -- ``s`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "s", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "osid.financials.Currency", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CoordinateFormattingSession", 
         "shortname": "CoordinateFormattingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to format and parse coordinates.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_coordinate_type", 
            "get_coordinate_format_type", 
            "can_format_coordinates", 
            "coordinate_to_string", 
            "ccoordinates_to_strings", 
            "string_to_coordinate"
         ], 
         "methods": [
            {
               "name": "get_coordinate_type", 
               "doc": {
                  "headline": "Gets the coordinate type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the coordinate type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_coordinate_format_type", 
               "doc": {
                  "headline": "Gets the coordinate format type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the coordinate format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_format_coordinates", 
               "doc": {
                  "headline": "Tests if this user can format and parse coordinates.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if translation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if translation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "coordinate_to_string", 
               "doc": {
                  "headline": "Gets a string representation of a coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinate (osid.mapping.Coordinate): a coordinate value\n", 
               "return_doc": "        return: (string) - the display string", 
               "error_doc": "        raise:  InvalidArgument -\n                ``coodrinate.has_record_type(get_coordinate_record_type(\n                )`` ) is ``false``\n        raise:  NullArgument - ``coordinate`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param coordinate: a coordinate value\n        :type coordinate: ``osid.mapping.Coordinate``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``coodrinate.has_record_type(get_coordinate_record_type()`` ) is ``false``\n        :raise: ``NullArgument`` -- ``coordinate`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "coordinate", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.Coordinate"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "ccoordinates_to_strings", 
               "doc": {
                  "headline": "Gets a string representation of a list of coordinates.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    coordinates (osid.mapping.CoordinateList): a list of\n                coordinates\n", 
               "return_doc": "        return: (string) - the display strings", 
               "error_doc": "        raise:  InvalidArgument -\n                ``coodrinate.has_record_type(get_coordinate_record_type(\n                )`` ) is ``false``\n        raise:  NullArgument - ``coordinates`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param coordinates: a list of coordinates\n        :type coordinates: ``osid.mapping.CoordinateList``\n", 
               "sphinx_return_doc": "        :return: the display strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``coodrinate.has_record_type(get_coordinate_record_type()`` ) is ``false``\n        :raise: ``NullArgument`` -- ``coordinates`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.CoordinateList", 
                     "var_name": "coordinates", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.CoordinateList"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "string_to_coordinate", 
               "doc": {
                  "headline": "Parses a coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    s (string): a coordinate string\n", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the display string", 
               "error_doc": "        raise:  InvalidArgument - ``s`` is not of\n                ``get_coordinate_format_type()``\n        raise:  NullArgument - ``s`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param s: a coordinate string\n        :type s: ``string``\n", 
               "sphinx_return_doc": "        :return: the display string\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``s`` is not of ``get_coordinate_format_type()``\n        :raise: ``NullArgument`` -- ``s`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "s", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.UnitConversionSession", 
         "shortname": "UnitConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert units across measurement systems.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_convert_units", 
            "convert_unit", 
            "convert_units"
         ], 
         "methods": [
            {
               "name": "can_convert_units", 
               "doc": {
                  "headline": "Tests if this user can perform unit conversions.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_unit", 
               "doc": {
                  "headline": "Convert a unit of measurement.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_unit (decimal): the measure to convert\n        arg:    source_unit_type (osid.type.Type): the type of measure\n                specified\n        arg:    target_unit_type (osid.type.Type): the type of converted\n                measure\n", 
               "return_doc": "        return: (decimal) - resulting measure", 
               "error_doc": "        raise:  NullArgument - ``null`` argument provided\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported -\n                ``LocaleManager.supportsUnitTypesForConversion(measureTy\n                pe, conversionType)`` is false", 
               "sphinx_param_doc": "        :param source_unit: the measure to convert\n        :type source_unit: ``decimal``\n        :param source_unit_type: the type of measure specified\n        :type source_unit_type: ``osid.type.Type``\n        :param target_unit_type: the type of converted measure\n        :type target_unit_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: resulting measure\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``null`` argument provided\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``LocaleManager.supportsUnitTypesForConversion(measureType, conversionType)`` is false", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "source_unit", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_unit_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_unit_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "decimal", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "convert_units", 
               "doc": {
                  "headline": "Convert units of measurement.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_units (decimal[]): the measures to convert\n        arg:    source_unit_type (osid.type.Type): the type of measure\n                specified\n        arg:    target_unit_type (osid.type.Type): the type of converted\n                measure\n", 
               "return_doc": "        return: (decimal) - resulting measures", 
               "error_doc": "        raise:  NullArgument - ``null`` argument provided\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported -\n                ``LocaleManager.supportsUnitTypesForConversion(measureTy\n                pe, conversionType)`` is false", 
               "sphinx_param_doc": "        :param source_units: the measures to convert\n        :type source_units: ``decimal[]``\n        :param source_unit_type: the type of measure specified\n        :type source_unit_type: ``osid.type.Type``\n        :param target_unit_type: the type of converted measure\n        :type target_unit_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: resulting measures\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``null`` argument provided\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``LocaleManager.supportsUnitTypesForConversion(measureType, conversionType)`` is false", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal[]", 
                     "var_name": "source_units", 
                     "array": true
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "source_unit_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "target_unit_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal[]", 
                  "osid.type.Type", 
                  "osid.type.Type"
               ], 
               "return_type": "decimal", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CurrencyConversionSession", 
         "shortname": "CurrencyConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert currency.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_currency_type", 
            "get_target_currency_type", 
            "can_convert_currency", 
            "convert_currency", 
            "convert_currencies"
         ], 
         "methods": [
            {
               "name": "get_source_currency_type", 
               "doc": {
                  "headline": "Gets the source currency type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source currency", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source currency\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_currency_type", 
               "doc": {
                  "headline": "Gets the target currency type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target currency", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target currency\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_convert_currency", 
               "doc": {
                  "headline": "Tests if this user can perform currency conversions.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_currency", 
               "doc": {
                  "headline": "Converts currency.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_amount (osid.financials.Currency): the\n                currency amount to convert\n", 
               "return_doc": "        return: (osid.financials.Currency) - resulting currency units", 
               "error_doc": "        raise:  InvalidArgument -\n                ``sourceCurrencyAmount.get_currency_type() !=\n                get_sourcecurrency_type()``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_currency_amount: the currency amount to convert\n        :type source_currency_amount: ``osid.financials.Currency``\n", 
               "sphinx_return_doc": "        :return: resulting currency units\n        :rtype: ``osid.financials.Currency``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceCurrencyAmount.get_currency_type() != get_sourcecurrency_type()``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.financials.Currency", 
                     "var_name": "source_currency_amount", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.financials.Currency"
               ], 
               "return_type": "osid.financials.Currency", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "convert_currencies", 
               "doc": {
                  "headline": "Converts currencies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_currency_amounts (osid.financials.Currency[]):\n                the currency amounts to convert\n", 
               "return_doc": "        return: (osid.financials.Currency) - resulting currency units", 
               "error_doc": "        raise:  InvalidArgument -\n                ``sourceCurrencyAmount.get_currency_type() !=\n                get_sourcecurrency_type()``\n        raise:  NullArgument - ``source_currency_amounts`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_currency_amounts: the currency amounts to convert\n        :type source_currency_amounts: ``osid.financials.Currency[]``\n", 
               "sphinx_return_doc": "        :return: resulting currency units\n        :rtype: ``osid.financials.Currency``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceCurrencyAmount.get_currency_type() != get_sourcecurrency_type()``\n        :raise: ``NullArgument`` -- ``source_currency_amounts`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.financials.Currency[]", 
                     "var_name": "source_currency_amounts", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.financials.Currency[]"
               ], 
               "return_type": "osid.financials.Currency", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CalendarConversionSession", 
         "shortname": "CalendarConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert dates across calendar systems.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_calendar_type", 
            "get_source_time_type", 
            "get_target_calendar_type", 
            "get_target_time_type", 
            "can_convert_calendars", 
            "convert_calendar", 
            "convert_calendars"
         ], 
         "methods": [
            {
               "name": "get_source_calendar_type", 
               "doc": {
                  "headline": "Gets the source calendar type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source calendar type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source calendar type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_source_time_type", 
               "doc": {
                  "headline": "Gets the source time type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_calendar_type", 
               "doc": {
                  "headline": "Gets the target calendar type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target calendar", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target calendar\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_time_type", 
               "doc": {
                  "headline": "Gets the target time type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_convert_calendars", 
               "doc": {
                  "headline": "Tests if this user can perform calendar conversions.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_calendar", 
               "doc": {
                  "headline": "Converts a date.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_date (osid.calendaring.DateTime): the date to\n                convert\n", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the resulting date", 
               "error_doc": "        raise:  InvalidArgument - ``sourceDate.get_calendar_type() !=\n                get_source_calendar_type()`` or\n                ``sourceDate.get_time_type() != get_source_time_type()``\n        raise:  NullArgument - ``source_date`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_date: the date to convert\n        :type source_date: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the resulting date\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceDate.get_calendar_type() != get_source_calendar_type()`` or ``sourceDate.get_time_type() != get_source_time_type()``\n        :raise: ``NullArgument`` -- ``source_date`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "source_date", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "convert_calendars", 
               "doc": {
                  "headline": "Converts dates.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_date_list (osid.calendaring.DateTimeList): the\n                dates to convert\n", 
               "return_doc": "        return: (osid.calendaring.DateTimeList) - the resulting dates", 
               "error_doc": "        raise:  InvalidArgument - ``sourceDate.get_calendar_type() !=\n                get_source_calendar_type()`` or\n                ``sourceDate.get_time_type() != get_source_time_type()``\n        raise:  NullArgument - ``source_date_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_date_list: the dates to convert\n        :type source_date_list: ``osid.calendaring.DateTimeList``\n", 
               "sphinx_return_doc": "        :return: the resulting dates\n        :rtype: ``osid.calendaring.DateTimeList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceDate.get_calendar_type() != get_source_calendar_type()`` or ``sourceDate.get_time_type() != get_source_time_type()``\n        :raise: ``NullArgument`` -- ``source_date_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTimeList", 
                     "var_name": "source_date_list", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTimeList"
               ], 
               "return_type": "osid.calendaring.DateTimeList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CoordinateConversionSession", 
         "shortname": "CoordinateConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert coordinates across coordinate systems.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_coordinate_type", 
            "get_target_coordinate_type", 
            "can_convert_coordinates", 
            "convert_coordinate", 
            "convert_coordinates"
         ], 
         "methods": [
            {
               "name": "get_source_coordinate_type", 
               "doc": {
                  "headline": "Gets the source coordinate type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source coordinate type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source coordinate type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_coordinate_type", 
               "doc": {
                  "headline": "Gets the target coordinate type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target coordinate type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target coordinate type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_convert_coordinates", 
               "doc": {
                  "headline": "Tests if this user can perform coordinate conversions.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_coordinate", 
               "doc": {
                  "headline": "Converts a coordinate.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate (osid.mapping.Coordinate): the\n                coordinate to convert\n", 
               "return_doc": "        return: (osid.mapping.Coordinate) - the resulting coordinate", 
               "error_doc": "        raise:  InvalidArgument - ``sourceCoordinate.has_type(get_source\n                _coordinate_record_type())`` is ``false``\n        raise:  NullArgument - ``source_coordinate`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_coordinate: the coordinate to convert\n        :type source_coordinate: ``osid.mapping.Coordinate``\n", 
               "sphinx_return_doc": "        :return: the resulting coordinate\n        :rtype: ``osid.mapping.Coordinate``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceCoordinate.has_type(get_source_coordinate_record_type())`` is ``false``\n        :raise: ``NullArgument`` -- ``source_coordinate`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.Coordinate", 
                     "var_name": "source_coordinate", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.Coordinate"
               ], 
               "return_type": "osid.mapping.Coordinate", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "convert_coordinates", 
               "doc": {
                  "headline": "Converts coordinates.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_coordinate_list (osid.mapping.CoordinateList):\n                the coordinates to convert\n", 
               "return_doc": "        return: (osid.mapping.CoordinateList) - the resulting\n                coordinates", 
               "error_doc": "        raise:  InvalidArgument - ``sourceCoordinate.has_type(get_source\n                _coordinate_record_type())`` is ``false``\n        raise:  NullArgument - ``source_coordinate_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_coordinate_list: the coordinates to convert\n        :type source_coordinate_list: ``osid.mapping.CoordinateList``\n", 
               "sphinx_return_doc": "        :return: the resulting coordinates\n        :rtype: ``osid.mapping.CoordinateList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceCoordinate.has_type(get_source_coordinate_record_type())`` is ``false``\n        :raise: ``NullArgument`` -- ``source_coordinate_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.CoordinateList", 
                     "var_name": "source_coordinate_list", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.CoordinateList"
               ], 
               "return_type": "osid.mapping.CoordinateList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.SpatialUnitConversionSession", 
         "shortname": "SpatialUnitConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert spatial units.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_spatial_unit_record_type", 
            "get_target_spatial_unit_record_type", 
            "can_convert_spatial_units", 
            "convert_spatial_unit", 
            "convert_spatial_units"
         ], 
         "methods": [
            {
               "name": "get_source_spatial_unit_record_type", 
               "doc": {
                  "headline": "Gets the source spatial unit record type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source spatial unit record type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source spatial unit record type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_spatial_unit_record_type", 
               "doc": {
                  "headline": "Gets the target spatial unit record type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target spatial unit record type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target spatial unit record type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_convert_spatial_units", 
               "doc": {
                  "headline": "Tests if this user can perform spatial unit conversions.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_spatial_unit", 
               "doc": {
                  "headline": "Converts a spatial unit.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit (osid.mapping.SpatialUnit): the\n                spatial unit to convert\n", 
               "return_doc": "        return: (osid.mapping.SpatialUnit) - the resulting spatial unit", 
               "error_doc": "        raise:  InvalidArgument - ``sourceSpatialUnit.has_type(get_sourc\n                e_spatial_unit_record_type())`` is ``false``\n        raise:  NullArgument - ``source_spatial_unit`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_spatial_unit: the spatial unit to convert\n        :type source_spatial_unit: ``osid.mapping.SpatialUnit``\n", 
               "sphinx_return_doc": "        :return: the resulting spatial unit\n        :rtype: ``osid.mapping.SpatialUnit``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceSpatialUnit.has_type(get_source_spatial_unit_record_type())`` is ``false``\n        :raise: ``NullArgument`` -- ``source_spatial_unit`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnit", 
                     "var_name": "source_spatial_unit", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnit"
               ], 
               "return_type": "osid.mapping.SpatialUnit", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "convert_spatial_units", 
               "doc": {
                  "headline": "Converts spatial units.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_spatial_unit_list (osid.mapping.SpatialUnitList):\n                the spatial units to convert\n", 
               "return_doc": "        return: (osid.mapping.SpatialUnitList) - the resulting spatial\n                units", 
               "error_doc": "        raise:  InvalidArgument - ``sourceSpatialUnit.has_type(get_sourc\n                e_spatial_unit_record_type())`` is ``false``\n        raise:  NullArgument - ``source_spatial_unit_list`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_spatial_unit_list: the spatial units to convert\n        :type source_spatial_unit_list: ``osid.mapping.SpatialUnitList``\n", 
               "sphinx_return_doc": "        :return: the resulting spatial units\n        :rtype: ``osid.mapping.SpatialUnitList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sourceSpatialUnit.has_type(get_source_spatial_unit_record_type())`` is ``false``\n        :raise: ``NullArgument`` -- ``source_spatial_unit_list`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.mapping.SpatialUnitList", 
                     "var_name": "source_spatial_unit_list", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.mapping.SpatialUnitList"
               ], 
               "return_type": "osid.mapping.SpatialUnitList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.FormatConversionSession", 
         "shortname": "FormatConversionSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to convert text formats.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_source_format_type", 
            "get_target_format_type", 
            "can_convert_formats", 
            "convert_format", 
            "convert_formats"
         ], 
         "methods": [
            {
               "name": "get_source_format_type", 
               "doc": {
                  "headline": "Gets the source format type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the source text format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the source text format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_target_format_type", 
               "doc": {
                  "headline": "Gets the target format type used in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the target text formattype", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the target text formattype\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_convert_formats", 
               "doc": {
                  "headline": "Tests if this user can perform text format.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "convert_format", 
               "doc": {
                  "headline": "Converts a format.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_text (string): the string to convert\n", 
               "return_doc": "        return: (string) - the resulting string", 
               "error_doc": "        raise:  InvalidArgument - ``source_text`` not of source format\n        raise:  NullArgument - ``source_text`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_text: the string to convert\n        :type source_text: ``string``\n", 
               "sphinx_return_doc": "        :return: the resulting string\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``source_text`` not of source format\n        :raise: ``NullArgument`` -- ``source_text`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "source_text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "convert_formats", 
               "doc": {
                  "headline": "Converts formats.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_texts (string[]): the strings to convert\n", 
               "return_doc": "        return: (string) - the resulting strings", 
               "error_doc": "        raise:  InvalidArgument - a ``source_text not of source format``\n        raise:  NullArgument - ``source_texts`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_texts: the strings to convert\n        :type source_texts: ``string[]``\n", 
               "sphinx_return_doc": "        :return: the resulting strings\n        :rtype: ``string``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- a ``source_text not of source format``\n        :raise: ``NullArgument`` -- ``source_texts`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string[]", 
                     "var_name": "source_texts", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "string[]"
               ], 
               "return_type": "string", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CalendarInfoSession", 
         "shortname": "CalendarInfoSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to examine a calendar.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_calendar_type", 
            "get_time_type", 
            "can_examine_calendars", 
            "get_calendar_info", 
            "get_time_info"
         ], 
         "methods": [
            {
               "name": "get_calendar_type", 
               "doc": {
                  "headline": "Gets the calendar type for the calendar system informational methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the calendar type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calendar type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_time_type", 
               "doc": {
                  "headline": "Gets the time system type for the time system informational methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "can_examine_calendars", 
               "doc": {
                  "headline": "Tests if this user can perform calendar inspections.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if conversion methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if conversion methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_calendar_info", 
               "doc": {
                  "headline": "Gets information about the calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarInfo) - calendar information", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: calendar information\n        :rtype: ``osid.locale.CalendarInfo``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarInfo", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_time_info", 
               "doc": {
                  "headline": "Gets information about the time system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.TimeInfo) - time information", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: time information\n        :rtype: ``osid.locale.TimeInfo``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.TimeInfo", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CalendarInfo", 
         "shortname": "CalendarInfo", 
         "category": "objects", 
         "doc": {
            "headline": "This interface defines methods to examine a calendar.", 
            "body": "    A calendar is organized into \"years,\" \"months,\" and \"days.\" A\n    calendar system may offer a diffreent designation for these\n    divisions which may or may not vary in duration."
         }, 
         "inherit_fullnames": [], 
         "inherit_shortnames": [], 
         "inherit_pkg_names": [], 
         "inheritance": [], 
         "method_names": [
            "get_calendar_type", 
            "get_display_name", 
            "get_description", 
            "get_common_era_name", 
            "get_common_era_abbrev", 
            "get_before_common_era_name", 
            "get_before_common_era_abbrev", 
            "get_first_year_in_common_era", 
            "get_last_year_before_common_era", 
            "get_year_name", 
            "get_month_name", 
            "has_variable_months", 
            "get_num_months", 
            "get_num_months_for_year", 
            "get_months", 
            "get_months_for_year", 
            "get_day_name", 
            "has_variable_days", 
            "get_num_days", 
            "get_num_days_for_month", 
            "get_days", 
            "get_days_for_month", 
            "get_first_day_of_year", 
            "get_end_of_days_name", 
            "get_origin", 
            "get_end_of_days", 
            "get_weekdays"
         ], 
         "methods": [
            {
               "name": "get_calendar_type", 
               "doc": {
                  "headline": "Gets the calendar type.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the calendar type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calendar type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_display_name", 
               "doc": {
                  "headline": "Gets the display name for this calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the display name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the display name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_description", 
               "doc": {
                  "headline": "Gets a description of this calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the description", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the description\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_common_era_name", 
               "doc": {
                  "headline": "Gets the string for the common era in which years are positive.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the common era label", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the common era label\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_common_era_abbrev", 
               "doc": {
                  "headline": "Gets the abbreviation for the common era in which years are positive.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the common era label", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the common era label\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_before_common_era_name", 
               "doc": {
                  "headline": "Gets the string for before the common era in which years are negative.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the before common era label", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the before common era label\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_before_common_era_abbrev", 
               "doc": {
                  "headline": "Gets the abbreviation for before the common era in which years are negative.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the before common era label", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the before common era label\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_first_year_in_common_era", 
               "doc": {
                  "headline": "Gets the year number for the first year.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (integer) - the first year", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the first year\n        :rtype: ``integer``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "integer", 
               "errors": {}
            }, 
            {
               "name": "get_last_year_before_common_era", 
               "doc": {
                  "headline": "Gets the year number for the year before the common era.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (integer) - the last bce year", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the last bce year\n        :rtype: ``integer``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "integer", 
               "errors": {}
            }, 
            {
               "name": "get_year_name", 
               "doc": {
                  "headline": "Gets the display name for a calendar \"year.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_month_name", 
               "doc": {
                  "headline": "Gets the display name for a calendar \"month.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_variable_months", 
               "doc": {
                  "headline": "Tests if this calendar has a variable number of months in a year.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the number of months varies,\n                ``false`` if the number of months is constant", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the number of months varies, ``false`` if the number of months is constant\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_num_months", 
               "doc": {
                  "headline": "Gets the number of months of the year.", 
                  "body": "        For a variable month calendar, the number of all defined months\n        are returned. If there are no \"months\" in this calendar system\n        then this value may be zero."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of months", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of months\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_num_months_for_year", 
               "doc": {
                  "headline": "Gets the number of months in the given year.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n", 
               "return_doc": "        return: (cardinal) - the number of months", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``get_last_year_before_common_era()`` and less then\n                ``get_first_year_in_common_era()``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n", 
               "sphinx_return_doc": "        :return: the number of months\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``get_last_year_before_common_era()`` and less then ``get_first_year_in_common_era()``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_months", 
               "doc": {
                  "headline": "Gets the months of the year in order of the calendar.", 
                  "body": "        For a variable month calendar, all defined months are returned.\n        If there are no \"months\" in this calendar system then the list\n        may be empty."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarUnit) - the months", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the months\n        :rtype: ``osid.locale.CalendarUnit``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarUnit", 
               "errors": {}
            }, 
            {
               "name": "get_months_for_year", 
               "doc": {
                  "headline": "Gets the months of the year in order of the calendar.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n", 
               "return_doc": "        return: (osid.locale.CalendarUnit) - the months", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``get_last_year_before_common_era()`` and less then\n                ``get_first_year_in_common_era()``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n", 
               "sphinx_return_doc": "        :return: the months\n        :rtype: ``osid.locale.CalendarUnit``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``get_last_year_before_common_era()`` and less then ``get_first_year_in_common_era()``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer"
               ], 
               "return_type": "osid.locale.CalendarUnit", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_day_name", 
               "doc": {
                  "headline": "Gets the display name for a calendar \"day.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_variable_days", 
               "doc": {
                  "headline": "Tests if this calendar has a variable number of days in a month.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the number of days per month\n                varies, ``false`` if the number of days is constant", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the number of days per month varies, ``false`` if the number of days is constant\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_num_days", 
               "doc": {
                  "headline": "Gets the number of days in a year.", 
                  "body": "        For a variable day calendar, the number of all defined days are\n        returned. If there are no \"days\" in this calendar system then\n        this value may be zero. If there are no \"months\" defined then\n        the number of days is the number of days in a year."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of days", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of days\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_num_days_for_month", 
               "doc": {
                  "headline": "Gets the number of days in the given month.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n        arg:    month (cardinal): a ``DateTime`` month code\n", 
               "return_doc": "        return: (cardinal) - the number of days", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``get_last_year_before_common_era()`` and less then\n                ``get_first_year_in_common_era()`` , or ``month`` is\n                greater than ``get_months_for_year(year)``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n        :param month: a ``DateTime`` month code\n        :type month: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the number of days\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``get_last_year_before_common_era()`` and less then ``get_first_year_in_common_era()`` , or ``month`` is greater than ``get_months_for_year(year)``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "month", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer", 
                  "cardinal"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_days", 
               "doc": {
                  "headline": "Gets the days of the month in order of the calendar.", 
                  "body": "        For a variable day calendar, all defined days are returned. If\n        there are no \"days\" in this time system then this value may be\n        zero. If there are no \"months\" defined then the number of days\n        applies to the entire year."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarUnit) - the days", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the days\n        :rtype: ``osid.locale.CalendarUnit``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarUnit", 
               "errors": {}
            }, 
            {
               "name": "get_days_for_month", 
               "doc": {
                  "headline": "Gets the days of the given month in order of the calendar.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n        arg:    month (cardinal): a ``DateTime`` month code\n", 
               "return_doc": "        return: (osid.locale.CalendarUnit) - the days", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``get_last_year_before_common_era()`` and less then\n                ``get_first_year_in_common_era()`` , or ``month`` is\n                greater than or equal to than\n                ``get_months_for_year(year)``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n        :param month: a ``DateTime`` month code\n        :type month: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the days\n        :rtype: ``osid.locale.CalendarUnit``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``get_last_year_before_common_era()`` and less then ``get_first_year_in_common_era()`` , or ``month`` is greater than or equal to than ``get_months_for_year(year)``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "month", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer", 
                  "cardinal"
               ], 
               "return_type": "osid.locale.CalendarUnit", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_first_day_of_year", 
               "doc": {
                  "headline": "Gets the first day of the calendar year.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the first day of the year", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the first day of the year\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_end_of_days_name", 
               "doc": {
                  "headline": "Gets the display name for the end of the calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_origin", 
               "doc": {
                  "headline": "Gets the start of the \"common era\" for this calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - start of the calendar", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: start of the calendar\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_end_of_days", 
               "doc": {
                  "headline": "Gets the end of the world as specified by this calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - end of days", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: end of days\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_weekdays", 
               "doc": {
                  "headline": "Gets the days of the week in order of the calendar.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.CalendarUnit) - the week days", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the week days\n        :rtype: ``osid.locale.CalendarUnit``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.CalendarUnit", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.locale.TimeInfo", 
         "shortname": "TimeInfo", 
         "category": "objects", 
         "doc": {
            "headline": "This interface defines methods to examine a time.", 
            "body": "    Time is organized intro \"hours,\" \"minutes,\" and \"seconds.\" A time\n    system may offer a different designation for these divisions which\n    may or may not vary in duration."
         }, 
         "inherit_fullnames": [], 
         "inherit_shortnames": [], 
         "inherit_pkg_names": [], 
         "inheritance": [], 
         "method_names": [
            "get_time_type", 
            "get_display_name", 
            "get_display_label", 
            "get_description", 
            "get_hour_name", 
            "get_hour_abbrev", 
            "get_hour_initial", 
            "has_variable_hours", 
            "get_num_hours", 
            "get_num_hours_for_day", 
            "get_minute_name", 
            "get_minute_abbrev", 
            "get_minute_initial", 
            "has_variable_minutes", 
            "get_num_minutes", 
            "get_num_minutes_for_hour", 
            "get_second_name", 
            "get_second_abbrev", 
            "get_second_initial", 
            "has_variable_seconds", 
            "get_num_seconds", 
            "get_num_seconds_for_minute"
         ], 
         "methods": [
            {
               "name": "get_time_type", 
               "doc": {
                  "headline": "Gets the time type.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_display_name", 
               "doc": {
                  "headline": "Gets the display name for this time system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the display name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the display name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_display_label", 
               "doc": {
                  "headline": "Gets a short label for this time system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the label", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the label\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_description", 
               "doc": {
                  "headline": "Gets a description of this time system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the description", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the description\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_hour_name", 
               "doc": {
                  "headline": "Gets the display name for \"hours.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_hour_abbrev", 
               "doc": {
                  "headline": "Gets the abbreviation for \"hours.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the abbreviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the abbreviation\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_hour_initial", 
               "doc": {
                  "headline": "Gets the initial for \"hours.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the initial", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the initial\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_variable_hours", 
               "doc": {
                  "headline": "Tests if this time system has a variable number of hours in a day.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the number of hours per day\n                varies, ``false`` if the number of hours per day is\n                constant", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the number of hours per day varies, ``false`` if the number of hours per day is constant\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_num_hours", 
               "doc": {
                  "headline": "Gets the number of hours in a day.", 
                  "body": "        For a variable hour time system, the number of hours defined is\n        returned. If there are no \"hours\" in this time system then this\n        value may be zero."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of hours", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of hours\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_num_hours_for_day", 
               "doc": {
                  "headline": "Gets the number of hours for a given day.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n        arg:    month (cardinal): a ``DateTime`` month code\n        arg:    day (cardinal): a ``DateTime`` day code\n", 
               "return_doc": "        return: (cardinal) - the number of hours", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``CalendarInfo.getLastYearBeforeCommonEra()`` and less\n                then ``CalendarInfo.getFirstYearInCommonEra()`` , or\n                ``month`` is greater than or equal to\n                ``CalendarInfo.getNumMonthsForYear(year)`` , or ``day``\n                is greater than or equal to\n                ``CalendarInfo.getDaysInMonth(year, month)``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n        :param month: a ``DateTime`` month code\n        :type month: ``cardinal``\n        :param day: a ``DateTime`` day code\n        :type day: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the number of hours\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``CalendarInfo.getLastYearBeforeCommonEra()`` and less then ``CalendarInfo.getFirstYearInCommonEra()`` , or ``month`` is greater than or equal to\n``CalendarInfo.getNumMonthsForYear(year)`` , or ``day`` is greater than or equal to ``CalendarInfo.getDaysInMonth(year, month)``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "month", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "day", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer", 
                  "cardinal", 
                  "cardinal"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_minute_name", 
               "doc": {
                  "headline": "Gets the display name for \"minutes.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_minute_abbrev", 
               "doc": {
                  "headline": "Gets the abbreviation for \"minutes.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the abbreviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the abbreviation\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_minute_initial", 
               "doc": {
                  "headline": "Gets the initial for \"minutes.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the initial", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the initial\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_variable_minutes", 
               "doc": {
                  "headline": "Tests if this time system has a variable number of minutes in an hour.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the number of minutes per hour\n                varies, ``false`` if the number of minutes per hour is\n                constant", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the number of minutes per hour varies, ``false`` if the number of minutes per hour is constant\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_num_minutes", 
               "doc": {
                  "headline": "Gets the number of minutes in an hour.", 
                  "body": "        For a variable minute time system, the number of minutes defined\n        is returned. If there are no \"minutes\" in this time system then\n        this value may be zero. If there are no \"hours\" defined then the\n        number of minutes is the number of minutes in a day."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of minutes", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of minutes\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_num_minutes_for_hour", 
               "doc": {
                  "headline": "Gets the minutes for a given hour.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n        arg:    month (cardinal): a ``DateTime`` month code\n        arg:    day (cardinal): a ``DateTime`` day code\n        arg:    hour (cardinal): an hour\n", 
               "return_doc": "        return: (cardinal) - the number of minutes", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``CalendarInfo.getLastYearBeforeCommonEra()`` and less\n                then ``CalendarInfo.getFirstYearInCommonEra(),`` or\n                ``month`` is greater than or equal to\n                ``CalendarInfo.getNumMonthsForYear(year)`` , or ``day``\n                is greater than or equal to\n                ``CalendarInfo.getDaysInMonth(year, month)`` , or\n                ``hour`` is greater than or equal to\n                ``get_num_hours_in_day(year, month, day)``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n        :param month: a ``DateTime`` month code\n        :type month: ``cardinal``\n        :param day: a ``DateTime`` day code\n        :type day: ``cardinal``\n        :param hour: an hour\n        :type hour: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the number of minutes\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``CalendarInfo.getLastYearBeforeCommonEra()`` and less then ``CalendarInfo.getFirstYearInCommonEra(),`` or ``month`` is greater than or equal to\n``CalendarInfo.getNumMonthsForYear(year)`` , or ``day`` is greater than or equal to ``CalendarInfo.getDaysInMonth(year, month)`` , or ``hour`` is greater than or equal to ``get_num_hours_in_day(year,\nmonth, day)``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "month", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "day", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "hour", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer", 
                  "cardinal", 
                  "cardinal", 
                  "cardinal"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_second_name", 
               "doc": {
                  "headline": "Gets the display name for \"seconds.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_second_abbrev", 
               "doc": {
                  "headline": "Gets the abbreviation for \"seconds.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the abbreviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the abbreviation\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_second_initial", 
               "doc": {
                  "headline": "Gets the initial for \"seconds.", 
                  "body": "        \""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the initial", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the initial\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_variable_seconds", 
               "doc": {
                  "headline": "Tests if this time system has a variable number of seconds in a minute.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the number of seconds per minute\n                varies, ``false`` if the number of seconds per minute is\n                constant", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the number of seconds per minute varies, ``false`` if the number of seconds per minute is constant\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_num_seconds", 
               "doc": {
                  "headline": "Gets the number of seconds in a minute.", 
                  "body": "        For a variable second time system, the number of seconds defined\n        is returned. If there are no \"seconds\" in this time system then\n        this value may be zero. If there are no \"minutes\" defined then\n        the number of seconds is the number of seconds in an hour."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the number of seconds", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the number of seconds\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_num_seconds_for_minute", 
               "doc": {
                  "headline": "Gets the seconds for a given minute.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    year (integer): a year\n        arg:    month (cardinal): a ``DateTime`` month code\n        arg:    day (cardinal): a ``DateTime`` day code\n        arg:    hour (cardinal): an hour\n        arg:    minute (cardinal): a minute\n", 
               "return_doc": "        return: (cardinal) - the number of seconds", 
               "error_doc": "        raise:  IllegalState - ``year`` is greater than\n                ``get_last_year_before_common_era()`` and less then\n                ``get_first_year_in_common_era()`` , or ``month`` is\n                greater than or equal to\n                ``CalendarInfo.getNumMonthsForYear(year)`` , or ``day``\n                is greater than or equal to\n                ``CalendarInfo.getDaysInMonth(year, month)`` , or\n                ``hour`` is greater than or equal to\n                ``get_num_hours_in_day(year, month, day)`` , or\n                ``minute`` is greater than or equal to\n                ``get_num_minutes_inhour(year, month, day, hour)``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param year: a year\n        :type year: ``integer``\n        :param month: a ``DateTime`` month code\n        :type month: ``cardinal``\n        :param day: a ``DateTime`` day code\n        :type day: ``cardinal``\n        :param hour: an hour\n        :type hour: ``cardinal``\n        :param minute: a minute\n        :type minute: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: the number of seconds\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``year`` is greater than ``get_last_year_before_common_era()`` and less then ``get_first_year_in_common_era()`` , or ``month`` is greater than or equal to ``CalendarInfo.getNumMonthsForYear(year)`` ,\nor ``day`` is greater than or equal to ``CalendarInfo.getDaysInMonth(year, month)`` , or ``hour`` is greater than or equal to ``get_num_hours_in_day(year, month, day)`` , or ``minute`` is greater than\nor equal to ``get_num_minutes_inhour(year, month, day, hour)``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "integer", 
                     "var_name": "year", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "month", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "day", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "hour", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "minute", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "integer", 
                  "cardinal", 
                  "cardinal", 
                  "cardinal", 
                  "cardinal"
               ], 
               "return_type": "cardinal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.CalendarUnit", 
         "shortname": "CalendarUnit", 
         "category": "objects", 
         "doc": {
            "headline": "A description of a calendar unit.", 
            "body": ""
         }, 
         "inherit_fullnames": [], 
         "inherit_shortnames": [], 
         "inherit_pkg_names": [], 
         "inheritance": [], 
         "method_names": [
            "get_name", 
            "get_abbrev3", 
            "get_abbrev2", 
            "get_initial", 
            "get_date_time_code", 
            "get_description"
         ], 
         "methods": [
            {
               "name": "get_name", 
               "doc": {
                  "headline": "Gets the full name of this unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the name", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the name\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_abbrev3", 
               "doc": {
                  "headline": "Gets a 3-letter abbreviation for this unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the abbreviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the abbreviation\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_abbrev2", 
               "doc": {
                  "headline": "Gets a 2-letter abbreviation for this unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the abbreviation", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the abbreviation\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_initial", 
               "doc": {
                  "headline": "Gets a single letter abbreviation for this unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the initial", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the initial\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_date_time_code", 
               "doc": {
                  "headline": "Gets the number of this unit used in ``DateTime``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the code", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the code\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "get_description", 
               "doc": {
                  "headline": "Gets a description of this unit.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the description", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the description\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.locale.Locale", 
         "shortname": "Locale", 
         "category": "objects", 
         "doc": {
            "headline": "A locale is a collection of types.", 
            "body": "    ``Locale`` defines a set of types that together define the\n    formatting, language, calendaring, and currency for a locale or\n    culture."
         }, 
         "inherit_fullnames": [], 
         "inherit_shortnames": [], 
         "inherit_pkg_names": [], 
         "inheritance": [], 
         "method_names": [
            "get_language_type", 
            "get_script_type", 
            "get_calendar_type", 
            "get_time_type", 
            "get_currency_type", 
            "get_unit_system_type", 
            "get_numeric_format_type", 
            "get_calendar_format_type", 
            "get_time_format_type", 
            "get_currency_format_type", 
            "get_coordinate_format_type"
         ], 
         "methods": [
            {
               "name": "get_language_type", 
               "doc": {
                  "headline": "Gets the language ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the language type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the language type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_script_type", 
               "doc": {
                  "headline": "Gets the script ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the script type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the script type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_calendar_type", 
               "doc": {
                  "headline": "Gets the calendar ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the calendar type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calendar type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_time_type", 
               "doc": {
                  "headline": "Gets the time ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the time type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_currency_type", 
               "doc": {
                  "headline": "Gets the currency ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the currency type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the currency type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_unit_system_type", 
               "doc": {
                  "headline": "Gets the unit system ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the unit system type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the unit system type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_numeric_format_type", 
               "doc": {
                  "headline": "Gets the numeric format ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the numeric format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the numeric format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_calendar_format_type", 
               "doc": {
                  "headline": "Gets the calendar format ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the calendar format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the calendar format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_time_format_type", 
               "doc": {
                  "headline": "Gets the time format ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the time format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_currency_format_type", 
               "doc": {
                  "headline": "Gets the currency format ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the currency format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the currency format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_coordinate_format_type", 
               "doc": {
                  "headline": "Gets the coordinate format ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the coordinate format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the coordinate format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.locale.LocaleList", 
         "shortname": "LocaleList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LocaleList`` provides a means for accessing ``Locale`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ll.hasNext()) { Locale locale = ll.getNextLocale();\n    }\n\n    or\n      while (ll.hasNext()) {\n           Locale[] locales = ll.getNextLocales(ll.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_locale", 
            "get_next_locales"
         ], 
         "methods": [
            {
               "name": "get_next_locale", 
               "doc": {
                  "headline": "Gets the next ``Locale`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.Locale) - the next ``Locale`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Locale`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Locale`` in this list. The ``has_next()`` method should be used to test that a next ``Locale`` is available before calling this method.\n        :rtype: ``osid.locale.Locale``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.Locale", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_locales", 
               "doc": {
                  "headline": "Gets the next set of ``Locale`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Locale`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.locale.Locale) - an array of ``Locale``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Locale`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Locale`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.locale.Locale``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.locale.Locale", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.locale.DisplayText", 
         "shortname": "DisplayText", 
         "category": "primitives", 
         "doc": {
            "headline": "Text to be displayed.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidPrimitive"
         ], 
         "inherit_shortnames": [
            "OsidPrimitive"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidPrimitive"
            }
         ], 
         "method_names": [
            "get_language_type", 
            "get_script_type", 
            "get_format_type", 
            "get_text"
         ], 
         "methods": [
            {
               "name": "get_language_type", 
               "doc": {
                  "headline": "Gets the language ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the language type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the language type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_script_type", 
               "doc": {
                  "headline": "Gets the script ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the script type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the script type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_format_type", 
               "doc": {
                  "headline": "Gets the format ``Type`` of the text string.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the format type", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the format type\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_text", 
               "doc": {
                  "headline": "Gets the text string.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (string) - the string", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the string\n        :rtype: ``string``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "string", 
               "errors": {}
            }
         ]
      }
   ], 
   "full_name": "osid.locale"
}
{
   "name": "assessment", 
   "version": "3.0.0", 
   "title": "Assessment Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002-2004 Massachusetts Institute of Technology.\n\nCopyright (c) 2008-2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Assessment OSID provides the means to create, access, and take\nassessments. An ``Assessment`` may represent a quiz, survey, or other\nevaluation that includes assessment ``Items``. The OSID defines methods\nto describe the flow of control and the relationships among the objects.\nAssessment ``Items`` are extensible objects to capture various types of\nquestions, such as a multiple choice or an asset submission.\n\nThe Assessment service can br broken down into several distinct\nservices:\n\n  * Assessment Taking\n  * Assessment and Item authoring\n  * Accessing and managing banks of assessments and items\n\n\nEach of these service areas are covered by different session and object\ninterfaces. The object interfaces describe both the structure of the\nassessment and follow an assessment management workflow of first\ndefining assessment items and then authoring assessments based on those\nitems. They are:\n\n  * ``Item`` : a question and answer pair\n  * ``Response:`` a response to an ``Item`` question\n  * ``Assessment`` : a set of ``Items``\n  * ``AssessmentSection:`` A grouped set of ``Items``\n  * ``AssessmentOffering:`` An ``Assessment`` available for taking\n  * ``AssessmentTaken:`` An ``AssessmentOffering`` that has been\n    completed or in progress\n\n\nTaking Assessments\n\nThe ``AssessmentSession`` is used to take an assessment. It captures\nvarious ways an assessment can be taken which may include time\nconstraints, the ability to suspend and resume, and the availability of\nan answer.\n\nTaking an ``Assessment`` involves first navigating through\n``AssessmentSections``. An ``AssessmentSection`` is an advanced\nauthoring construct used to both visually divide an ``Assessment`` and\nimpose additional constraints. Basic assessments are assumed to always\nhave one ``AssessmentSection`` even if not explicitly created.\n\nAuthoring\n\nA basic authoring session is available in this package to map ``Items``\nto ``Assessments``. More sophisticated authoring using\n``AssessmentParts`` and sequencing is available in the Assessment\nAuthoring OSID.\n\nBank Cataloging\n\n``Assessments,``  ``AssessmentsOffered,``  ``AssessmentsTaken,`` and\n``Items`` may be organized into federateable catalogs called ``Banks`` .\n\nSub Packages\n\nThe Assessment OSID includes an Assessment Authoring OSID for more\nadvanced authoring and sequencing options.", 
   "interfaces": [
      {
         "fullname": "osid.assessment.AssessmentProfile", 
         "shortname": "AssessmentProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The ``AssessmentProfile`` describes the interoperability among assessment services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_my_assessment_taken", 
            "supports_assessment", 
            "supports_assessment_results", 
            "supports_item_lookup", 
            "supports_item_query", 
            "supports_item_search", 
            "supports_item_admin", 
            "supports_item_notification", 
            "supports_item_bank", 
            "supports_item_bank_assignment", 
            "supports_item_smart_bank", 
            "supports_assessment_lookup", 
            "supports_assessment_query", 
            "supports_assessment_search", 
            "supports_assessment_admin", 
            "supports_assessment_notification", 
            "supports_assessment_bank", 
            "supports_assessment_bank_assignment", 
            "supports_assessment_smart_bank", 
            "supports_assessment_basic_authoring", 
            "supports_assessment_offered_lookup", 
            "supports_assessment_offered_query", 
            "supports_assessment_offered_search", 
            "supports_assessment_offered_admin", 
            "supports_assessment_offered_notification", 
            "supports_assessment_offered_bank", 
            "supports_assessment_offered_bank_assignment", 
            "supports_assessment_offered_smart_bank", 
            "supports_assessment_taken_lookup", 
            "supports_assessment_taken_query", 
            "supports_assessment_taken_search", 
            "supports_assessment_taken_admin", 
            "supports_assessment_taken_notification", 
            "supports_assessment_taken_bank", 
            "supports_assessment_taken_bank_assignment", 
            "supports_assessment_taken_smart_bank", 
            "supports_bank_lookup", 
            "supports_bank_query", 
            "supports_bank_search", 
            "supports_bank_admin", 
            "supports_bank_notification", 
            "supports_bank_hierarchy", 
            "supports_bank_hierarchy_design", 
            "supports_assessment_authoring", 
            "supports_assessment_batch", 
            "get_item_record_types", 
            "supports_item_record_type", 
            "get_item_search_record_types", 
            "supports_item_search_record_type", 
            "get_assessment_record_types", 
            "supports_assessment_record_type", 
            "get_assessment_search_record_types", 
            "supports_assessment_search_record_type", 
            "get_assessment_offered_record_types", 
            "supports_assessment_offered_record_type", 
            "get_assessment_offered_search_record_types", 
            "supports_assessment_offered_search_record_type", 
            "get_assessment_taken_record_types", 
            "supports_assessment_taken_record_type", 
            "get_assessment_taken_search_record_types", 
            "supports_assessment_taken_search_record_type", 
            "get_assessment_section_record_types", 
            "supports_assessment_section_record_type", 
            "get_bank_record_types", 
            "supports_bank_record_type", 
            "get_bank_search_record_types", 
            "supports_bank_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_my_assessment_taken", 
               "doc": {
                  "headline": "Tests if a session is available to lookup taken assessments for the authenticated agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if my assessment taken session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if my assessment taken session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment", 
               "doc": {
                  "headline": "Tests for the availability of a assessment service which is the service for taking and examining assessments taken.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_results", 
               "doc": {
                  "headline": "Tests for the availability of an assessment rsults service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment results is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment results is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_lookup", 
               "doc": {
                  "headline": "Tests if an item lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if item lookup is supported, false\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if item lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_query", 
               "doc": {
                  "headline": "Tests if an item query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_search", 
               "doc": {
                  "headline": "Tests if an item search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_admin", 
               "doc": {
                  "headline": "Tests if an item administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_notification", 
               "doc": {
                  "headline": "Tests if item notification is supported.", 
                  "body": "        Messages may be sent when items are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item notification is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_bank", 
               "doc": {
                  "headline": "Tests if an item to bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item bank lookup session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_bank_assignment", 
               "doc": {
                  "headline": "Tests if an item to bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item bank assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_item_smart_bank", 
               "doc": {
                  "headline": "Tests if an item smart bank session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if item smart bank session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if item smart bank session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_lookup", 
               "doc": {
                  "headline": "Tests if an assessment lookup service is supported.", 
                  "body": "        An assessment lookup service defines methods to access\n        assessments."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if assessment lookup is supported,\n                false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if assessment lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an assessment query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_search", 
               "doc": {
                  "headline": "Tests if an assessment search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_admin", 
               "doc": {
                  "headline": "Tests if an assessment administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_notification", 
               "doc": {
                  "headline": "Tests if assessment notification is supported.", 
                  "body": "        Messages may be sent when assessments are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_bank", 
               "doc": {
                  "headline": "Tests if an assessment to bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment bank lookup session\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_bank_assignment", 
               "doc": {
                  "headline": "Tests if an assessment to bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment bank assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_smart_bank", 
               "doc": {
                  "headline": "Tests if an assessment smart bank session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment smart bank session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment smart bank session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_basic_authoring", 
               "doc": {
                  "headline": "Tests if an assessment basic authoring session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment basic authoring is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment basic authoring is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_lookup", 
               "doc": {
                  "headline": "Tests if an assessment offered lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - true if assessment offered lookup is\n                supported, false otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: true if assessment offered lookup is supported, false otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_query", 
               "doc": {
                  "headline": "Tests if an assessment offered query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered query is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_search", 
               "doc": {
                  "headline": "Tests if an assessment offered search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_admin", 
               "doc": {
                  "headline": "Tests if an assessment offered administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered admin is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_notification", 
               "doc": {
                  "headline": "Tests if assessment offered notification is supported.", 
                  "body": "        Messages may be sent when offered assessments are created,\n        modified, or deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered notification\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_bank", 
               "doc": {
                  "headline": "Tests if an assessment offered to bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered bank lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_bank_assignment", 
               "doc": {
                  "headline": "Tests if an assessment offered to bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered bank\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_smart_bank", 
               "doc": {
                  "headline": "Tests if an assessment offered smart bank session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment offered smart bank\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment offered smart bank session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_lookup", 
               "doc": {
                  "headline": "Tests if an assessment taken lookup service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken lookup is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_query", 
               "doc": {
                  "headline": "Tests if an assessment taken query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken query is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_search", 
               "doc": {
                  "headline": "Tests if an assessment taken search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_admin", 
               "doc": {
                  "headline": "Tests if an assessment taken administrative service is supported which is used to instantiate an assessment offered.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken admin is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_notification", 
               "doc": {
                  "headline": "Tests if assessment taken notification is supported.", 
                  "body": "        Messages may be sent when items are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_bank", 
               "doc": {
                  "headline": "Tests if an assessment taken to bank lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken bank lookup\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken bank lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_bank_assignment", 
               "doc": {
                  "headline": "Tests if an assessment taken to bank assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken bank assignment\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken bank assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_smart_bank", 
               "doc": {
                  "headline": "Tests if an assessment taken smart bank session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if assessment taken smart bank\n                session is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if assessment taken smart bank session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_lookup", 
               "doc": {
                  "headline": "Tests if a bank lookup service is supported.", 
                  "body": "        A bank lookup service defines methods to access assessment\n        banks."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bank lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bank lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_query", 
               "doc": {
                  "headline": "Tests if a bank query service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bank query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bank query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_search", 
               "doc": {
                  "headline": "Tests if a bank search service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bank search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bank search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_admin", 
               "doc": {
                  "headline": "Tests if a banlk administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bank admin is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bank admin is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_notification", 
               "doc": {
                  "headline": "Tests if bank notification is supported.", 
                  "body": "        Messages may be sent when items are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if bank notification is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if bank notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if a bank hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank hierarchy traversal is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_hierarchy_design", 
               "doc": {
                  "headline": "Tests if bank hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank hierarchy design is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_authoring", 
               "doc": {
                  "headline": "Tests if an assessment authoring service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment authoring is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment authoring is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_batch", 
               "doc": {
                  "headline": "Tests if an assessment batch service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment batch service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment batch service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_item_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Item`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Item`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Item`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_item_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Item`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Item`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param item_record_type: a ``Type`` indicating a ``Item`` record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Item`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Item`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Item`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_item_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Item`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_search_record_type (osid.type.Type): a ``Type``\n                indicating an ``Item`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``item_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param item_search_record_type: a ``Type`` indicating an ``Item`` search record type\n        :type item_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Assessment`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Assessment`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Assessment`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Assessment`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): a ``Type``\n                indicating an ``Assessment`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_record_type: a ``Type`` indicating an ``Assessment`` record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Assessment`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                assessment search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported assessment search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_search_record_type", 
               "doc": {
                  "headline": "Tests if the given assessment search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_search_record_type (osid.type.Type): a\n                ``Type`` indicating an assessment search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record Type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_search_record_type: a ``Type`` indicating an assessment search record type\n        :type assessment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_record_types", 
               "doc": {
                  "headline": "Gets the supported ``AssessmentOffered`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``AssessmentOffered`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``AssessmentOffered`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_record_type", 
               "doc": {
                  "headline": "Tests if the given ``AssessmentOffered`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_record_type (osid.type.Type): a\n                ``Type`` indicating an ``AssessmentOffered`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_record_type: a ``Type`` indicating an ``AssessmentOffered`` record type\n        :type assessment_offered_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``AssessmentOffered`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``AssessmentOffered`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``AssessmentOffered`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``AssessmentOffered`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_search_record_type (osid.type.Type):\n                a ``Type`` indicating an ``AssessmentOffered`` search\n                record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_search_record_type``\n                is ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_search_record_type: a ``Type`` indicating an ``AssessmentOffered`` search record type\n        :type assessment_offered_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_record_types", 
               "doc": {
                  "headline": "Gets the supported ``AssessmentTaken`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``AssessmentTaken`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``AssessmentTaken`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_record_type", 
               "doc": {
                  "headline": "Tests if the given ``AssessmentTaken`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): a\n                ``Type`` indicating an ``AssessmentTaken`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: a ``Type`` indicating an ``AssessmentTaken`` record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``AssessmentTaken`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``AssessmentTaken`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``AssessmentTaken`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``AssessmentTaken`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_search_record_type (osid.type.Type): a\n                ``Type`` indicating an ``AssessmentTaken`` search record\n                type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_search_record_type``\n                is ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_search_record_type: a ``Type`` indicating an ``AssessmentTaken`` search record type\n        :type assessment_taken_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_section_record_types", 
               "doc": {
                  "headline": "Gets the supported ``AssessmentSection`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``AssessmentSection`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``AssessmentSection`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_section_record_type", 
               "doc": {
                  "headline": "Tests if the given ``AssessmentSection`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_record_type (osid.type.Type): a\n                ``Type`` indicating an ``AssessmentSection`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_section_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_section_record_type: a ``Type`` indicating an ``AssessmentSection`` record type\n        :type assessment_section_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_section_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_section_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Bank`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Bank`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Bank`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Bank`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Bank`` type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given key record ``Type`` is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param bank_record_type: a ``Type`` indicating a ``Bank`` type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given key record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_search_record_types", 
               "doc": {
                  "headline": "Gets the supported bank search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Bank`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Bank`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_search_record_type", 
               "doc": {
                  "headline": "Tests if the given bank search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Bank`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record ``Type``\n                is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param bank_search_record_type: a ``Type`` indicating a ``Bank`` search record type\n        :type bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentManager", 
         "shortname": "AssessmentManager", 
         "category": "managers", 
         "doc": {
            "headline": "The assessment manager provides access to assessment sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``MyAssessmentTakenSession:`` a session to get taken or in\n        progress assessments for the current agent\n      * ``AssessmentSession:`` a session to be assessed and examine\n        assessments taken\n      * ``AssessmentResultsSession:`` a session to retrieve assessment\n        results\n    \n      * ``ItemLookupSession:`` a session to look up ``Items``\n      * ``ItemQuerySession`` : a session to query ``Items``\n      * ``ItemSearchSession:`` a session to search ``Items``\n      * ``ItemAdminSession:`` a session to create, modify and delete\n        ``Items``\n      * ``ItemNotificationSession: a`` session to receive messages\n        pertaining to ``Item`` changes\n      * ``ItemBankSession:`` a session for looking up item and bank\n        mappings\n      * ``ItemBankAssignmentSession:`` a session for managing item and\n        bank mappings\n      * ``ItemSmartBankSession:`` a session for managing dynamic banks\n    \n      * ``AssessmentLookupSession:`` a session to look up\n        ``Assessments``\n      * ``AssessmentQuerySession:`` a session to query ``Assessments``\n      * ``AssessmentSearchSession:`` a session to search ``Assessments``\n      * ``AssessmentAdminSession:`` a session to create, modify and\n        delete ``Assessments``\n      * ``AssessmentNotificationSession: a`` session to receive messages\n        pertaining to ``Assessment`` changes\n    \n      * ``AssessmentBankSession:`` a session for looking up assessment\n        and bank mappings\n      * ``AssessmentBankAssignmentSession:`` a session for managing\n        assessment and bank mappings\n      * ``AssessmentSmartBankSession:`` a session for managing dynamic\n        banks\n      * ``AssessmentBasicAuthoringSession:`` a session for making simple\n        mappings of assessment items to assessments\n    \n      * ``AssessmentOfferedLookupSession:`` a session to look up\n        ``AssessmentsOffered``\n      * ``AssessmentOfferedQuerySession:`` a session to query\n        ``AssessmentsOffered``\n      * ``AssessmentOfferedSearchSession`` : a session to search\n        ``AssessmentsOffered``\n      * ``AssessmentOfferedAdminSession:`` a session to create, modify\n        and delete ``AssessmentsOffered``\n      * ``AssessmentOfferedNotificationSession: a`` session to receive\n        messages pertaining to ``AssessmentOffered`` changes\n      * ``AssessmentOfferedBankSession:`` a session for looking up\n        assessments offered and bank mappings\n      * ``AssessmentOfferedBankAssignmentSession:`` a session for\n        managing assessments offered and bank mappings\n      * ``AssessmentOfferedSmartBankSession`` : a session to manage\n        dynamic banks of assessments offered\n    \n      * ``AssessmentTakenLookupSession:`` a session to look up\n        ``Assessments``\n      * ``AssessmentTakenQuerySession:`` a session to query\n        ``Assessments``\n      * ``AssessmentTakenSearchSession:`` a session to search\n        Assessments\n      * ``AssessmentTakenAdminSession:`` a session to create, modify and\n        delete ``AssessmentsTaken``\n      * ``AssessmentTakenNotificationSession: a`` session to receive\n        messages pertaining to ``AssessmentTaken`` changes\n      * ``AssessmentTakenBankSession:`` a session for looking up\n        assessments taken and bank mappings\n      * ``AssessmenttTakenBankAssignmentSession:`` a session for\n        managing assessments taken and bank mappings\n      * ``AssessmentTakenSmartBankSession:`` a session to manage dynamic\n        banks of assessments taken\n    \n      * ``BankLookupSession:`` a session to lookup banks\n      * ``BankQuerySession`` : a session to query banks\n      * ``BankSearchSession:`` a session to search banks\n      * ``BankAdminSession`` : a session to create, modify and delete\n        banks\n      * ``BankNotificationSession`` : a session to receive messages\n        pertaining to ``Bank`` changes\n      * ``BankHierarchySession`` : a session to traverse the ``Bank``\n        hierarchy\n      * ``BankHierarchyDesignSession`` : a session to manage the\n        ``Bank`` hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.assessment.AssessmentProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "AssessmentProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "assessment", 
               "name": "AssessmentProfile"
            }
         ], 
         "method_names": [
            "get_my_assessment_taken_session", 
            "get_my_assessment_taken_session_for_bank", 
            "get_assessment_session", 
            "get_assessment_session_for_bank", 
            "get_assessment_results_session", 
            "get_assessment_results_session_for_bank", 
            "get_item_lookup_session", 
            "get_item_lookup_session_for_bank", 
            "get_item_query_session", 
            "get_item_query_session_for_bank", 
            "get_item_search_session", 
            "get_item_search_session_for_bank", 
            "get_item_admin_session", 
            "get_item_admin_session_for_bank", 
            "get_item_notification_session", 
            "get_item_notification_session_for_bank", 
            "get_item_bank_session", 
            "get_item_bank_assignment_session", 
            "get_item_smart_bank_session", 
            "get_assessment_lookup_session", 
            "get_assessment_lookup_session_for_bank", 
            "get_assessment_query_session", 
            "get_assessment_query_session_for_bank", 
            "get_assessment_search_session", 
            "get_assessment_search_session_for_bank", 
            "get_assessment_admin_session", 
            "get_assessment_admin_session_for_bank", 
            "get_assessment_notification_session", 
            "get_assessment_notification_session_for_bank", 
            "get_assessment_bank_session", 
            "get_assessment_bank_assignment_session", 
            "get_assessment_smart_bank_session", 
            "get_assessment_basic_authoring_session", 
            "get_assessment_basic_authoring_session_for_bank", 
            "get_assessment_offered_lookup_session", 
            "get_assessment_offered_lookup_session_for_bank", 
            "get_assessment_offered_query_session", 
            "get_assessment_offered_query_session_for_bank", 
            "get_assessment_offered_search_session", 
            "get_assessment_offered_search_session_for_bank", 
            "get_assessment_offered_admin_session", 
            "get_assessment_offered_admin_session_for_bank", 
            "get_assessment_offered_notification_session", 
            "get_assessment_offered_notification_session_for_bank", 
            "get_assessment_offered_bank_session", 
            "get_assessment_offered_bank_assignment_session", 
            "get_assessment_offered_smart_bank_session", 
            "get_assessment_taken_lookup_session", 
            "get_assessment_taken_lookup_session_for_bank", 
            "get_assessment_taken_query_session", 
            "get_assessment_taken_query_session_for_bank", 
            "get_assessment_taken_search_session", 
            "get_assessment_taken_search_session_for_bank", 
            "get_assessment_taken_notification_session", 
            "get_assessment_taken_notification_session_for_bank", 
            "get_bank_lookup_session", 
            "get_bank_query_session", 
            "get_bank_search_session", 
            "get_bank_admin_session", 
            "get_bank_notification_session", 
            "get_bank_hierarchy_session", 
            "get_bank_hierarchy_design_session", 
            "get_assessment_authoring_manager", 
            "get_assessment_batch_manager"
         ], 
         "methods": [
            {
               "name": "get_my_assessment_taken_session", 
               "doc": {
                  "headline": "Gets a ``MyAssessmentTakenSession`` to retrieve assessments taken for the current agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.MyAssessmentTakenSession) - a\n                ``MyAssessmentTakenSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_assessment_taken()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``MyAssessmentTakenSession``\n        :rtype: ``osid.assessment.MyAssessmentTakenSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_assessment_taken()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_assessment_taken()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.MyAssessmentTakenSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_assessment_taken_session_for_bank", 
               "doc": {
                  "headline": "Gets a ``MyAssessmentTakenSession`` to retrieve assessments taken for the current agent for the given bank ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (osid.assessment.MyAssessmentTakenSession) - a\n                ``MyAssessmentTakenSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_assessment_taken()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``MyAssessmentTakenSession``\n        :rtype: ``osid.assessment.MyAssessmentTakenSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_assessment_taken()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_assessment_taken()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.MyAssessmentTakenSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_session", 
               "doc": {
                  "headline": "Gets an ``AssessmentSession`` which is responsible for taking assessments and examining responses from assessments taken.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSession) - an assessment\n                session for this service", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment session for this service\n        :rtype: ``osid.assessment.AssessmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_session_for_bank", 
               "doc": {
                  "headline": "Gets an ``AssessmentSession`` which is responsible for performing assessments for the given bank ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSession) - an assessment\n                session for this service", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an assessment session for this service\n        :rtype: ``osid.assessment.AssessmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_results_session", 
               "doc": {
                  "headline": "Gets an ``AssessmentResultsSession`` to retrieve assessment results.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentResultsSession) - an\n                assessment results session for this service", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_results()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment results session for this service\n        :rtype: ``osid.assessment.AssessmentResultsSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_results()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_results()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentResultsSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_results_session_for_bank", 
               "doc": {
                  "headline": "Gets an ``AssessmentResultsSession`` to retrieve assessment results for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the assessment taken\n", 
               "return_doc": "        return: (osid.assessment.AssessmentResultsSession) - an\n                assessment results session for this service", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_results()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the assessment taken\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an assessment results session for this service\n        :rtype: ``osid.assessment.AssessmentResultsSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_results()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_results()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentResultsSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemLookupSession) - an\n                ``ItemLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemLookupSession``\n        :rtype: ``osid.assessment.ItemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.ItemLookupSession) - ``an\n                _item_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _item_lookup_session``\n        :rtype: ``osid.assessment.ItemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQuerySession) - an\n                ``ItemQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemQuerySession``\n        :rtype: ``osid.assessment.ItemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.ItemQuerySession) - ``an\n                _item_query_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _item_query_session``\n        :rtype: ``osid.assessment.ItemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemSearchSession) - an\n                ``ItemSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemSearchSession``\n        :rtype: ``osid.assessment.ItemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.ItemSearchSession) - ``an\n                _item_search_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _item_search_session``\n        :rtype: ``osid.assessment.ItemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemAdminSession) - an\n                ``ItemAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemAdminSession``\n        :rtype: ``osid.assessment.ItemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.ItemAdminSession) - ``an\n                _item_admin_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _item_admin_session``\n        :rtype: ``osid.assessment.ItemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to item changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_receiver (osid.assessment.ItemReceiver): the item\n                receiver interface\n", 
               "return_doc": "        return: (osid.assessment.ItemNotificationSession) - an\n                ``ItemNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``item_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_receiver: the item receiver interface\n        :type item_receiver: ``osid.assessment.ItemReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``ItemNotificationSession``\n        :rtype: ``osid.assessment.ItemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemReceiver", 
                     "var_name": "item_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemReceiver"
               ], 
               "return_type": "osid.assessment.ItemNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_receiver (osid.assessment.ItemReceiver): the item\n                receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - ``an\n                _item_notification_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``item_receiver`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param item_receiver: the item receiver interface\n        :type item_receiver: ``osid.assessment.ItemReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _item_notification_session``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``item_receiver`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemReceiver", 
                     "var_name": "item_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item banking service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemBankSession) - an\n                ``ItemBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_bank()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemBankSession``\n        :rtype: ``osid.assessment.ItemBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item bank assignment service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemBankAssignmentSession) - an\n                ``ItemBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``ItemBankAssignmentSession``\n        :rtype: ``osid.assessment.ItemBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.ItemSmartBankSession) - an\n                ``ItemSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``ItemSmartBankSession``\n        :rtype: ``osid.assessment.ItemSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentLookupSession) - an\n                ``AssessmentLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentLookupSession``\n        :rtype: ``osid.assessment.AssessmentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentLookupSession) - ``an\n                _assessment_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_lookup_session``\n        :rtype: ``osid.assessment.AssessmentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuerySession) - an\n                ``AssessmentQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentQuerySession``\n        :rtype: ``osid.assessment.AssessmentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentQuerySession) - ``an\n                _assessment_query_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_query_session``\n        :rtype: ``osid.assessment.AssessmentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchSession) - an\n                ``AssessmentSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentSearchSession``\n        :rtype: ``osid.assessment.AssessmentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchSession) - ``an\n                _assessment_search_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_search_session``\n        :rtype: ``osid.assessment.AssessmentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentAdminSession) - an\n                ``AssessmentAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentAdminSession``\n        :rtype: ``osid.assessment.AssessmentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentAdminSession) - ``an\n                _assessment_admin_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_admin_session``\n        :rtype: ``osid.assessment.AssessmentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_receiver\n                (osid.assessment.AssessmentReceiver): the assessment\n                receiver interface\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - an\n                ``AssessmentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param assessment_receiver: the assessment receiver interface\n        :type assessment_receiver: ``osid.assessment.AssessmentReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentNotificationSession``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentReceiver", 
                     "var_name": "assessment_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentReceiver"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_receiver\n                (osid.assessment.AssessmentReceiver): the assessment\n                receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - ``an\n                _assessment_notification_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``assessment_receiver`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_receiver: the assessment receiver interface\n        :type assessment_receiver: ``osid.assessment.AssessmentReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_notification_session``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_receiver`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentReceiver", 
                     "var_name": "assessment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment banking service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentBankSession) - an\n                ``AssessmentBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentBankSession``\n        :rtype: ``osid.assessment.AssessmentBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment bank assignment service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentBankAssignmentSession) - an\n                ``AssessmentBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_bank_assignment()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentBankAssignmentSession``\n        :rtype: ``osid.assessment.AssessmentBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSmartBankSession) - an\n                ``AssessmentSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentSmartBankSession``\n        :rtype: ``osid.assessment.AssessmentSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_basic_authoring_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment authoring service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentBasicAuthoringSession) - an\n                ``AssessmentBasicAuthoringSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_basic_authoring()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentBasicAuthoringSession``\n        :rtype: ``osid.assessment.AssessmentBasicAuthoringSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_basic_authoring()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_basic_authoring()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentBasicAuthoringSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_basic_authoring_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment authoring service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentBasicAuthoringSession) - an\n                ``AssessmentBasicAuthoringSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_basic_authoring()`` or\n                ``supports_visibe_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentBasicAuthoringSession``\n        :rtype: ``osid.assessment.AssessmentBasicAuthoringSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_basic_authoring()`` or ``supports_visibe_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_basic_authoring()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentBasicAuthoringSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedLookupSession) - an\n                ``AssessmentOfferedLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedLookupSession``\n        :rtype: ``osid.assessment.AssessmentOfferedLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedLookupSession) - an\n                ``AssessmentOfferedLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedLookupSession``\n        :rtype: ``osid.assessment.AssessmentOfferedLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuerySession) - an\n                ``AssessmentOfferedQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedQuerySession``\n        :rtype: ``osid.assessment.AssessmentOfferedQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuerySession) - an\n                ``AssessmentOfferedQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedQuerySession``\n        :rtype: ``osid.assessment.AssessmentOfferedQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchSession) - an\n                ``AssessmentOfferedSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_search()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSearchSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchSession) - an\n                ``AssessmentOfferedSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSearchSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedAdminSession) - an\n                ``AssessmentOfferedAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_admin()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedAdminSession``\n        :rtype: ``osid.assessment.AssessmentOfferedAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedAdminSession) - an\n                ``AssessmentOfferedAdminSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_admin()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedAdminSession``\n        :rtype: ``osid.assessment.AssessmentOfferedAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to offered assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_receiver\n                (osid.assessment.AssessmentOfferedReceiver): the\n                assessment offered receiver interface\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedNotificationSession) -\n                an ``AssessmentOfferedNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_receiver`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_receiver: the assessment offered receiver interface\n        :type assessment_offered_receiver: ``osid.assessment.AssessmentOfferedReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedNotificationSession``\n        :rtype: ``osid.assessment.AssessmentOfferedNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedReceiver", 
                     "var_name": "assessment_offered_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedReceiver"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the offered assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_receiver\n                (osid.assessment.AssessmentOfferedReceiver): the\n                assessment offered receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedNotificationSession) -\n                a ``AssessmentOfferedNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``assessment_offered_receiver`` or\n                ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_assessment_offered_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_receiver: the assessment offered receiver interface\n        :type assessment_offered_receiver: ``osid.assessment.AssessmentOfferedReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``AssessmentOfferedNotificationSession``\n        :rtype: ``osid.assessment.AssessmentOfferedNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_receiver`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedReceiver", 
                     "var_name": "assessment_offered_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving offered assessments to bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedBankSession) - an\n                ``AssessmentOfferedBankSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_bank()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedBankSession``\n        :rtype: ``osid.assessment.AssessmentOfferedBankSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedBankSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning offered assessments to bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedBankAssignmentSession)\n                - an ``AssessmentOfferedBankAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedBankAssignmentSession``\n        :rtype: ``osid.assessment.AssessmentOfferedBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedBankAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSmartBankSession) - an\n                ``AssessmentOfferedSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSmartBankSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenLookupSession) - an\n                ``AssessmentTakenLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenLookupSession``\n        :rtype: ``osid.assessment.AssessmentTakenLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenLookupSession) - an\n                ``AssessmentTakenLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenLookupSession``\n        :rtype: ``osid.assessment.AssessmentTakenLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuerySession) - an\n                ``AssessmentTakenQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenQuerySession``\n        :rtype: ``osid.assessment.AssessmentTakenQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuerySession) - an\n                ``AssessmentTakenQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenQuerySession``\n        :rtype: ``osid.assessment.AssessmentTakenQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchSession) - an\n                ``AssessmentTakenSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_search()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenSearchSession``\n        :rtype: ``osid.assessment.AssessmentTakenSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchSession) - an\n                ``AssessmentTakenSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenSearchSession``\n        :rtype: ``osid.assessment.AssessmentTakenSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to taken assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_receiver\n                (osid.assessment.AssessmentTakenReceiver): the\n                assessment taken receiver interface\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenNotificationSession) -\n                an ``AssessmentTakenNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_taken_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_receiver: the assessment taken receiver interface\n        :type assessment_taken_receiver: ``osid.assessment.AssessmentTakenReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenNotificationSession``\n        :rtype: ``osid.assessment.AssessmentTakenNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenReceiver", 
                     "var_name": "assessment_taken_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenReceiver"
               ], 
               "return_type": "osid.assessment.AssessmentTakenNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the taken assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_receiver\n                (osid.assessment.AssessmentTakenReceiver): the\n                assessment taken receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenNotificationSession) -\n                an ``AssessmentTakenNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``assessment_taken_receiver`` or\n                ``bank_id`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_assessment_taken_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_receiver: the assessment taken receiver interface\n        :type assessment_taken_receiver: ``osid.assessment.AssessmentTakenReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenNotificationSession``\n        :rtype: ``osid.assessment.AssessmentTakenNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_receiver`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenReceiver", 
                     "var_name": "assessment_taken_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankLookupSession) - a\n                ``BankLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_lookup() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankLookupSession``\n        :rtype: ``osid.assessment.BankLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuerySession) - a\n                ``BankQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_query() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankQuerySession``\n        :rtype: ``osid.assessment.BankQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankSearchSession) - a\n                ``BankSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_search() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankSearchSession``\n        :rtype: ``osid.assessment.BankSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankAdminSession) - a\n                ``BankAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_admin() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankAdminSession``\n        :rtype: ``osid.assessment.BankAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to bank service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bankreceiver (osid.assessment.BankReceiver): the bank\n                receiver interface\n", 
               "return_doc": "        return: (osid.assessment.BankNotificationSession) - a\n                ``BankNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``bank_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_notification() is\n                false``", 
               "sphinx_param_doc": "        :param bankreceiver: the bank receiver interface\n        :type bankreceiver: ``osid.assessment.BankReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``BankNotificationSession``\n        :rtype: ``osid.assessment.BankNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankReceiver", 
                     "var_name": "bankreceiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankReceiver"
               ], 
               "return_type": "osid.assessment.BankNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankHierarchySession) - a\n                ``BankHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_hierarchy() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankHierarchySession``\n        :rtype: ``osid.assessment.BankHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankHierarchyDesignSession) - a\n                ``BankHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_hierarchy_design() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankHierarchySession``\n        :rtype: ``osid.assessment.BankHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_authoring_manager", 
               "doc": {
                  "headline": "Gets an ``AssessmentAuthoringManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.authoring.AssessmentAuthoringManager) -\n                an ``AssessmentAuthoringManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_authoring() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentAuthoringManager``\n        :rtype: ``osid.assessment.authoring.AssessmentAuthoringManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_authoring() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_authoring()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.authoring.AssessmentAuthoringManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_batch_manager", 
               "doc": {
                  "headline": "Gets an ``AssessmentBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.batch.AssessmentBatchManager) - an\n                ``AssessmentBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentBatchManager``\n        :rtype: ``osid.assessment.batch.AssessmentBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.batch.AssessmentBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentProxyManager", 
         "shortname": "AssessmentProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The assessment manager provides access to assessment sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy`` object.\n    The sessions included in this manager are:\n\n      * ``MyAssessmentTakenSession:`` a session to get taken or in\n        progress assessments for the current agent\n      * ``AssessmentSession:`` a session to be assessed and examine\n        assessments taken\n      * ``AssessmentResultsSession:`` a session to retrieve assessment\n        results\n    \n      * ``ItemLookupSession:`` a session to look up ``Items``\n      * ``ItemQuerySession`` : a session to query ``Items``\n      * ``ItemSearchSession:`` a session to search ``Items``\n      * ``ItemAdminSession:`` a session to create, modify and delete\n        ``Items``\n      * ``ItemNotificationSession: a`` session to receive messages\n        pertaining to ``Item`` changes\n      * ``ItemBankSession:`` a session for looking up item and bank\n        mappings\n      * ``ItemBankAssignmentSession:`` a session for managing item and\n        bank mappings\n      * ``ItemSmartBankSession:`` a session for managing dynamic banks\n    \n      * ``AssessmentLookupSession:`` a session to look up\n        ``Assessments``\n      * ``AssessmentQuerySession:`` a session to query ``Assessments``\n      * ``AssessmentSearchSession:`` a session to search ``Assessments``\n      * ``AssessmentAdminSession:`` a session to create, modify and\n        delete ``Assessments``\n      * ``AssessmentNotificationSession: a`` session to receive messages\n        pertaining to ``Assessment`` changes\n    \n      * ``AssessmentBankSession:`` a session for looking up assessment\n        and bank mappings\n      * ``AssessmentBankAssignmentSession:`` a session for managing\n        assessment and bank mappings\n      * ``AssessmentSmartBankSession:`` a session for managing dynamic\n        banks\n      * ``AssessmentBasicAuthoringSession:`` a session for making simple\n        mappings of assessment items to assessments\n    \n      * ``AssessmentOfferedLookupSession:`` a session to look up\n        ``Assessments``\n      * ``AssessmentOfferedQuerySession:`` a session to query\n        ``Assessments``\n      * ``AssessmentOfferedSearchSession`` : a session to search\n        ``Assessments``\n      * ``AssessmentOfferedAdminSession:`` a session to create, modify\n        and delete ``Assessments``\n      * ``AssessmentOfferedNotificationSession: a`` session to receive\n        messages pertaining to ``Assessment`` changes\n      * ``AssessmentOfferedBankSession:`` a session for looking up\n        assessment and bank mappings\n      * ``AssessmentOfferedBankAssignmentSession:`` a session for\n        managing assessment and bank mappings\n      * ``AssessmentOfferedSmartBankSession`` : a session to manage\n        dynamic banks\n    \n      * ``AssessmentTakenLookupSession:`` a session to look up\n        ``Assessments``\n      * ``AssessmentTakenQuerySession:`` a session to query\n        ``Assessments``\n      * ``AssessmentTakenSearchSession:`` a session to search\n        Assessments\n      * ``AssessmentTakenAdminSession:`` a session to create, modify and\n        delete ``AssessmentsTaken``\n      * ``AssessmentTakenNotificationSession: a`` session to receive\n        messages pertaining to ``AssessmentTaken`` changes\n      * ``AssessmentTakenBankSession:`` a session for looking up\n        assessments taken and bank mappings\n      * ``AssessmenttTakenBankAssignmentSession:`` a session for\n        managing assessments taken and bank mappings\n      * ``AssessmentTakenSmartBankSession:`` a session to manage dynamic\n        banks of assessments taken\n    \n      * ``BankLookupSession:`` a session to lookup banks\n      * ``BankQuerySession`` : a session to query banks\n      * ``BankSearchSession:`` a session to search banks\n      * ``BankAdminSession`` : a session to create, modify and delete\n        banks\n      * ``BankNotificationSession`` : a session to receive messages\n        pertaining to ``Bank`` changes\n      * ``BankHierarchySession`` : a session to traverse the ``Bank``\n        hierarchy\n      * ``BankHierarchyDesignSession`` : a session to manage the\n        ``Bank`` hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.assessment.AssessmentProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "AssessmentProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "assessment", 
               "name": "AssessmentProfile"
            }
         ], 
         "method_names": [
            "get_my_assessment_taken_session", 
            "get_my_assessment_taken_session_for_bank", 
            "get_assessment_session", 
            "get_assessment_session_for_bank", 
            "get_assessment_results_session", 
            "get_assessment_results_session_for_bank", 
            "get_item_lookup_session", 
            "get_item_lookup_session_for_bank", 
            "get_item_query_session", 
            "get_item_query_session_for_bank", 
            "get_item_search_session", 
            "get_item_search_session_for_bank", 
            "get_item_admin_session", 
            "get_item_admin_session_for_bank", 
            "get_item_notification_session", 
            "get_item_notification_session_for_bank", 
            "get_item_bank_session", 
            "get_item_bank_assignment_session", 
            "get_item_smart_bank_session", 
            "get_assessment_lookup_session", 
            "get_assessment_lookup_session_for_bank", 
            "get_assessment_query_session", 
            "get_assessment_query_session_for_bank", 
            "get_assessment_search_session", 
            "get_assessment_search_session_for_bank", 
            "get_assessment_admin_session", 
            "get_assessment_admin_session_for_bank", 
            "get_assessment_notification_session", 
            "get_assessment_notification_session_for_bank", 
            "get_assessment_bank_session", 
            "get_assessment_bank_assignment_session", 
            "get_assessment_smart_bank_session", 
            "get_assessment_basic_authoring_session", 
            "get_assessment_basic_authoring_session_for_bank", 
            "get_assessment_offered_lookup_session", 
            "get_assessment_offered_lookup_session_for_bank", 
            "get_assessment_offered_query_session", 
            "get_assessment_offered_query_session_for_bank", 
            "get_assessment_offered_search_session", 
            "get_assessment_offered_search_session_for_bank", 
            "get_assessment_offered_admin_session", 
            "get_assessment_offered_admin_session_for_bank", 
            "get_assessment_offered_notification_session", 
            "get_assessment_offered_notification_session_for_bank", 
            "get_assessment_offered_bank_session", 
            "get_assessment_offered_bank_assignment_session", 
            "get_assessment_offered_smart_bank_session", 
            "get_assessment_taken_lookup_session", 
            "get_assessment_taken_lookup_session_for_bank", 
            "get_assessment_taken_query_session", 
            "get_assessment_taken_query_session_for_bank", 
            "get_assessment_taken_search_session", 
            "get_assessment_taken_search_session_for_bank", 
            "get_assessment_taken_notification_session", 
            "get_assessment_taken_notification_session_for_bank", 
            "get_bank_lookup_session", 
            "get_bank_query_session", 
            "get_bank_search_session", 
            "get_bank_admin_session", 
            "get_bank_notification_session", 
            "get_bank_hierarchy_session", 
            "get_bank_hierarchy_design_session", 
            "get_assessment_authoring_proxy_manager", 
            "get_assessment_batch_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_my_assessment_taken_session", 
               "doc": {
                  "headline": "Gets a ``MyAssessmentTakenSession`` to retrieve assessments taken for the current agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.MyAssessmentTakenSession) - a\n                ``MyAssessmentTakenSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_assessment_taken()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyAssessmentTakenSession``\n        :rtype: ``osid.assessment.MyAssessmentTakenSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_assessment_taken()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_assessment_taken()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.MyAssessmentTakenSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_my_assessment_taken_session_for_bank", 
               "doc": {
                  "headline": "Gets a ``MyAssessmentTakenSession`` to retrieve assessments taken for the current agent for the given bank ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.MyAssessmentTakenSession) - a\n                ``MyAssessmentTakenSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_my_assessment_taken()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``MyAssessmentTakenSession``\n        :rtype: ``osid.assessment.MyAssessmentTakenSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_my_assessment_taken()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_my_assessment_taken()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.MyAssessmentTakenSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_session", 
               "doc": {
                  "headline": "Gets an ``AssessmentSession`` which is responsible for taking assessments and examining responses from assessments taken.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSession) - an assessment\n                session for this service", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an assessment session for this service\n        :rtype: ``osid.assessment.AssessmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_session_for_bank", 
               "doc": {
                  "headline": "Gets an ``AssessmentSession`` which is responsible for performing assessments for the given bank ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSession) - an assessment\n                session for this service", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an assessment session for this service\n        :rtype: ``osid.assessment.AssessmentSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_results_session", 
               "doc": {
                  "headline": "Gets an ``AssessmentResultsSession`` to retrieve assessment results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentResultsSession) - an\n                assessment results session for this service", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_results()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an assessment results session for this service\n        :rtype: ``osid.assessment.AssessmentResultsSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_results()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_results()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentResultsSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_results_session_for_bank", 
               "doc": {
                  "headline": "Gets an ``AssessmentResultsSession`` to retrieve assessment results for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the assessment taken\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentResultsSession) - an\n                assessment results session for this service", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_results()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the assessment taken\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an assessment results session for this service\n        :rtype: ``osid.assessment.AssessmentResultsSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_results()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_results()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentResultsSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemLookupSession) - an\n                ``ItemLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemLookupSession``\n        :rtype: ``osid.assessment.ItemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemLookupSession) - ``an\n                _item_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _item_lookup_session``\n        :rtype: ``osid.assessment.ItemLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemQuerySession) - an\n                ``ItemQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemQuerySession``\n        :rtype: ``osid.assessment.ItemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemQuerySession) - ``an\n                _item_query_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _item_query_session``\n        :rtype: ``osid.assessment.ItemQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemSearchSession) - an\n                ``ItemSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemSearchSession``\n        :rtype: ``osid.assessment.ItemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemSearchSession) - ``an\n                _item_search_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``porxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _item_search_session``\n        :rtype: ``osid.assessment.ItemSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``porxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemAdminSession) - an\n                ``ItemAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemAdminSession``\n        :rtype: ``osid.assessment.ItemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemAdminSession) - ``an\n                _item_admin_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _item_admin_session``\n        :rtype: ``osid.assessment.ItemAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to item changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_receiver (osid.assessment.ItemReceiver): the item\n                receiver interface\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemNotificationSession) - an\n                ``ItemNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``item_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_receiver: the item receiver interface\n        :type item_receiver: ``osid.assessment.ItemReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemNotificationSession``\n        :rtype: ``osid.assessment.ItemNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemReceiver", 
                     "var_name": "item_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_receiver (osid.assessment.ItemReceiver): the item\n                receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - ``an\n                _item_notification_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``item_receiver, bank_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_item_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param item_receiver: the item receiver interface\n        :type item_receiver: ``osid.assessment.ItemReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _item_notification_session``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``item_receiver, bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_item_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemReceiver", 
                     "var_name": "item_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item banking service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemBankSession) - an\n                ``ItemBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_bank()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemBankSession``\n        :rtype: ``osid.assessment.ItemBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item bank assignment service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemBankAssignmentSession) - an\n                ``ItemBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemBankAssignmentSession``\n        :rtype: ``osid.assessment.ItemBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the item smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.ItemSmartBankSession) - an\n                ``ItemSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_item_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``ItemSmartBankSession``\n        :rtype: ``osid.assessment.ItemSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_item_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.ItemSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentLookupSession) - an\n                ``AssessmentLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentLookupSession``\n        :rtype: ``osid.assessment.AssessmentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentLookupSession) - ``an\n                _assessment_lookup_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_lookup_session``\n        :rtype: ``osid.assessment.AssessmentLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentQuerySession) - an\n                ``AssessmentQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentQuerySession``\n        :rtype: ``osid.assessment.AssessmentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentQuerySession) - ``an\n                _assessment_query_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_query_session``\n        :rtype: ``osid.assessment.AssessmentQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchSession) - an\n                ``AssessmentSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentSearchSession``\n        :rtype: ``osid.assessment.AssessmentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchSession) - ``an\n                _assessment_search_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_search_session``\n        :rtype: ``osid.assessment.AssessmentSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentAdminSession) - an\n                ``AssessmentAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentAdminSession``\n        :rtype: ``osid.assessment.AssessmentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentAdminSession) - ``an\n                _assessment_admin_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_admin_session``\n        :rtype: ``osid.assessment.AssessmentAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_receiver\n                (osid.assessment.AssessmentReceiver): the assessment\n                receiver interface\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - an\n                ``AssessmentNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param assessment_receiver: the assessment receiver interface\n        :type assessment_receiver: ``osid.assessment.AssessmentReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentNotificationSession``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentReceiver", 
                     "var_name": "assessment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_receiver\n                (osid.assessment.AssessmentReceiver): the assessment\n                receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentNotificationSession) - ``an\n                _assessment_notification_session``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``assessment_receiver, bank_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_receiver: the assessment receiver interface\n        :type assessment_receiver: ``osid.assessment.AssessmentReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``an _assessment_notification_session``\n        :rtype: ``osid.assessment.AssessmentNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_receiver, bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentReceiver", 
                     "var_name": "assessment_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment banking service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentBankSession) - an\n                ``AssessmentBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentBankSession``\n        :rtype: ``osid.assessment.AssessmentBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment bank assignment service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentBankAssignmentSession) - an\n                ``AssessmentBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_bank_assignment()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentBankAssignmentSession``\n        :rtype: ``osid.assessment.AssessmentBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSmartBankSession) - an\n                ``AssessmentSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentSmartBankSession``\n        :rtype: ``osid.assessment.AssessmentSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_basic_authoring_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment authoring service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentBasicAuthoringSession) - an\n                ``AssessmentBasicAuthoringSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_basic_authoring()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentBasicAuthoringSession``\n        :rtype: ``osid.assessment.AssessmentBasicAuthoringSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_basic_authoring()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_basic_authoring()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentBasicAuthoringSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_basic_authoring_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment authoring service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentBasicAuthoringSession) - an\n                ``AssessmentBasicAuthoringSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_basic_authoring()`` or\n                ``supports_visibe_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentBasicAuthoringSession``\n        :rtype: ``osid.assessment.AssessmentBasicAuthoringSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_basic_authoring()`` or ``supports_visibe_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_basic_authoring()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentBasicAuthoringSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedLookupSession) - an\n                ``AssessmentOfferedLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedLookupSession``\n        :rtype: ``osid.assessment.AssessmentOfferedLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedLookupSession) - an\n                ``AssessmentOfferedLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedLookupSession``\n        :rtype: ``osid.assessment.AssessmentOfferedLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuerySession) - an\n                ``AssessmentOfferedQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedQuerySession``\n        :rtype: ``osid.assessment.AssessmentOfferedQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuerySession) - an\n                ``AssessmentOfferedQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedQuerySession``\n        :rtype: ``osid.assessment.AssessmentOfferedQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchSession) - an\n                ``AssessmentOfferedSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_search()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSearchSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchSession) - an\n                ``AssessmentOfferedSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or proxy is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSearchSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or proxy is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedAdminSession) - an\n                ``AssessmentOfferedAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_admin()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedAdminSession``\n        :rtype: ``osid.assessment.AssessmentOfferedAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_admin_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered admin service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedAdminSession) - an\n                ``AssessmentOfferedAdminSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_offered_admin()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedAdminSession``\n        :rtype: ``osid.assessment.AssessmentOfferedAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_admin()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to offered assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_receiver\n                (osid.assessment.AssessmentOfferedReceiver): the\n                assessment offered receiver interface\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedNotificationSession) -\n                an ``AssessmentOfferedNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_receiver: the assessment offered receiver interface\n        :type assessment_offered_receiver: ``osid.assessment.AssessmentOfferedReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedNotificationSession``\n        :rtype: ``osid.assessment.AssessmentOfferedNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedReceiver", 
                     "var_name": "assessment_offered_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the offered assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_receiver\n                (osid.assessment.AssessmentOfferedReceiver): the\n                assessment offered receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedNotificationSession) -\n                a ``AssessmentOfferedNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` or ``proxy`` not found\n        raise:  NullArgument - ``assessment_offered_receiver, bank_id``\n                or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_assessment_offered_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_receiver: the assessment offered receiver interface\n        :type assessment_offered_receiver: ``osid.assessment.AssessmentOfferedReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``AssessmentOfferedNotificationSession``\n        :rtype: ``osid.assessment.AssessmentOfferedNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` or ``proxy`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_receiver, bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedReceiver", 
                     "var_name": "assessment_offered_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_bank_session", 
               "doc": {
                  "headline": "Gets the session for retrieving offered assessments to bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedBankSession) - an\n                ``AssessmentOfferedBankSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_offered_bank()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedBankSession``\n        :rtype: ``osid.assessment.AssessmentOfferedBankSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_bank()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedBankSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_bank_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning offered assessments to bank mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedBankAssignmentSession)\n                - an ``AssessmentOfferedBankAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_bank_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedBankAssignmentSession``\n        :rtype: ``osid.assessment.AssessmentOfferedBankAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_bank_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_bank_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedBankAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_smart_bank_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment offered smart banking service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSmartBankSession) - an\n                ``AssessmentOfferedSmartBankSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_offered_smart_bank()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentOfferedSmartBankSession``\n        :rtype: ``osid.assessment.AssessmentOfferedSmartBankSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_offered_smart_bank()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_smart_bank()`` and ``supports_visibe_federation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSmartBankSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenLookupSession) - an\n                ``AssessmentTakenLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_lookup()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenLookupSession``\n        :rtype: ``osid.assessment.AssessmentTakenLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_lookup_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken lookup service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenLookupSession) - an\n                ``AssessmentTakenLookupSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_lookup()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenLookupSession``\n        :rtype: ``osid.assessment.AssessmentTakenLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_lookup()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuerySession) - an\n                ``AssessmentTakenQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenQuerySession``\n        :rtype: ``osid.assessment.AssessmentTakenQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken query service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuerySession) - an\n                ``AssessmentTakenQuerySession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenQuerySession``\n        :rtype: ``osid.assessment.AssessmentTakenQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchSession) - an\n                ``AssessmentTakenSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_taken_search()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenSearchSession``\n        :rtype: ``osid.assessment.AssessmentTakenSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the assessment taken search service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchSession) - an\n                ``AssessmentTakenSearchSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_assessment_taken_search()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenSearchSession``\n        :rtype: ``osid.assessment.AssessmentTakenSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_search()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to taken assessment changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_receiver\n                (osid.assessment.AssessmentTakenReceiver): the\n                assessment taken receiver interface\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenNotificationSession) -\n                an ``AssessmentTakenNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_assessment_taken_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_receiver: the assessment taken receiver interface\n        :type assessment_taken_receiver: ``osid.assessment.AssessmentTakenReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenNotificationSession``\n        :rtype: ``osid.assessment.AssessmentTakenNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenReceiver", 
                     "var_name": "assessment_taken_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_notification_session_for_bank", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the taken assessment notification service for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_receiver\n                (osid.assessment.AssessmentTakenReceiver): the\n                assessment taken receiver interface\n        arg:    bank_id (osid.id.Id): the ``Id`` of the bank\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenNotificationSession) -\n                an ``AssessmentTakenNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``assessment_taken_receiver, bank_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented -\n                ``supports_assessment_taken_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_receiver: the assessment taken receiver interface\n        :type assessment_taken_receiver: ``osid.assessment.AssessmentTakenReceiver``\n        :param bank_id: the ``Id`` of the bank\n        :type bank_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``AssessmentTakenNotificationSession``\n        :rtype: ``osid.assessment.AssessmentTakenNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_receiver, bank_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_assessment_taken_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenReceiver", 
                     "var_name": "assessment_taken_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.AssessmentTakenNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_lookup_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankLookupSession) - a\n                ``BankLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_lookup() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankLookupSession``\n        :rtype: ``osid.assessment.BankLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_lookup() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_lookup()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_query_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankQuerySession) - a\n                ``BankQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_query() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankQuerySession``\n        :rtype: ``osid.assessment.BankQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_query() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_search_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankSearchSession) - a\n                ``BankSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_search() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankSearchSession``\n        :rtype: ``osid.assessment.BankSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_search() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_search()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_admin_session", 
               "doc": {
                  "headline": "Gets the OsidSession associated with the bank administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankAdminSession) - a\n                ``BankAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_admin() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankAdminSession``\n        :rtype: ``osid.assessment.BankAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_admin() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_admin()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_notification_session", 
               "doc": {
                  "headline": "Gets the notification session for notifications pertaining to bank service changes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_receiver (osid.assessment.BankReceiver): the bank\n                receiver interface\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankNotificationSession) - a\n                ``BankNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``bank_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_notification() is\n                false``", 
               "sphinx_param_doc": "        :param bank_receiver: the bank receiver interface\n        :type bank_receiver: ``osid.assessment.BankReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankNotificationSession``\n        :rtype: ``osid.assessment.BankNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_notification() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_notification()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankReceiver", 
                     "var_name": "bank_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_hierarchy_session", 
               "doc": {
                  "headline": "Gets the session traversing bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankHierarchySession) - a\n                ``BankHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_hierarchy() is false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankHierarchySession``\n        :rtype: ``osid.assessment.BankHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_hierarchy() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_hierarchy()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the session designing bank hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.assessment.BankHierarchyDesignSession) - a\n                ``BankHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_bank_hierarchy_design() is\n                false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``BankHierarchySession``\n        :rtype: ``osid.assessment.BankHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_bank_hierarchy_design() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_hierarchy_design()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.assessment.BankHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_authoring_proxy_manager", 
               "doc": {
                  "headline": "Gets an ``AssessmentAuthoringProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return:\n                (osid.assessment.authoring.AssessmentAuthoringProxyManag\n                er) - an ``AssessmentAuthoringProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_authoring() is\n                false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentAuthoringProxyManager``\n        :rtype: ``osid.assessment.authoring.AssessmentAuthoringProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_authoring() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_authoring()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.authoring.AssessmentAuthoringProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets an ``AssessmentBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.batch.AssessmentBatchProxyManager) - an\n                ``AssessmentBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_assessment_batch() is false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``AssessmentBatchProxyManager``\n        :rtype: ``osid.assessment.batch.AssessmentBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_assessment_batch() is false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_batch()`` is true.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.batch.AssessmentBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.MyAssessmentTakenSession", 
         "shortname": "MyAssessmentTakenSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving assessments taken by the authenticated agent.", 
            "body": "    An ``AssessmentTaken`` is created using the\n    ``AssessmentTakenAdminSession``.\n\n    Assessments taken may have an additional records indicated by their\n    respective record types. The record is accessed via the\n    ``AssessmentTaken``. The returns may not be cast directly from the\n    returns in the lookup methods."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_get_my_taken_assessments", 
            "get_assessments_started_during", 
            "get_assessments_started", 
            "get_assessments_in_progress_during", 
            "get_assessments_in_progress", 
            "get_assessments_completed"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_get_my_taken_assessments", 
               "doc": {
                  "headline": "Tests if this user can perform ``AssessmentOffered`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_started_during", 
               "doc": {
                  "headline": "Gets all the assessments started by this agent during the given period of time inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start time\n        arg:    end (osid.calendaring.DateTime): end time\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the started\n                assessments", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param start: start time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the started assessments\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_started", 
               "doc": {
                  "headline": "Gets all the assessments started by this agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the started\n                assessments", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the started assessments\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_in_progress_during", 
               "doc": {
                  "headline": "Gets all the assessments in progress by this agent overlapping with the given period of time inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start time\n        arg:    end (osid.calendaring.DateTime): end time\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the in progress\n                assessments", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param start: start time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the in progress assessments\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_in_progress", 
               "doc": {
                  "headline": "Gets all the assessments started but not completed by this agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the assessments\n                in progress", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessments in progress\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_completed", 
               "doc": {
                  "headline": "Gets all the assessments completed by this agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the completed\n                assessments", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the completed assessments\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentSession", 
         "shortname": "AssessmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session is used to take an assessment.", 
            "body": "    The assessment associated with this session represents the\n    \"assessment taken\" by an ``Agent``. This session may be created\n    using an ``AssessmentOffered`` ``Id`` retrieved from an assessment\n    bank, and instantiating this session represents the transaction of\n    taking an assessment. Resuming an assessment, if permitted, is\n    performed through instantiating this session with the\n    ``AssessmentTaken`` ``Id``.\n\n    ``Assessment Items`` are accessed via the ``Question`` interface. A\n    ``Question``  ``Id`` is the same as the ``Item`` Id.\n    \n    This session manages the flow of control for the assessment taking\n    process. It allows for two types of processes:\n    \n      * synchronous response: Each consecutive question is only\n        available after the previous item was submitted or skipped.\n      * asynchronous response: Questions may be accessed independently\n        of response submission.\n\n    \n    It may be the case that it is allowed to suspend and resume an\n    assessment. ``can_suspend()`` indicates the availability of this\n    feature. ``finished()`` indicates the assessment is complete.\n    \n    This session is used in the context of an ``AssessmentSection``. An\n    assessment with no sections defined is assumed to have a single\n    default section that maps to the entire assessment."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_take_assessments", 
            "has_assessment_begun", 
            "is_assessment_over", 
            "finished_assessment", 
            "requires_synchronous_sections", 
            "get_first_assessment_section", 
            "has_next_assessment_section", 
            "get_next_assessment_section", 
            "has_previous_assessment_section", 
            "get_previous_assessment_section", 
            "get_assessment_section", 
            "get_assessment_sections", 
            "is_assessment_section_complete", 
            "get_incomplete_assessment_sections", 
            "has_assessment_section_begun", 
            "is_assessment_section_over", 
            "finished_assessment_section", 
            "requires_synchronous_responses", 
            "get_first_question", 
            "has_next_question", 
            "get_next_question", 
            "has_previous_question", 
            "get_previous_question", 
            "get_question", 
            "get_questions", 
            "get_response_form", 
            "submit_response", 
            "skip_item", 
            "is_question_answered", 
            "get_unanswered_questions", 
            "has_unanswered_questions", 
            "get_first_unanswered_question", 
            "has_next_unanswered_question", 
            "get_next_unanswered_question", 
            "has_previous_unanswered_question", 
            "get_previous_unanswered_question", 
            "get_response", 
            "get_responses", 
            "clear_response", 
            "finish", 
            "is_answer_available", 
            "get_answers"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_take_assessments", 
               "doc": {
                  "headline": "Tests if this user can take this assessment section.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer assessment\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if assessment methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if assessment methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "has_assessment_begun", 
               "doc": {
                  "headline": "Tests if this assessment has started.", 
                  "body": "        An assessment begins from the designated start time if a start\n        time is defined. If no start time is defined the assessment may\n        begin at any time. Assessment sections cannot be accessed if the\n        return for this method is ``false``."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment has begun,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment has begun, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_assessment_over", 
               "doc": {
                  "headline": "Tests if this assessment is over.", 
                  "body": "        An assessment is over if ``finished_assessment()`` is invoked or\n        the designated finish time has expired."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment is over,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment is over, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "finished_assessment", 
               "doc": {
                  "headline": "Indicates the entire assessment is complete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_begun()`` is ``false or is_over()``\n                is ``true``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_begun()`` is ``false or is_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "requires_synchronous_sections", 
               "doc": {
                  "headline": "Tests if synchronous sections are required.", 
                  "body": "        This method should be checked to determine if all sections are\n        available when requested, or the next sections becomes available\n        only after the previous section is complete.\n\n        There are two methods for retrieving sections. One is using the\n        built-in hasNextSection() and getNextSection() methods. In\n        synchronous mode, hasNextSection() is false until the current\n        section is completed. In asynchronous mode,\n        ``has_next_section()`` returns true until the end of the\n        assessment.\n        \n        ``AssessmentSections`` may also be accessed via an\n        ``AssessmentSectionList``. If syncronous sections are required,\n        ``AssessmentSectionList.available() == 0`` and\n        ``AssessmentSectionList.getNextQuestion()`` blocks until the\n        section is complete. ``AssessmentSectionList.hasNext()`` is\n        always true until the end of the assessment is reached."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this synchronous sections are\n                required, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this synchronous sections are required, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_first_assessment_section", 
               "doc": {
                  "headline": "Gets the first assessment section in this assesment.", 
                  "body": "        All assessments have at least one ``AssessmentSection``."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - the first\n                assessment section", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the first assessment section\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_next_assessment_section", 
               "doc": {
                  "headline": "Tests if there is a next assessment section in the assessment following the given assessment section ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a next section,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a next section, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_next_assessment_section", 
               "doc": {
                  "headline": "Gets the next assessemnt section following the given assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - the next section", 
               "error_doc": "        raise:  IllegalState - ``has_next_assessment_section()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the next section\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_next_assessment_section()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_previous_assessment_section", 
               "doc": {
                  "headline": "Tests if there is a previous assessment section in the assessment following the given assessment section ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a previous assessment\n                section, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a previous assessment section, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_previous_assessment_section", 
               "doc": {
                  "headline": "Gets the next assessemnt section following the given assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - the previous\n                assessment section", 
               "error_doc": "        raise:  IllegalState - ``has_next_assessment_section()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the previous assessment section\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_next_assessment_section()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessment_section", 
               "doc": {
                  "headline": "Gets an assessemnts section by ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - the assessment\n                section", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment section\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessment_sections", 
               "doc": {
                  "headline": "Gets the assessment sections of this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSectionList) - the list of\n                assessment sections", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of assessment sections\n        :rtype: ``osid.assessment.AssessmentSectionList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSectionList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_assessment_section_complete", 
               "doc": {
                  "headline": "Tests if the given assessment section is complete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment section is\n                complete, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``is_assessment_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment section is complete, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_assessment_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_incomplete_assessment_sections", 
               "doc": {
                  "headline": "Gets the incomplete assessment sections of this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSectionList) - the list of\n                incomplete assessment sections", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of incomplete assessment sections\n        :rtype: ``osid.assessment.AssessmentSectionList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentSectionList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_assessment_section_begun", 
               "doc": {
                  "headline": "Tests if this assessment section has started.", 
                  "body": "        A section begins from the designated start time if a start time\n        is defined. If no start time is defined the section may begin at\n        any time. Assessment items cannot be accessed or submitted if\n        the return for this method is ``false``."
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment section has\n                begun, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false or\n                is_assessment_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment section has begun, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false or is_assessment_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_assessment_section_over", 
               "doc": {
                  "headline": "Tests if this assessment section is over.", 
                  "body": "        An assessment section is over if\n        ``finished_assessment_section()`` is invoked or the designated\n        finish time has expired."
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment is over,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessmen_sectiont_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment is over, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessmen_sectiont_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "finished_assessment_section", 
               "doc": {
                  "headline": "Indicates an assessment section is complete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "requires_synchronous_responses", 
               "doc": {
                  "headline": "Tests if synchronous responses are required in this assessment section.", 
                  "body": "        This method should be checked to determine if all items are\n        available when requested, or the next item becomes available\n        only after the response to the current item is submitted.\n\n        There are two methods for retrieving questions. One is using the\n        built-in ``has_next_question()`` and ``get_next_question()``\n        methods. In synchronous mode, ``has_next_question()`` is\n        ``false`` until the response for the current question is\n        submitted. In asynchronous mode, ``has_next_question()`` returns\n        ``true`` until the end of the assessment.\n        \n        ``Questions`` may also be accessed via a ``QuestionList``. If\n        syncronous responses are required, ``QuestionList.available() ==\n        0`` and ``QuestionList.getNextQuestion()`` blocks until the\n        response is submitted. ``QuestionList.hasNext()`` is always true\n        until the end of the assessment is reached."
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this synchronous responses are\n                required, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_begun()`` is ``false or\n                is_assessment_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this synchronous responses are required, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_begun()`` is ``false or is_assessment_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_first_question", 
               "doc": {
                  "headline": "Gets the first question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the first question", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the first question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_next_question", 
               "doc": {
                  "headline": "Tests if there is a next question following the given question ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a next question,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a next question, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_next_question", 
               "doc": {
                  "headline": "Gets the next question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the next question", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` or\n                ``has_next_question()`` is ``false``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the next question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` or ``has_next_question()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_previous_question", 
               "doc": {
                  "headline": "Tests if there is a previous question preceeding the given question ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a previous question,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a previous question, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_previous_question", 
               "doc": {
                  "headline": "Gets the previous question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the previous question", 
               "error_doc": "        raise:  IllegalState - ``has_begun()`` or\n                ``has_previous_question()`` is ``false``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the previous question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_begun()`` or ``has_previous_question()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_question", 
               "doc": {
                  "headline": "Gets the ``Question`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the returned ``Question``", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Question``\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_questions", 
               "doc": {
                  "headline": "Gets the questions of this assessment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.QuestionList) - the list of assessment\n                questions", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of assessment questions\n        :rtype: ``osid.assessment.QuestionList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.QuestionList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_response_form", 
               "doc": {
                  "headline": "Gets the response form for submitting an answer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.AnswerForm) - an answer form", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: an answer form\n        :rtype: ``osid.assessment.AnswerForm``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AnswerForm", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "submit_response", 
               "doc": {
                  "headline": "Submits an answer to an item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n        arg:    answer_form (osid.assessment.AnswerForm): the response\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  InvalidArgument - one or more of the elements in the\n                form is invalid\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id, item_id,`` or\n                ``answer_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``answer_form`` is not of this service", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n        :param answer_form: the response\n        :type answer_form: ``osid.assessment.AnswerForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``InvalidArgument`` -- one or more of the elements in the form is invalid\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id, item_id,`` or ``answer_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``answer_form`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.AnswerForm", 
                     "var_name": "answer_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.assessment.AnswerForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "skip_item", 
               "doc": {
                  "headline": "Skips an item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` or ``item_id`` is\n                not found, or ``item_id`` not part of\n                ``assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id`` or ``item_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` or ``item_id`` is not found, or ``item_id`` not part of ``assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_question_answered", 
               "doc": {
                  "headline": "Tests if the given item has a response.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if this item has a response,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this item has a response, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_unanswered_questions", 
               "doc": {
                  "headline": "Gets the unanswered questions of this assessment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.QuestionList) - the list of questions\n                with no rsponses", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of questions with no rsponses\n        :rtype: ``osid.assessment.QuestionList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.QuestionList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_unanswered_questions", 
               "doc": {
                  "headline": "Tests if there are unanswered questions in this assessment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there are unanswered questions,\n                ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there are unanswered questions, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_first_unanswered_question", 
               "doc": {
                  "headline": "Gets the first unanswered question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the first unanswered\n                question", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` or\n                ``has_unanswered_questions()`` is ``false``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the first unanswered question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` or ``has_unanswered_questions()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_next_unanswered_question", 
               "doc": {
                  "headline": "Tests if there is a next unanswered question following the given question ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a next unanswered\n                question, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a next unanswered question, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_next_unanswered_question", 
               "doc": {
                  "headline": "Gets the next unanswered question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the next unanswered\n                question", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` or\n                ``has_next_unanswered_question()`` is ``false``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the next unanswered question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` or ``has_next_unanswered_question()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_previous_unanswered_question", 
               "doc": {
                  "headline": "Tests if there is a previous unanswered question preceeding the given question ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if there is a previous unanswered\n                question, ``false`` otherwise", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if there is a previous unanswered question, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_previous_unanswered_question", 
               "doc": {
                  "headline": "Gets the previous unanswered question in this assesment section.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the previous unanswered\n                question", 
               "error_doc": "        raise:  IllegalState - ``has_assessmnet_section_begun()`` or\n                ``has_previous_unanswered_question()`` is ``false``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the previous unanswered question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessmnet_section_begun()`` or ``has_previous_unanswered_question()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_response", 
               "doc": {
                  "headline": "Gets the submitted response to the associated item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Response) - the response", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the response\n        :rtype: ``osid.assessment.Response``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Response", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_responses", 
               "doc": {
                  "headline": "Gets all submitted responses.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "        return: (osid.assessment.ResponseList) - the list of responses", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun()`` is\n                ``false or is_assessment_section_over()`` is ``true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of responses\n        :rtype: ``osid.assessment.ResponseList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun()`` is ``false or is_assessment_section_over()`` is ``true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ResponseList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "clear_response", 
               "doc": {
                  "headline": "Clears the response to an item The item appears as unanswered.", 
                  "body": "        If no response exists, the method simply returns."
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun() is false\n                or is_assessment_section_over() is true``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun() is false or is_assessment_section_over() is true``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "finish", 
               "doc": {
                  "headline": "Indicates the assessment section is complete.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``has_assessment_section_begun() is false\n                or is_assessment_section_over() is true``\n        raise:  NotFound - ``assessment_section_id`` is not found\n        raise:  NullArgument - ``assessment_section_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_assessment_section_begun() is false or is_assessment_section_over() is true``\n        :raise: ``NotFound`` -- ``assessment_section_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_section_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_answer_available", 
               "doc": {
                  "headline": "Tests if an answer is available for the given item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (boolean) - ``true`` if an answer are available,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if an answer are available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_answers", 
               "doc": {
                  "headline": "Gets the acceptable answers to the associated item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_section_id (osid.id.Id): ``Id`` of the\n                ``AssessmentSection``\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.AnswerList) - the answers", 
               "error_doc": "        raise:  IllegalState - ``is_answer_available()`` is ``false``\n        raise:  NotFound - ``assessment_section_id or item_id is not\n                found, or item_id not part of assessment_section_id``\n        raise:  NullArgument - ``assessment_section_id or item_id is\n                null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_section_id: ``Id`` of the ``AssessmentSection``\n        :type assessment_section_id: ``osid.id.Id``\n        :param item_id: ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the answers\n        :rtype: ``osid.assessment.AnswerList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_answer_available()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_section_id or item_id is not found, or item_id not part of assessment_section_id``\n        :raise: ``NullArgument`` -- ``assessment_section_id or item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_section_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AnswerList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentResultsSession", 
         "shortname": "AssessmentResultsSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session is used to access the tested assessment items and their associated responses.", 
            "body": "    Assessment results may also be available and is expressed as a\n    rubric through another assessment."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_access_assessment_results", 
            "get_items", 
            "get_responses", 
            "are_results_available", 
            "get_grade_entries"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_assessment_results", 
               "doc": {
                  "headline": "Tests if this user can take this assessment.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer assessment\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if assessment methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if assessment methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_items", 
               "doc": {
                  "headline": "Gets the items questioned in a assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the list of assessment\n                questions", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the list of assessment questions\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_responses", 
               "doc": {
                  "headline": "Gets the submitted responses.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.ResponseList) - the submitted answers", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the submitted answers\n        :rtype: ``osid.assessment.ResponseList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ResponseList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "are_results_available", 
               "doc": {
                  "headline": "Tests if the results are available for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (boolean) - ``true`` if results are available, ``false``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if results are available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_grade_entries", 
               "doc": {
                  "headline": "Gets a list of grade entries for this assessment.", 
                  "body": "        Each grade entry may indicate a grade or score input by multiple\n        graders."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.grading.GradeEntryList) - a list of grade entries", 
               "error_doc": "        raise:  IllegalState - ``are_results_available()`` is ``false``\n        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a list of grade entries\n        :rtype: ``osid.grading.GradeEntryList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``are_results_available()`` is ``false``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.grading.GradeEntryList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemLookupSession", 
         "shortname": "ItemLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Item`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_lookup_items", 
            "use_comparative_item_view", 
            "use_plenary_item_view", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_item", 
            "get_items_by_ids", 
            "get_items_by_genus_type", 
            "get_items_by_parent_genus_type", 
            "get_items_by_record_type", 
            "get_items_by_question", 
            "get_items_by_answer", 
            "get_items_by_learning_objective", 
            "get_items_by_learning_objectives", 
            "get_items"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_items", 
               "doc": {
                  "headline": "Tests if this user can perform ``Item`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_item_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_item_view", 
               "doc": {
                  "headline": "A complete view of the ``Item`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessment items in assessment\n        banks which are children of this assessment bank in the\n        assessment bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this assessment bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_item", 
               "doc": {
                  "headline": "Gets the ``Item`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Item`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to an ``Item`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.assessment.Item) - the returned ``Item``", 
               "error_doc": "        raise:  NotFound - no ``Item`` found with the given ``Id``\n        raise:  NullArgument - ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item`` to retrieve\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item``\n        :rtype: ``osid.assessment.Item``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Item`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Item", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_ids", 
               "doc": {
                  "headline": "Gets an ``ItemList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the items\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Items`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    item_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``item_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_ids: the list of ``Ids`` to retrieve\n        :type item_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``item_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "item_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``ItemList`` corresponding to the given assessment item genus ``Type`` which does not include assessment items of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known assessment\n        items or an error results. Otherwise, the returned list may\n        contain only those assessment items that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    item_genus_type (osid.type.Type): an assessment item\n                genus type\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``item_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_genus_type: an assessment item genus type\n        :type item_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``ItemList`` corresponding to the given assessment item genus ``Type`` and include any additional assessment items with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known assessment\n        items or an error results. Otherwise, the returned list may\n        contain only those assessment items that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    item_genus_type (osid.type.Type): an assessment item\n                genus type\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``item_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_genus_type: an assessment item genus type\n        :type item_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_record_type", 
               "doc": {
                  "headline": "Gets an ``ItemList`` containing the given assessment item record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those assessment items that are accessible through this session."
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): an item record type\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_record_type: an item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_question", 
               "doc": {
                  "headline": "Gets an ``ItemList`` containing the given question.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those assessment items that are accessible through this session."
               }, 
               "arg_doc": "        arg:    question_id (osid.id.Id): a question ``Id``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``question_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param question_id: a question ``Id``\n        :type question_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "question_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_answer", 
               "doc": {
                  "headline": "Gets an ``ItemList`` containing the given answer.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those assessment items that are accessible through this session."
               }, 
               "arg_doc": "        arg:    answer_id (osid.id.Id): an answer ``Id``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``answer_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param answer_id: an answer ``Id``\n        :type answer_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "answer_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_learning_objective", 
               "doc": {
                  "headline": "Gets an ``ItemList`` containing the given learning objective.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those assessment items that are accessible through this session."
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): a learning objective ``Id``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_id: a learning objective ``Id``\n        :type objective_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_learning_objectives", 
               "doc": {
                  "headline": "Gets an ``ItemList`` containing the given learning objectives.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those assessment items that are accessible through this session."
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.IdList): a list of learning\n                objective ``Ids``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``Item`` list", 
               "error_doc": "        raise:  NullArgument - ``objective_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param objective_ids: a list of learning objective ``Ids``\n        :type objective_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Item`` list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "objective_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items", 
               "doc": {
                  "headline": "Gets all ``Items``.", 
                  "body": "        In plenary mode, the returned list contains all known items or\n        an error results. Otherwise, the returned list may contain only\n        those items that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemList) - a list of ``Items``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Items``\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemQuerySession", 
         "shortname": "ItemQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Item`` objects.", 
            "body": "    The search query is constructed using the ``ItemQuery``. The\n    assessment item record ``Type`` also specifies the query record for\n    the assessment item query.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated assessment bank view: searches include assessment\n        items in assessment banks of which this assessment bank is a\n        ancestor in the assessment bank hierarchy\n      * isolated bank\n\n    \n    Assessment items may have a query record indicated by their\n    respective record types. Thequery record is accessed via the\n    ``ItemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_search_items", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_item_query", 
            "get_items_by_query"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_items", 
               "doc": {
                  "headline": "Tests if this user can perform ``Item`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an pplication that may wish not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessment items in assessment\n        banks which are children of this assessment bank in the\n        assessment bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this assessment bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_item_query", 
               "doc": {
                  "headline": "Gets an assessment item query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the assessment item query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {}
            }, 
            {
               "name": "get_items_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Items`` matching the given item query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_query (osid.assessment.ItemQuery): the item query\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - the returned ``ItemList``", 
               "error_doc": "        raise:  NullArgument - ``item_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_query`` is not of this service", 
               "sphinx_param_doc": "        :param item_query: the item query\n        :type item_query: ``osid.assessment.ItemQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ItemList``\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemQuery", 
                     "var_name": "item_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemQuery"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemSearchSession", 
         "shortname": "ItemSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Item`` objects.", 
            "body": "    The search query is constructed using the ``ItemQuery``. The\n    assessment item record ``Type`` also specifies the query record for\n    the assessment item query.\n\n    ``get_items_by_query()`` is the basic search method and returns a\n    list of ``Items``. A more advanced search may be performed with\n    ``getItemsBySearch()``. It accepts an ``ItemSearch`` in addition to\n    the query for the purpose of specifying additional options affecting\n    the entire search, such as ordering. ``get_items_by_search()``\n    returns an ``ItemSearchResults`` that can be used to access the\n    resulting ``ItemList`` or be used to perform a search within the\n    result set through ``ItemSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated assessment bank view: searches include assessment\n        items in assessment banks of which this assessment bank is a\n        ancestor in the assessment bank hierarchy\n      * isolated bank view: searches are restricted to assessment items\n        in this assessment bank\n\n    \n    Assessment items may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``ItemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.assessment.ItemQuerySession"
         ], 
         "inherit_shortnames": [
            "ItemQuerySession"
         ], 
         "inherit_pkg_names": [
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "assessment", 
               "name": "ItemQuerySession"
            }
         ], 
         "method_names": [
            "get_item_search", 
            "get_item_search_order", 
            "get_items_by_search", 
            "get_item_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_item_search", 
               "doc": {
                  "headline": "Gets an assessment item search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemSearch) - the assessment item\n                search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item search\n        :rtype: ``osid.assessment.ItemSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemSearch", 
               "errors": {}
            }, 
            {
               "name": "get_item_search_order", 
               "doc": {
                  "headline": "Gets an assessment item search order.", 
                  "body": "        The ``ItemSearchOrder`` is supplied to an ``ItemSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemSearchOrder) - the assessment item\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item search order\n        :rtype: ``osid.assessment.ItemSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_items_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_query (osid.assessment.ItemQuery): the item query\n        arg:    item_search (osid.assessment.ItemSearch): the item\n                search\n", 
               "return_doc": "        return: (osid.assessment.ItemSearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``item_query`` or ``item_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_search`` or ``item_query`` is not\n                of this service", 
               "sphinx_param_doc": "        :param item_query: the item query\n        :type item_query: ``osid.assessment.ItemQuery``\n        :param item_search: the item search\n        :type item_search: ``osid.assessment.ItemSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.assessment.ItemSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_query`` or ``item_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_search`` or ``item_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemQuery", 
                     "var_name": "item_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.ItemSearch", 
                     "var_name": "item_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemQuery", 
                  "osid.assessment.ItemSearch"
               ], 
               "return_type": "osid.assessment.ItemSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_from_inspector", 
               "doc": {
                  "headline": "Gets an item query from an inspector.", 
                  "body": "        The inspector is available from an ``ItemSearchResults``."
               }, 
               "arg_doc": "        arg:    item_query_inspector\n                (osid.assessment.ItemQueryInspector): a query inspector\n", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the item query", 
               "error_doc": "        raise:  NullArgument - ``item_query_inspector`` is ``null``\n        raise:  Unsupported - ``item_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param item_query_inspector: a query inspector\n        :type item_query_inspector: ``osid.assessment.ItemQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``item_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemQueryInspector", 
                     "var_name": "item_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemQueryInspector"
               ], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemAdminSession", 
         "shortname": "ItemAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Items``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Item,`` an ``ItemForm`` is requested using\n    ``get_item_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``ItemForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``ItemForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ItemForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``ItemForms`` are requested to the ``ItemForm``  ``Id``\n    that is to be updated using ``getItemFormForUpdate()``. Similarly,\n    the ``ItemForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``ItemForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``ItemForm``. To unmap an ``ItemForm``\n    from the current ``Bank,`` the ``ItemBankAssignmentSession`` should\n    be used. These delete operations attempt to remove the ``Item``\n    itself thus removing it from all known ``Bank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_create_items", 
            "can_create_item_with_record_types", 
            "get_item_form_for_create", 
            "create_item", 
            "can_update_items", 
            "get_item_form_for_update", 
            "update_item", 
            "can_delete_items", 
            "delete_item", 
            "can_manage_item_aliases", 
            "alias_item", 
            "can_create_questions", 
            "can_create_question_with_record_types", 
            "get_question_form_for_create", 
            "create_question", 
            "can_update_questions", 
            "get_question_form_for_update", 
            "update_question", 
            "can_delete_questions", 
            "delete_question", 
            "can_create_answers", 
            "can_create_answers_with_record_types", 
            "get_answer_form_for_create", 
            "create_answer", 
            "can_update_answers", 
            "get_answer_form_for_update", 
            "update_answer", 
            "can_delete_answers", 
            "delete_answer"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_items", 
               "doc": {
                  "headline": "Tests if this user can create ``Items``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an ``Item``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Item`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Item`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_item_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Item`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getItemRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Item``.\n        Providing an empty array tests if an ``Item`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    item_record_types (osid.type.Type[]): array of item\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Item`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``item_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param item_record_types: array of item record types\n        :type item_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Item`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "item_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_form_for_create", 
               "doc": {
                  "headline": "Gets the assessment item form for creating new assessment items.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    item_record_types (osid.type.Type[]): array of item\n                record types to be included in the create operation or\n                an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.ItemForm) - the assessment item form", 
               "error_doc": "        raise:  NullArgument - ``item_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param item_record_types: array of item record types to be included in the create operation or an empty list if none\n        :type item_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the assessment item form\n        :rtype: ``osid.assessment.ItemForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "item_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.ItemForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_item", 
               "doc": {
                  "headline": "Creates a new ``Item``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_form (osid.assessment.ItemForm): the form for this\n                ``Item``\n", 
               "return_doc": "        return: (osid.assessment.Item) - the new ``Item``", 
               "error_doc": "        raise:  IllegalState - ``item_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``item_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_form`` did not originate from\n                ``get_item_form_for_create()``", 
               "sphinx_param_doc": "        :param item_form: the form for this ``Item``\n        :type item_form: ``osid.assessment.ItemForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Item``\n        :rtype: ``osid.assessment.Item``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``item_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``item_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_form`` did not originate from ``get_item_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemForm", 
                     "var_name": "item_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemForm"
               ], 
               "return_type": "osid.assessment.Item", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_items", 
               "doc": {
                  "headline": "Tests if this user can update ``Items``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an ``Item``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer update\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if assessment item modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if assessment item modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_item_form_for_update", 
               "doc": {
                  "headline": "Gets the assessment item form for updating an existing item.", 
                  "body": "        A new item form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.assessment.ItemForm) - the assessment item form", 
               "error_doc": "        raise:  NotFound - ``item_id`` is not found\n        raise:  NullArgument - ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment item form\n        :rtype: ``osid.assessment.ItemForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``item_id`` is not found\n        :raise: ``NullArgument`` -- ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_item", 
               "doc": {
                  "headline": "Updates an existing item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_form (osid.assessment.ItemForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``item_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``item_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_form`` did not originate from\n                ``get_item_form_for_update()``", 
               "sphinx_param_doc": "        :param item_form: the form containing the elements to be updated\n        :type item_form: ``osid.assessment.ItemForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``item_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``item_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_form`` did not originate from ``get_item_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemForm", 
                     "var_name": "item_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_items", 
               "doc": {
                  "headline": "Tests if this user can delete ``Items``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an ``Item``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer delete\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Item`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Item`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_item", 
               "doc": {
                  "headline": "Deletes the ``Item`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item`` to\n                delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Item`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item`` to delete\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Item`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_item_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Items``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Item`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Item`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_item", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Item`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Item`` is determined by the\n        provider. The new ``Id`` is an alias to the primary ``Id``. If\n        the alias is a pointer to another item, it is reassigned to the\n        given item ``Id``."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of an ``Item``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is in use as a primary\n                ``Id``\n        raise:  NotFound - ``item_id`` not found\n        raise:  NullArgument - ``item_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of an ``Item``\n        :type item_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is in use as a primary ``Id``\n        :raise: ``NotFound`` -- ``item_id`` not found\n        :raise: ``NullArgument`` -- ``item_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_questions", 
               "doc": {
                  "headline": "Tests if this user can create ``Questions``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Question`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Question`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Question`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_question_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Question`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getQuestionRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Question``.\n        Providing an empty array tests if a ``Question`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    question_record_types (osid.type.Type[]): array of\n                question record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Question`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``question_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param question_record_types: array of question record types\n        :type question_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Question`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "question_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_question_form_for_create", 
               "doc": {
                  "headline": "Gets the question form for creating new questions.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): an assessment item ``Id``\n        arg:    question_record_types (osid.type.Type[]): array of\n                question record types to be included in the create\n                operation or an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.QuestionForm) - the question form", 
               "error_doc": "        raise:  NullArgument - ``question_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param item_id: an assessment item ``Id``\n        :type item_id: ``osid.id.Id``\n        :param question_record_types: array of question record types to be included in the create operation or an empty list if none\n        :type question_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the question form\n        :rtype: ``osid.assessment.QuestionForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "question_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.QuestionForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_question", 
               "doc": {
                  "headline": "Creates a new ``Question``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_form (osid.assessment.QuestionForm): the form\n                for this ``Question``\n", 
               "return_doc": "        return: (osid.assessment.Question) - the new ``Question``", 
               "error_doc": "        raise:  AlreadyExists - a question already exists for this item\n        raise:  IllegalState - ``question_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``question_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``question_form`` did not originate from\n                ``get_question_form_for_create()``", 
               "sphinx_param_doc": "        :param question_form: the form for this ``Question``\n        :type question_form: ``osid.assessment.QuestionForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Question``\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- a question already exists for this item\n        :raise: ``IllegalState`` -- ``question_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``question_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``question_form`` did not originate from ``get_question_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.QuestionForm", 
                     "var_name": "question_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.QuestionForm"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_questions", 
               "doc": {
                  "headline": "Tests if this user can update ``Questions``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Question`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if question modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if question modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_question_form_for_update", 
               "doc": {
                  "headline": "Gets the question form for updating an existing question.", 
                  "body": "        A new question form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    question_id (osid.id.Id): the ``Id`` of the ``Question``\n", 
               "return_doc": "        return: (osid.assessment.QuestionForm) - the question form", 
               "error_doc": "        raise:  NotFound - ``question_id`` is not found\n        raise:  NullArgument - ``question_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param question_id: the ``Id`` of the ``Question``\n        :type question_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the question form\n        :rtype: ``osid.assessment.QuestionForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``question_id`` is not found\n        :raise: ``NullArgument`` -- ``question_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "question_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.QuestionForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_question", 
               "doc": {
                  "headline": "Updates an existing question.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_form (osid.assessment.QuestionForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``question_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``question_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``question_form`` did not originate from\n                ``get_question_form_for_update()``", 
               "sphinx_param_doc": "        :param question_form: the form containing the elements to be updated\n        :type question_form: ``osid.assessment.QuestionForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``question_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``question_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``question_form`` did not originate from ``get_question_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.QuestionForm", 
                     "var_name": "question_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.QuestionForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_questions", 
               "doc": {
                  "headline": "Tests if this user can delete ``Questions``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Question`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Question`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Question`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_question", 
               "doc": {
                  "headline": "Deletes the ``Question`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_id (osid.id.Id): the ``Id`` of the ``Question``\n                to delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``Question`` was not found identified by\n                the given ``Id``\n        raise:  NullArgument - ``question_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param question_id: the ``Id`` of the ``Question`` to delete\n        :type question_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Question`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``question_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "question_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_answers", 
               "doc": {
                  "headline": "Tests if this user can create ``Answers``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Answer``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Answer`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Answer`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_answers_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Answer`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getAnswerRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Answer``.\n        Providing an empty array tests if an ``Answer`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    answer_record_types (osid.type.Type[]): array of answer\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Answer`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``answern_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param answer_record_types: array of answer record types\n        :type answer_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Answer`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answern_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "answer_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_answer_form_for_create", 
               "doc": {
                  "headline": "Gets the answer form for creating new answers.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): an assessment item ``Id``\n        arg:    answer_record_types (osid.type.Type[]): array of answer\n                record types to be included in the create operation or\n                an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.AnswerForm) - the answer form", 
               "error_doc": "        raise:  NullArgument - ``answer_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param item_id: an assessment item ``Id``\n        :type item_id: ``osid.id.Id``\n        :param answer_record_types: array of answer record types to be included in the create operation or an empty list if none\n        :type answer_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the answer form\n        :rtype: ``osid.assessment.AnswerForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "answer_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.AnswerForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_answer", 
               "doc": {
                  "headline": "Creates a new ``Answer``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    answer_form (osid.assessment.AnswerForm): the form for\n                this ``Answer``\n", 
               "return_doc": "        return: (osid.assessment.Answer) - the new ``Answer``", 
               "error_doc": "        raise:  IllegalState - ``answer_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``answer_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``answer_form`` did not originate from\n                ``get_answer_form_for_create()``", 
               "sphinx_param_doc": "        :param answer_form: the form for this ``Answer``\n        :type answer_form: ``osid.assessment.AnswerForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Answer``\n        :rtype: ``osid.assessment.Answer``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``answer_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``answer_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``answer_form`` did not originate from ``get_answer_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AnswerForm", 
                     "var_name": "answer_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AnswerForm"
               ], 
               "return_type": "osid.assessment.Answer", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_answers", 
               "doc": {
                  "headline": "Tests if this user can update ``Answers``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Answer`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if answer modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if answer modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_answer_form_for_update", 
               "doc": {
                  "headline": "Gets the answer form for updating an existing answer.", 
                  "body": "        A new answer form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    answer_id (osid.id.Id): the ``Id`` of the ``Answer``\n", 
               "return_doc": "        return: (osid.assessment.AnswerForm) - the answer form", 
               "error_doc": "        raise:  NotFound - ``answer_id`` is not found\n        raise:  NullArgument - ``answer_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param answer_id: the ``Id`` of the ``Answer``\n        :type answer_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the answer form\n        :rtype: ``osid.assessment.AnswerForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``answer_id`` is not found\n        :raise: ``NullArgument`` -- ``answer_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "answer_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AnswerForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_answer", 
               "doc": {
                  "headline": "Updates an existing answer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    answer_form (osid.assessment.AnswerForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``answer_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``answer_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``answer_form`` did not originate from\n                ``get_answer_form_for_update()``", 
               "sphinx_param_doc": "        :param answer_form: the form containing the elements to be updated\n        :type answer_form: ``osid.assessment.AnswerForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``answer_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``answer_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``answer_form`` did not originate from ``get_answer_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AnswerForm", 
                     "var_name": "answer_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AnswerForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_answers", 
               "doc": {
                  "headline": "Tests if this user can delete ``Answers``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Answer`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Answer`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Answer`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_answer", 
               "doc": {
                  "headline": "Deletes the ``Answer`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    answer_id (osid.id.Id): the ``Id`` of the ``Answer`` to\n                delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Answer`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``answer_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param answer_id: the ``Id`` of the ``Answer`` to delete\n        :type answer_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Answer`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``answer_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "answer_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemNotificationSession", 
         "shortname": "ItemNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive asynchronous notifications on adds/changes to ``Item`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``ItemLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_register_for_item_notifications", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "reliable_item_notifications", 
            "unreliable_item_notifications", 
            "acknowledge_item_notification", 
            "register_for_new_items", 
            "register_for_changed_items", 
            "register_for_changed_item", 
            "register_for_deleted_items", 
            "register_for_deleted_item"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_item_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Item`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for assessment items\n        in assessment banks which are children of this assessment bank\n        in the assessment bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this assessment bank\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "reliable_item_notifications", 
               "doc": {
                  "headline": "Reliable notifications are desired.", 
                  "body": "        In reliable mode, notifications are to be acknowledged using\n        ``acknowledge_item_notification()`` ."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "unreliable_item_notifications", 
               "doc": {
                  "headline": "Unreliable notifications are desired.", 
                  "body": "        In unreliable mode, notifications do not need to be\n        acknowledged."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "acknowledge_item_notification", 
               "doc": {
                  "headline": "Acknowledge an item notification.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the ``Id`` of the\n                notification\n", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param notification_id: the ``Id`` of the notification\n        :type notification_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_items", 
               "doc": {
                  "headline": "Register for notifications of new assessment items.", 
                  "body": "        ``ItemReceiver.newItems()`` is invoked when a new ``Item`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_items", 
               "doc": {
                  "headline": "Registers for notification of updated assessment items.", 
                  "body": "        ``ItemReceiver.changedItems()`` is invoked when an assessment\n        item is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_item", 
               "doc": {
                  "headline": "Registers for notification of an updated assessment item.", 
                  "body": "        ``ItemReceiver.changedItems()`` is invoked when the specified\n        assessment item is changed."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Assessment``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``item`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``item_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Assessment`` to monitor\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``item`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_items", 
               "doc": {
                  "headline": "Registers for notification of deleted assessment items.", 
                  "body": "        ``ItemReceiver.deletedItems()`` is invoked when an assessment\n        item is removed from the assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_item", 
               "doc": {
                  "headline": "Registers for notification of a deleted assessment item.", 
                  "body": "        ``ItemReceiver.deletedItems()`` is invoked when the specified\n        assessment item is removed from the assessment bank."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an ``Item`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``item_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item`` to monitor\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Item`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``item_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemBankSession", 
         "shortname": "ItemBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Item`` to ``Bank`` mappings.", 
            "body": "    An ``Item`` may appear in multiple ``Banks``. Each ``Bank`` may have\n    its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_item_bank_mappings", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_item_ids_by_bank", 
            "get_items_by_bank", 
            "get_item_ids_by_banks", 
            "get_items_by_banks", 
            "get_bank_ids_by_item", 
            "get_banks_by_item"
         ], 
         "methods": [
            {
               "name": "can_lookup_item_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of item/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Item`` and ``Bank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_item_ids_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``Item``  ``Ids`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related item ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related item ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``Items`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - list of related items", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related items\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_item_ids_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``Item Ids`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_items_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``Items`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - list of items", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of items\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_ids_by_item", 
               "doc": {
                  "headline": "Gets the list of ``Bank``  ``Ids`` mapped to an ``Item``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): ``Id`` of an ``Item``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``item_id`` is not found\n        raise:  NullArgument - ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param item_id: ``Id`` of an ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``item_id`` is not found\n        :raise: ``NullArgument`` -- ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_item", 
               "doc": {
                  "headline": "Gets the list of ``Banks`` mapped to an ``Item``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): ``Id`` of an ``Item``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - list of banks", 
               "error_doc": "        raise:  NotFound - ``item_id`` is not found\n        raise:  NullArgument - ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param item_id: ``Id`` of an ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of banks\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``item_id`` is not found\n        :raise: ``NullArgument`` -- ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemBankAssignmentSession", 
         "shortname": "ItemBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Items`` to ``Banks``.", 
            "body": "    An ``Item`` may map to multiple ``Banks`` and removing the last\n    reference to an ``Item`` is the equivalent of deleting it. Each\n    ``Bank`` may have its own authorizations governing who is allowed to\n    operate on it.\n\n    Moving or adding a reference of an ``Item`` to another ``Bank`` is\n    not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_items", 
            "can_assign_items_to_bank", 
            "get_assignable_bank_ids", 
            "get_assignable_bank_ids_for_item", 
            "assign_item_to_bank", 
            "unassign_item_from_bank", 
            "reassign_item_to_billing"
         ], 
         "methods": [
            {
               "name": "can_assign_items", 
               "doc": {
                  "headline": "Tests if this user can alter item/bank mappings.", 
                  "body": "        A return of true does not guarantee successful assessment. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_items_to_bank", 
               "doc": {
                  "headline": "Tests if this user can alter item/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bank_ids", 
               "doc": {
                  "headline": "Gets a list of banks including and under the given bank node in which any item can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bank_ids_for_item", 
               "doc": {
                  "headline": "Gets a list of banks including and under the given bank node in which a specific item can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` or ``item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_item_to_bank", 
               "doc": {
                  "headline": "Adds an existing ``Item`` to a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``item_id`` is already assigned to\n                ``bank_id``\n        raise:  NotFound - ``item_id`` or ``bank_id`` not found\n        raise:  NullArgument - ``item_id`` or ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``item_id`` is already assigned to ``bank_id``\n        :raise: ``NotFound`` -- ``item_id`` or ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``item_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_item_from_bank", 
               "doc": {
                  "headline": "Removes an ``Item`` from a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``item_id`` or ``bank_id`` not found or\n                ``item_id`` not assigned to ``bank_id``\n        raise:  NullArgument - ``item_id`` or ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``item_id`` or ``bank_id`` not found or ``item_id`` not assigned to ``bank_id``\n        :raise: ``NullArgument`` -- ``item_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "reassign_item_to_billing", 
               "doc": {
                  "headline": "Moves an ``Item`` from one ``Bank`` to another.", 
                  "body": "        Mappings to other ``Banks`` are unaffected."
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n        arg:    from_bank_id (osid.id.Id): the ``Id`` of the current\n                ``Bank``\n        arg:    to_bank_id (osid.id.Id): the ``Id`` of the destination\n                ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``item_id, from_bank_id,`` or ``to_bank_id``\n                not found or ``item_id`` not mapped to ``from_bank_id``\n        raise:  NullArgument - ``item_id, from_bank_id,`` or\n                ``to_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n        :param from_bank_id: the ``Id`` of the current ``Bank``\n        :type from_bank_id: ``osid.id.Id``\n        :param to_bank_id: the ``Id`` of the destination ``Bank``\n        :type to_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``item_id, from_bank_id,`` or ``to_bank_id`` not found or ``item_id`` not mapped to ``from_bank_id``\n        :raise: ``NullArgument`` -- ``item_id, from_bank_id,`` or ``to_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "from_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "to_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemSmartBankSession", 
         "shortname": "ItemSmartBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``ItemQuery`` can be retrieved from this session and mapped to\n    this ``Bank`` to create a virtual collection of ``Items``. The Items\n    may be sequenced using the ``ItemSearchOrder`` from this session.\n\n    This ``Bank`` has a default query that matches any Item and a\n    default search order that specifies no sequencing. The queries may\n    be examined using an ``ItemQueryInspector``. The query may be\n    modified by converting the inspector back to an ``ItemQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_manage_smart_banks", 
            "get_item_query", 
            "get_item_search_order", 
            "apply_item_query", 
            "inspect_item_query", 
            "apply_item_sequencing", 
            "get_item_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart banks.", 
                  "body": "        A return of true does not guarantee successful assessment. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bank management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_item_query", 
               "doc": {
                  "headline": "Gets an assessment item query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the assessment item query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {}
            }, 
            {
               "name": "get_item_search_order", 
               "doc": {
                  "headline": "Gets an assessment item search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemSearchOrder) - the assessment item\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item search order\n        :rtype: ``osid.assessment.ItemSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_item_query", 
               "doc": {
                  "headline": "Applies an item query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_query (osid.assessment.ItemQuery): the item query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_query`` not of this service", 
               "sphinx_param_doc": "        :param item_query: the item query\n        :type item_query: ``osid.assessment.ItemQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemQuery", 
                     "var_name": "item_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_item_query", 
               "doc": {
                  "headline": "Gets an item query inspector for this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQueryInspector) - the item query\n                inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item query inspector\n        :rtype: ``osid.assessment.ItemQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_item_sequencing", 
               "doc": {
                  "headline": "Applies an item search order to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_search_order (osid.assessment.ItemSearchOrder): the\n                item search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``item_search_order`` not of this service", 
               "sphinx_param_doc": "        :param item_search_order: the item search order\n        :type item_search_order: ``osid.assessment.ItemSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``item_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemSearchOrder", 
                     "var_name": "item_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_from_inspector", 
               "doc": {
                  "headline": "Gets an item query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_query_inspector\n                (osid.assessment.ItemQueryInspector): an item query\n                inspector\n", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the item query", 
               "error_doc": "        raise:  NullArgument - ``item_query_inspector`` is ``null``\n        raise:  Unsupported - ``item_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param item_query_inspector: an item query inspector\n        :type item_query_inspector: ``osid.assessment.ItemQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``item_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemQueryInspector", 
                     "var_name": "item_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemQueryInspector"
               ], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentLookupSession", 
         "shortname": "AssessmentLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving assessments.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_lookup_assessments", 
            "use_comparative_assessment_view", 
            "use_plenary_assessment_view", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment", 
            "get_assessments_by_ids", 
            "get_assessments_by_genus_type", 
            "get_assessments_by_parent_genus_type", 
            "get_assessments_by_record_type", 
            "get_assessments"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_assessments", 
               "doc": {
                  "headline": "Tests if this user can perform ``Assessment`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_assessment_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_assessment_view", 
               "doc": {
                  "headline": "A complete view of the ``Assessment`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments in banks which are\n        children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment", 
               "doc": {
                  "headline": "Gets the ``Assessment`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Assessment`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Assessment`` and retained\n        for compatibility."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of the ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.Assessment) - the assessment", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_ids", 
               "doc": {
                  "headline": "Gets an ``AssessmentList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        assessments specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Assessments`` may be omitted from the list and\n        may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    assessment_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the returned\n                ``Assessment`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``assessment_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param assessment_ids: the list of ``Ids`` to retrieve\n        :type assessment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Assessment`` list\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``assessment_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentList`` corresponding to the given assessment genus ``Type`` which does not include assessments of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    assessment_genus_type (osid.type.Type): an assessment\n                genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the returned\n                ``Assessment`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_genus_type: an assessment genus type\n        :type assessment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Assessment`` list\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentList`` corresponding to the given assessment genus ``Type`` and include any additional assessments with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    assessment_genus_type (osid.type.Type): an assessment\n                genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the returned\n                ``Assessment`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_genus_type: an assessment genus type\n        :type assessment_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Assessment`` list\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_record_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentList`` corresponding to the given assessment record ``Type``.", 
                  "body": "        The set of assessments implementing the given record type is\n        returned. In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): an assessment\n                record type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the returned\n                ``Assessment`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_record_type: an assessment record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Assessment`` list\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments", 
               "doc": {
                  "headline": "Gets all ``Assessments``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - a list of\n                ``Assessments``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Assessments``\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentQuerySession", 
         "shortname": "AssessmentQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for querying ``Assessment`` objects.", 
            "body": "    The search query is constructed using the ``AssessmentQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments in banks of\n        which this bank is a ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments in\n        this bank\n\n    \n    Assessments may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``AssessmentQuery``. The returns in this session may not be cast\n    directly to these interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_search_assessments", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment_query", 
            "get_assessments_by_query"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_assessments", 
               "doc": {
                  "headline": "Tests if this user can perform ``Assessment`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an pplication that may wish not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments in banks which are\n        children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets an assessment query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Assessments`` matching the given assessment query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_query (osid.assessment.AssessmentQuery): the\n                assessment query\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the returned\n                ``AssessmentList``", 
               "error_doc": "        raise:  NullArgument - ``assessment_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_query: the assessment query\n        :type assessment_query: ``osid.assessment.AssessmentQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentList``\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentQuery", 
                     "var_name": "assessment_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentQuery"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentSearchSession", 
         "shortname": "AssessmentSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Assessment`` objects.", 
            "body": "    The search query is constructed using the ``AssessmentQuery``.\n\n    ``get_assessments_by_query()`` is the basic search method and\n    returns a list of ``Assessments``. A more advanced search may be\n    performed with ``getAssessmentsBySearch()``. It accepts an\n    ``AssessmentSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_assessments_by_search()`` returns an\n    ``AssessmentSearchResults`` that can be used to access the resulting\n    ``AssessmentList`` or be used to perform a search within the result\n    set through ``AssessmentSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments in banks of\n        which this bank is an ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments in\n        this bank\n\n    \n    Assessments may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``AssessmentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.assessment.AssessmentQuerySession"
         ], 
         "inherit_shortnames": [
            "AssessmentQuerySession"
         ], 
         "inherit_pkg_names": [
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "assessment", 
               "name": "AssessmentQuerySession"
            }
         ], 
         "method_names": [
            "get_assessment_search", 
            "get_assessment_search_order", 
            "get_assessments_by_search", 
            "get_assessment_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_assessment_search", 
               "doc": {
                  "headline": "Gets an assessment search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearch) - the assessment\n                search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment search\n        :rtype: ``osid.assessment.AssessmentSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearch", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_search_order", 
               "doc": {
                  "headline": "Gets an assessment search order.", 
                  "body": "        The ``AssessmentSearchOrder`` is supplied to an\n        ``AssessmentSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchOrder) - the assessment\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment search order\n        :rtype: ``osid.assessment.AssessmentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_query (osid.assessment.AssessmentQuery): the\n                assessment query\n        arg:    assessment_search (osid.assessment.AssessmentSearch):\n                the assessment search\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchResults) - the search\n                results", 
               "error_doc": "        raise:  NullArgument - ``assessment_query`` or\n                ``assessment_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_query`` or\n                ``assessment_search`` is not of this service", 
               "sphinx_param_doc": "        :param assessment_query: the assessment query\n        :type assessment_query: ``osid.assessment.AssessmentQuery``\n        :param assessment_search: the assessment search\n        :type assessment_search: ``osid.assessment.AssessmentSearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.assessment.AssessmentSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_query`` or ``assessment_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_query`` or ``assessment_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentQuery", 
                     "var_name": "assessment_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.AssessmentSearch", 
                     "var_name": "assessment_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentQuery", 
                  "osid.assessment.AssessmentSearch"
               ], 
               "return_type": "osid.assessment.AssessmentSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment query from an inspector.", 
                  "body": "        The inspector is available from an ``AssessmentSearchResults``."
               }, 
               "arg_doc": "        arg:    assessment_query_inspector\n                (osid.assessment.AssessmentQueryInspector): an\n                assessment query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  NullArgument - ``assessment_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessment_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param assessment_query_inspector: an assessment query inspector\n        :type assessment_query_inspector: ``osid.assessment.AssessmentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentQueryInspector", 
                     "var_name": "assessment_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentAdminSession", 
         "shortname": "AssessmentAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Assessments``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Assessment,`` an ``AssessmentForm`` is requested using\n    ``get_assessment_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``AssessmentForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``AssessmentForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``AssessmentForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``AssessmentForms`` are requested to the ``Assessment``\n    ``Id`` that is to be updated using ``getAssessmentFormForUpdate()``.\n    Similarly, the ``AssessmentForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``AssessmentForm`` can only be used once for a\n    successful update and cannot be reused.\n    \n    The delete operations delete ``Assessments``. To unmap an\n    ``Assessment`` from the current ``Bank,`` the\n    ``AssessmentBankAssignmentSession`` should be used. These delete\n    operations attempt to remove the ``Assessment`` itself thus removing\n    it from all known ``Bank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_create_assessments", 
            "can_create_assessment_with_record_types", 
            "get_assessment_form_for_create", 
            "create_assessment", 
            "can_update_assessments", 
            "get_assessment_form_for_update", 
            "update_assessment", 
            "can_delete_assessments", 
            "delete_assessment", 
            "can_manage_assessment_aliases", 
            "alias_assessment"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_assessments", 
               "doc": {
                  "headline": "Tests if this user can create ``Assessments``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Assessment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Assessment`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Assessment`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_assessment_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Assessment`` using the desired record interface types.", 
                  "body": "        While ``AssessmentManager.getAssessmentRecordTypes()`` can be\n        used to examine which record interfaces are supported, this\n        method tests which record(s) are required for creating a\n        specific ``Assessment``. Providing an empty array tests if an\n        ``Assessment`` can be created with no records."
               }, 
               "arg_doc": "        arg:    assessment_record_types (osid.type.Type[]): array of\n                assessment record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Assessment`` creation using\n                the specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_record_types: array of assessment record types\n        :type assessment_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Assessment`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_form_for_create", 
               "doc": {
                  "headline": "Gets the assessment form for creating new assessments.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    assessment_record_types (osid.type.Type[]): array of\n                assessment record types to be included in the create\n                operation or an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.AssessmentForm) - the assessment form", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param assessment_record_types: array of assessment record types to be included in the create operation or an empty list if none\n        :type assessment_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the assessment form\n        :rtype: ``osid.assessment.AssessmentForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.AssessmentForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_assessment", 
               "doc": {
                  "headline": "Creates a new ``Assessment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_form (osid.assessment.AssessmentForm): the\n                form for this ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.Assessment) - the new ``Assessment``", 
               "error_doc": "        raise:  IllegalState - ``assessment_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``assessment_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_form`` did not originate from\n                ``get_assessment_form_for_create()``", 
               "sphinx_param_doc": "        :param assessment_form: the form for this ``Assessment``\n        :type assessment_form: ``osid.assessment.AssessmentForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Assessment``\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``assessment_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_form`` did not originate from ``get_assessment_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentForm", 
                     "var_name": "assessment_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentForm"
               ], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_assessments", 
               "doc": {
                  "headline": "Tests if this user can update ``Assessments``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Assessment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Assessment`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Assessment`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_form_for_update", 
               "doc": {
                  "headline": "Gets the assessment form for updating an existing assessment.", 
                  "body": "        A new assessment form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentForm) - the assessment form", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment form\n        :rtype: ``osid.assessment.AssessmentForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_assessment", 
               "doc": {
                  "headline": "Updates an existing assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_form (osid.assessment.AssessmentForm): the\n                form containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``assessment_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``assessment_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_form did not originate from\n                get_assessment_form_for_update()``", 
               "sphinx_param_doc": "        :param assessment_form: the form containing the elements to be updated\n        :type assessment_form: ``osid.assessment.AssessmentForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``assessment_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_form did not originate from get_assessment_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentForm", 
                     "var_name": "assessment_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_assessments", 
               "doc": {
                  "headline": "Tests if this user can delete ``Assessments``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Assessment`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Assessment`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Assessment`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_assessment", 
               "doc": {
                  "headline": "Deletes an ``Assessment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to remove\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_assessment_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Assessments``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Assessment`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Assessment`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_assessment", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Assessment`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Assessment`` is determined by the\n        provider. The new ``Id`` is an alias to the primary ``Id``. If\n        the alias is a pointer to another assessment, it is reassigned\n        to the given assessment ``Id``."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of an\n                ``Assessment``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is in use as a primary\n                ``Id``\n        raise:  NotFound - ``assessment_id`` not found\n        raise:  NullArgument - ``assessment_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is in use as a primary ``Id``\n        :raise: ``NotFound`` -- ``assessment_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentNotificationSession", 
         "shortname": "AssessmentNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Assessment`` objects in this ``Bank``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``AssessmentLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_register_for_assessment_notifications", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "reliable_assessment_notifications", 
            "unreliable_assessment_notifications", 
            "acknowledge_assessment_notification", 
            "register_for_new_assessments", 
            "register_for_changed_assessments", 
            "register_for_changed_assessment", 
            "register_for_deleted_assessments", 
            "register_for_deleted_assessment"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_assessment_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Assessment`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for assessments in\n        banks which are children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications for assessments to this\n        bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "reliable_assessment_notifications", 
               "doc": {
                  "headline": "Reliable notifications are desired.", 
                  "body": "        In reliable mode, notifications are to be acknowledged using\n        ``acknowledge_assessment_notification()`` ."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "unreliable_assessment_notifications", 
               "doc": {
                  "headline": "Unreliable notifications are desired.", 
                  "body": "        In unreliable mode, notifications do not need to be\n        acknowledged."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "acknowledge_assessment_notification", 
               "doc": {
                  "headline": "Acknowledge an assessment notification.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the ``Id`` of the\n                notification\n", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param notification_id: the ``Id`` of the notification\n        :type notification_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments", 
               "doc": {
                  "headline": "Register for notifications of new assessments.", 
                  "body": "        ``AssessmentReceiver.newAssessments()`` is invoked when a new\n        ``Assessment`` appears in this assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments", 
               "doc": {
                  "headline": "Registers for notification of updated assessments.", 
                  "body": "        ``AssessmentReceiver.changedAssessments()`` is invoked when an\n        assessment in this assessment bank is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessment", 
               "doc": {
                  "headline": "Registers for notification of an updated assessment.", 
                  "body": "        ``AssessmentReceiver.changedAssessments()`` is invoked when the\n        specified assessment in this assessment bank is changed."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments", 
               "doc": {
                  "headline": "Registers for notification of deleted assessments.", 
                  "body": "        ``AssessmentReceiver.deletedAssessments()`` is invoked when an\n        assessment is removed from this assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessment", 
               "doc": {
                  "headline": "Registers for notification of a deleted assessment.", 
                  "body": "        ``AssessmentReceiver.deletedAssessments()`` is invoked when the\n        specified assessment is removed from this assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentBankSession", 
         "shortname": "AssessmentBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Assessment`` to ``Bank`` mappings.", 
            "body": "    An ``Assessment`` may appear in multiple ``Banks``. Each ``Bank``\n    may have its own authorizations governing who is allowed to look at\n    it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_assessment_bank_mappings", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_assessment_ids_by_bank", 
            "get_assessments_by_bank", 
            "get_assessment_ids_by_banks", 
            "get_assessments_by_banks", 
            "get_bank_ids_by_assessment", 
            "get_banks_by_assessment"
         ], 
         "methods": [
            {
               "name": "can_lookup_assessment_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of assessment/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Assessment`` and ``Bank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_ids_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``Assessment``  ``Ids`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related assessment ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessment ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``Assessments`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - list of related\n                assessments", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessments\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessment_ids_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``Assessment Ids`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``Assessments`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - list of assessments", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of assessments\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_ids_by_assessment", 
               "doc": {
                  "headline": "Gets the list of ``Bank``  ``Ids`` mapped to an ``Assessment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_assessment", 
               "doc": {
                  "headline": "Gets the list of ``Banks`` mapped to an ``Assessment``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - list of banks", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of banks\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentBankAssignmentSession", 
         "shortname": "AssessmentBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Assessments`` to ``Banks``.", 
            "body": "    An ``Assessment`` may map to multiple ``Banks`` and removing the\n    last reference to an ``Assessment`` is the equivalent of deleting\n    it. Each ``Bank`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Moving or adding a reference of an ``Assessment`` to another\n    ``Bank`` is not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_assessments", 
            "can_assign_assessments_to_bank", 
            "get_assignable_bank_ids", 
            "get_assignable_bank_ids_for_assessment", 
            "assign_assessment_to_bank", 
            "unassign_assessment_from_bank", 
            "reassign_assessment_to_billing"
         ], 
         "methods": [
            {
               "name": "can_assign_assessments", 
               "doc": {
                  "headline": "Tests if this user can alter assessment/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_assessments_to_bank", 
               "doc": {
                  "headline": "Tests if this user can alter assessment/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bank_ids", 
               "doc": {
                  "headline": "Gets a list of banks including and under the given banks node in which any assessment can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bank_ids_for_assessment", 
               "doc": {
                  "headline": "Gets a list of bank including and under the given bank node in which a specific assessment can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` or ``assessment_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` or ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_assessment_to_bank", 
               "doc": {
                  "headline": "Adds an existing ``Assessment`` to a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``assessment_id`` is already assigned to\n                ``bank_id``\n        raise:  NotFound - ``assessment_id`` or ``bank_id`` not found\n        raise:  NullArgument - ``assessment_id`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``assessment_id`` is already assigned to ``bank_id``\n        :raise: ``NotFound`` -- ``assessment_id`` or ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_assessment_from_bank", 
               "doc": {
                  "headline": "Removes an ``Assessment`` from a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` or ``bank_id`` not found or\n                ``assessment_id`` not assigned to ``bank_id``\n        raise:  NullArgument - ``assessment_id`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` or ``bank_id`` not found or ``assessment_id`` not assigned to ``bank_id``\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "reassign_assessment_to_billing", 
               "doc": {
                  "headline": "Moves an ``Assessment`` from one ``Bank`` to another.", 
                  "body": "        Mappings to other ``Banks`` are unaffected."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    from_bank_id (osid.id.Id): the ``Id`` of the current\n                ``Bank``\n        arg:    to_bank_id (osid.id.Id): the ``Id`` of the destination\n                ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id, from_bank_id,`` or\n                ``to_bank_id`` not found or ``assessment_id`` not mapped\n                to ``from_bank_id``\n        raise:  NullArgument - ``assessment_id, from_bank_id,`` or\n                ``to_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param from_bank_id: the ``Id`` of the current ``Bank``\n        :type from_bank_id: ``osid.id.Id``\n        :param to_bank_id: the ``Id`` of the destination ``Bank``\n        :type to_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id, from_bank_id,`` or ``to_bank_id`` not found or ``assessment_id`` not mapped to ``from_bank_id``\n        :raise: ``NullArgument`` -- ``assessment_id, from_bank_id,`` or ``to_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "from_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "to_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentSmartBankSession", 
         "shortname": "AssessmentSmartBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``AssessmentQuery`` can be retrieved from this session and mapped\n    to this ``Bank`` to create a virtual collection of ``Assessments``.\n    The assessments may be sequenced using the ``AssessmentSearchOrder``\n    from this session.\n\n    This ``Bank`` has a default query that matches any assessment and a\n    default search order that specifies no sequencing. The queries may\n    be examined using an ``AssessmentQueryInspector``. The query may be\n    modified by converting the inspector back to an ``AssessmentQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_manage_smart_banks", 
            "get_assessment_query", 
            "get_assessment_search_order", 
            "apply_assessment_query", 
            "inspect_assessment_query", 
            "apply_assessment_sequencing", 
            "get_assessment_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bank management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets an assessment query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_search_order", 
               "doc": {
                  "headline": "Gets an assessment search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchOrder) - the assessment\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment search order\n        :rtype: ``osid.assessment.AssessmentSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_assessment_query", 
               "doc": {
                  "headline": "Applies an assessment query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_query (osid.assessment.AssessmentQuery): the\n                assessment query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_query`` not of this service", 
               "sphinx_param_doc": "        :param assessment_query: the assessment query\n        :type assessment_query: ``osid.assessment.AssessmentQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentQuery", 
                     "var_name": "assessment_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_assessment_query", 
               "doc": {
                  "headline": "Gets an assessment query inspector for this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query inspector\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_assessment_sequencing", 
               "doc": {
                  "headline": "Applies an assessment search order to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_search_order\n                (osid.assessment.AssessmentSearchOrder): the assessment\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_search_order: the assessment search order\n        :type assessment_search_order: ``osid.assessment.AssessmentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentSearchOrder", 
                     "var_name": "assessment_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_query_inspector\n                (osid.assessment.AssessmentQueryInspector): an\n                assessment query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  NullArgument - ``assessment_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessment_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param assessment_query_inspector: an assessment query inspector\n        :type assessment_query_inspector: ``osid.assessment.AssessmentQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentQueryInspector", 
                     "var_name": "assessment_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentBasicAuthoringSession", 
         "shortname": "AssessmentBasicAuthoringSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to manage assessment items in an assessment.", 
            "body": "    This session is used for simple assessments without sections or\n    parts. Updating the items on an assessment authored with sections\n    and parts may result in an error."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_author_assessments", 
            "get_items", 
            "add_item", 
            "remove_item", 
            "move_item", 
            "order_items"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_author_assessments", 
               "doc": {
                  "headline": "Tests if this user can author assessments.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        authoring operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_items", 
               "doc": {
                  "headline": "Gets the items in sequence from an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.ItemList) - list of items", 
               "error_doc": "        raise:  NotFound - ``assessmentid`` not found\n        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of items\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessmentid`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_item", 
               "doc": {
                  "headline": "Adds an existing ``Item`` to an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` or ``item_id`` not found\n        raise:  NullArgument - ``assessment_id`` or ``item_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` or ``item_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_item", 
               "doc": {
                  "headline": "Removes an ``Item`` from this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    item_id (osid.id.Id): the ``Id`` of the ``Item``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` or ``item_id`` not found or\n                ``item_id`` not on ``assessmentid``\n        raise:  NullArgument - ``assessment_id`` or ``item_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param item_id: the ``Id`` of the ``Item``\n        :type item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` or ``item_id`` not found or ``item_id`` not on ``assessmentid``\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "move_item", 
               "doc": {
                  "headline": "Moves an existing item to follow another item in an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n        arg:    item_id (osid.id.Id): the ``Id`` of an ``Item``\n        arg:    preceeding_item_id (osid.id.Id): the ``Id`` of a\n                preceeding ``Item`` in the sequence\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found, or\n                ``item_id`` or ``preceeding_item_id`` not on\n                ``assessment_id``\n        raise:  NullArgument - ``assessment_id, item_id`` or\n                ``preceeding_item_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param item_id: the ``Id`` of an ``Item``\n        :type item_id: ``osid.id.Id``\n        :param preceeding_item_id: the ``Id`` of a preceeding ``Item`` in the sequence\n        :type preceeding_item_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found, or ``item_id`` or ``preceeding_item_id`` not on ``assessment_id``\n        :raise: ``NullArgument`` -- ``assessment_id, item_id`` or ``preceeding_item_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "preceeding_item_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "order_items", 
               "doc": {
                  "headline": "Sequences existing items in an assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_ids (osid.id.Id[]): the ``Id`` of the ``Items``\n        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found or an\n                ``item_id`` is not on ``assessment_id``\n        raise:  NullArgument - ``assessment_id`` or ``item_ids`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param item_ids: the ``Id`` of the ``Items``\n        :type item_ids: ``osid.id.Id[]``\n        :param assessment_id: the ``Id`` of the ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found or an ``item_id`` is not on ``assessment_id``\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``item_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "item_ids", 
                     "array": true
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id[]", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedLookupSession", 
         "shortname": "AssessmentOfferedLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving assessments offered.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_lookup_assessments_offered", 
            "use_comparative_assessment_offered_view", 
            "use_plenary_assessment_offered_view", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment_offered", 
            "get_assessments_offered_by_ids", 
            "get_assessments_offered_by_genus_type", 
            "get_assessments_offered_by_parent_genus_type", 
            "get_assessments_offered_by_record_type", 
            "get_assessments_offered_by_date", 
            "get_assessments_offered_for_assessment", 
            "get_assessments_offered"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can perform ``AssessmentOffered`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_assessment_offered_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_assessment_offered_view", 
               "doc": {
                  "headline": "A complete view of the ``AssessmentOffered`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments in banks which are\n        children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered", 
               "doc": {
                  "headline": "Gets the ``AssessmentOffered`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``AssessmentOffered`` may have\n        a different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``AssessmentOffered`` and\n        retained for compatibility."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): ``Id`` of the\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - the assessment\n                offered", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` not found\n        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment offered\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_ids", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        assessments specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``AssessmentOffered`` objects may be omitted from\n        the list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    assessment_offered_ids (osid.id.IdList): the list of\n                ``Ids`` to retrieve\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``assessment_offered_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param assessment_offered_ids: the list of ``Ids`` to retrieve\n        :type assessment_offered_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_offered_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` corresponding to the given assessment offered genus ``Type`` which does not include assessments of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments offered or an error results. Otherwise, the returned\n        list may contain only those assessments offered that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_offered_genus_type (osid.type.Type): an\n                assessment offered genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_genus_type: an assessment offered genus type\n        :type assessment_offered_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` corresponding to the given assessment offered genus ``Type`` and include any additional assessments with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments offered that are accessible\n        through this session."
               }, 
               "arg_doc": "        arg:    assessment_offered_genus_type (osid.type.Type): an\n                assessment offered genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_genus_type: an assessment offered genus type\n        :type assessment_offered_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_record_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` corresponding to the given assessment offered record ``Type``.", 
                  "body": "        The set of assessments implementing the given record type is\n        returned. In plenary mode, the returned list contains all known\n        assessments offered or an error results. Otherwise, the returned\n        list may contain only those assessments offered that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): an assessment\n                offered record type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_record_type: an assessment offered record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_date", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` that have designated start times where the start times fall in the given range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments offered or an error results. Otherwise, the returned\n        list may contain only those assessments offered that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of time range\n        arg:    end (osid.calendaring.DateTime): end of time range\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param start: start of time range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of time range\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_for_assessment", 
               "doc": {
                  "headline": "Gets an ``AssessmentOfferedList`` by the given assessment.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments offered or an error results. Otherwise, the returned\n        list may contain only those assessments offered that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOffered`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOffered`` list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered", 
               "doc": {
                  "headline": "Gets all ``AssessmentOffered`` elements.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments offered or an error results. Otherwise, the returned\n        list may contain only those assessments offered that are\n        accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - a list of\n                ``AssessmentOffered`` elements", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``AssessmentOffered`` elements\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedQuerySession", 
         "shortname": "AssessmentOfferedQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for querying ``AssessmentOffered`` objects.", 
            "body": "    The search query is constructed using the\n    ``AssessmentOfferedQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments offered in\n        banks of which this bank is a ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments\n        offered in this bank\n\n    \n    Asessments offered may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``AssessmentOfferedQuery``. The returns in this session may not be\n    cast directly to these interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_search_assessments_offered", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment_offered_query", 
            "get_assessments_offered_by_query"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can perform ``AssessmentOffered`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may wish not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments offered in banks which\n        are children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query", 
               "doc": {
                  "headline": "Gets an assessment offered query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_offered_by_query", 
               "doc": {
                  "headline": "Gets a list of ``AssessmentOffered`` elements matching the given assessment offered query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_query\n                (osid.assessment.AssessmentOfferedQuery): the assessment\n                offered query\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the returned\n                ``AssessmentOfferedList``", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_query`` is not of\n                this service", 
               "sphinx_param_doc": "        :param assessment_offered_query: the assessment offered query\n        :type assessment_offered_query: ``osid.assessment.AssessmentOfferedQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentOfferedList``\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedQuery", 
                     "var_name": "assessment_offered_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedQuery"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedSearchSession", 
         "shortname": "AssessmentOfferedSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``AssessmentOffered`` objects.", 
            "body": "    The search query is constructed using the\n    ``AssessmentOfferedQuery``.\n\n    ``get_assessments_offered_by_query()`` is the basic search method\n    and returns a list of ``AssessmentOffered`` elements. A more\n    advanced search may be performed with\n    ``getAssessmentsOfferedBySearch()``. It accepts an\n    ``AssessmentOfferedSearch`` in addition to the query for the purpose\n    of specifying additional options affecting the entire search, such\n    as ordering. ``get_assessments_offered_by_search()`` returns an\n    ``AssessmentOfferedSearchResults`` that can be used to access the\n    resulting ``AssessmentOfferedList`` or be used to perform a search\n    within the result set through ``AssessmentOfferedSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments offered in\n        banks of which this bank is an ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments\n        offered in this bank\n\n    \n    Assessments offered may have a query record indicated by their\n    respective record types. The query record is accessed via the\n    ``AssessmentOfferedQuery``."
         }, 
         "inherit_fullnames": [
            "osid.assessment.AssessmentOfferedQuerySession"
         ], 
         "inherit_shortnames": [
            "AssessmentOfferedQuerySession"
         ], 
         "inherit_pkg_names": [
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "assessment", 
               "name": "AssessmentOfferedQuerySession"
            }
         ], 
         "method_names": [
            "get_assessment_offered_search", 
            "get_assessment_offered_search_order", 
            "get_assessments_offered_by_search", 
            "get_assessment_offered_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_assessment_offered_search", 
               "doc": {
                  "headline": "Gets an assessment offered search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearch) - the\n                assessment offered search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered search\n        :rtype: ``osid.assessment.AssessmentOfferedSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearch", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_search_order", 
               "doc": {
                  "headline": "Gets an assessment offered search order.", 
                  "body": "        The ``AssessmentOfferedSearchOrder`` is supplied to an\n        ``AssessmentOfferedSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchOrder) - the\n                assessment offered search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered search order\n        :rtype: ``osid.assessment.AssessmentOfferedSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_offered_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_query\n                (osid.assessment.AssessmentOfferedQuery): the assessment\n                offered query\n        arg:    assessment_offered_search\n                (osid.assessment.AssessmentOfferedSearch): the\n                assessment offered search\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchResults) - the\n                assessment offered search results", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_query`` or\n                ``assessment_offered_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_query`` or\n                ``assessment_offered_search`` is not of this service", 
               "sphinx_param_doc": "        :param assessment_offered_query: the assessment offered query\n        :type assessment_offered_query: ``osid.assessment.AssessmentOfferedQuery``\n        :param assessment_offered_search: the assessment offered search\n        :type assessment_offered_search: ``osid.assessment.AssessmentOfferedSearch``\n", 
               "sphinx_return_doc": "        :return: the assessment offered search results\n        :rtype: ``osid.assessment.AssessmentOfferedSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_query`` or ``assessment_offered_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_query`` or ``assessment_offered_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedQuery", 
                     "var_name": "assessment_offered_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedSearch", 
                     "var_name": "assessment_offered_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedQuery", 
                  "osid.assessment.AssessmentOfferedSearch"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment offered query from an inspector.", 
                  "body": "        The inspector is available from an\n        ``AssessmentOfferedSearchResults``."
               }, 
               "arg_doc": "        arg:    assessment_offered_query_inspector\n                (osid.assessment.AssessmentOfferedQueryInspector): an\n                assessment offered query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessment_offered_query_inspector`` is\n                not of this service", 
               "sphinx_param_doc": "        :param assessment_offered_query_inspector: an assessment offered query inspector\n        :type assessment_offered_query_inspector: ``osid.assessment.AssessmentOfferedQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_offered_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedQueryInspector", 
                     "var_name": "assessment_offered_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedAdminSession", 
         "shortname": "AssessmentOfferedAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``AssessmentsOffered``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``AssessmentOffered,`` an ``AssessmentOfferedForm`` is requested\n    using ``get_assessment_offered_form_for_create()`` specifying the\n    assessment and desired record ``Types`` or none if no record\n    ``Types`` are needed. The returned ``AssessmentOfferedForm`` will\n    indicate that it is to be used with a create operation and can be\n    used to examine metdata or validate data prior to creation. Once the\n    ``AssessmentOfferedForm`` is submiited to a create operation, it\n    cannot be reused with another create operation unless the first\n    operation was unsuccessful. Each ``AssessmentOfferedForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``AssessmentOfferedForms`` are requested to the\n    ``AssessmentOffered``  ``Id`` that is to be updated using\n    ``getAssessmentOfferedFormForUpdate()``. Similarly, the\n    ``AssessmentOfferedForm`` has metadata about the data that can be\n    updated and it can perform validation before submitting the update.\n    The ``AssessmentOfferedForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``AssessmentsOffered``. To unmap an\n    ``AssessmentOffered`` from the current ``Bank,`` the\n    ``AssessmentOfferedBankAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``AssessmentOffered`` itself\n    thus removing it from all known ``Bank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_create_assessments_offered", 
            "can_create_assessment_offered_with_record_types", 
            "get_assessment_offered_form_for_create", 
            "create_assessment_offered", 
            "can_update_assessments_offered", 
            "get_assessment_offered_form_for_update", 
            "update_assessment_offered", 
            "can_delete_assessments_offered", 
            "delete_assessment_offered", 
            "can_manage_assessment_offered_aliases", 
            "alias_assessment_offered"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can create ``AssessmentOffered`` objects.", 
                  "body": "        A return of true does not guarantee successful authoriization. A\n        return of false indicates that it is known creating an\n        ``AssessmentOffered`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentOffered`` creation\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentOffered`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_assessment_offered_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``AssessmentOffered`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getAssessmentOfferedRecordTypes()``\n        can be used to examine which records are supported, this method\n        tests which record(s) are required for creating a specific\n        ``AssessmentOffered``. Providing an empty array tests if an\n        ``AssessmentOffered`` can be created with no records."
               }, 
               "arg_doc": "        arg:    assessment_offered_record_types (osid.type.Type[]):\n                array of assessment offered record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``AssessmentOffered`` creation\n                using the specified record ``Types`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_types`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_record_types: array of assessment offered record types\n        :type assessment_offered_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``AssessmentOffered`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_offered_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_form_for_create", 
               "doc": {
                  "headline": "Gets the assessment offered form for creating new assessments offered.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the related\n                ``Assessment``\n        arg:    assessment_offered_record_types (osid.type.Type[]):\n                array of assessment offered record types to be included\n                in the create operation or an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedForm) - the assessment\n                offered form", 
               "error_doc": "        raise:  NotFound - ``assessment_id`` is not found\n        raise:  NullArgument - ``assessment_id`` or\n                ``assessment_offered_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the related ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param assessment_offered_record_types: array of assessment offered record types to be included in the create operation or an empty list if none\n        :type assessment_offered_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the assessment offered form\n        :rtype: ``osid.assessment.AssessmentOfferedForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_id`` or ``assessment_offered_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_offered_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_assessment_offered", 
               "doc": {
                  "headline": "Creates a new ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_form\n                (osid.assessment.AssessmentOfferedForm): the form for\n                this ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - the new\n                ``AssessmentOffered``", 
               "error_doc": "        raise:  IllegalState - ``assessment_offrered_form`` already used\n                in a create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``assessment_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_form`` did not originate from\n                ``get_assessment_form_for_create()``", 
               "sphinx_param_doc": "        :param assessment_offered_form: the form for this ``AssessmentOffered``\n        :type assessment_offered_form: ``osid.assessment.AssessmentOfferedForm``\n", 
               "sphinx_return_doc": "        :return: the new ``AssessmentOffered``\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_offrered_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``assessment_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_form`` did not originate from ``get_assessment_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedForm", 
                     "var_name": "assessment_offered_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedForm"
               ], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can update ``AssessmentOffered`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``AssessmentOffered`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Assessment`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Assessment`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_form_for_update", 
               "doc": {
                  "headline": "Gets the assessment offered form for updating an existing assessment offered.", 
                  "body": "        A new assessment offered form should be requested for each\n        update transaction."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedForm) - the assessment\n                offered form", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` is not found\n        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment offered form\n        :rtype: ``osid.assessment.AssessmentOfferedForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_assessment_offered", 
               "doc": {
                  "headline": "Updates an existing assessment offered.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_form\n                (osid.assessment.AssessmentOfferedForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``assessment_offrered_form`` already used\n                in an update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``assessment_offered_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_form`` did not originate from\n                ``get_assessment_form_for_update()``", 
               "sphinx_param_doc": "        :param assessment_offered_form: the form containing the elements to be updated\n        :type assessment_offered_form: ``osid.assessment.AssessmentOfferedForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_offrered_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``assessment_offered_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_form`` did not originate from ``get_assessment_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedForm", 
                     "var_name": "assessment_offered_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can delete ``AssessmentsOffered``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``AssessmentOffered`` will result in a ``PermissionDenied``.\n        This is intended as a hint to an application that may opt not to\n        offer a delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentOffered`` deletion\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentOffered`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_assessment_offered", 
               "doc": {
                  "headline": "Deletes an ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` not found\n        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to remove\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_assessment_offered_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``AssessmentsOffered``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentOffered`` aliasing\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentOffered`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_assessment_offered", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``AssessmentOffered`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``AssessmentOffered`` is determined by\n        the provider. The new ``Id`` is an alias to the primary ``Id``.\n        If the alias is a pointer to another assessment offered, it is\n        reassigned to the given assessment offered ``Id``."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of an\n                ``AssessmentOffered``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is in use as a primary\n                ``Id``\n        raise:  NotFound - ``assessment_offered_id`` not found\n        raise:  NullArgument - ``assessment_offered_id`` or ``alias_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is in use as a primary ``Id``\n        :raise: ``NotFound`` -- ``assessment_offered_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedNotificationSession", 
         "shortname": "AssessmentOfferedNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``AssessmentOffered`` objects in this ``Bank``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``AssessmentOfferedLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_register_for_assessment_offered_notifications", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "reliable_assessment_offered_notifications", 
            "unreliable_assessment_offered_notifications", 
            "acknowledge_assessment_offered_notification", 
            "register_for_new_assessments_offered", 
            "register_for_new_assessments_offered_for_assessment", 
            "register_for_changed_assessments_offered", 
            "register_for_changed_assessments_offered_for_assessment", 
            "register_for_changed_assessment_offered", 
            "register_for_deleted_assessments_offered", 
            "register_for_deleted_assessments_offered_for_assessment", 
            "register_for_deleted_assessment_offered"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_assessment_offered_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``AssessmentOffered`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for assessments\n        offered in banks which are children of this bank in the bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications for assessments offered\n        to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "reliable_assessment_offered_notifications", 
               "doc": {
                  "headline": "Reliable notifications are desired.", 
                  "body": "        In reliable mode, notifications are to be acknowledged using\n        ``acknowledge_assessment_offered_notification()`` ."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "unreliable_assessment_offered_notifications", 
               "doc": {
                  "headline": "Unreliable notifications are desired.", 
                  "body": "        In unreliable mode, notifications do not need to be\n        acknowledged."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "acknowledge_assessment_offered_notification", 
               "doc": {
                  "headline": "Acknowledge an assessment offered notification.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the ``Id`` of the\n                notification\n", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param notification_id: the ``Id`` of the notification\n        :type notification_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_offered", 
               "doc": {
                  "headline": "Register for notifications of new assessments offered.", 
                  "body": "        ``AssessmentOfferedReceiver.newAssessmentsOffered()`` is invoked\n        when a new ``AssessmentOffered`` appears in this assessmen\n        tbank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_offered_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of new assessments offered by assessment.", 
                  "body": "        ``AssessmentOfferedReceiver.newAssessmentsOffered()`` is invoked\n        when a new ``AssessmentOffered`` appears in this assessment\n        bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an assessment to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an assessment to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_offered", 
               "doc": {
                  "headline": "Registers for notification of updated assessments offered.", 
                  "body": "        ``AssessmentOfferedReceiver.changedAssessmentsOffered()`` is\n        invoked when an assessment offered in this assessment bank is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_offered_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of updated assessments offered by assessment.", 
                  "body": "        ``AssessmentOfferedReceiver.changedAssessmentsOffered()`` is\n        invoked when an ``AssessmentOffered`` in this assessment bank is\n        changed."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an assessment to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an assessment to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessment_offered", 
               "doc": {
                  "headline": "Registers for notification of an updated assessment offered.", 
                  "body": "        ``AssessmentOfferedReceiver.changedAssessmentsOffered()`` is\n        invoked when the specified assessment offered in this assessment\n        bank is changed."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to monitor\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_offered", 
               "doc": {
                  "headline": "Registers for notification of deleted assessments offered.", 
                  "body": "        ``AssessmentOfferedReceiver.deletedAssessmentsOffered()`` is\n        invoked when an assessment offered is removed from the\n        assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_offered_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of deleted assessments offered by assessment.", 
                  "body": "        ``AssessmentOfferedReceiver.deletedAssessmenstOffered()`` is\n        invoked when an ``AssessmentOffered`` is removed form the\n        assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an assessment to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an assessment to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessment_offered", 
               "doc": {
                  "headline": "Registers for notification of a deleted assessment offered.", 
                  "body": "        ``AssessmentOfferedReceiver.deletedAssessmentsOffered()`` is\n        invoked when the specified assessment offered is removed from\n        the assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to monitor\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedBankSession", 
         "shortname": "AssessmentOfferedBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``AssessmentOffered`` to ``Bank`` mappings.", 
            "body": "    An ``AssessmentOffered`` may appear in multiple ``Banks``. Each\n    ``Bank`` may have its own authorizations governing who is allowed to\n    look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_assessment_offered_bank_mappings", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_assessment_offered_ids_by_bank", 
            "get_assessments_offered_by_bank", 
            "get_assessment_offered_ids_by_banks", 
            "get_assessments_offered_by_banks", 
            "get_bank_ids_by_assessment_offered", 
            "get_banks_by_assessment_offered"
         ], 
         "methods": [
            {
               "name": "can_lookup_assessment_offered_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of assessment offered/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``AssessmentOffered`` and ``Bank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_ids_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentOffered``  ``Ids`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related assessment offered\n                ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessment offered ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentOffereds`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - list of\n                related assessments offered", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessments offered\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessment_offered_ids_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentOffered Ids`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_offered_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentOffered`` objects corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - list of\n                assessments offered", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of assessments offered\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_ids_by_assessment_offered", 
               "doc": {
                  "headline": "Gets the list of ``Bank``  ``Ids`` mapped to an ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` is not found\n        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_assessment_offered", 
               "doc": {
                  "headline": "Gets the list of ``Banks`` mapped to an ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - list of banks", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` is not found\n        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of banks\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedBankAssignmentSession", 
         "shortname": "AssessmentOfferedBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``AssessmentOffered`` objects to ``Banks``.", 
            "body": "    An ``AssessmentOffered`` may map to multiple ``Banks`` and removing\n    the last reference to an ``AssessmentOffered`` is the equivalent of\n    deleting it. Each ``Bank`` may have its own authorizations governing\n    who is allowed to operate on it.\n\n    Moving or adding a reference of an ``AssessmentOffered`` to another\n    ``Bank`` is not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_assessments_offered", 
            "can_assign_assessments_offered_to_bank", 
            "get_assignable_bank_ids", 
            "get_assignable_bank_ids_for_assessment_offered", 
            "assign_assessment_offered_to_bank", 
            "unassign_assessment_offered_from_bank", 
            "reassign_assessment_offered_to_billing"
         ], 
         "methods": [
            {
               "name": "can_assign_assessments_offered", 
               "doc": {
                  "headline": "Tests if this user can alter assessment offered/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_assessments_offered_to_bank", 
               "doc": {
                  "headline": "Tests if this user can alter assessment offered/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bank_ids", 
               "doc": {
                  "headline": "Gets a list of banks including and under the given banks node in which any assessment offered can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bank_ids_for_assessment_offered", 
               "doc": {
                  "headline": "Gets a list of bank including and under the given bank node in which a specific assessment offered can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` or ``assessment_offered_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` or ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_assessment_offered_to_bank", 
               "doc": {
                  "headline": "Adds an existing ``AssessmentOffered`` to a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``assessment_offered_id`` is already\n                assigned to ``bank_id``\n        raise:  NotFound - ``assessment_offered_id`` or ``bank_id`` not\n                found\n        raise:  NullArgument - ``assessment_offered_id`` or ``bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``assessment_offered_id`` is already assigned to ``bank_id``\n        :raise: ``NotFound`` -- ``assessment_offered_id`` or ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_assessment_offered_from_bank", 
               "doc": {
                  "headline": "Removes an ``AssessmentOffered`` from a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` or ``bank_id`` not\n                found or ``assessment_offered_id`` not assigned to\n                ``bank_id``\n        raise:  NullArgument - ``assessment_offered_id`` or ``bank_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` or ``bank_id`` not found or ``assessment_offered_id`` not assigned to ``bank_id``\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "reassign_assessment_offered_to_billing", 
               "doc": {
                  "headline": "Moves an ``AssessmentOffered`` from one ``Bank`` to another.", 
                  "body": "        Mappings to other ``Banks`` are unaffected."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered``\n        arg:    from_bank_id (osid.id.Id): the ``Id`` of the current\n                ``Bank``\n        arg:    to_bank_id (osid.id.Id): the ``Id`` of the destination\n                ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id, from_bank_id,`` or\n                ``to_bank_id`` not found or ``assessment_offered_id``\n                not mapped to ``from_bank_id``\n        raise:  NullArgument - ``assessment_offered_id, from_bank_id,``\n                or ``to_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param from_bank_id: the ``Id`` of the current ``Bank``\n        :type from_bank_id: ``osid.id.Id``\n        :param to_bank_id: the ``Id`` of the destination ``Bank``\n        :type to_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id, from_bank_id,`` or ``to_bank_id`` not found or ``assessment_offered_id`` not mapped to ``from_bank_id``\n        :raise: ``NullArgument`` -- ``assessment_offered_id, from_bank_id,`` or ``to_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "from_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "to_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedSmartBankSession", 
         "shortname": "AssessmentOfferedSmartBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``AssessmentOfferedQuery`` can be retrieved from this session and\n    mapped to this ``Bank`` to create a virtual collection of\n    ``AssessmentsOffered``. The assessments may be sequenced using the\n    ``AssessmentSearchOrder`` from this session.\n\n    This ``Bank`` has a default query that matches any assessment and a\n    default search order that specifies no sequencing. The queries may\n    be examined using an ``AssessmentOfferedQueryInspector``. The query\n    may be modified by converting the inspector back to an\n    ``AssessmentOfferedQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_manage_smart_banks", 
            "get_assessment_offered_query", 
            "get_assessment_offered_search_order", 
            "apply_assessment_offered_query", 
            "inspect_assessment_offered_query", 
            "apply_assessment_offered_sequencing", 
            "get_assessment_offered_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bank management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query", 
               "doc": {
                  "headline": "Gets an assessment offered query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_search_order", 
               "doc": {
                  "headline": "Gets an assessment offered search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchOrder) - the\n                assessment offered search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered search order\n        :rtype: ``osid.assessment.AssessmentOfferedSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_assessment_offered_query", 
               "doc": {
                  "headline": "Applies an assessment offered query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_query\n                (osid.assessment.AssessmentOfferedQuery): the assessment\n                offered query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_query`` not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_offered_query: the assessment offered query\n        :type assessment_offered_query: ``osid.assessment.AssessmentOfferedQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedQuery", 
                     "var_name": "assessment_offered_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_assessment_offered_query", 
               "doc": {
                  "headline": "Gets an assessment offered query inspector for this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                assessment offered query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query inspector\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_assessment_offered_sequencing", 
               "doc": {
                  "headline": "Applies an assessment offered search order to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_search_order\n                (osid.assessment.AssessmentOfferedSearchOrder): the\n                assessment offered search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_search_order`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_search_order`` not of\n                this service", 
               "sphinx_param_doc": "        :param assessment_offered_search_order: the assessment offered search order\n        :type assessment_offered_search_order: ``osid.assessment.AssessmentOfferedSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedSearchOrder", 
                     "var_name": "assessment_offered_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment offered query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_query_inspector\n                (osid.assessment.AssessmentOfferedQueryInspector): a\n                assessment offered query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessment_offered_query_inspector`` is\n                not of this service", 
               "sphinx_param_doc": "        :param assessment_offered_query_inspector: a assessment offered query inspector\n        :type assessment_offered_query_inspector: ``osid.assessment.AssessmentOfferedQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_offered_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedQueryInspector", 
                     "var_name": "assessment_offered_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenLookupSession", 
         "shortname": "AssessmentTakenLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving assessments taken.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_lookup_assessments_taken", 
            "use_comparative_assessment_taken_view", 
            "use_plenary_assessment_taken_view", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment_taken", 
            "get_assessments_taken_by_ids", 
            "get_assessments_taken_by_genus_type", 
            "get_assessments_taken_by_parent_genus_type", 
            "get_assessments_taken_by_record_type", 
            "get_assessments_taken_by_date", 
            "get_assessments_taken_for_taker", 
            "get_assessments_taken_by_date_for_taker", 
            "get_assessments_taken_for_assessment", 
            "get_assessments_taken_by_date_for_assessment", 
            "get_assessments_taken_for_taker_and_assessment", 
            "get_assessments_taken_by_date_for_taker_and_assessment", 
            "get_assessments_taken_for_assessment_offered", 
            "get_assessments_taken_by_date_for_assessment_offered", 
            "get_assessments_taken_for_taker_and_assessment_offered", 
            "get_assessments_taken_by_date_for_taker_and_assessment_offered", 
            "get_assessments_taken"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can perform ``AssessmentTaken`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_assessment_taken_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_assessment_taken_view", 
               "doc": {
                  "headline": "A complete view of the ``AssessmentTaken`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments in banks which are\n        children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken", 
               "doc": {
                  "headline": "Gets the ``AssessmentTaken`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``AssessmentTaken`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``AssessmentTaken`` and\n        retained for compatibility."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - the assessment taken", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment taken\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_ids", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        assessments specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``AssessmentTaken`` objects may be omitted from the\n        list and may present the elements in any order including\n        returning a unique set."
               }, 
               "arg_doc": "        arg:    assessment_taken_ids (osid.id.IdList): the list of\n                ``Ids`` to retrieve\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``assessment_taken_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "        :param assessment_taken_ids: the list of ``Ids`` to retrieve\n        :type assessment_taken_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken list``\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_taken_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` corresponding to the given assessment taken genus ``Type`` which does not include assessments of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_taken_genus_type (osid.type.Type): an\n                assessment taken genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken list``", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_genus_type: an assessment taken genus type\n        :type assessment_taken_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken list``\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` corresponding to the given assessment taken genus ``Type`` and include any additional assessments with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments or an error results. Otherwise, the returned list\n        may contain only those assessments taken that are accessible\n        through this session."
               }, 
               "arg_doc": "        arg:    assessment_taken_genus_type (osid.type.Type): an\n                assessment taken genus type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken list``", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_genus_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_genus_type: an assessment taken genus type\n        :type assessment_taken_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken list``\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_record_type", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` corresponding to the given assessment taken record ``Type``.", 
                  "body": "        The set of assessments implementing the given record type is\n        returned. In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session. In both cases, the order of the\n        set is not specified."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment taken record type\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment taken record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session. In both cases, the order of the\n        set is not specified."
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_for_taker", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` for the given resource.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date_for_taker", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive for the given resource.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_for_assessment", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` for the given assessment.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date_for_assessment", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive for the given assessment.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``assessment_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``assessment_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_for_taker_and_assessment", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` for the given resource and assessment.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or ``assessment_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date_for_taker_and_assessment", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive for the given resource and assessment.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n        arg:    assessment_id (osid.id.Id): ``Id`` of an ``Assessment``\n        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, assessment_id, from`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param assessment_id: ``Id`` of an ``Assessment``\n        :type assessment_id: ``osid.id.Id``\n        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, assessment_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_for_assessment_offered", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` by the given assessment offered.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date_for_assessment_offered", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive for the given assessment offered.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``assessment_offered_id, from,`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``assessment_offered_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_for_taker_and_assessment_offered", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` for the given resource and assessment offered.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` or\n                ``assessmen_offeredt_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` or ``assessmen_offeredt_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_date_for_taker_and_assessment_offered", 
               "doc": {
                  "headline": "Gets an ``AssessmentTakenList`` started in the given date range inclusive for the given resource and assessment offered.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` of a ``Resource``\n        arg:    assessment_offered_id (osid.id.Id): ``Id`` of an\n                ``AssessmentOffered``\n        arg:    from (osid.calendaring.DateTime): start date\n        arg:    to (osid.calendaring.DateTime): end date\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTaken`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, assessment_offered_id,\n                from,`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` of a ``Resource``\n        :type resource_id: ``osid.id.Id``\n        :param assessment_offered_id: ``Id`` of an ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param from: start date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTaken`` list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, assessment_offered_id, from,`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken", 
               "doc": {
                  "headline": "Gets all ``AssessmentTaken`` elements.", 
                  "body": "        In plenary mode, the returned list contains all known\n        assessments taken or an error results. Otherwise, the returned\n        list may contain only those assessments taken that are\n        accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - a list of\n                ``AssessmentTaken`` elements", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``AssessmentTaken`` elements\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenQuerySession", 
         "shortname": "AssessmentTakenQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``AssessmentTaken`` objects.", 
            "body": "    The search query is constructed using the ``AssessmentTakenQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments taken in banks\n        of which this bank is an ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments taken\n        in this bank\n\n    \n    Assessments taken may have a query record indicated by their\n    respective query record types. The query record is accessed via the\n    ``AssessmentTakenQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_search_assessments_taken", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "get_assessment_taken_query", 
            "get_assessments_taken_by_query"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can perform ``AssessmentTaken`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include assessments taken in banks which\n        are children of this bank in the bank hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts searches to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query", 
               "doc": {
                  "headline": "Gets an assessment taken query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_taken_by_query", 
               "doc": {
                  "headline": "Gets a list of ``AssessmentTaken`` elements matching the given assessment taken query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_query\n                (osid.assessment.AssessmentTakenQuery): the assessment\n                taken query\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the returned\n                ``AssessmentTakenList``", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_taken_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_taken_query: the assessment taken query\n        :type assessment_taken_query: ``osid.assessment.AssessmentTakenQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``AssessmentTakenList``\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_taken_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenQuery", 
                     "var_name": "assessment_taken_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenQuery"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenSearchSession", 
         "shortname": "AssessmentTakenSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``AssessmentTaken`` objects.", 
            "body": "    The search query is constructed using the ``AssessmentTakenQuery``.\n\n    ``get_assessments_taken_by_query()`` is the basic search method and\n    returns a list of ``AssessmentTaken`` elements. A more advanced\n    search may be performed with ``getAssessmentsTakenBySearch()``. It\n    accepts an ``AssessmentTakenSearch`` in addition to the query for\n    the purpose of specifying additional options affecting the entire\n    search, such as ordering. ``get_assessments_taken_by_search()``\n    returns an ``AssessmentTakenSearchResults`` that can be used to\n    access the resulting ``AssessmenTakenList`` or be used to perform a\n    search within the result set through ``AssessmentTakenSearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated bank view: searches include assessments taken in banks\n        of which this bank is an ancestor in the bank hierarchy\n      * isolated bank view: searches are restricted to assessments taken\n        in this bank\n\n    \n    Assessments taken may have query records indicated by their\n    respective record types. The query record is accessed via the\n    ``AssessmentTakenQuery``."
         }, 
         "inherit_fullnames": [
            "osid.assessment.AssessmentTakenQuerySession"
         ], 
         "inherit_shortnames": [
            "AssessmentTakenQuerySession"
         ], 
         "inherit_pkg_names": [
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "assessment", 
               "name": "AssessmentTakenQuerySession"
            }
         ], 
         "method_names": [
            "get_assessment_taken_search", 
            "get_assessment_taken_search_order", 
            "get_assessments_taken_by_search", 
            "get_assessment_taken_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_assessment_taken_search", 
               "doc": {
                  "headline": "Gets an assessment taken search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearch) - the assessment\n                taken search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken search\n        :rtype: ``osid.assessment.AssessmentTakenSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenSearch", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_search_order", 
               "doc": {
                  "headline": "Gets an assessment taken search order.", 
                  "body": "        The ``AssessmentTakenSearchOrder`` is supplied to an\n        ``AssessmentTakenSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchOrder) - the\n                assessment taken search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken search order\n        :rtype: ``osid.assessment.AssessmentTakenSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_assessments_taken_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given assessment taken query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_query\n                (osid.assessment.AssessmentTakenQuery): the assessment\n                taken query\n        arg:    assessment_taken_search\n                (osid.assessment.AssessmentTakenSearch): the assessment\n                taken search\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchResults) - the\n                assessment taken search results", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_query`` or\n                ``assessment_taken_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_taken_query`` or\n                ``assessment_taken_search`` is not of this service", 
               "sphinx_param_doc": "        :param assessment_taken_query: the assessment taken query\n        :type assessment_taken_query: ``osid.assessment.AssessmentTakenQuery``\n        :param assessment_taken_search: the assessment taken search\n        :type assessment_taken_search: ``osid.assessment.AssessmentTakenSearch``\n", 
               "sphinx_return_doc": "        :return: the assessment taken search results\n        :rtype: ``osid.assessment.AssessmentTakenSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_query`` or ``assessment_taken_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_taken_query`` or ``assessment_taken_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenQuery", 
                     "var_name": "assessment_taken_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.AssessmentTakenSearch", 
                     "var_name": "assessment_taken_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenQuery", 
                  "osid.assessment.AssessmentTakenSearch"
               ], 
               "return_type": "osid.assessment.AssessmentTakenSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment taken query from an inspector.", 
                  "body": "        The inspector is available from an\n        ``AssessmentTakenSearchResults``."
               }, 
               "arg_doc": "        arg:    assessment_taken_query_inspector\n                (osid.assessment.AssessmentTakenQueryInspector): an\n                assessment taken query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessment_taken_query_inspector`` is\n                not of this service", 
               "sphinx_param_doc": "        :param assessment_taken_query_inspector: an assessment taken query inspector\n        :type assessment_taken_query_inspector: ``osid.assessment.AssessmentTakenQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_taken_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenQueryInspector", 
                     "var_name": "assessment_taken_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenAdminSession", 
         "shortname": "AssessmentTakenAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``AssessmentsTaken``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``AssessmentTaken,`` an ``AssessmentTakenForm`` is requested using\n    ``get_assessment_taken_form_for_create()`` specifying the assessment\n    offered and desired record ``Types`` or none if no record ``Types``\n    are needed. The returned ``AssessmentTakenForm`` will indicate that\n    it is to be used with a create operation and can be used to examine\n    metdata or validate data prior to creation. Once the\n    ``AssessmentTakenForm`` is submiited to a create operation, it\n    cannot be reused with another create operation unless the first\n    operation was unsuccessful. Each ``AssessmentTakenForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``AssessmentTakenForms`` are requested to the\n    ``AssessmentTaken``  ``Id`` that is to be updated using\n    ``getAssessmentTakenFormForUpdate()``. Similarly, the\n    ``AssessmentTakenForm`` has metadata about the data that can be\n    updated and it can perform validation before submitting the update.\n    The ``AssessmentTakenForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``AssessmentsTaken``. To unmap an\n    ``AssessmentTakenForm`` from the current ``Bank,`` the\n    ``AssessmentTakenFormBankAssignmentSession`` should be used. These\n    delete operations attempt to remove the ``AssessmentTakenForm``\n    itself thus removing it from all known ``Bank`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_create_assessments_taken", 
            "can_create_assessment_taken_with_record_types", 
            "get_assessment_taken_form_for_create", 
            "create_assessment_taken", 
            "can_update_assessments_taken", 
            "get_assessment_taken_form_for_update", 
            "update_assessment_taken", 
            "can_delete_assessments_taken", 
            "delete_assessment_taken", 
            "can_manage_assessment_taken_aliases", 
            "alias_assessment_taken"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can create ``AssessmentTaken`` objects.", 
                  "body": "        A return of true does not guarantee successful authoriization. A\n        return of false indicates that it is known creating an\n        ``AssessmentTaken`` will result in a ``PermissionDenied``. This\n        is intended as a hint to an application that may opt not to\n        offer create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentTaken`` creation is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentTaken`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_assessment_taken_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``AssessmentTaken`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getAssessmentTakenRecordTypes()`` can\n        be used to examine which records are supported, this method\n        tests which record(s) are required for creating a specific\n        ``AssessmentTaken``. Providing an empty array tests if an\n        ``AssessmentTaken`` can be created with no records."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_types (osid.type.Type[]): array\n                of assessment taken record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``AssessmentTaken`` creation\n                using the specified record ``Types`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_types`` is\n                ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_record_types: array of assessment taken record types\n        :type assessment_taken_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``AssessmentTaken`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_taken_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_form_for_create", 
               "doc": {
                  "headline": "Gets the assessment taken form for creating new assessments taken.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                related ``AssessmentOffered``\n        arg:    assessment_taken_record_types (osid.type.Type[]): array\n                of assessment taken record types to be included in the\n                create operation or an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenForm) - the assessment\n                taken form", 
               "error_doc": "        raise:  NotFound - ``assessment_offered_id`` is not found\n        raise:  NullArgument - ``assessment_offered_id`` or\n                ``assessment_taken_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the related ``AssessmentOffered``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param assessment_taken_record_types: array of assessment taken record types to be included in the create operation or an empty list if none\n        :type assessment_taken_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the assessment taken form\n        :rtype: ``osid.assessment.AssessmentTakenForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_offered_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_offered_id`` or ``assessment_taken_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "assessment_taken_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.AssessmentTakenForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_assessment_taken", 
               "doc": {
                  "headline": "Creates a new ``AssessmentTaken``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_form (osid.assessment.AssessmentForm):\n                the form for this ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - the new\n                ``AssessmentTaken``", 
               "error_doc": "        raise:  IllegalState - ``assessment_taken_form`` already used in\n                a create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``assessment_taken_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_form`` did not\n                originate from\n                ``get_assessment_taken_form_for_create()``", 
               "sphinx_param_doc": "        :param assessment_taken_form: the form for this ``AssessmentTaken``\n        :type assessment_taken_form: ``osid.assessment.AssessmentForm``\n", 
               "sphinx_return_doc": "        :return: the new ``AssessmentTaken``\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_taken_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``assessment_taken_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_form`` did not originate from ``get_assessment_taken_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentForm", 
                     "var_name": "assessment_taken_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentForm"
               ], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can update ``AssessmentTaken`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``AssessmentTaken`` will result in a ``PermissionDenied``. This\n        is intended as a hint to an application that may opt not to\n        offer update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentTaken``\n                modification is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentTaken`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_form_for_update", 
               "doc": {
                  "headline": "Gets the assessment taken form for updating an existing assessment taken.", 
                  "body": "        A new assessment taken form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenForm) - the assessment\n                taken form", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the assessment taken form\n        :rtype: ``osid.assessment.AssessmentTakenForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_assessment_taken", 
               "doc": {
                  "headline": "Updates an existing assessment taken.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_form\n                (osid.assessment.AssessmentTakenForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``assessment_taken_form`` already used in\n                an update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``assessment_taken_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_offered_form`` did not\n                originate from\n                ``get_assessment_taken_form_for_update()``", 
               "sphinx_param_doc": "        :param assessment_taken_form: the form containing the elements to be updated\n        :type assessment_taken_form: ``osid.assessment.AssessmentTakenForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``assessment_taken_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``assessment_taken_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_offered_form`` did not originate from ``get_assessment_taken_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenForm", 
                     "var_name": "assessment_taken_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can delete ``AssessmentsTaken``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``AssessmentTaken`` will result in a ``PermissionDenied``. This\n        is intended as a hint to an application that may opt not to\n        offer a delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentTaken`` deletion is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentTaken`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_assessment_taken", 
               "doc": {
                  "headline": "Deletes an ``AssessmentTaken``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken`` to remove\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_assessment_taken_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``AssessmentsTaken``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``AssessmentTaken`` aliasing is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``AssessmentTaken`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_assessment_taken", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``AssessmentTaken`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``AssessmentTaken`` is determined by\n        the provider. The new ``Id`` is an alias to the primary ``Id``.\n        If the alias is a pointer to another assessment taken, it is\n        reassigned to the given assessment taken ``Id``."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of an\n                ``AssessmentTaken``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is in use as a primary\n                ``Id``\n        raise:  NotFound - ``assessment_taken_id`` not found\n        raise:  NullArgument - ``assessment_taken_id`` or ``alias_id``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of an ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is in use as a primary ``Id``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenNotificationSession", 
         "shortname": "AssessmentTakenNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``AssessmentTaken`` objects in this ``Bank``.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``AssessmentTakenLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_register_for_assessment_taken_notifications", 
            "use_federated_bank_view", 
            "use_isolated_bank_view", 
            "reliable_assessment_taken_notifications", 
            "unreliable_assessment_taken_notifications", 
            "acknowledge_assessment_taken_notification", 
            "register_for_new_assessments_taken", 
            "register_for_new_assessments_taken_for_taker", 
            "register_for_new_assessments_taken_for_assessment_offered", 
            "register_for_new_assessments_taken_for_assessment", 
            "register_for_changed_assessments_taken", 
            "register_for_changed_assessments_taken_for_taker", 
            "register_for_changed_assessments_taken_for_assessment_offered", 
            "register_for_changed_assessments_taken_for_assessment", 
            "register_for_changed_assessment_taken", 
            "register_for_deleted_assessments_taken", 
            "register_for_deleted_assessments_taken_for_taker", 
            "register_for_deleted_assessments_taken_for_assessment_offered", 
            "register_for_deleted_assessments_taken_for_assessment", 
            "register_for_deleted_assessment_taken"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_assessment_taken_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``AssessmentTaken`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_bank_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for assessments\n        taken in banks which are children of this bank in the bank\n        hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_bank_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications for assessments taken\n        to this bank only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "reliable_assessment_taken_notifications", 
               "doc": {
                  "headline": "Reliable notifications are desired.", 
                  "body": "        In reliable mode, notifications are to be acknowledged using\n        ``acknowledge_assessment_taken_notification()`` ."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "unreliable_assessment_taken_notifications", 
               "doc": {
                  "headline": "Unreliable notifications are desired.", 
                  "body": "        In unreliable mode, notifications do not need to be\n        acknowledged."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "acknowledge_assessment_taken_notification", 
               "doc": {
                  "headline": "Acknowledge an assessment taken notification.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the ``Id`` of the\n                notification\n", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param notification_id: the ``Id`` of the notification\n        :type notification_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_taken", 
               "doc": {
                  "headline": "Register for notifications of new assessments taken in this assessment bank.", 
                  "body": "        ``AssessmentTakenReceiver.newAssessmentsTaken()`` is invoked\n        when a new ``AssessmentTaken`` appears in this assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_taken_for_taker", 
               "doc": {
                  "headline": "Register for notifications of new assessments taken for a resource.", 
                  "body": "        ``AssessmentTakenReceiver.newAssessmenstTaken()`` is invoked\n        when a new ``AssessmentTaken`` appears in this assessment bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_taken_for_assessment_offered", 
               "doc": {
                  "headline": "Register for notifications of new assessments taken for an assessment offered.", 
                  "body": "        ``AssessmentTakenReceiver.newAssessmentsTaken()`` is invoked\n        when a new ``AssessmentTaken`` appears in this assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to monitor\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_assessments_taken_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of new assessments taken for an assessment.", 
                  "body": "        ``AssessmentTakenReceiver.newAssessmentsTaken()`` is invoked\n        when a new ``AssessmentTaken`` appears in this assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_taken", 
               "doc": {
                  "headline": "Registers for notification of updated assessments taken.", 
                  "body": "        ``AssessmentTakenReceiver.changedAssessmentsTaken()`` is invoked\n        when an assessment taken in this assessment bank is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_taken_for_taker", 
               "doc": {
                  "headline": "Register for notifications of changed assessments taken for a resource.", 
                  "body": "        ``AssessmentTakenReceiver.changedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is changed in this assessment bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_taken_for_assessment_offered", 
               "doc": {
                  "headline": "Register for notifications of changed assessments taken for an assessment offered.", 
                  "body": "        ``AssessmentTakenReceiver.changedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is changed in this assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to monitor\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessments_taken_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of changed assessments taken for an assessment.", 
                  "body": "        ``AssessmentTakenReceiver.changedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is changed in this assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_assessment_taken", 
               "doc": {
                  "headline": "Registers for notification of an updated assessment taken.", 
                  "body": "        ``AssessmentTakenReceiver.changedAssessmentsTaken()`` is invoked\n        when the specified assessment taken in this assessment bank is\n        changed."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken`` to monitor\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_taken", 
               "doc": {
                  "headline": "Registers for notification of deleted assessments taken.", 
                  "body": "        ``AssessmentTakenReceiver.deletedAssessmentsTaken()`` is invoked\n        when an assessment taken is removed from this assessment bank."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_taken_for_taker", 
               "doc": {
                  "headline": "Register for notifications of deleted assessments taken for a resource.", 
                  "body": "        ``AssessmentTakenReceiver.deletedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is removed from this assessment\n        bank."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the ``Resource``\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the ``Resource`` to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_taken_for_assessment_offered", 
               "doc": {
                  "headline": "Register for notifications of deleted assessments taken for an assessment offered.", 
                  "body": "        ``AssessmentTakenReceiver.deletedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is removed from this assessment\n        bank."
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentOffered`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_offered_id: the ``Id`` of the ``AssessmentOffered`` to monitor\n        :type assessment_offered_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessments_taken_for_assessment", 
               "doc": {
                  "headline": "Register for notifications of deleted assessments taken for an assessment.", 
                  "body": "        ``AssessmentTakenReceiver.deletedAssessmentsTaken()`` is invoked\n        when an ``AssessmentTaken`` is removed from this assessment\n        bank."
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the ``Id`` of the\n                ``Assessment`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_id: the ``Id`` of the ``Assessment`` to monitor\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_assessment_taken", 
               "doc": {
                  "headline": "Registers for notification of a deleted assessment taken.", 
                  "body": "        ``AssessmentTakenReceiver.deletedAssessmentsTaken()`` is invoked\n        when the specified assessment taken is removed from this\n        assessment bank."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken`` to monitor\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenBankSession", 
         "shortname": "AssessmentTakenBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``AssessmentTaken`` to ``Bank`` mappings.", 
            "body": "    An ``AssessmentTaken`` may appear in multiple ``Banks``. Each\n    ``Bank`` may have its own authorizations governing who is allowed to\n    look at it.\n\n    This lookup session defines two views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_assessment_taken_bank_mappings", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_assessment_taken_ids_by_bank", 
            "get_assessments_taken_by_bank", 
            "get_assessment_taken_ids_by_banks", 
            "get_assessments_taken_by_banks", 
            "get_bank_ids_by_assessment_taken", 
            "get_banks_by_assessment_taken"
         ], 
         "methods": [
            {
               "name": "can_lookup_assessment_taken_bank_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of assessment taken/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``AssessmentTaken`` and ``Bank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_ids_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentTaken``  ``Ids`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related assessment taken\n                ``Ids``", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessment taken ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_bank", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentTakens`` associated with a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - list of related\n                assessments taken", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related assessments taken\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessment_taken_ids_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentTaken Ids`` corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_assessments_taken_by_banks", 
               "doc": {
                  "headline": "Gets the list of ``AssessmentTaken`` objects corresponding to a list of ``Banks``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of bank ``Ids``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - list of\n                assessments taken", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: list of bank ``Ids``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of assessments taken\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_ids_by_assessment_taken", 
               "doc": {
                  "headline": "Gets the list of ``Bank``  ``Ids`` mapped to an ``AssessmentTaken``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of an\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of bank ``Ids``", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of an ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_assessment_taken", 
               "doc": {
                  "headline": "Gets the list of ``Banks`` mapped to an ``AssessmentTaken``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): ``Id`` of an\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - list of banks", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` is not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: ``Id`` of an ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of banks\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` is not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenBankAssignmentSession", 
         "shortname": "AssessmentTakenBankAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``AssessmentTaken`` objects to ``Banks``.", 
            "body": "    An ``AssessmentTaken`` may map to multiple ``Banks`` and removing\n    the last reference to an ``AssessmentTaken`` is the equivalent of\n    deleting it. Each ``Bank`` may have its own authorizations governing\n    who is allowed to operate on it.\n\n    Moving or adding a reference of an ``AssessmentTaken`` to another\n    ``Bank`` is not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_assessments_taken", 
            "can_assign_assessments_taken_to_bank", 
            "get_assignable_bank_ids", 
            "get_assignable_bank_ids_for_assessment_taken", 
            "assign_assessment_taken_to_bank", 
            "unassign_assessment_taken_from_bank", 
            "reassign_assessment_taken_to_billing"
         ], 
         "methods": [
            {
               "name": "can_assign_assessments_taken", 
               "doc": {
                  "headline": "Tests if this user can alter assessment taken/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_assessments_taken_to_bank", 
               "doc": {
                  "headline": "Tests if this user can alter assessment taken/bank mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_bank_ids", 
               "doc": {
                  "headline": "Gets a list of banks including and under the given banks node in which any assessment taken can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_bank_ids_for_assessment_taken", 
               "doc": {
                  "headline": "Gets a list of bank including and under the given bank node in which a specific assessment taken can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable bank ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` or ``assessment_taken_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` or ``assessment_taken_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_assessment_taken_to_bank", 
               "doc": {
                  "headline": "Adds an existing ``AssessmentTaken`` to a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``assessment_taken_id`` is already\n                assigned to ``bank_id``\n        raise:  NotFound - ``assessment_taken_id`` or ``bank_id`` not\n                found\n        raise:  NullArgument - ``assessment_taken_id`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``assessment_taken_id`` is already assigned to ``bank_id``\n        :raise: ``NotFound`` -- ``assessment_taken_id`` or ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_assessment_taken_from_bank", 
               "doc": {
                  "headline": "Removes an ``AssessmentTaken`` from a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken``\n        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id`` or ``bank_id`` not\n                found or ``assessment_taken_id`` not assigned to\n                ``bank_id``\n        raise:  NullArgument - ``assessment_taken_id`` or ``bank_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id`` or ``bank_id`` not found or ``assessment_taken_id`` not assigned to ``bank_id``\n        :raise: ``NullArgument`` -- ``assessment_taken_id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "reassign_assessment_taken_to_billing", 
               "doc": {
                  "headline": "Moves an ``AssessmentTaken`` from one ``Bank`` to another.", 
                  "body": "        Mappings to other ``Banks`` are unaffected."
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): the ``Id`` of the\n                ``AssessmentTaken``\n        arg:    from_bank_id (osid.id.Id): the ``Id`` of the current\n                ``Bank``\n        arg:    to_bank_id (osid.id.Id): the ``Id`` of the destination\n                ``Bank``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``assessment_taken_id, from_bank_id,`` or\n                ``to_bank_id`` not found or ``assessment_taken_id`` not\n                mapped to ``from_bank_id``\n        raise:  NullArgument - ``assessment_taken_id, from_bank_id,`` or\n                ``to_bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param assessment_taken_id: the ``Id`` of the ``AssessmentTaken``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param from_bank_id: the ``Id`` of the current ``Bank``\n        :type from_bank_id: ``osid.id.Id``\n        :param to_bank_id: the ``Id`` of the destination ``Bank``\n        :type to_bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``assessment_taken_id, from_bank_id,`` or ``to_bank_id`` not found or ``assessment_taken_id`` not mapped to ``from_bank_id``\n        :raise: ``NullArgument`` -- ``assessment_taken_id, from_bank_id,`` or ``to_bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "from_bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "to_bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenSmartBankSession", 
         "shortname": "AssessmentTakenSmartBankSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    An ``AssessmentTakenQuery`` can be retrieved from this session and\n    mapped to this ``Bank`` to create a virtual collection of\n    ``AssessmentsTaken``. The assessments may be sequenced using the\n    ``AssessmentSearchOrder`` from this session.\n\n    This ``Bank`` has a default query that matches any assessment and a\n    default search order that specifies no sequencing. The queries may\n    be examined using an ``AssessmentTakenQueryInspector``. The query\n    may be modified by converting the inspector back to an\n    ``AssessmentTakenQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_id", 
            "get_bank", 
            "can_manage_smart_banks", 
            "get_assessment_taken_query", 
            "get_assessment_taken_search_order", 
            "apply_assessment_taken_query", 
            "inspect_assessment_taken_query", 
            "apply_assessment_taken_sequencing", 
            "get_assessment_taken_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bank_id", 
               "doc": {
                  "headline": "Gets the ``Bank``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Bank Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the ``Bank`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Bank`` associated with this session\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_banks", 
               "doc": {
                  "headline": "Tests if this user can manage smart banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart bank management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart bank management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query", 
               "doc": {
                  "headline": "Gets an assessment taken query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_search_order", 
               "doc": {
                  "headline": "Gets an assessment taken search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchOrder) - the\n                assessment taken search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken search order\n        :rtype: ``osid.assessment.AssessmentTakenSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_assessment_taken_query", 
               "doc": {
                  "headline": "Applies an assessment taken query to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_query\n                (osid.assessment.AssessmentTakenQuery): the assessment\n                taken query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_taken_query`` not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_taken_query: the assessment taken query\n        :type assessment_taken_query: ``osid.assessment.AssessmentTakenQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_taken_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenQuery", 
                     "var_name": "assessment_taken_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_assessment_taken_query", 
               "doc": {
                  "headline": "Gets an assessment taken query inspector for this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQueryInspector) - the\n                assessment taken query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query inspector\n        :rtype: ``osid.assessment.AssessmentTakenQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_assessment_taken_sequencing", 
               "doc": {
                  "headline": "Applies an assessment taken search order to this bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_search_order\n                (osid.assessment.AssessmentTakenSearchOrder): the\n                assessment taken search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_search_order`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``assessment_taken_search_order`` not of\n                this service", 
               "sphinx_param_doc": "        :param assessment_taken_search_order: the assessment taken search order\n        :type assessment_taken_search_order: ``osid.assessment.AssessmentTakenSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``assessment_taken_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenSearchOrder", 
                     "var_name": "assessment_taken_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_from_inspector", 
               "doc": {
                  "headline": "Gets an assessment taken query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessmen_taken_query_inspector\n                (osid.assessment.AssessmentTakenQueryInspector): a\n                assessment taen query inspector\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "        raise:  NullArgument - ``assessmen_taken_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``assessmen_taken_query_inspector`` is not\n                of this service", 
               "sphinx_param_doc": "        :param assessmen_taken_query_inspector: a assessment taen query inspector\n        :type assessmen_taken_query_inspector: ``osid.assessment.AssessmentTakenQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessmen_taken_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``assessmen_taken_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenQueryInspector", 
                     "var_name": "assessmen_taken_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenQueryInspector"
               ], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankLookupSession", 
         "shortname": "BankLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Bank`` objects.", 
            "body": "    The ``Bank`` represents a collection of ``Items`` and\n    ``Assessments``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Banks`` it can access, without breaking execution.\n    However, an administrative application may require all ``Bank``\n    elements to be available.\n    \n    Banks may have an additional records indicated by their respective\n    record types. The record may not be accessed through a cast of the\n    ``Bank``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_banks", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_bank", 
            "get_banks_by_ids", 
            "get_banks_by_genus_type", 
            "get_banks_by_parent_genus_type", 
            "get_banks_by_record_type", 
            "get_banks_by_provider", 
            "get_banks"
         ], 
         "methods": [
            {
               "name": "can_lookup_banks", 
               "doc": {
                  "headline": "Tests if this user can perform ``Bank`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Bank`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Bank`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Bank`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.Bank) - the bank", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the bank\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_ids", 
               "doc": {
                  "headline": "Gets a ``BankList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the banks\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Bank`` objects may be omitted from the list and\n        may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``Bank`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``bank_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_ids: the list of ``Ids`` to retrieve\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bank`` list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``BankList`` corresponding to the given bank genus ``Type`` which does not include banks of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known banks or\n        an error results. Otherwise, the returned list may contain only\n        those banks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bank_genus_type (osid.type.Type): a bank genus type\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``Bank`` list", 
               "error_doc": "        raise:  NullArgument - ``bank_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_genus_type: a bank genus type\n        :type bank_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bank`` list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``BankList`` corresponding to the given bank genus ``Type`` and include any additional banks with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known banks or\n        an error results. Otherwise, the returned list may contain only\n        those banks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bank_genus_type (osid.type.Type): a bank genus type\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``Bank`` list", 
               "error_doc": "        raise:  NullArgument - ``bank_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_genus_type: a bank genus type\n        :type bank_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bank`` list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_record_type", 
               "doc": {
                  "headline": "Gets a ``BankList`` containing the given bank record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known banks or\n        an error results. Otherwise, the returned list may contain only\n        those banks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``Bank`` list", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bank`` list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks_by_provider", 
               "doc": {
                  "headline": "Gets a ``BankList`` from the given provider ````.", 
                  "body": "        In plenary mode, the returned list contains all known banks or\n        an error results. Otherwise, the returned list may contain only\n        those banks that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``Bank`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Bank`` list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_banks", 
               "doc": {
                  "headline": "Gets all ``Banks``.", 
                  "body": "        In plenary mode, the returned list contains all known banks or\n        an error results. Otherwise, the returned list may contain only\n        those banks that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankList) - a ``BankList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``BankList``\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankQuerySession", 
         "shortname": "BankQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Bank`` objects.", 
            "body": "    The search query is constructed using the ``BankQuery``.\n\n    Banks may have aquery record indicated by their respective record\n    types. The query record is accessed via the ``BankQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_banks", 
            "get_bank_query", 
            "get_banks_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_banks", 
               "doc": {
                  "headline": "Tests if this user can perform ``Bank`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query", 
               "doc": {
                  "headline": "Gets a bank query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - a bank query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {}
            }, 
            {
               "name": "get_banks_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Bank`` objects matching the given bank query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_query (osid.assessment.BankQuery): the bank query\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the returned ``BankList``", 
               "error_doc": "        raise:  NullArgument - ``bank_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``bank_query`` is not of this service", 
               "sphinx_param_doc": "        :param bank_query: the bank query\n        :type bank_query: ``osid.assessment.BankQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``BankList``\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``bank_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankQuery", 
                     "var_name": "bank_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankQuery"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankSearchSession", 
         "shortname": "BankSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Bank`` objects.", 
            "body": "    The search query is constructed using the ``BankQuery``.\n\n    ``get_banks_by_query()`` is the basic search method and returns a\n    list of ``Bank`` objects.A more advanced search may be performed\n    with ``getBanksBySearch()``. It accepts a ``BankSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_banks_by_search()`` returns a ``BankSearchResults`` that can\n    be used to access the resulting ``BankList`` or be used to perform a\n    search within the result set through ``BankSearch``.\n    \n    Banks may have a query record indicated by their respective record\n    types. The query record is accessed via the ``BankQuery``."
         }, 
         "inherit_fullnames": [
            "osid.assessment.BankQuerySession"
         ], 
         "inherit_shortnames": [
            "BankQuerySession"
         ], 
         "inherit_pkg_names": [
            "assessment"
         ], 
         "inheritance": [
            {
               "pkg_name": "assessment", 
               "name": "BankQuerySession"
            }
         ], 
         "method_names": [
            "get_bank_search", 
            "get_bank_search_order", 
            "get_banks_by_search", 
            "get_bank_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_bank_search", 
               "doc": {
                  "headline": "Gets a bank search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankSearch) - a bank search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a bank search\n        :rtype: ``osid.assessment.BankSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankSearch", 
               "errors": {}
            }, 
            {
               "name": "get_bank_search_order", 
               "doc": {
                  "headline": "Gets a bank search order.", 
                  "body": "        The ``BankSearchOrder`` is supplied to a ``BankSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankSearchOrder) - the bank search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank search order\n        :rtype: ``osid.assessment.BankSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_banks_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_query (osid.assessment.BankQuery): the bank query\n        arg:    bank_search (osid.assessment.BankSearch): the bank\n                search\n", 
               "return_doc": "        return: (osid.assessment.BankSearchResults) - the bank search\n                results", 
               "error_doc": "        raise:  NullArgument - ``bank_query`` or ``bank_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``bank_query`` or ``bank_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param bank_query: the bank query\n        :type bank_query: ``osid.assessment.BankQuery``\n        :param bank_search: the bank search\n        :type bank_search: ``osid.assessment.BankSearch``\n", 
               "sphinx_return_doc": "        :return: the bank search results\n        :rtype: ``osid.assessment.BankSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_query`` or ``bank_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``bank_query`` or ``bank_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankQuery", 
                     "var_name": "bank_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.assessment.BankSearch", 
                     "var_name": "bank_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankQuery", 
                  "osid.assessment.BankSearch"
               ], 
               "return_type": "osid.assessment.BankSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_query_from_inspector", 
               "doc": {
                  "headline": "Gets a bank query from an inspector.", 
                  "body": "        The inspector is available from a ``BankSearchResults``."
               }, 
               "arg_doc": "        arg:    bank_query_inspector\n                (osid.assessment.BankQueryInspector): a bank query\n                inspector\n", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  NullArgument - ``bank_query_inspector`` is ``null``\n        raise:  Unsupported - ``bank_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param bank_query_inspector: a bank query inspector\n        :type bank_query_inspector: ``osid.assessment.BankQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``bank_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankQueryInspector", 
                     "var_name": "bank_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankQueryInspector"
               ], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankAdminSession", 
         "shortname": "BankAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Banks``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Bank,`` a ``BankForm`` is requested using\n    ``get_bank_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``BankForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``BankForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``BankForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``BankForms`` are requested to the ``Bank``  ``Id``\n    that is to be updated using ``getBankFormForUpdate()``. Similarly,\n    the ``BankForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``BankForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Banks``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_banks", 
            "can_create_bank_with_record_types", 
            "get_bank_form_for_create", 
            "create_bank", 
            "can_update_banks", 
            "get_bank_form_for_update", 
            "update_bank", 
            "can_delete_banks", 
            "delete_bank", 
            "can_manage_bank_aliases", 
            "alias_bank"
         ], 
         "methods": [
            {
               "name": "can_create_banks", 
               "doc": {
                  "headline": "Tests if this user can create ``Banks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Bank``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bank`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bank`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_bank_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Bank`` using the desired record types.", 
                  "body": "        While ``AssessmentManager.getBankRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Bank``.\n        Providing an empty array tests if a ``Bank`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    bank_record_types (osid.type.Type[]): array of bank\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Bank`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``bank_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param bank_record_types: array of bank record types\n        :type bank_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Bank`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "bank_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_form_for_create", 
               "doc": {
                  "headline": "Gets the bank form for creating new banks.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    bank_record_types (osid.type.Type[]): array of bank\n                record types to be included in the create operation or\n                an empty list if none\n", 
               "return_doc": "        return: (osid.assessment.BankForm) - the bank form", 
               "error_doc": "        raise:  NullArgument - ``bank_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param bank_record_types: array of bank record types to be included in the create operation or an empty list if none\n        :type bank_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the bank form\n        :rtype: ``osid.assessment.BankForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "bank_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.assessment.BankForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_bank", 
               "doc": {
                  "headline": "Creates a new ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_form (osid.assessment.BankForm): the form for this\n                ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.Bank) - the new ``Bank``", 
               "error_doc": "        raise:  IllegalState - ``bank_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``bank_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``bank_form`` did not originate from\n                ``get_bank_form_for_create()``", 
               "sphinx_param_doc": "        :param bank_form: the form for this ``Bank``\n        :type bank_form: ``osid.assessment.BankForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Bank``\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``bank_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``bank_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``bank_form`` did not originate from ``get_bank_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankForm", 
                     "var_name": "bank_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankForm"
               ], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_banks", 
               "doc": {
                  "headline": "Tests if this user can update ``Banks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Bank``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bank`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bank`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_form_for_update", 
               "doc": {
                  "headline": "Gets the bank form for updating an existing bank.", 
                  "body": "        A new bank form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank``\n", 
               "return_doc": "        return: (osid.assessment.BankForm) - the bank form", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the bank form\n        :rtype: ``osid.assessment.BankForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_bank", 
               "doc": {
                  "headline": "Updates an existing bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_form (osid.assessment.BankForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``bank_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``bank_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``bank_form`` did not originate from\n                ``get_bank_form_for_update()``", 
               "sphinx_param_doc": "        :param bank_form: the form containing the elements to be updated\n        :type bank_form: ``osid.assessment.BankForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``bank_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``bank_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``bank_form`` did not originate from ``get_bank_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankForm", 
                     "var_name": "bank_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_banks", 
               "doc": {
                  "headline": "Tests if this user can delete banks.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Bank``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bank`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bank`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_bank", 
               "doc": {
                  "headline": "Deletes a ``Bank``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank`` to remove\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_bank_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Banks``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Bank`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Bank`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_bank", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Bank`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Bank`` is determined by the\n        provider. The new ``Id`` is an alias to the primary ``Id``. If\n        the alias is a pointer to another bank, it is reassigned to the\n        given bank ``Id``."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a ``Bank``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is in use as a primary\n                ``Id``\n        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a ``Bank``\n        :type bank_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is in use as a primary ``Id``\n        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankNotificationSession", 
         "shortname": "BankNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Bank`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_bank_notifications", 
            "reliable_bank_notifications", 
            "unreliable_bank_notifications", 
            "acknowledge_bank_notification", 
            "register_for_new_banks", 
            "register_for_changed_banks", 
            "register_for_changed_bank", 
            "register_for_deleted_banks", 
            "register_for_deleted_bank", 
            "register_for_changed_bank_hierarchy", 
            "register_for_changed_bank_hierarchy_for_ancestors", 
            "register_for_changed_bank_hierarchy_for_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_bank_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Bank`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "reliable_bank_notifications", 
               "doc": {
                  "headline": "Reliable notifications are desired.", 
                  "body": "        In reliable mode, notifications are to be acknowledged using\n        ``acknowledge_bank_notification()`` ."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "unreliable_bank_notifications", 
               "doc": {
                  "headline": "Unreliable notifications are desired.", 
                  "body": "        In unreliable mode, notifications do not need to be\n        acknowledged."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "acknowledge_bank_notification", 
               "doc": {
                  "headline": "Acknowledge a bank notification.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the ``Id`` of the\n                notification\n", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param notification_id: the ``Id`` of the notification\n        :type notification_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_banks", 
               "doc": {
                  "headline": "Register for notifications of new banks.", 
                  "body": "        ``BankReceiver.newBanks()`` is invoked when a new Bank is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_banks", 
               "doc": {
                  "headline": "Registers for notification of updated banks.", 
                  "body": "        ``BankReceiver.changedBanks()`` is invoked when a bank is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bank", 
               "doc": {
                  "headline": "Registers for notification of an updated bank.", 
                  "body": "        ``BankReceiver.changedBanks()`` is invoked when the specified\n        bank is changed."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the Id of the bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the Id of the bank to monitor\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_banks", 
               "doc": {
                  "headline": "Registers for notification of deleted banks.", 
                  "body": "        ``BankReceiver.deletedBanks()`` is invoked when a bank is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_bank", 
               "doc": {
                  "headline": "Registers for notification of a deleted bank.", 
                  "body": "        ``BankReceiver.deletedBanks()`` is invoked when the specified\n        bank is deleted."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the Id of the bank to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the Id of the bank to monitor\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bank_hierarchy", 
               "doc": {
                  "headline": "Registers for notification of an updated bank hierarchy structure.", 
                  "body": "        ``BankReceiver.changedChildOfBanks()`` is invoked when a node\n        experiences a change in its children."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bank_hierarchy_for_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated bank hierarchy structure.", 
                  "body": "        ``BankReceiver.changedChildOfBanks()`` is invoked when the\n        specified node or any of its ancestors experiences a change in\n        its children."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank`` node to monitor\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_bank_hierarchy_for_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated bank hierarchy structure.", 
                  "body": "        ``BankReceiver.changedChildOfBanks()`` is invoked when the\n        specified node or any of its descendants experiences a change in\n        its children."
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of the ``Bank`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of the ``Bank`` node to monitor\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankHierarchySession", 
         "shortname": "BankHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Bank`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Bank``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_banks()`` and ``getChildBanks()``. To relate these\n    ``Ids`` to another OSID, ``get_bank_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Bank`` available in the Assessment OSID is known to this hierarchy\n    but does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_banks()`` or ``get_child_banks()`` in lieu\n    of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: bank elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_hierarchy_id", 
            "get_bank_hierarchy", 
            "can_access_bank_hierarchy", 
            "use_comparative_bank_view", 
            "use_plenary_bank_view", 
            "get_root_bank_ids", 
            "get_root_banks", 
            "has_parent_banks", 
            "is_parent_of_bank", 
            "get_parent_bank_ids", 
            "get_parent_banks", 
            "is_ancestor_of_bank", 
            "has_child_banks", 
            "is_child_of_bank", 
            "get_child_bank_ids", 
            "get_child_banks", 
            "is_descendant_of_bank", 
            "get_bank_node_ids", 
            "get_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_bank_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_bank_view", 
               "doc": {
                  "headline": "The returns from the bank methods may omit or translate elements based on this session, such as assessment, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_bank_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_bank_ids", 
               "doc": {
                  "headline": "Gets the root bank ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root bank ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root bank ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_banks", 
               "doc": {
                  "headline": "Gets the root banks in this bank hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankList) - the root banks", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root banks\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_banks", 
               "doc": {
                  "headline": "Tests if the ``Bank`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the bank has parents, ``false``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the bank has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``id`` or ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_bank_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the bank", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the bank\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_banks", 
               "doc": {
                  "headline": "Gets the parents of the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the parents of the bank", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the bank\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_banks", 
               "doc": {
                  "headline": "Tests if a bank has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a ``bank_id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``bank_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: a ``bank_id``\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``bank_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_bank", 
               "doc": {
                  "headline": "Tests if a bank is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_bank_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the bank", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` to query\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the bank\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_banks", 
               "doc": {
                  "headline": "Gets the children of the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.assessment.BankList) - the children of the bank", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` to query\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the bank\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_bank", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``bank_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``bank_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a bank node", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` to query\n        :type bank_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a bank node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_bank_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.assessment.BankNode) - a bank node", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` to query\n        :type bank_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a bank node\n        :rtype: ``osid.assessment.BankNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.assessment.BankNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankHierarchyDesignSession", 
         "shortname": "BankHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for managing a hierarchy of ``Bank`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Bank``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_bank_hierarchy_id", 
            "get_bank_hierarchy", 
            "can_modify_bank_hierarchy", 
            "add_root_bank", 
            "remove_root_bank", 
            "add_child_bank", 
            "remove_child_bank", 
            "remove_child_banks"
         ], 
         "methods": [
            {
               "name": "get_bank_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_bank_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - assessment failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- assessment failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_bank_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_bank", 
               "doc": {
                  "headline": "Adds a root bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``bank_id`` is already in hierarchy\n        raise:  NotFound - ``bank_id`` not found\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``bank_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``bank_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_bank", 
               "doc": {
                  "headline": "Removes a root bank from this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``bank_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``bank_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_bank", 
               "doc": {
                  "headline": "Adds a child to a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``bank_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``bank_id`` or ``child_id`` not found\n        raise:  NullArgument - ``bank_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``bank_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``bank_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``bank_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_bank", 
               "doc": {
                  "headline": "Removes a child from a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bank_id`` not parent of ``child_id``\n        raise:  NullArgument - ``bank_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` not parent of ``child_id``\n        :raise: ``NullArgument`` -- ``bank_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_banks", 
               "doc": {
                  "headline": "Removes all children from a bank.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): the ``Id`` of a bank\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``bank_id`` is not in hierarchy\n        raise:  NullArgument - ``bank_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "        :param bank_id: the ``Id`` of a bank\n        :type bank_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``bank_id`` is not in hierarchy\n        :raise: ``NullArgument`` -- ``bank_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Question", 
         "shortname": "Question", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Question`` represents the question portion of an assessment item.", 
            "body": "    Like all OSID objects, a ``Question`` is identified by its ``Id``\n    and any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_question_record"
         ], 
         "methods": [
            {
               "name": "get_question_record", 
               "doc": {
                  "headline": "Gets the item record corresponding to the given ``Question`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``question_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(question_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.assessment.records.QuestionRecord) - the question\n                record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: the type of the record to retrieve\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the question record\n        :rtype: ``osid.assessment.records.QuestionRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.QuestionRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.QuestionRecord", 
         "shortname": "QuestionRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Question``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.QuestionQuery", 
         "shortname": "QuestionQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching questions.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "get_question_query_record"
         ], 
         "methods": [
            {
               "name": "get_question_query_record", 
               "doc": {
                  "headline": "Gets the question record query corresponding to the given ``Item`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): a question record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.QuestionQueryRecord) - the\n                question query record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: a question record type\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the question query record\n        :rtype: ``osid.assessment.records.QuestionQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.QuestionQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.QuestionQueryRecord", 
         "shortname": "QuestionQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``QuestionQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.QuestionQueryInspector", 
         "shortname": "QuestionQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_question_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_question_query_inspector_record", 
               "doc": {
                  "headline": "Gets the record query inspector corresponding to the given ``Question`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): a question record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.QuestionQueryInspectorRecord) -\n                the question query inspector record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: a question record type\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the question query inspector record\n        :rtype: ``osid.assessment.records.QuestionQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.QuestionQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.QuestionQueryInspectorRecord", 
         "shortname": "QuestionQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``QuestionQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.QuestionForm", 
         "shortname": "QuestionForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Questions``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_question_form_record"
         ], 
         "methods": [
            {
               "name": "get_question_form_record", 
               "doc": {
                  "headline": "Gets the ``QuestionFormRecord`` corresponding to the given question record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): the question\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.QuestionFormRecord) - the\n                question record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: the question record type\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the question record\n        :rtype: ``osid.assessment.records.QuestionFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.QuestionFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.QuestionFormRecord", 
         "shortname": "QuestionFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``QuestionForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.QuestionSearchOrder", 
         "shortname": "QuestionSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "get_question_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_question_search_order_record", 
               "doc": {
                  "headline": "Gets the question search order record corresponding to the given question record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): a question record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.QuestionSearchOrderRecord) -\n                the question search order record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: a question record type\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the question search order record\n        :rtype: ``osid.assessment.records.QuestionSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.QuestionSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.QuestionSearchOrderRecord", 
         "shortname": "QuestionSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``QuestionSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.QuestionList", 
         "shortname": "QuestionList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``QuestionList`` provides a means for accessing ``Question`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ql.hasNext()) { Question question =\n    ql.getNextQuestion(); }\n\n    or\n      while (ql.hasNext()) {\n           Question[] question = al.getNextQuestions(ql.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_question", 
            "get_next_questions"
         ], 
         "methods": [
            {
               "name": "get_next_question", 
               "doc": {
                  "headline": "Gets the next ``Question`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Question) - the next ``Question`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Question`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Question`` in this list. The ``has_next()`` method should be used to test that a next ``Question`` is available before calling this method.\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_questions", 
               "doc": {
                  "headline": "Gets the next set of ``Question`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Question`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Question) - an array of ``Question``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Question`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Question`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Answer", 
         "shortname": "Answer", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Answer`` represents the question portion of an assessment item.", 
            "body": "    Like all OSID objects, an ``Answer`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_answer_record"
         ], 
         "methods": [
            {
               "name": "get_answer_record", 
               "doc": {
                  "headline": "Gets the answer record corresponding to the given ``Answer`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested records. The ``answer_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(answer_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    answer_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.assessment.records.AnswerRecord) - the answer\n                record", 
               "error_doc": "        raise:  NullArgument - ``answer_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(answer_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param answer_record_type: the type of the record to retrieve\n        :type answer_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the answer record\n        :rtype: ``osid.assessment.records.AnswerRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(answer_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "answer_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AnswerRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AnswerRecord", 
         "shortname": "AnswerRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Answer``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AnswerQuery", 
         "shortname": "AnswerQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching answers.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "get_answer_query_record"
         ], 
         "methods": [
            {
               "name": "get_answer_query_record", 
               "doc": {
                  "headline": "Gets the answer record query corresponding to the given ``Answer`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    answer_record_type (osid.type.Type): an answer record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.AnswerQueryRecord) - the answer\n                query record", 
               "error_doc": "        raise:  NullArgument - ``answer_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(answer_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param answer_record_type: an answer record type\n        :type answer_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the answer query record\n        :rtype: ``osid.assessment.records.AnswerQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(answer_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "answer_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AnswerQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AnswerQueryRecord", 
         "shortname": "AnswerQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AnswerQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AnswerQueryInspector", 
         "shortname": "AnswerQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_answer_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_answer_query_inspector_record", 
               "doc": {
                  "headline": "Gets the record query inspector corresponding to the given ``Question`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_record_type (osid.type.Type): a question record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.AnswerQueryInspectorRecord) -\n                the answer query inspector record", 
               "error_doc": "        raise:  NullArgument - ``question_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(question_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param question_record_type: a question record type\n        :type question_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the answer query inspector record\n        :rtype: ``osid.assessment.records.AnswerQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(question_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "question_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AnswerQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AnswerQueryInspectorRecord", 
         "shortname": "AnswerQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AnswerQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AnswerForm", 
         "shortname": "AnswerForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Answers``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_answer_form_record"
         ], 
         "methods": [
            {
               "name": "get_answer_form_record", 
               "doc": {
                  "headline": "Gets the ``AnswerFormRecord`` corresponding to the given answer record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    answer_record_type (osid.type.Type): the answer record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.AnswerFormRecord) - the answer\n                record", 
               "error_doc": "        raise:  NullArgument - ``answer_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(answer_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param answer_record_type: the answer record type\n        :type answer_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the answer record\n        :rtype: ``osid.assessment.records.AnswerFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(answer_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "answer_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AnswerFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AnswerFormRecord", 
         "shortname": "AnswerFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AnswerForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AnswerSearchOrder", 
         "shortname": "AnswerSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "get_answer_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_answer_search_order_record", 
               "doc": {
                  "headline": "Gets the answer search order record corresponding to the given answer record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    answer_record_type (osid.type.Type): an answer record\n                type\n", 
               "return_doc": "        return: (osid.assessment.records.AnswerSearchOrderRecord) - the\n                answer search order record", 
               "error_doc": "        raise:  NullArgument - ``answer_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(answer_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param answer_record_type: an answer record type\n        :type answer_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the answer search order record\n        :rtype: ``osid.assessment.records.AnswerSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(answer_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "answer_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AnswerSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AnswerSearchOrderRecord", 
         "shortname": "AnswerSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AnswerSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AnswerList", 
         "shortname": "AnswerList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AnswerList`` provides a means for accessing ``Answer`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (al.hasNext()) { Answer answer = al.getNextAnswer();\n    }\n\n    or\n      while (al.hasNext()) {\n           Answer[] answer = al.getNextAnswers(al.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_answer", 
            "get_next_answers"
         ], 
         "methods": [
            {
               "name": "get_next_answer", 
               "doc": {
                  "headline": "Gets the next ``Answer`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Answer) - the next ``Answer`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Answer`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Answer`` in this list. The ``has_next()`` method should be used to test that a next ``Answer`` is available before calling this method.\n        :rtype: ``osid.assessment.Answer``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Answer", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_answers", 
               "doc": {
                  "headline": "Gets the next set of ``Answer`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Answer`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Answer) - an array of ``Answer``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Answer`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Answer`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Answer``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Answer", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Item", 
         "shortname": "Item", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Item`` represents an individual assessment item such as a question.", 
            "body": "    Like all OSID objects, a ``Item`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``.\n\n    An ``Item`` is composed of a ``Question`` and an ``Answer``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Aggregateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Aggregateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Aggregateable"
            }
         ], 
         "method_names": [
            "get_learning_objective_ids", 
            "get_learning_objectives", 
            "get_question_id", 
            "get_question", 
            "get_answer_ids", 
            "get_answers", 
            "get_item_record"
         ], 
         "methods": [
            {
               "name": "get_learning_objective_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of any ``Objectives`` corresponding to this item.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the learning objective ``Ids``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the learning objective ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {}
            }, 
            {
               "name": "get_learning_objectives", 
               "doc": {
                  "headline": "Gets the any ``Objectives`` corresponding to this item.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveList) - the learning objectives", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the learning objectives\n        :rtype: ``osid.learning.ObjectiveList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveList", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_question_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Question``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the question ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the question ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_question", 
               "doc": {
                  "headline": "Gets the question.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Question) - the question", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the question\n        :rtype: ``osid.assessment.Question``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Question", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_answer_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of the answers.", 
                  "body": "        Questions may have more than one acceptable answer."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the answer ``Ids``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the answer ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {}
            }, 
            {
               "name": "get_answers", 
               "doc": {
                  "headline": "Gets the answers.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AnswerList) - the answers", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the answers\n        :rtype: ``osid.assessment.AnswerList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AnswerList", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_item_record", 
               "doc": {
                  "headline": "Gets the item record corresponding to the given ``Item`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested records. The ``item_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(item_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.assessment.records.ItemRecord) - the item record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: the type of the record to retrieve\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item record\n        :rtype: ``osid.assessment.records.ItemRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemRecord", 
         "shortname": "ItemRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Item``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemQuery", 
         "shortname": "ItemQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching items.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidAggregateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidAggregateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableQuery"
            }
         ], 
         "method_names": [
            "match_learning_objective_id", 
            "clear_learning_objective_id_terms", 
            "supports_learning_objective_query", 
            "get_learning_objective_query", 
            "match_any_learning_objective", 
            "clear_learning_objective_terms", 
            "match_question_id", 
            "clear_question_id_terms", 
            "supports_question_query", 
            "get_question_query", 
            "match_any_question", 
            "clear_question_terms", 
            "match_answer_id", 
            "clear_answer_id_terms", 
            "supports_answer_query", 
            "get_answer_query", 
            "match_any_answer", 
            "clear_answer_terms", 
            "match_assessment_id", 
            "clear_assessment_id_terms", 
            "supports_assessment_query", 
            "get_assessment_query", 
            "match_any_assessment", 
            "clear_assessment_terms", 
            "match_bank_id", 
            "clear_bank_id_terms", 
            "supports_bank_query", 
            "get_bank_query", 
            "clear_bank_terms", 
            "get_item_query_record"
         ], 
         "methods": [
            {
               "name": "match_learning_objective_id", 
               "doc": {
                  "headline": "Sets the learning objective ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_id (osid.id.Id): a learning objective ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``objective_id`` is ``null``", 
               "sphinx_param_doc": "        :param objective_id: a learning objective ``Id``\n        :type objective_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``objective_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "objective_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_learning_objective_id_terms", 
               "doc": {
                  "headline": "Clears all learning objective ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_learning_objective_query", 
               "doc": {
                  "headline": "Tests if an ``ObjectiveQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a learning objective query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a learning objective query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_learning_objective_query", 
               "doc": {
                  "headline": "Gets the query for a learning objective.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQuery) - the learning objective\n                query", 
               "error_doc": "        raise:  Unimplemented - ``supports_learning_objective_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the learning objective query\n        :rtype: ``osid.learning.ObjectiveQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_learning_objective_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_learning_objective", 
               "doc": {
                  "headline": "Matches an item with any objective.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match items with any\n                learning objective, ``false`` to match items with no\n                learning objectives\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match items with any learning objective, ``false`` to match items with no learning objectives\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_learning_objective_terms", 
               "doc": {
                  "headline": "Clears all learning objective terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_question_id", 
               "doc": {
                  "headline": "Sets the question ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    question_id (osid.id.Id): a question ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``question_id`` is ``null``", 
               "sphinx_param_doc": "        :param question_id: a question ``Id``\n        :type question_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``question_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "question_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_question_id_terms", 
               "doc": {
                  "headline": "Clears all question ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_question_query", 
               "doc": {
                  "headline": "Tests if a ``QuestionQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a question query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a question query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_question_query", 
               "doc": {
                  "headline": "Gets the query for a question.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.QuestionQuery) - the question query", 
               "error_doc": "        raise:  Unimplemented - ``supports_question_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the question query\n        :rtype: ``osid.assessment.QuestionQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_question_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.QuestionQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_question", 
               "doc": {
                  "headline": "Matches an item with any question.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match items with any\n                question, ``false`` to match items with no questions\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match items with any question, ``false`` to match items with no questions\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_question_terms", 
               "doc": {
                  "headline": "Clears all question terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_answer_id", 
               "doc": {
                  "headline": "Sets the answer ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    answer_id (osid.id.Id): an answer ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``answer_id`` is ``null``", 
               "sphinx_param_doc": "        :param answer_id: an answer ``Id``\n        :type answer_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``answer_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "answer_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_answer_id_terms", 
               "doc": {
                  "headline": "Clears all answer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_answer_query", 
               "doc": {
                  "headline": "Tests if an ``AnswerQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an answer query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an answer query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_answer_query", 
               "doc": {
                  "headline": "Gets the query for an answer.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AnswerQuery) - the answer query", 
               "error_doc": "        raise:  Unimplemented - ``supports_answer_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the answer query\n        :rtype: ``osid.assessment.AnswerQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_answer_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_learning_objective_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AnswerQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_answer", 
               "doc": {
                  "headline": "Matches an item with any answer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match items with any\n                answer, ``false`` to match items with no answers\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match items with any answer, ``false`` to match items with no answers\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_answer_terms", 
               "doc": {
                  "headline": "Clears all answer terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_id", 
               "doc": {
                  "headline": "Sets the assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_id_terms", 
               "doc": {
                  "headline": "Clears all assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets the query for an assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment", 
               "doc": {
                  "headline": "Matches an item with any assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match items with any\n                assessment, ``false`` to match items with no assessments\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match items with any assessment, ``false`` to match items with no assessments\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_terms", 
               "doc": {
                  "headline": "Clears all assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_id_terms", 
               "doc": {
                  "headline": "Clears all bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query", 
               "doc": {
                  "headline": "Gets the query for a bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bank_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_terms", 
               "doc": {
                  "headline": "Clears all bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_item_query_record", 
               "doc": {
                  "headline": "Gets the item record query corresponding to the given ``Item`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): an item record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemQueryRecord) - the item\n                query record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: an item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item query record\n        :rtype: ``osid.assessment.records.ItemQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemQueryRecord", 
         "shortname": "ItemQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemQueryInspector", 
         "shortname": "ItemQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidAggregateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidAggregateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_learning_objective_id_terms", 
            "get_learning_objective_terms", 
            "get_question_id_terms", 
            "get_question_terms", 
            "get_answer_id_terms", 
            "get_answer_terms", 
            "get_assessment_id_terms", 
            "get_assessment_terms", 
            "get_bank_id_terms", 
            "get_bank_terms", 
            "get_item_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_learning_objective_id_terms", 
               "doc": {
                  "headline": "Gets the learning objective ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the learning objective\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the learning objective ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_learning_objective_terms", 
               "doc": {
                  "headline": "Gets the learning objective query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.learning.ObjectiveQueryInspector) - the learning\n                objective terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the learning objective terms\n        :rtype: ``osid.learning.ObjectiveQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.learning.ObjectiveQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_question_id_terms", 
               "doc": {
                  "headline": "Gets the question ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the question ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the question ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_question_terms", 
               "doc": {
                  "headline": "Gets the question query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.QuestionQueryInspector) - the question\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the question terms\n        :rtype: ``osid.assessment.QuestionQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.QuestionQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_answer_id_terms", 
               "doc": {
                  "headline": "Gets the answer ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the answer ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the answer ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_answer_terms", 
               "doc": {
                  "headline": "Gets the answer query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AnswerQueryInspector) - the answer\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the answer terms\n        :rtype: ``osid.assessment.AnswerQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AnswerQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_id_terms", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment terms\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_id_terms", 
               "doc": {
                  "headline": "Gets the bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the bank ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bank_terms", 
               "doc": {
                  "headline": "Gets the bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_item_query_inspector_record", 
               "doc": {
                  "headline": "Gets the record query inspector corresponding to the given ``Item`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): an item record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemQueryInspectorRecord) - the\n                item query inspector record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: an item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item query inspector record\n        :rtype: ``osid.assessment.records.ItemQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemQueryInspectorRecord", 
         "shortname": "ItemQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemForm", 
         "shortname": "ItemForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Items``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ItemAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidAggregateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidAggregateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableForm"
            }
         ], 
         "method_names": [
            "get_learning_objectives_metadata", 
            "set_learning_objectives", 
            "clear_learning_objectives", 
            "get_item_form_record"
         ], 
         "methods": [
            {
               "name": "get_learning_objectives_metadata", 
               "doc": {
                  "headline": "Gets the metadata for learning objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the learning objectives", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the learning objectives\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_learning_objectives", 
               "doc": {
                  "headline": "Sets the learning objectives.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    objective_ids (osid.id.Id[]): the learning objective\n                ``Ids``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``objective_ids`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param objective_ids: the learning objective ``Ids``\n        :type objective_ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``objective_ids`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "objective_ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_learning_objectives", 
               "doc": {
                  "headline": "Clears the learning objectives.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_form_record", 
               "doc": {
                  "headline": "Gets the ``ItemnFormRecord`` corresponding to the given item record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): the item record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemFormRecord) - the item\n                record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: the item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item record\n        :rtype: ``osid.assessment.records.ItemFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemFormRecord", 
         "shortname": "ItemFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemSearchOrder", 
         "shortname": "ItemSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidAggregateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidAggregateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidAggregateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_question", 
            "supports_question_search_order", 
            "get_question_search_order", 
            "get_item_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_question", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the question.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_question_search_order", 
               "doc": {
                  "headline": "Tests if a question search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a question search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a question search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_question_search_order", 
               "doc": {
                  "headline": "Gets a question search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.QuestionSearchOrder) - a question\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_question_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a question search order\n        :rtype: ``osid.assessment.QuestionSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_question_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_question_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.QuestionSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_order_record", 
               "doc": {
                  "headline": "Gets the item search order record corresponding to the given item record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): an item record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemSearchOrderRecord) - the\n                item search order record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: an item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item search order record\n        :rtype: ``osid.assessment.records.ItemSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemSearchOrderRecord", 
         "shortname": "ItemSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemSearch", 
         "shortname": "ItemSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``ItemSearch`` defines the interface for specifying item search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_items", 
            "order_item_results", 
            "get_item_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_items", 
               "doc": {
                  "headline": "Execute this search among the given list of items.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_ids (osid.id.IdList): list of items\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_ids`` is ``null``", 
               "sphinx_param_doc": "        :param item_ids: list of items\n        :type item_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "item_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_item_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_search_order (osid.assessment.ItemSearchOrder):\n                item search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_search_order`` is ``null``\n        raise:  Unsupported - ``item_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param item_search_order: item search order\n        :type item_search_order: ``osid.assessment.ItemSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``item_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.ItemSearchOrder", 
                     "var_name": "item_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.ItemSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_search_record", 
               "doc": {
                  "headline": "Gets the item search record corresponding to the given item search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    item_search_record_type (osid.type.Type): an item search\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemSearchRecord) - the item\n                search record", 
               "error_doc": "        raise:  NullArgument - ``item_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(item_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_search_record_type: an item search record type\n        :type item_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item search record\n        :rtype: ``osid.assessment.records.ItemSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemSearchRecord", 
         "shortname": "ItemSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemSearchResults", 
         "shortname": "ItemSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_items", 
            "get_item_query_inspector", 
            "get_item_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_items", 
               "doc": {
                  "headline": "Gets the item list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemList) - the item list", 
               "error_doc": "        raise:  IllegalState - the item list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item list\n        :rtype: ``osid.assessment.ItemList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the item list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_item_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.assessment.ItemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_item_search_results_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given item search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    item_search_record_type (osid.type.Type): an item search\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.ItemSearchResultsRecord) - the\n                item search results record", 
               "error_doc": "        raise:  NullArgument - ``item_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(item_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_search_record_type: an item search record type\n        :type item_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the item search results record\n        :rtype: ``osid.assessment.records.ItemSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ItemSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ItemSearchResultsRecord", 
         "shortname": "ItemSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``ItemSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ItemReceiver", 
         "shortname": "ItemReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The item receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Items``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_items", 
            "changed_items", 
            "deleted_items"
         ], 
         "methods": [
            {
               "name": "new_items", 
               "doc": {
                  "headline": "The callback for notifications of new items.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    item_ids (osid.id.IdList): the Id of the new ``Items``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param item_ids: the Id of the new ``Items``\n        :type item_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "item_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_items", 
               "doc": {
                  "headline": "The callback for notification of updated items.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    item_ids (osid.id.IdList): the Id of the updated\n                ``Items``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param item_ids: the Id of the updated ``Items``\n        :type item_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "item_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_items", 
               "doc": {
                  "headline": "The callback for notification of deleted items.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    item_ids (osid.id.IdList): the Id of the deleted\n                ``Items``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param item_ids: the Id of the deleted ``Items``\n        :type item_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "item_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.ItemList", 
         "shortname": "ItemList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ItemList`` provides a means for accessing ``Item`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (il.hasNext()) { Item item = il.getNextItem(); }\n\n    or\n      while (il.hasNext()) {\n           Item[] items = il.getNextItems(il.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_item", 
            "get_next_items"
         ], 
         "methods": [
            {
               "name": "get_next_item", 
               "doc": {
                  "headline": "Gets the next ``Item`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Item) - the next ``Item`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Item`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Item`` in this list. The ``has_next()`` method should be used to test that a next ``Item`` is available before calling this method.\n        :rtype: ``osid.assessment.Item``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Item", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_items", 
               "doc": {
                  "headline": "Gets the next set of ``Item`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Item`` elements requested\n                which should be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Item) - an array of ``Item``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Item`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Item`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Item``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Item", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Assessment", 
         "shortname": "Assessment", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Assessment`` represents a sequence of assessment items.", 
            "body": "    Like all OSID objects, an ``Assessment`` is identified by its ``Id``\n    and any persisted references should use the ``Id``.\n\n    An ``Assessment`` may have an accompanying rubric used for assessing\n    performance. The rubric assessment is established canonically in\n    this ``Assessment``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_level_id", 
            "get_level", 
            "has_rubric", 
            "get_rubric_id", 
            "get_rubric", 
            "get_assessment_record"
         ], 
         "methods": [
            {
               "name": "get_level_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of a ``Grade`` corresponding to the assessment difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - a grade ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_level", 
               "doc": {
                  "headline": "Gets the ``Grade`` corresponding to the assessment difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the level", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_rubric", 
               "doc": {
                  "headline": "Tests if a rubric assessment is associated with this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - an assessment ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rubric", 
               "doc": {
                  "headline": "Gets the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Assessment) - the assessment", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assessment_record", 
               "doc": {
                  "headline": "Gets the assessment record corresponding to the given ``Assessment`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``assessment_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(assessment_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentRecord) - the\n                assessment record", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_record_type: the type of the record to retrieve\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment record\n        :rtype: ``osid.assessment.records.AssessmentRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentRecord", 
         "shortname": "AssessmentRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Assessment``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentQuery", 
         "shortname": "AssessmentQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching assessments.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_level_id", 
            "clear_level_id_terms", 
            "supports_level_query", 
            "get_level_query", 
            "match_any_level", 
            "clear_level_terms", 
            "match_rubric_id", 
            "clear_rubric_id_terms", 
            "supports_rubric_query", 
            "get_rubric_query", 
            "match_any_rubric", 
            "clear_rubric_terms", 
            "match_item_id", 
            "clear_item_id_terms", 
            "supports_item_query", 
            "get_item_query", 
            "match_any_item", 
            "clear_item_terms", 
            "match_assessment_offered_id", 
            "clear_assessment_offered_id_terms", 
            "supports_assessment_offered_query", 
            "get_assessment_offered_query", 
            "match_any_assessment_offered", 
            "clear_assessment_offered_terms", 
            "match_assessment_taken_id", 
            "clear_assessment_taken_id_terms", 
            "supports_assessment_taken_query", 
            "get_assessment_taken_query", 
            "match_any_assessment_taken", 
            "clear_assessment_taken_terms", 
            "match_bank_id", 
            "clear_bank_id_terms", 
            "supports_bank_query", 
            "get_bank_query", 
            "clear_bank_terms", 
            "get_assessment_query_record"
         ], 
         "methods": [
            {
               "name": "match_level_id", 
               "doc": {
                  "headline": "Sets the level grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level_id_terms", 
               "doc": {
                  "headline": "Clears all level ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_level_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_level", 
               "doc": {
                  "headline": "Matches an assessment that has any level assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                level, ``false`` to match assessments with no level\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any level, ``false`` to match assessments with no level\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_level_terms", 
               "doc": {
                  "headline": "Clears all level terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_rubric_id", 
               "doc": {
                  "headline": "Sets the rubric assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rubric_id_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_rubric_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_query", 
               "doc": {
                  "headline": "Gets the query for a rubric assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_rubric", 
               "doc": {
                  "headline": "Matches an assessment that has any rubric assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                rubric, ``false`` to match assessments with no rubric\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any rubric, ``false`` to match assessments with no rubric\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_rubric_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_item_id", 
               "doc": {
                  "headline": "Sets the item ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): an item ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_id`` is ``null``", 
               "sphinx_param_doc": "        :param item_id: an item ``Id``\n        :type item_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_item_id_terms", 
               "doc": {
                  "headline": "Clears all item ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_item_query", 
               "doc": {
                  "headline": "Tests if an ``ItemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an item query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an item query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_item_query", 
               "doc": {
                  "headline": "Gets the query for an item.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the item query", 
               "error_doc": "        raise:  Unimplemented - ``supports_item_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_item_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_item", 
               "doc": {
                  "headline": "Matches an assessment that has any item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                item, ``false`` to match assessments with no items\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any item, ``false`` to match assessments with no items\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_item_terms", 
               "doc": {
                  "headline": "Clears all item terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_offered_id", 
               "doc": {
                  "headline": "Sets the assessment offered ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): an assessment\n                offered ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_id: an assessment offered ``Id``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Clears all assessment offered ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentOfferedQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment offered query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment offered query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query", 
               "doc": {
                  "headline": "Gets the query for an assessment offered.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment_offered", 
               "doc": {
                  "headline": "Matches an assessment that has any offering.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                offering, ``false`` to match assessments with no\n                offerings\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any offering, ``false`` to match assessments with no offerings\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_offered_terms", 
               "doc": {
                  "headline": "Clears all assessment offered terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_taken_id", 
               "doc": {
                  "headline": "Sets the assessment taken ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): an assessment taken\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_id: an assessment taken ``Id``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_taken_id_terms", 
               "doc": {
                  "headline": "Clears all assessment taken ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentTakenQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment taken query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment taken query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query", 
               "doc": {
                  "headline": "Gets the query for an assessment taken.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_taken_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment_taken", 
               "doc": {
                  "headline": "Matches an assessment that has any taken version.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                taken assessments, ``false`` to match assessments with\n                no taken assessments\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any taken assessments, ``false`` to match assessments with no taken assessments\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_taken_terms", 
               "doc": {
                  "headline": "Clears all assessment taken terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_id_terms", 
               "doc": {
                  "headline": "Clears all bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query", 
               "doc": {
                  "headline": "Gets the query for a bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bank_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_terms", 
               "doc": {
                  "headline": "Clears all bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query_record", 
               "doc": {
                  "headline": "Gets the assessment query record corresponding to the given ``Assessment`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): an assessment\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentQueryRecord) - the\n                assessment query record", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_record_type: an assessment record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment query record\n        :rtype: ``osid.assessment.records.AssessmentQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentQueryRecord", 
         "shortname": "AssessmentQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentQueryInspector", 
         "shortname": "AssessmentQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_level_id_terms", 
            "get_level_terms", 
            "get_rubric_id_terms", 
            "get_rubric_terms", 
            "get_item_id_terms", 
            "get_item_terms", 
            "get_assessment_offered_id_terms", 
            "get_assessment_offered_terms", 
            "get_assessment_taken_id_terms", 
            "get_assessment_taken_terms", 
            "get_bank_id_terms", 
            "get_bank_terms", 
            "get_assessment_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_level_id_terms", 
               "doc": {
                  "headline": "Gets the level ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the level ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_level_terms", 
               "doc": {
                  "headline": "Gets the level query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the level terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id_terms", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment terms\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_item_id_terms", 
               "doc": {
                  "headline": "Gets the item ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the item ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_item_terms", 
               "doc": {
                  "headline": "Gets the item query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQueryInspector) - the item terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item terms\n        :rtype: ``osid.assessment.ItemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Gets the assessment offered ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment offered\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_terms", 
               "doc": {
                  "headline": "Gets the assessment offered query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                assessment offered terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered terms\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_id_terms", 
               "doc": {
                  "headline": "Gets the assessment taken ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment taken ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_terms", 
               "doc": {
                  "headline": "Gets the assessment taken query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQueryInspector) - the\n                assessment taken terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken terms\n        :rtype: ``osid.assessment.AssessmentTakenQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_id_terms", 
               "doc": {
                  "headline": "Gets the bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the bank ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bank_terms", 
               "doc": {
                  "headline": "Gets the bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query_inspector_record", 
               "doc": {
                  "headline": "Gets the assessment query inspector record corresponding to the given ``Assessment`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): an assessment\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentQueryInspectorRecord)\n                - the assessment query inspector record", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_record_type: an assessment record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment query inspector record\n        :rtype: ``osid.assessment.records.AssessmentQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentQueryInspectorRecord", 
         "shortname": "AssessmentQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentForm", 
         "shortname": "AssessmentForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Assessments``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``AssessmentAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_level_metadata", 
            "set_level", 
            "clear_level", 
            "get_rubric_metadata", 
            "set_rubric", 
            "clear_rubric", 
            "get_assessment_form_record"
         ], 
         "methods": [
            {
               "name": "get_level_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grade level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade level", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade level\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_level", 
               "doc": {
                  "headline": "Sets the level of difficulty expressed as a ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the grade level\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: the grade level\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level", 
               "doc": {
                  "headline": "Clears the grade level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rubric_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a rubric assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the assesment", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the assesment\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_rubric", 
               "doc": {
                  "headline": "Sets the rubric expressed as another assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): the assessment ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``assessment_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: the assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``assessment_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rubric", 
               "doc": {
                  "headline": "Clears the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_form_record", 
               "doc": {
                  "headline": "Gets the ``AssessmentFormRecord`` corresponding to the given assessment record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): the assessment\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentFormRecord) - the\n                assessment record", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_record_type: the assessment record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment record\n        :rtype: ``osid.assessment.records.AssessmentFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentFormRecord", 
         "shortname": "AssessmentFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentSearchOrder", 
         "shortname": "AssessmentSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_level", 
            "supports_level_search_order", 
            "get_level_search_order", 
            "order_by_rubric", 
            "supports_rubric_search_order", 
            "get_rubric_search_order", 
            "get_assessment_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_level", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the level of difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_level_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_search_order", 
               "doc": {
                  "headline": "Gets a grade search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_rubric", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the rubric assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_rubric_search_order", 
               "doc": {
                  "headline": "Tests if an assessment search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_search_order", 
               "doc": {
                  "headline": "Gets an assessment search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchOrder) - a rubric\n                assessment search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a rubric assessment search order\n        :rtype: ``osid.assessment.AssessmentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_order_record", 
               "doc": {
                  "headline": "Gets the assessment search order record corresponding to the given assessment record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    assessment_record_type (osid.type.Type): an assessment\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentSearchOrderRecord) -\n                the assessment search order record", 
               "error_doc": "        raise:  NullArgument - ``assessment_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param assessment_record_type: an assessment record type\n        :type assessment_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment search order record\n        :rtype: ``osid.assessment.records.AssessmentSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentSearchOrderRecord", 
         "shortname": "AssessmentSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentSearch", 
         "shortname": "AssessmentSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``AssessmentSearch`` defines the interface for specifying assessment search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_assessments", 
            "order_assessment_results", 
            "get_assessment_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_assessments", 
               "doc": {
                  "headline": "Execute this search among the given list of assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_ids (osid.id.IdList): list of assessments\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_ids`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_ids: list of assessments\n        :type assessment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_assessment_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_search_order\n                (osid.assessment.AssessmentSearchOrder): assessment\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_search_order`` is ``null``\n        raise:  Unsupported - ``assessment_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param assessment_search_order: assessment search order\n        :type assessment_search_order: ``osid.assessment.AssessmentSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentSearchOrder", 
                     "var_name": "assessment_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_search_record", 
               "doc": {
                  "headline": "Gets the assessment search record corresponding to the given assessment search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_search_record_type (osid.type.Type): an\n                assessment search record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentSearchRecord) - the\n                assessment search record", 
               "error_doc": "        raise:  NullArgument - ``assessment_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_search_record_type: an assessment search record type\n        :type assessment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment search record\n        :rtype: ``osid.assessment.records.AssessmentSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentSearchRecord", 
         "shortname": "AssessmentSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentSearchResults", 
         "shortname": "AssessmentSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_assessments", 
            "get_assessment_query_inspector", 
            "get_assessment_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_assessments", 
               "doc": {
                  "headline": "Gets the assessment list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentList) - the assessment list", 
               "error_doc": "        raise:  IllegalState - the assessment list has already been\n                retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment list\n        :rtype: ``osid.assessment.AssessmentList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the assessment list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_search_results_record", 
               "doc": {
                  "headline": "Gets the assessment search order record corresponding to the given assessment search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_search_record_type (osid.type.Type): an\n                assessment search record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentSearchResultsRecord)\n                - the assessment search results record", 
               "error_doc": "        raise:  NullArgument - ``assessment_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_search_record_type: an assessment search record type\n        :type assessment_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment search results record\n        :rtype: ``osid.assessment.records.AssessmentSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentSearchResultsRecord", 
         "shortname": "AssessmentSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentReceiver", 
         "shortname": "AssessmentReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The assessment receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Assessment`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_assessments", 
            "changed_assessments", 
            "deleted_assessments"
         ], 
         "methods": [
            {
               "name": "new_assessments", 
               "doc": {
                  "headline": "The callback for notifications of new assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_ids (osid.id.IdList): the ``Ids`` of the new\n                ``Assessments``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_ids: the ``Ids`` of the new ``Assessments``\n        :type assessment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_assessments", 
               "doc": {
                  "headline": "The callback for notification of updated assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_ids (osid.id.IdList): the ``Ids`` of the\n                updated ``Assessments``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_ids: the ``Ids`` of the updated ``Assessments``\n        :type assessment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_assessments", 
               "doc": {
                  "headline": "the callback for notification of deleted assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_ids (osid.id.IdList): the ``Ids`` of the\n                deleted ``Assessments``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_ids: the ``Ids`` of the deleted ``Assessments``\n        :type assessment_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentList", 
         "shortname": "AssessmentList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AssessmentList`` provides a means for accessing ``Assessment`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (al.hasNext()) { Assessment assessment =\n    al.getNextAssessment(); }\n\n    or\n      while (al.hasNext()) {\n           Assessment[] assessments = al.hetNextAssessments(al.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_assessment", 
            "get_next_assessments"
         ], 
         "methods": [
            {
               "name": "get_next_assessment", 
               "doc": {
                  "headline": "Gets the next ``Assessment`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Assessment) - the next ``Assessment``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``Assessment`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Assessment`` in this list. The ``has_next()`` method should be used to test that a next ``Assessment`` is available before calling this method.\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_assessments", 
               "doc": {
                  "headline": "Gets the next set of ``Assessment`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Assessment`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Assessment) - an array of\n                ``Assessment`` elements.The length of the array is less\n                than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Assessment`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Assessment`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOffered", 
         "shortname": "AssessmentOffered", 
         "category": "objects", 
         "doc": {
            "headline": "An ``AssessmentOffered`` represents a sequence of assessment items.", 
            "body": "    Like all OSID objects, an ``AssessmentOffered`` is identified by its\n    ``Id`` and any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Subjugateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Subjugateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Subjugateable"
            }
         ], 
         "method_names": [
            "get_assessment_id", 
            "get_assessment", 
            "get_level_id", 
            "get_level", 
            "are_items_sequential", 
            "are_items_shuffled", 
            "has_start_time", 
            "get_start_time", 
            "has_deadline", 
            "get_deadline", 
            "has_duration", 
            "get_duration", 
            "is_scored", 
            "get_score_system_id", 
            "get_score_system", 
            "is_graded", 
            "get_grade_system_id", 
            "get_grade_system", 
            "has_rubric", 
            "get_rubric_id", 
            "get_rubric", 
            "get_assessment_offered_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_id", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` corresponding to this assessment offering.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the assessment id", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment id\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_assessment", 
               "doc": {
                  "headline": "Gets the assessment corresponding to this assessment offereng.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Assessment) - the assessment", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment\n        :rtype: ``osid.assessment.Assessment``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Assessment", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_level_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of a ``Grade`` corresponding to the assessment difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - a grade id", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade id\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_level", 
               "doc": {
                  "headline": "Gets the ``Grade`` corresponding to the assessment difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the level", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "are_items_sequential", 
               "doc": {
                  "headline": "Tests if the items or parts in this assessment are taken sequentially.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the items are taken\n                sequentially, ``false`` if the items can be skipped and\n                revisited", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the items are taken sequentially, ``false`` if the items can be skipped and revisited\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "are_items_shuffled", 
               "doc": {
                  "headline": "Tests if the items or parts appear in a random order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the items appear in a random\n                order, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the items appear in a random order, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "has_start_time", 
               "doc": {
                  "headline": "Tests if there is a fixed start time for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if there is a fixed start time,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if there is a fixed start time, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_start_time", 
               "doc": {
                  "headline": "Gets the start time for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the designated start time", 
               "error_doc": "        raise:  IllegalState - ``has_start_time()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the designated start time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_start_time()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "has_deadline", 
               "doc": {
                  "headline": "Tests if there is a fixed end time for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if there is a fixed end time,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if there is a fixed end time, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_deadline", 
               "doc": {
                  "headline": "Gets the end time for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the designated end time", 
               "error_doc": "        raise:  IllegalState - ``has_deadline()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the designated end time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_deadline()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "has_duration", 
               "doc": {
                  "headline": "Tests if there is a fixed duration for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if there is a fixed duration,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if there is a fixed duration, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_duration", 
               "doc": {
                  "headline": "Gets the duration for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.Duration) - the duration", 
               "error_doc": "        raise:  IllegalState - ``has_duration()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the duration\n        :rtype: ``osid.calendaring.Duration``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_duration()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.Duration", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "is_scored", 
               "doc": {
                  "headline": "Tests if this assessment will be scored.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment will be scored\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment will be scored ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_id", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` for the score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade system ``Id``", 
               "error_doc": "        raise:  IllegalState - ``is_scored()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_scored()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_score_system", 
               "doc": {
                  "headline": "Gets the grade system for the score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "        raise:  IllegalState - ``is_scored()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_scored()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "is_graded", 
               "doc": {
                  "headline": "Tests if this assessment will be graded.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this assessment will be graded,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this assessment will be graded, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_id", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` for the grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade system ``Id``", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system", 
               "doc": {
                  "headline": "Gets the grade system for the grade.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_rubric", 
               "doc": {
                  "headline": "Tests if a rubric assessment is associated with this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - an assessment offered ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment offered ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rubric", 
               "doc": {
                  "headline": "Gets the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - the assessment\n                offered", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assessment_offered_record", 
               "doc": {
                  "headline": "Gets the assessment offered record corresponding to the given ``AssessmentOffered`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``assessment_offered_record_type`` may be\n        the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(assessment_offered_record_type)`` is ``true``\n        ."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment offered record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentOfferedRecord) - the\n                assessment offered record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment offered record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered record\n        :rtype: ``osid.assessment.records.AssessmentOfferedRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedRecord", 
         "shortname": "AssessmentOfferedRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOffered``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedQuery", 
         "shortname": "AssessmentOfferedQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching assessments.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidSubjugateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidSubjugateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQuery"
            }
         ], 
         "method_names": [
            "match_assessment_id", 
            "clear_assessment_id_terms", 
            "supports_assessment_query", 
            "get_assessment_query", 
            "clear_assessment_terms", 
            "match_level_id", 
            "clear_level_id_terms", 
            "supports_level_query", 
            "get_level_query", 
            "match_any_level", 
            "clear_level_terms", 
            "match_items_sequential", 
            "clear_items_sequential_terms", 
            "match_items_shuffled", 
            "clear_items_shuffled_terms", 
            "match_start_time", 
            "match_any_start_time", 
            "clear_start_time_terms", 
            "match_deadline", 
            "match_any_deadline", 
            "clear_deadline_terms", 
            "match_duration", 
            "match_any_duration", 
            "clear_duration_terms", 
            "match_score_system_id", 
            "clear_score_system_id_terms", 
            "supports_score_system_query", 
            "get_score_system_query", 
            "match_any_score_system", 
            "clear_score_system_terms", 
            "match_grade_system_id", 
            "clear_grade_system_id_terms", 
            "supports_grade_system_query", 
            "get_grade_system_query", 
            "match_any_grade_system", 
            "clear_grade_system_terms", 
            "match_rubric_id", 
            "clear_rubric_id_terms", 
            "supports_rubric_query", 
            "get_rubric_query", 
            "match_any_rubric", 
            "clear_rubric_terms", 
            "match_assessment_taken_id", 
            "clear_assessment_taken_id_terms", 
            "supports_assessment_taken_query", 
            "get_assessment_taken_query", 
            "match_any_assessment_taken", 
            "clear_assessment_taken_terms", 
            "match_bank_id", 
            "clear_bank_id_terms", 
            "supports_bank_query", 
            "get_bank_query", 
            "clear_bank_terms", 
            "get_assessment_offered_query_record"
         ], 
         "methods": [
            {
               "name": "match_assessment_id", 
               "doc": {
                  "headline": "Sets the assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_id_terms", 
               "doc": {
                  "headline": "Clears all assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets the query for an assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_terms", 
               "doc": {
                  "headline": "Clears all assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_level_id", 
               "doc": {
                  "headline": "Sets the level grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level_id_terms", 
               "doc": {
                  "headline": "Clears all level ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_level_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_level", 
               "doc": {
                  "headline": "Matches an assessment offered that has any level assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                level, ``false`` to match offerings with no levsls\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any level, ``false`` to match offerings with no levsls\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_level_terms", 
               "doc": {
                  "headline": "Clears all level terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_items_sequential", 
               "doc": {
                  "headline": "Match sequential assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_items_sequential_terms", 
               "doc": {
                  "headline": "Clears all sequential terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_items_shuffled", 
               "doc": {
                  "headline": "Match shuffled item assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_items_shuffled_terms", 
               "doc": {
                  "headline": "Clears all shuffled terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_start_time", 
               "doc": {
                  "headline": "Matches assessments whose start time falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of range\n        arg:    end (osid.calendaring.DateTime): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of range\n        :type end: ``osid.calendaring.DateTime``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_start_time", 
               "doc": {
                  "headline": "Matches offerings that has any start time assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                start time, ``false`` to match offerings with no start\n                time\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any start time, ``false`` to match offerings with no start time\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_start_time_terms", 
               "doc": {
                  "headline": "Clears all scheduled terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_deadline", 
               "doc": {
                  "headline": "Matches assessments whose end time falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of range\n        arg:    end (osid.calendaring.DateTime): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of range\n        :type end: ``osid.calendaring.DateTime``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_deadline", 
               "doc": {
                  "headline": "Matches offerings that have any deadline assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                deadline, ``false`` to match offerings with no deadline\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any deadline, ``false`` to match offerings with no deadline\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_deadline_terms", 
               "doc": {
                  "headline": "Clears all deadline terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_duration", 
               "doc": {
                  "headline": "Matches assessments whose duration falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (osid.calendaring.Duration): start range of duration\n        arg:    high (osid.calendaring.Duration): end range of duration\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``", 
               "sphinx_param_doc": "        :param low: start range of duration\n        :type low: ``osid.calendaring.Duration``\n        :param high: end range of duration\n        :type high: ``osid.calendaring.Duration``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.Duration", 
                  "osid.calendaring.Duration", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_duration", 
               "doc": {
                  "headline": "Matches offerings that have any duration assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                duration, ``false`` to match offerings with no duration\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any duration, ``false`` to match offerings with no duration\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_duration_terms", 
               "doc": {
                  "headline": "Clears all duration terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_score_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true for a positive match, false for\n                a negative match``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true for a positive match, false for a negative match``\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_score_system_id_terms", 
               "doc": {
                  "headline": "Clears all grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_score_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_score_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_score_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_score_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_score_system", 
               "doc": {
                  "headline": "Matches taken assessments that have any grade system assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                grade system, ``false`` to match assessments with no\n                grade system\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any grade system, ``false`` to match assessments with no grade system\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_score_system_terms", 
               "doc": {
                  "headline": "Clears all grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true for a positive match, false for\n                a negative match``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true for a positive match, false for a negative match``\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system_id_terms", 
               "doc": {
                  "headline": "Clears all grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_score_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_score_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_score_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade_system", 
               "doc": {
                  "headline": "Matches taken assessments that have any grade system assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                grade system, ``false`` to match assessments with no\n                grade system\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any grade system, ``false`` to match assessments with no grade system\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_system_terms", 
               "doc": {
                  "headline": "Clears all grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_rubric_id", 
               "doc": {
                  "headline": "Sets the rubric assessment offered ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): an assessment\n                offered ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_id: an assessment offered ``Id``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rubric_id_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment offered ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_rubric_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentOfferedQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric assessment offered\n                query is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric assessment offered query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_query", 
               "doc": {
                  "headline": "Gets the query for a rubric assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_rubric", 
               "doc": {
                  "headline": "Matches an assessment offered that has any rubric assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments offered\n                with any rubric, ``false`` to match assessments offered\n                with no rubric\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments offered with any rubric, ``false`` to match assessments offered with no rubric\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_rubric_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_taken_id", 
               "doc": {
                  "headline": "Sets the assessment taken ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): an assessment taken\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_id: an assessment taken ``Id``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_taken_id_terms", 
               "doc": {
                  "headline": "Clears all assessment taken ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_taken_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentTakenQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment taken query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment taken query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query", 
               "doc": {
                  "headline": "Gets the query for an assessment taken.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_taken_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_taken_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_taken_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment_taken", 
               "doc": {
                  "headline": "Matches offerings that have any taken assessment version.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match offerings with any\n                taken assessment, ``false`` to match offerings with no\n                assessmen taken\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match offerings with any taken assessment, ``false`` to match offerings with no assessmen taken\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_taken_terms", 
               "doc": {
                  "headline": "Clears all assessment taken terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_id_terms", 
               "doc": {
                  "headline": "Clears all bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query", 
               "doc": {
                  "headline": "Gets the query for a bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bank_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_terms", 
               "doc": {
                  "headline": "Clears all bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query_record", 
               "doc": {
                  "headline": "Gets the assessment offered query record corresponding to the given ``AssessmentOffered`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    assessment_offered_record_type (osid.type.Type): an\n                assessment offered record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentOfferedQueryRecord) -\n                the assessment offered query record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_record_type: an assessment offered record type\n        :type assessment_offered_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered query record\n        :rtype: ``osid.assessment.records.AssessmentOfferedQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedQueryRecord", 
         "shortname": "AssessmentOfferedQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedQueryInspector", 
         "shortname": "AssessmentOfferedQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidSubjugateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidSubjugateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_assessment_id_terms", 
            "get_assessment_terms", 
            "get_level_id_terms", 
            "get_level_terms", 
            "get_items_sequential_terms", 
            "get_items_shuffled_terms", 
            "get_start_time_terms", 
            "get_deadline_terms", 
            "get_duration_terms", 
            "get_score_system_id_terms", 
            "get_score_system_terms", 
            "get_grade_system_id_terms", 
            "get_grade_system_terms", 
            "get_rubric_id_terms", 
            "get_rubric_terms", 
            "get_assessment_taken_id_terms", 
            "get_assessment_taken_terms", 
            "get_bank_id_terms", 
            "get_bank_terms", 
            "get_assessment_offered_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_id_terms", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment terms\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_level_id_terms", 
               "doc": {
                  "headline": "Gets the level ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the level ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_level_terms", 
               "doc": {
                  "headline": "Gets the level query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the level terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the level terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_items_sequential_terms", 
               "doc": {
                  "headline": "Gets the items sequential query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the boolean terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the boolean terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_items_shuffled_terms", 
               "doc": {
                  "headline": "Gets the items shuffled query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the boolean terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the boolean terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_start_time_terms", 
               "doc": {
                  "headline": "Gets the start time query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the start time terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the start time terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_deadline_terms", 
               "doc": {
                  "headline": "Gets the deadline query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the deadline terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the deadline terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_duration_terms", 
               "doc": {
                  "headline": "Gets the deadline query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DurationTerm) - the duration terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the duration terms\n        :rtype: ``osid.search.terms.DurationTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DurationTerm", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_terms", 
               "doc": {
                  "headline": "Gets the grade system query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_terms", 
               "doc": {
                  "headline": "Gets the grade system query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id_terms", 
               "doc": {
                  "headline": "Gets the assessment offered ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment offered\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                assessment offered terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered terms\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_id_terms", 
               "doc": {
                  "headline": "Gets the assessment taken ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment taken ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_terms", 
               "doc": {
                  "headline": "Gets the assessment taken query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQueryInspector) - the\n                assessment taken terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken terms\n        :rtype: ``osid.assessment.AssessmentTakenQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_id_terms", 
               "doc": {
                  "headline": "Gets the bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the bank ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bank_terms", 
               "doc": {
                  "headline": "Gets the bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query_inspector_record", 
               "doc": {
                  "headline": "Gets the assessment offered query inspector record corresponding to the given ``AssessmentOffered`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_record_type (osid.type.Type): an\n                assessment offered record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentOfferedQueryInspector\n                Record) - the assessment offered query inspector record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_record_type: an assessment offered record type\n        :type assessment_offered_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered query inspector record\n        :rtype: ``osid.assessment.records.AssessmentOfferedQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedQueryInspectorRecord", 
         "shortname": "AssessmentOfferedQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedForm", 
         "shortname": "AssessmentOfferedForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating an ``AssessmentOffered``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``AssessmentOfferedAdminSession``. For each data element that may be\n    set, metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidSubjugateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidSubjugateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableForm"
            }
         ], 
         "method_names": [
            "get_level_metadata", 
            "set_level", 
            "clear_level", 
            "get_items_sequential_metadata", 
            "set_items_sequential", 
            "clear_items_sequential", 
            "get_items_shuffled_metadata", 
            "set_items_shuffled", 
            "clear_items_shuffled", 
            "get_start_time_metadata", 
            "set_start_time", 
            "clear_start_time", 
            "get_deadline_metadata", 
            "set_deadline", 
            "clear_deadline", 
            "get_duration_metadata", 
            "set_duration", 
            "clear_duration", 
            "get_score_system_metadata", 
            "set_score_system", 
            "clear_score_system", 
            "get_grade_system_metadata", 
            "set_grade_system", 
            "clear_grade_system", 
            "get_assessment_offered_form_record"
         ], 
         "methods": [
            {
               "name": "get_level_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grade level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade level", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade level\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_level", 
               "doc": {
                  "headline": "Sets the level of difficulty expressed as a ``Grade``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): the grade level\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param grade_id: the grade level\n        :type grade_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_level", 
               "doc": {
                  "headline": "Clears the level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_items_sequential_metadata", 
               "doc": {
                  "headline": "Gets the metadata for sequential operation.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the sequential flag", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the sequential flag\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_items_sequential", 
               "doc": {
                  "headline": "Sets the items sequential flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    sequential (boolean): ``true`` if the items are taken\n                sequentially, ``false`` if the items can be skipped and\n                revisited\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``sequential`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param sequential: ``true`` if the items are taken sequentially, ``false`` if the items can be skipped and revisited\n        :type sequential: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``sequential`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "sequential", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_items_sequential", 
               "doc": {
                  "headline": "Clears the items sequential flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_items_shuffled_metadata", 
               "doc": {
                  "headline": "Gets the metadata for shuffling items.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the shuffled flag", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the shuffled flag\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_items_shuffled", 
               "doc": {
                  "headline": "Sets the shuffle flag.", 
                  "body": "        The shuffle flag may be overidden by other assessment sequencing\n        rules."
               }, 
               "arg_doc": "        arg:    shuffle (boolean): ``true`` if the items are shuffled,\n                ``false`` if the items appear in the designated order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``shuffle`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param shuffle: ``true`` if the items are shuffled, ``false`` if the items appear in the designated order\n        :type shuffle: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``shuffle`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "shuffle", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_items_shuffled", 
               "doc": {
                  "headline": "Clears the shuffle flag.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_start_time_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the assessment start time.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the start time", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the start time\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_start_time", 
               "doc": {
                  "headline": "Sets the assessment start time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): assessment start time\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param start: assessment start time\n        :type start: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_start_time", 
               "doc": {
                  "headline": "Clears the start time.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_deadline_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the assessment deadline.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the end time", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the end time\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_deadline", 
               "doc": {
                  "headline": "Sets the assessment end time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    end (timestamp): assessment end time\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param end: assessment end time\n        :type end: ``timestamp``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "timestamp", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "timestamp"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_deadline", 
               "doc": {
                  "headline": "Clears the deadline.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_duration_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the assessment duration.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the duration", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the duration\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_duration", 
               "doc": {
                  "headline": "Sets the assessment duration.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    duration (osid.calendaring.Duration): assessment\n                duration\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``duration`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param duration: assessment duration\n        :type duration: ``osid.calendaring.Duration``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``duration`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "duration", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.Duration"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_duration", 
               "doc": {
                  "headline": "Clears the duration.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_score_system_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a score system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade system", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade system\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_score_system", 
               "doc": {
                  "headline": "Sets the scoring system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the grade system\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_system_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param grade_system_id: the grade system\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_system_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_score_system", 
               "doc": {
                  "headline": "Clears the score system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade_system_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a grading system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the grade system", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the grade system\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_grade_system", 
               "doc": {
                  "headline": "Sets the grading system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): the grade system\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``grade_system_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param grade_system_id: the grade system\n        :type grade_system_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``grade_system_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_system", 
               "doc": {
                  "headline": "Clears the grading system.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_form_record", 
               "doc": {
                  "headline": "Gets the ``AssessmentOfferedFormRecord`` corresponding to the given assessment record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_record_type (osid.type.Type): the\n                assessment offered record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentOfferedFormRecord) -\n                the assessment offered record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_record_type: the assessment offered record type\n        :type assessment_offered_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered record\n        :rtype: ``osid.assessment.records.AssessmentOfferedFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedFormRecord", 
         "shortname": "AssessmentOfferedFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedSearchOrder", 
         "shortname": "AssessmentOfferedSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidSubjugateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidSubjugateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_assessment", 
            "supports_assessment_search_order", 
            "get_assessment_search_order", 
            "order_by_level", 
            "supports_level_search_order", 
            "get_level_search_order", 
            "order_by_items_sequential", 
            "order_by_items_shuffled", 
            "order_by_start_time", 
            "order_by_deadline", 
            "order_by_duration", 
            "order_by_score_system", 
            "supports_score_system_search_order", 
            "get_score_system_search_order", 
            "order_by_grade_system", 
            "supports_grade_system_search_order", 
            "get_grade_system_search_order", 
            "order_by_rubric", 
            "supports_rubric_search_order", 
            "get_rubric_search_order", 
            "get_assessment_offered_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_assessment", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_assessment_search_order", 
               "doc": {
                  "headline": "Tests if an assessment search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_search_order", 
               "doc": {
                  "headline": "Gets an assessment search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSearchOrder) - an assessment\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment search order\n        :rtype: ``osid.assessment.AssessmentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_level", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the level of difficulty.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_level_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_level_search_order", 
               "doc": {
                  "headline": "Gets a grade search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_level_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_level_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_level_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_items_sequential", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the sequential flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_items_shuffled", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the shuffle flag.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_start_time", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment start time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_deadline", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment deadline.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_duration", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the duration.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_score_system", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the grade system for scores.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_score_system_search_order", 
               "doc": {
                  "headline": "Tests if a grade system search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_search_order", 
               "doc": {
                  "headline": "Gets a grade system search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - a grade system\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_score_system_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_score_system_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_score_system_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_grade_system", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the grade system for grades.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grade_system_search_order", 
               "doc": {
                  "headline": "Tests if a grade system search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_system_search_order", 
               "doc": {
                  "headline": "Gets a grade system search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - a grade system\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_system_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_system_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_system_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_rubric", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the rubric assessment offered.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_rubric_search_order", 
               "doc": {
                  "headline": "Tests if an assessment offered search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment offered search\n                order is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment offered search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_search_order", 
               "doc": {
                  "headline": "Gets an assessment offered search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchOrder) - a\n                rubric assessment offered search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a rubric assessment offered search order\n        :rtype: ``osid.assessment.AssessmentOfferedSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_order_record", 
               "doc": {
                  "headline": "Gets the assessment offered search order record corresponding to the given assessment record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    assessment_offered_record_type (osid.type.Type): an\n                assessment offered record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentOfferedSearchOrderRec\n                ord) - the assessment offered search order record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_record_type: an assessment offered record type\n        :type assessment_offered_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered search order record\n        :rtype: ``osid.assessment.records.AssessmentOfferedSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedSearchOrderRecord", 
         "shortname": "AssessmentOfferedSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedSearch", 
         "shortname": "AssessmentOfferedSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``AssessmentOfferedSearch`` defines the interface for specifying assessment search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_assessments_offered", 
            "order_assessment_offered_results", 
            "get_assessment_offered_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_assessments_offered", 
               "doc": {
                  "headline": "Execute this search among the given list of assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offrered_ids (osid.id.IdList): list of\n                assessments offered\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_ids`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_offrered_ids: list of assessments offered\n        :type assessment_offrered_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_offrered_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_assessment_offered_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_search_order\n                (osid.assessment.AssessmentOfferedSearchOrder):\n                assessment offered search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_search_order`` is\n                ``null``\n        raise:  Unsupported - ``assessment_offered_search_order`` is not\n                of this service", 
               "sphinx_param_doc": "        :param assessment_offered_search_order: assessment offered search order\n        :type assessment_offered_search_order: ``osid.assessment.AssessmentOfferedSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_offered_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentOfferedSearchOrder", 
                     "var_name": "assessment_offered_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentOfferedSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_search_record", 
               "doc": {
                  "headline": "Gets the assessment search record corresponding to the given assessment offered search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_offered_search_record_type (osid.type.Type):\n                an assessment offered search record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentOfferedSearchRecord)\n                - the assessment offered search", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_search_record_type)\n                `` is ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_search_record_type: an assessment offered search record type\n        :type assessment_offered_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered search\n        :rtype: ``osid.assessment.records.AssessmentOfferedSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedSearchRecord", 
         "shortname": "AssessmentOfferedSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedSearchResults", 
         "shortname": "AssessmentOfferedSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_assessments_offered", 
            "get_assessment_offered_query_inspector", 
            "get_assessment_offered_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_assessments_offered", 
               "doc": {
                  "headline": "Gets the assessment offered list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedList) - the assessment\n                offered list", 
               "error_doc": "        raise:  IllegalState - the assessment offered list has already\n                been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered list\n        :rtype: ``osid.assessment.AssessmentOfferedList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the assessment offered list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_offered_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_search_results_record", 
               "doc": {
                  "headline": "Gets the assessment offered search results record corresponding to the given assessment offered search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_offered_search_record_type (osid.type.Type):\n                an assessment offered search record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentOfferedSearchResultsR\n                ecord) - the assessment offered search results record", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_offered_search_record_type)\n                `` is ``false``", 
               "sphinx_param_doc": "        :param assessment_offered_search_record_type: an assessment offered search record type\n        :type assessment_offered_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment offered search results record\n        :rtype: ``osid.assessment.records.AssessmentOfferedSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_offered_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_offered_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentOfferedSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentOfferedSearchResultsRecord", 
         "shortname": "AssessmentOfferedSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentOfferedSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedReceiver", 
         "shortname": "AssessmentOfferedReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The assessment receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``AssessmentOffered`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_assessments_offered", 
            "changed_assessments_offered", 
            "deleted_assessments_offered"
         ], 
         "methods": [
            {
               "name": "new_assessments_offered", 
               "doc": {
                  "headline": "The callback for notifications of new offered assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    assessment_offered_ids (osid.id.IdList): the ``Id`` of\n                the new ``AssessmentsOffered``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param assessment_offered_ids: the ``Id`` of the new ``AssessmentsOffered``\n        :type assessment_offered_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_offered_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_assessments_offered", 
               "doc": {
                  "headline": "The callback for notification of updated offered assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_offered_ids (osid.id.IdList): the ``Id`` of\n                the updated ``AssessmentsOffered``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_offered_ids: the ``Id`` of the updated ``AssessmentsOffered``\n        :type assessment_offered_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_offered_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_assessments_offered", 
               "doc": {
                  "headline": "the callback for notification of deleted offered assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    assessment_offered_ids (osid.id.IdList): the ``Id`` of\n                the deleted ``AssessmentsOffered``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param assessment_offered_ids: the ``Id`` of the deleted ``AssessmentsOffered``\n        :type assessment_offered_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_offered_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentOfferedList", 
         "shortname": "AssessmentOfferedList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AssessmentOfferedList`` provides a means for accessing ``AssessmentTaken`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (aol.hasNext()) { AssessmentOffered assessment =\n    aol.getNextAssessmentOffered();\n\n    or\n      while (aol.hasNext()) {\n           AssessmentOffered[] assessments = aol.hetNextAssessmentsOffered(aol.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_assessment_offered", 
            "get_next_assessments_offered"
         ], 
         "methods": [
            {
               "name": "get_next_assessment_offered", 
               "doc": {
                  "headline": "Gets the next ``AssessmentOffered`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - the next\n                ``AssessmentOffered`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``AssessmentOffered`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``AssessmentOffered`` in this list. The ``has_next()`` method should be used to test that a next ``AssessmentOffered`` is available before calling this method.\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_assessments_offered", 
               "doc": {
                  "headline": "Gets the next set of ``AssessmentOffered`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``AssessmentOffered``\n                elements requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - an array of\n                ``AssessmentOffered`` elements.The length of the array\n                is less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``AssessmentOffered`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``AssessmentOffered`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTaken", 
         "shortname": "AssessmentTaken", 
         "category": "objects", 
         "doc": {
            "headline": "Represents a taken assessment or an assessment in progress.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_assessment_offered_id", 
            "get_assessment_offered", 
            "get_taker_id", 
            "get_taker", 
            "get_taking_agent_id", 
            "get_taking_agent", 
            "has_started", 
            "get_actual_start_time", 
            "has_ended", 
            "get_completion_time", 
            "get_time_spent", 
            "get_completion", 
            "is_scored", 
            "get_score_system_id", 
            "get_score_system", 
            "get_score", 
            "is_graded", 
            "get_grade_id", 
            "get_grade", 
            "get_feedback", 
            "has_rubric", 
            "get_rubric_id", 
            "get_rubric", 
            "get_assessment_taken_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_offered_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the assessment offered ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered", 
               "doc": {
                  "headline": "Gets the ``AssessmentOffered``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOffered) - the assessment\n                offered", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered\n        :rtype: ``osid.assessment.AssessmentOffered``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOffered", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_taker_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the resource who took or is taking this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_taker", 
               "doc": {
                  "headline": "Gets the ``Resource`` taking this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_taking_agent_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Agent`` who took or is taking the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the agent ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_taking_agent", 
               "doc": {
                  "headline": "Gets the ``Agent``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the agent", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_started", 
               "doc": {
                  "headline": "Tests if this assessment has begun.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the assessment has begun,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the assessment has begun, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_actual_start_time", 
               "doc": {
                  "headline": "Gets the time this assessment was started.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the start time", 
               "error_doc": "        raise:  IllegalState - ``has_started()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the start time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_started()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "has_ended", 
               "doc": {
                  "headline": "Tests if this assessment has ended.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the assessment has ended,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the assessment has ended, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_completion_time", 
               "doc": {
                  "headline": "Gets the time of this assessment was completed.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the end time", 
               "error_doc": "        raise:  IllegalState - ``has_ended()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the end time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_ended()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_time_spent", 
               "doc": {
                  "headline": "Gets the total time spent taking this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.Duration) - the total time spent", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the total time spent\n        :rtype: ``osid.calendaring.Duration``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.Duration", 
               "errors": {}
            }, 
            {
               "name": "get_completion", 
               "doc": {
                  "headline": "Gets a completion percentage of the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (cardinal) - the percent complete (0-100)", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the percent complete (0-100)\n        :rtype: ``cardinal``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "cardinal", 
               "errors": {}
            }, 
            {
               "name": "is_scored", 
               "doc": {
                  "headline": "Tests if a score is available for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a score is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a score is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_id", 
               "doc": {
                  "headline": "Gets a score system ``Id`` for the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade system", 
               "error_doc": "        raise:  IllegalState - ``is_score()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_score()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_score_system", 
               "doc": {
                  "headline": "Gets a grade system for the score.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystem) - the grade system", 
               "error_doc": "        raise:  IllegalState - ``is_scored()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system\n        :rtype: ``osid.grading.GradeSystem``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_scored()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystem", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_score", 
               "doc": {
                  "headline": "Gets a score for the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (decimal) - the score", 
               "error_doc": "        raise:  IllegalState - ``is_scored()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the score\n        :rtype: ``decimal``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_scored()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "decimal", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "is_graded", 
               "doc": {
                  "headline": "Tests if a grade is available for this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_id", 
               "doc": {
                  "headline": "Gets a grade ``Id`` for the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the grade", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_grade", 
               "doc": {
                  "headline": "Gets a grade for the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.Grade) - the grade", 
               "error_doc": "        raise:  IllegalState - ``is_graded()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade\n        :rtype: ``osid.grading.Grade``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``is_graded()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.Grade", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_feedback", 
               "doc": {
                  "headline": "Gets any overall comments available for this assessment by the grader.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - comments", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: comments\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "has_rubric", 
               "doc": {
                  "headline": "Tests if a rubric assessment is associated with this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric is available, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - an assessment taken ``Id``", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment taken ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rubric", 
               "doc": {
                  "headline": "Gets the rubric.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - the assessment taken", 
               "error_doc": "        raise:  IllegalState - ``has_rubric()`` is ``false``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_rubric()`` is ``false``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assessment_taken_record", 
               "doc": {
                  "headline": "Gets the assessment taken record corresponding to the given ``AssessmentTaken`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``assessment_taken_record_type`` may be\n        the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(assessment_taken_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment taken record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentTakenRecord) - the\n                assessment taken record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment taken record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken record\n        :rtype: ``osid.assessment.records.AssessmentTakenRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenRecord", 
         "shortname": "AssessmentTakenRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTaken``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenQuery", 
         "shortname": "AssessmentTakenQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching assessments.", 
            "body": "    Each method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_assessment_offered_id", 
            "clear_assessment_offered_id_terms", 
            "supports_assessment_offered_query", 
            "get_assessment_offered_query", 
            "clear_assessment_offered_terms", 
            "match_taker_id", 
            "clear_taker_id_terms", 
            "supports_taker_query", 
            "get_taker_query", 
            "clear_taker_terms", 
            "match_taking_agent_id", 
            "clear_taking_agent_id_terms", 
            "supports_taking_agent_query", 
            "get_taking_agent_query", 
            "clear_taking_agent_terms", 
            "match_actual_start_time", 
            "match_any_actual_start_time", 
            "clear_actual_start_time_terms", 
            "match_completion_time", 
            "match_any_completion_time", 
            "clear_completion_time_terms", 
            "match_time_spent", 
            "clear_time_spent_terms", 
            "match_score_system_id", 
            "clear_score_system_id_terms", 
            "supports_score_system_query", 
            "get_score_system_query", 
            "match_any_score_system", 
            "clear_score_system_terms", 
            "match_score", 
            "match_any_score", 
            "clear_score_terms", 
            "match_grade_id", 
            "clear_grade_id_terms", 
            "supports_grade_query", 
            "get_grade_query", 
            "match_any_grade", 
            "clear_grade_terms", 
            "match_feedback", 
            "match_any_feedback", 
            "clear_feedback_terms", 
            "match_rubric_id", 
            "clear_rubric_id_terms", 
            "supports_rubric_query", 
            "get_rubric_query", 
            "match_any_rubric", 
            "clear_rubric_terms", 
            "match_bank_id", 
            "clear_bank_id_terms", 
            "supports_bank_query", 
            "get_bank_query", 
            "clear_bank_terms", 
            "get_assessment_taken_query_record"
         ], 
         "methods": [
            {
               "name": "match_assessment_offered_id", 
               "doc": {
                  "headline": "Sets the assessment offered ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_id: an assessment ``Id``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Clears all assessment offered ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentOfferedQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment offered query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment offered query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query", 
               "doc": {
                  "headline": "Gets the query for an assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_offered_terms", 
               "doc": {
                  "headline": "Clears all assessment offered terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_taker_id", 
               "doc": {
                  "headline": "Sets the resource ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_taker_id_terms", 
               "doc": {
                  "headline": "Clears all resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_taker_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_taker_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_taker_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_taker_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_taker_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_taker_terms", 
               "doc": {
                  "headline": "Clears all resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_taking_agent_id", 
               "doc": {
                  "headline": "Sets the agent ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): an agent ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: an agent ``Id``\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_taking_agent_id_terms", 
               "doc": {
                  "headline": "Clears all agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_taking_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_taking_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_taking_agent_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_taking_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_taking_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_taking_agent_terms", 
               "doc": {
                  "headline": "Clears all taking agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_actual_start_time", 
               "doc": {
                  "headline": "Matches assessments whose start time falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of range\n        arg:    end (osid.calendaring.DateTime): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of range\n        :type end: ``osid.calendaring.DateTime``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_actual_start_time", 
               "doc": {
                  "headline": "Matches taken assessments taken that have begun.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments taken\n                started, ``false`` to match assessments taken that have\n                not begun\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments taken started, ``false`` to match assessments taken that have not begun\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_actual_start_time_terms", 
               "doc": {
                  "headline": "Clears all start time terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_completion_time", 
               "doc": {
                  "headline": "Matches assessments whose completion time falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): start of range\n        arg:    end (osid.calendaring.DateTime): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``end`` is less than ``start``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``", 
               "sphinx_param_doc": "        :param start: start of range\n        :type start: ``osid.calendaring.DateTime``\n        :param end: end of range\n        :type end: ``osid.calendaring.DateTime``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``end`` is less than ``start``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_completion_time", 
               "doc": {
                  "headline": "Matches taken assessments taken that have completed.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments taken\n                completed, ``false`` to match assessments taken that are\n                incomplete\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments taken completed, ``false`` to match assessments taken that are incomplete\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_completion_time_terms", 
               "doc": {
                  "headline": "Clears all in completion time terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_time_spent", 
               "doc": {
                  "headline": "Matches assessments where the time spent falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (osid.calendaring.Duration): start of duration range\n        arg:    high (osid.calendaring.Duration): end of duration range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``high`` is less than ``low``\n        raise:  NullArgument - ``low`` or ``high`` is ``null``", 
               "sphinx_param_doc": "        :param low: start of duration range\n        :type low: ``osid.calendaring.Duration``\n        :param high: end of duration range\n        :type high: ``osid.calendaring.Duration``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``high`` is less than ``low``\n        :raise: ``NullArgument`` -- ``low`` or ``high`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.Duration", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.Duration", 
                  "osid.calendaring.Duration", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_time_spent_terms", 
               "doc": {
                  "headline": "Clears all in time spent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_score_system_id", 
               "doc": {
                  "headline": "Sets the grade system ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_system_id (osid.id.Id): a grade system ``Id``\n        arg:    match (boolean): ``true for a positive match, false for\n                a negative match``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_system_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_system_id: a grade system ``Id``\n        :type grade_system_id: ``osid.id.Id``\n        :param match: ``true for a positive match, false for a negative match``\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_system_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_system_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_score_system_id_terms", 
               "doc": {
                  "headline": "Clears all grade system ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_score_system_query", 
               "doc": {
                  "headline": "Tests if a ``GradeSystemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_query", 
               "doc": {
                  "headline": "Gets the query for a grade system.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQuery) - the grade system query", 
               "error_doc": "        raise:  Unimplemented - ``supports_score_system_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system query\n        :rtype: ``osid.grading.GradeSystemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_score_system_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_score_system_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_score_system", 
               "doc": {
                  "headline": "Matches taken assessments that have any grade system assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                grade system, ``false`` to match assessments with no\n                grade system\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any grade system, ``false`` to match assessments with no grade system\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_score_system_terms", 
               "doc": {
                  "headline": "Clears all grade system terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_score", 
               "doc": {
                  "headline": "Matches assessments whose score falls between the specified range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    low (decimal): start of range\n        arg:    high (decimal): end of range\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``high`` is less than ``low``", 
               "sphinx_param_doc": "        :param low: start of range\n        :type low: ``decimal``\n        :param high: end of range\n        :type high: ``decimal``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``high`` is less than ``low``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "decimal", 
                     "var_name": "low", 
                     "array": false
                  }, 
                  {
                     "arg_type": "decimal", 
                     "var_name": "high", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "decimal", 
                  "decimal", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_score", 
               "doc": {
                  "headline": "Matches taken assessments that have any score assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                score, ``false`` to match assessments with no score\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any score, ``false`` to match assessments with no score\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_score_terms", 
               "doc": {
                  "headline": "Clears all score terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_grade_id", 
               "doc": {
                  "headline": "Sets the grade ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    grade_id (osid.id.Id): a grade ``Id``\n        arg:    match (boolean): ``true for a positive match, false for\n                a negative match``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``grade_id`` is ``null``", 
               "sphinx_param_doc": "        :param grade_id: a grade ``Id``\n        :type grade_id: ``osid.id.Id``\n        :param match: ``true for a positive match, false for a negative match``\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``grade_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "grade_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_grade_id_terms", 
               "doc": {
                  "headline": "Clears all grade ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_grade_query", 
               "doc": {
                  "headline": "Tests if a ``GradeQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_query", 
               "doc": {
                  "headline": "Gets the query for a grade.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQuery) - the grade query", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade query\n        :rtype: ``osid.grading.GradeQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_grade", 
               "doc": {
                  "headline": "Matches taken assessments that have any grade assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                grade, ``false`` to match assessments with no grade\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any grade, ``false`` to match assessments with no grade\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_grade_terms", 
               "doc": {
                  "headline": "Clears all grade terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_feedback", 
               "doc": {
                  "headline": "Sets the comment string for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    comments (string): comment string\n        arg:    string_match_type (osid.type.Type): the string match\n                type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``comments is`` not of\n                ``string_match_type``\n        raise:  NullArgument - ``comments`` or ``string_match_type`` is\n                ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param comments: comment string\n        :type comments: ``string``\n        :param string_match_type: the string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``comments is`` not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``comments`` or ``string_match_type`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "comments", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_feedback", 
               "doc": {
                  "headline": "Matches taken assessments that have any comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments with any\n                comments, ``false`` to match assessments with no\n                comments\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments with any comments, ``false`` to match assessments with no comments\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_feedback_terms", 
               "doc": {
                  "headline": "Clears all comment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_rubric_id", 
               "doc": {
                  "headline": "Sets the rubric assessment taken ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_id (osid.id.Id): an assessment taken\n                ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_id: an assessment taken ``Id``\n        :type assessment_taken_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_taken_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rubric_id_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment taken ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_rubric_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentTakenQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rubric assessment taken query\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rubric assessment taken query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_query", 
               "doc": {
                  "headline": "Gets the query for a rubric assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQuery) - the assessment\n                taken query", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken query\n        :rtype: ``osid.assessment.AssessmentTakenQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_rubric", 
               "doc": {
                  "headline": "Matches an assessment taken that has any rubric assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match assessments taken\n                with any rubric, ``false`` to match assessments taken\n                with no rubric\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match assessments taken with any rubric, ``false`` to match assessments taken with no rubric\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_rubric_terms", 
               "doc": {
                  "headline": "Clears all rubric assessment taken terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_id_terms", 
               "doc": {
                  "headline": "Clears all bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query", 
               "doc": {
                  "headline": "Gets the query for a bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_bank_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_bank_terms", 
               "doc": {
                  "headline": "Clears all bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query_record", 
               "doc": {
                  "headline": "Gets the assessment taken query record corresponding to the given ``AssessmentTaken`` record ``Type``.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment taken record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentTakenQueryRecord) -\n                the assessment taken query record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment taken record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken query record\n        :rtype: ``osid.assessment.records.AssessmentTakenQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenQueryRecord", 
         "shortname": "AssessmentTakenQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenQueryInspector", 
         "shortname": "AssessmentTakenQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_assessment_offered_id_terms", 
            "get_assessment_offered_terms", 
            "get_taker_id_terms", 
            "get_taker_terms", 
            "get_taking_agent_id_terms", 
            "get_taking_agent_terms", 
            "get_actual_start_time_terms", 
            "get_completion_time_terms", 
            "get_time_spent_terms", 
            "get_score_system_id_terms", 
            "get_score_system_terms", 
            "get_score_terms", 
            "get_grade_id_terms", 
            "get_grade_terms", 
            "get_feedback_terms", 
            "get_rubric_id_terms", 
            "get_rubric_terms", 
            "get_bank_id_terms", 
            "get_bank_terms", 
            "get_assessment_taken_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Gets the assessment offered ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment offered\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_terms", 
               "doc": {
                  "headline": "Gets the assessment offered query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                assessment offered terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered terms\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_taker_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_taker_terms", 
               "doc": {
                  "headline": "Gets the resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_taking_agent_id_terms", 
               "doc": {
                  "headline": "Gets the agent ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_taking_agent_terms", 
               "doc": {
                  "headline": "Gets the agent query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the agent\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_actual_start_time_terms", 
               "doc": {
                  "headline": "Gets the start time query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the start time terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the start time terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_completion_time_terms", 
               "doc": {
                  "headline": "Gets the completion time query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the completion time\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the completion time terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_time_spent_terms", 
               "doc": {
                  "headline": "Gets the time spent query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DurationTerm) - the time spent terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time spent terms\n        :rtype: ``osid.search.terms.DurationTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DurationTerm", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_id_terms", 
               "doc": {
                  "headline": "Gets the grade system ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade system ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_terms", 
               "doc": {
                  "headline": "Gets the grade system query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemQueryInspector) - the grade\n                system terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade system terms\n        :rtype: ``osid.grading.GradeSystemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_score_terms", 
               "doc": {
                  "headline": "Gets the score query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DecimalRangeTerm) - the score terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the score terms\n        :rtype: ``osid.search.terms.DecimalRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DecimalRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_id_terms", 
               "doc": {
                  "headline": "Gets the grade ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the grade ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_grade_terms", 
               "doc": {
                  "headline": "Gets the grade query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeQueryInspector) - the grade terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the grade terms\n        :rtype: ``osid.grading.GradeQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_feedback_terms", 
               "doc": {
                  "headline": "Gets the comment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the comment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the comment terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_id_terms", 
               "doc": {
                  "headline": "Gets the assessment taken ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment taken ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_terms", 
               "doc": {
                  "headline": "Gets the assessment taken query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQueryInspector) - the\n                assessment taken terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken terms\n        :rtype: ``osid.assessment.AssessmentTakenQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_id_terms", 
               "doc": {
                  "headline": "Gets the bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the bank ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_bank_terms", 
               "doc": {
                  "headline": "Gets the bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_query_inspector_record", 
               "doc": {
                  "headline": "Gets the assessment taken query inspector record corresponding to the given ``AssessmentTaken`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment taken record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentTakenQueryInspectorRe\n                cord) - the assessment taken query inspector record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment taken record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken query inspector record\n        :rtype: ``osid.assessment.records.AssessmentTakenQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenQueryInspectorRecord", 
         "shortname": "AssessmentTakenQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenForm", 
         "shortname": "AssessmentTakenForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating an ``AssessmentTaken``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``AssessmentTakenAdminSession``. For each data element that may be\n    set, metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_taker_metadata", 
            "set_taker", 
            "clear_taker", 
            "get_assessment_taken_form_record"
         ], 
         "methods": [
            {
               "name": "get_taker_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a resource to manually set which resource will be taking the assessment.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the resource", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the resource\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_taker", 
               "doc": {
                  "headline": "Sets the resource who will be taking this assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the resource Id\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``resource_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "        :param resource_id: the resource Id\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``resource_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_taker", 
               "doc": {
                  "headline": "Clears the resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_form_record", 
               "doc": {
                  "headline": "Gets the ``AssessmentTakenFormRecord`` corresponding to the given assessment taken record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): the\n                assessment taken record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentTakenFormRecord) -\n                the assessment taken record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: the assessment taken record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken record\n        :rtype: ``osid.assessment.records.AssessmentTakenFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenFormRecord", 
         "shortname": "AssessmentTakenFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenSearchOrder", 
         "shortname": "AssessmentTakenSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_assessment_offered", 
            "supports_assessment_offered_search_order", 
            "get_assessment_offered_search_order", 
            "order_by_taker", 
            "supports_taker_search_order", 
            "get_taker_search_order", 
            "order_by_taking_agent", 
            "supports_taking_agent_search_order", 
            "get_taking_agent_search_order", 
            "order_by_actual_start_time", 
            "order_by_completion_time", 
            "order_by_time_spent", 
            "order_by_score_system", 
            "supports_score_system_search_order", 
            "get_score_system_search_order", 
            "order_by_score", 
            "order_by_grade", 
            "supports_grade_search_order", 
            "get_grade_search_order", 
            "order_by_feedback", 
            "order_by_rubric", 
            "supports_rubric_search_order", 
            "get_rubric_search_order", 
            "get_assessment_taken_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_assessment_offered", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment offered.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_assessment_offered_search_order", 
               "doc": {
                  "headline": "Tests if an assessment search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment offered search\n                order is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment offered search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_search_order", 
               "doc": {
                  "headline": "Gets an assessment offered search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedSearchOrder) - an\n                assessment offered search order", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_assessment_offered_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an assessment offered search order\n        :rtype: ``osid.assessment.AssessmentOfferedSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_offered_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_taker", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_taker_search_order", 
               "doc": {
                  "headline": "Tests if a resource search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_taker_search_order", 
               "doc": {
                  "headline": "Gets a resource search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - a resource search\n                order", 
               "error_doc": "        raise:  Unimplemented - ``supports_taker_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_taker_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_taker_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_taking_agent", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_taking_agent_search_order", 
               "doc": {
                  "headline": "Tests if an agent search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_taking_agent_search_order", 
               "doc": {
                  "headline": "Gets an agent search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - an agent search\n                order", 
               "error_doc": "        raise:  Unimplemented - ``supports_taking_agent_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an agent search order\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_taking_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_taking_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_actual_start_time", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment start time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_completion_time", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the assessment deadline.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_time_spent", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the time spent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_score_system", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the grade system.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_score_system_search_order", 
               "doc": {
                  "headline": "Tests if a grade system search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade system search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade system search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_score_system_search_order", 
               "doc": {
                  "headline": "Gets a grade system search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSystemSearchOrder) - a grade system\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_score_system_search_order()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade system search order\n        :rtype: ``osid.grading.GradeSystemSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_score_system_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_score_system_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSystemSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_score", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the score.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_grade", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the grade.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_grade_search_order", 
               "doc": {
                  "headline": "Tests if a grade search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a grade search order is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a grade search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_grade_search_order", 
               "doc": {
                  "headline": "Gets a grade search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.grading.GradeSearchOrder) - a grade search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_grade_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a grade search order\n        :rtype: ``osid.grading.GradeSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_grade_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_grade_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.grading.GradeSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_feedback", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the comments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_rubric", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the rubric assessment.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_rubric_search_order", 
               "doc": {
                  "headline": "Tests if an assessment taken search order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment taken search order\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment taken search order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rubric_search_order", 
               "doc": {
                  "headline": "Gets an assessment taken search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenSearchOrder) - a rubric\n                assessment taken search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_rubric_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a rubric assessment taken search order\n        :rtype: ``osid.assessment.AssessmentTakenSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rubric_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rubric_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_order_record", 
               "doc": {
                  "headline": "Gets the assessment taken search order record corresponding to the given assessment record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    assessment_taken_record_type (osid.type.Type): an\n                assessment record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentTakenSearchOrderRecor\n                d) - the assessment taken search order record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_record_type: an assessment record type\n        :type assessment_taken_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken search order record\n        :rtype: ``osid.assessment.records.AssessmentTakenSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenSearchOrderRecord", 
         "shortname": "AssessmentTakenSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenSearch", 
         "shortname": "AssessmentTakenSearch", 
         "category": "searches", 
         "doc": {
            "headline": "``AssessmentTakenSearch`` defines the interface for specifying assessment search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_assessments_taken", 
            "order_assessment_taken_results", 
            "get_assessment_taken_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_assessments_taken", 
               "doc": {
                  "headline": "Execute this search among the given list of assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_ids (osid.id.IdList): list of\n                assessments taken\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_ids`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_taken_ids: list of assessments taken\n        :type assessment_taken_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_taken_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_assessment_taken_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_taken_search_order\n                (osid.assessment.AssessmentTakenSearchOrder): assessment\n                offered search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_search_order`` is\n                ``null``\n        raise:  Unsupported - ``assessment_taken_search_order`` is not\n                of this service", 
               "sphinx_param_doc": "        :param assessment_taken_search_order: assessment offered search order\n        :type assessment_taken_search_order: ``osid.assessment.AssessmentTakenSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``assessment_taken_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.AssessmentTakenSearchOrder", 
                     "var_name": "assessment_taken_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.AssessmentTakenSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_search_record", 
               "doc": {
                  "headline": "Gets the assessment taken search record corresponding to the given assessment taken search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_taken_search_record_type (osid.type.Type): an\n                assessment taken search record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentTakenSearchRecord) -\n                the assessment taken search record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_search_record_type: an assessment taken search record type\n        :type assessment_taken_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken search record\n        :rtype: ``osid.assessment.records.AssessmentTakenSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenSearchRecord", 
         "shortname": "AssessmentTakenSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenSearchResults", 
         "shortname": "AssessmentTakenSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_assessments_taken", 
            "get_assessment_taken_query_inspector", 
            "get_assessment_taken_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_assessments_taken", 
               "doc": {
                  "headline": "Gets the assessment taken list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenList) - the assessment\n                taken list", 
               "error_doc": "        raise:  IllegalState - the assessment taken list has already\n                been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken list\n        :rtype: ``osid.assessment.AssessmentTakenList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the assessment taken list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assessment_taken_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTakenQueryInspector) - the\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.assessment.AssessmentTakenQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTakenQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken_search_results_record", 
               "doc": {
                  "headline": "Gets the assessment taken record corresponding to the given assessment taken search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    assessment_taken_search_record_type (osid.type.Type): an\n                assessment taken search record type\n", 
               "return_doc": "        return:\n                (osid.assessment.records.AssessmentTakenSearchResultsRec\n                ord) - the assessment taken search results record", 
               "error_doc": "        raise:  NullArgument - ``assessment_taken_search_record_type``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_taken_search_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param assessment_taken_search_record_type: an assessment taken search record type\n        :type assessment_taken_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment taken search results record\n        :rtype: ``osid.assessment.records.AssessmentTakenSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_taken_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_taken_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_taken_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentTakenSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentTakenSearchResultsRecord", 
         "shortname": "AssessmentTakenSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentTakenSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenReceiver", 
         "shortname": "AssessmentTakenReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The assessment receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``AssessmentTaken`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_assessments_taken", 
            "changed_assessmenst_taken", 
            "deleted_assessmenst_taken"
         ], 
         "methods": [
            {
               "name": "new_assessments_taken", 
               "doc": {
                  "headline": "The callback for notifications of new taken assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_taken_ids (osid.id.IdList): the ``Ids`` of\n                the new ``AssessmentsTaken``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_taken_ids: the ``Ids`` of the new ``AssessmentsTaken``\n        :type assessment_taken_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_taken_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_assessmenst_taken", 
               "doc": {
                  "headline": "The callback for notification of updated taken assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_taken_ids (osid.id.IdList): the ``Ids`` of\n                the updated ``AssessmentsTaken``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_taken_ids: the ``Ids`` of the updated ``AssessmentsTaken``\n        :type assessment_taken_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_taken_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_assessmenst_taken", 
               "doc": {
                  "headline": "the callback for notification of deleted taken assessments.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification ``Id``\n        arg:    assessment_taken_ids (osid.id.IdList): the ``Ids`` of\n                the deleted ``AssessmentsTaken``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification ``Id``\n        :type notification_id: ``osid.id.Id``\n        :param assessment_taken_ids: the ``Ids`` of the deleted ``AssessmentsTaken``\n        :type assessment_taken_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "assessment_taken_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentTakenList", 
         "shortname": "AssessmentTakenList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AssessmentTakenList`` provides a means for accessing ``AssessmentTaken`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (atl.hasNext()) { AssessmentTaken assessment =\n    atl.getNextAssessmentTaken();\n\n    or\n      while (atl.hasNext()) {\n           AssessmentTaken[] assessments = atl.hetNextAssessmentsTaken(atl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_assessment_taken", 
            "get_next_assessments_taken"
         ], 
         "methods": [
            {
               "name": "get_next_assessment_taken", 
               "doc": {
                  "headline": "Gets the next ``AssessmentTaken`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - the next\n                ``AssessmentTaken`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``AssessmentTaken`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``AssessmentTaken`` in this list. The ``has_next()`` method should be used to test that a next ``AssessmentTaken`` is available before calling this method.\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_assessments_taken", 
               "doc": {
                  "headline": "Gets the next set of ``AssessmentTaken`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``AssessmentTaken`` elements\n                requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - an array of\n                ``AssessmentTaken`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``AssessmentTaken`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``AssessmentTaken`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.AssessmentSection", 
         "shortname": "AssessmentSection", 
         "category": "objects", 
         "doc": {
            "headline": "Represents an assessment section.", 
            "body": "    An assessment section represents a cluster of questions used to\n    organize the execution of an assessment. The section is the student\n    aspect of an assessment part."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_assessment_taken_id", 
            "get_assessment_taken", 
            "has_allocated_time", 
            "get_allocated_time", 
            "are_items_sequential", 
            "are_items_shuffled", 
            "get_assessment_section_record"
         ], 
         "methods": [
            {
               "name": "get_assessment_taken_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``AssessmentTaken``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the assessment taken ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_taken", 
               "doc": {
                  "headline": "Gets the ``AssessmentTakeb``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentTaken) - the assessment taken", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment taken\n        :rtype: ``osid.assessment.AssessmentTaken``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentTaken", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "has_allocated_time", 
               "doc": {
                  "headline": "Tests if this section must be completed within an allocated time.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if this section has an allocated\n                time, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if this section has an allocated time, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_allocated_time", 
               "doc": {
                  "headline": "Gets the allocated time for this section.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.Duration) - allocated time", 
               "error_doc": "        raise:  IllegalState - ``has_allocated_time()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: allocated time\n        :rtype: ``osid.calendaring.Duration``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``has_allocated_time()`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.Duration", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "are_items_sequential", 
               "doc": {
                  "headline": "Tests if the items or parts in this section are taken sequentially.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the items are taken\n                sequentially, ``false`` if the items can be skipped and\n                revisited", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the items are taken sequentially, ``false`` if the items can be skipped and revisited\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "are_items_shuffled", 
               "doc": {
                  "headline": "Tests if the items or parts appear in a random order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if the items appear in a random\n                order, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if the items appear in a random order, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_section_record", 
               "doc": {
                  "headline": "Gets the assessment section record corresponding to the given ``AssessmentSection`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``assessment_section_record_type`` may be\n        the ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(assessment_section_record_type)`` is ``true``\n        ."
               }, 
               "arg_doc": "        arg:    assessment_section_record_type (osid.type.Type): an\n                assessment section record type\n", 
               "return_doc": "        return: (osid.assessment.records.AssessmentSectionRecord) - the\n                assessment section record", 
               "error_doc": "        raise:  NullArgument - ``assessment_section_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(assessment_section_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param assessment_section_record_type: an assessment section record type\n        :type assessment_section_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the assessment section record\n        :rtype: ``osid.assessment.records.AssessmentSectionRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_section_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(assessment_section_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "assessment_section_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.AssessmentSectionRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.AssessmentSectionRecord", 
         "shortname": "AssessmentSectionRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``AssessmentSection``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.AssessmentSectionList", 
         "shortname": "AssessmentSectionList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``AssessmentSectionList`` provides a means for accessing ``AssessmentSection`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (asl.hasNext()) { AssessmentSection section =\n    asl.getNextAssessmentSection();\n\n    or\n      while (asl.hasNext()) {\n           AssessmentSection[] sections = asl.hetNextAssessmentSections(asl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_assessment_section", 
            "get_next_assessment_sections"
         ], 
         "methods": [
            {
               "name": "get_next_assessment_section", 
               "doc": {
                  "headline": "Gets the next ``AssessmentSection`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - the next\n                ``AssessmentSection`` in this list. The ``has_next()``\n                method should be used to test that a next\n                ``AssessmentSection`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``AssessmentSection`` in this list. The ``has_next()`` method should be used to test that a next ``AssessmentSection`` is available before calling this method.\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_assessment_sections", 
               "doc": {
                  "headline": "Gets the next set of ``AssessmentSection`` elements in this list which must be less than or equal to the number returned from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``AssessmentSection``\n                elements requested which should be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.AssessmentSection) - an array of\n                ``AssessmentSection`` elements.The length of the array\n                is less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``AssessmentSection`` elements requested which should be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``AssessmentSection`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.AssessmentSection``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.AssessmentSection", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Bank", 
         "shortname": "Bank", 
         "category": "objects", 
         "doc": {
            "headline": "A bank defines a collection of assessments and items.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_bank_record"
         ], 
         "methods": [
            {
               "name": "get_bank_record", 
               "doc": {
                  "headline": "Gets the bank record corresponding to the given ``Bank`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``bank_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(bank_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankRecord) - the bank record", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank record\n        :rtype: ``osid.assessment.records.BankRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankRecord", 
         "shortname": "BankRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Bank``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankQuery", 
         "shortname": "BankQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching banks Each method specifies an ``AND`` term while multiple invocations of the same method produce a nested ``OR``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_item_id", 
            "clear_item_id_terms", 
            "supports_item_query", 
            "get_item_query", 
            "match_any_item", 
            "clear_item_terms", 
            "match_assessment_id", 
            "clear_assessment_id_terms", 
            "supports_assessment_query", 
            "get_assessment_query", 
            "match_any_assessment", 
            "clear_assessment_terms", 
            "match_assessment_offered_id", 
            "clear_assessment_offered_id_terms", 
            "supports_assessment_offered_query", 
            "get_assessment_offered_query", 
            "match_any_assessment_offered", 
            "clear_assessment_offered_terms", 
            "match_ancestor_bank_id", 
            "clear_ancestor_bank_id_terms", 
            "supports_ancestor_bank_query", 
            "get_ancestor_bank_query", 
            "match_any_ancestor_bank", 
            "clear_ancestor_bank_terms", 
            "match_descendant_bank_id", 
            "clear_descendant_bank_id_terms", 
            "supports_descendant_bank_query", 
            "get_descendant_bank_query", 
            "match_any_descendant_bank", 
            "clear_descendant_bank_terms", 
            "get_bank_query_record"
         ], 
         "methods": [
            {
               "name": "match_item_id", 
               "doc": {
                  "headline": "Sets the item ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    item_id (osid.id.Id): an item ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``item_id`` is ``null``", 
               "sphinx_param_doc": "        :param item_id: an item ``Id``\n        :type item_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "item_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_item_id_terms", 
               "doc": {
                  "headline": "Clears all item ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_item_query", 
               "doc": {
                  "headline": "Tests if a ``ItemQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an item query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an item query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_item_query", 
               "doc": {
                  "headline": "Gets the query for an item.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQuery) - the item query", 
               "error_doc": "        raise:  Unimplemented - ``supports_item_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item query\n        :rtype: ``osid.assessment.ItemQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_item_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_item_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_item", 
               "doc": {
                  "headline": "Matches assessment banks that have any item assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match banks with any item,\n                ``false`` to match assessments with no item\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match banks with any item, ``false`` to match assessments with no item\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_item_terms", 
               "doc": {
                  "headline": "Clears all item terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_id", 
               "doc": {
                  "headline": "Sets the assessment ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_id: an assessment ``Id``\n        :type assessment_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_id_terms", 
               "doc": {
                  "headline": "Clears all assessment ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_query", 
               "doc": {
                  "headline": "Gets the query for an assessment.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQuery) - the assessment query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment query\n        :rtype: ``osid.assessment.AssessmentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment", 
               "doc": {
                  "headline": "Matches assessment banks that have any assessment assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match banks with any\n                assessment, ``false`` to match banks with no assessment\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match banks with any assessment, ``false`` to match banks with no assessment\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_terms", 
               "doc": {
                  "headline": "Clears all assessment terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_assessment_offered_id", 
               "doc": {
                  "headline": "Sets the assessment offered ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    assessment_offered_id (osid.id.Id): an assessment ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``assessment_offered_id`` is ``null``", 
               "sphinx_param_doc": "        :param assessment_offered_id: an assessment ``Id``\n        :type assessment_offered_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``assessment_offered_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "assessment_offered_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Clears all assessment offered ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_assessment_offered_query", 
               "doc": {
                  "headline": "Tests if an ``AssessmentOfferedQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an assessment offered query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an assessment offered query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_query", 
               "doc": {
                  "headline": "Gets the query for an assessment offered.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQuery) - the\n                assessment offered query", 
               "error_doc": "        raise:  Unimplemented - ``supports_assessment_offered_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered query\n        :rtype: ``osid.assessment.AssessmentOfferedQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_assessment_offered_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_assessment_offered_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_assessment_offered", 
               "doc": {
                  "headline": "Matches assessment banks that have any assessment offering assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match banks with any\n                assessment offering, ``false`` to match banks with no\n                offering\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match banks with any assessment offering, ``false`` to match banks with no offering\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_assessment_offered_terms", 
               "doc": {
                  "headline": "Clears all assessment offered terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for to match banks in which the specified bank is an acestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_bank_id_terms", 
               "doc": {
                  "headline": "Clears all ancestor bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bank_query", 
               "doc": {
                  "headline": "Gets the query for an ancestor bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_bank", 
               "doc": {
                  "headline": "Matches a bank that has any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match banks with any\n                ancestor banks, ``false`` to match root banks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match banks with any ancestor banks, ``false`` to match root banks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_bank_terms", 
               "doc": {
                  "headline": "Clears all ancestor bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_bank_id", 
               "doc": {
                  "headline": "Sets the bank ``Id`` for to match banks in which the specified bank is a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_id (osid.id.Id): a bank ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_id`` is ``null``", 
               "sphinx_param_doc": "        :param bank_id: a bank ``Id``\n        :type bank_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "bank_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_bank_id_terms", 
               "doc": {
                  "headline": "Clears all descendant bank ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_bank_query", 
               "doc": {
                  "headline": "Tests if a ``BankQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a bank query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a bank query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bank_query", 
               "doc": {
                  "headline": "Gets the query for a descendant bank.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQuery) - the bank query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_bank_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank query\n        :rtype: ``osid.assessment.BankQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_bank_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_bank_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_bank", 
               "doc": {
                  "headline": "Matches a bank that has any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match banks with any\n                descendant banks, ``false`` to match leaf banks\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match banks with any descendant banks, ``false`` to match leaf banks\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_bank_terms", 
               "doc": {
                  "headline": "Clears all descendant bank terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query_record", 
               "doc": {
                  "headline": "Gets the bank query record corresponding to the given ``Bank`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankQueryRecord) - the bank\n                query record", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank query record\n        :rtype: ``osid.assessment.records.BankQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankQueryRecord", 
         "shortname": "BankQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankQueryInspector", 
         "shortname": "BankQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "The query inspectors provide a means of accessing the match terms of a query.", 
            "body": "    These interfaces are used to examine the actual query terms used in\n    a search or that may be used to create a smart catalog. Query\n    inspectors may be converted to ``OsidQuery`` interfaces for reuse or\n    modification in the search sessions."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_item_id_terms", 
            "get_item_terms", 
            "get_assessment_id_terms", 
            "get_assessment_terms", 
            "get_assessment_offered_id_terms", 
            "get_assessment_offered_terms", 
            "get_ancestor_bank_id_terms", 
            "get_ancestor_bank_terms", 
            "get_descendant_bank_id_terms", 
            "get_descendant_bank_terms", 
            "get_bank_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_item_id_terms", 
               "doc": {
                  "headline": "Gets the item ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the item ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_item_terms", 
               "doc": {
                  "headline": "Gets the item query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.ItemQueryInspector) - the item query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the item query terms\n        :rtype: ``osid.assessment.ItemQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.ItemQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_id_terms", 
               "doc": {
                  "headline": "Gets the assessment ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_terms", 
               "doc": {
                  "headline": "Gets the assessment query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentQueryInspector) - the\n                assessment terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment terms\n        :rtype: ``osid.assessment.AssessmentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_id_terms", 
               "doc": {
                  "headline": "Gets the assessment offered ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the assessment offered\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_assessment_offered_terms", 
               "doc": {
                  "headline": "Gets the assessment offered query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.AssessmentOfferedQueryInspector) - the\n                assessment offered terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment offered terms\n        :rtype: ``osid.assessment.AssessmentOfferedQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.AssessmentOfferedQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bank_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor bank ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_bank_terms", 
               "doc": {
                  "headline": "Gets the ancestor bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the ancestor bank\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bank_id_terms", 
               "doc": {
                  "headline": "Gets the descendant bank ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant bank ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant bank ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_bank_terms", 
               "doc": {
                  "headline": "Gets the descendant bank query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the descendant\n                bank terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant bank terms\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_query_inspector_record", 
               "doc": {
                  "headline": "Gets the bank query inspector record corresponding to the given ``Bank`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankQueryInspectorRecord) - the\n                bank query inspector record", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank query inspector record\n        :rtype: ``osid.assessment.records.BankQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankQueryInspectorRecord", 
         "shortname": "BankQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankForm", 
         "shortname": "BankForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating banks.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``BankAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_bank_form_record"
         ], 
         "methods": [
            {
               "name": "get_bank_form_record", 
               "doc": {
                  "headline": "Gets the ``BankFormRecord`` corresponding to the given bank record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankFormRecord) - the bank\n                record", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank record\n        :rtype: ``osid.assessment.records.BankFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankFormRecord", 
         "shortname": "BankFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankSearchOrder", 
         "shortname": "BankSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_bank_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_bank_search_order_record", 
               "doc": {
                  "headline": "Gets the bank search order record corresponding to the given bank record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    bank_record_type (osid.type.Type): a bank record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankSearchOrderRecord) - the\n                bank search order record", 
               "error_doc": "        raise:  NullArgument - ``bank_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(bank_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_record_type: a bank record type\n        :type bank_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank search order record\n        :rtype: ``osid.assessment.records.BankSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankSearchOrderRecord", 
         "shortname": "BankSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankSearch", 
         "shortname": "BankSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The interface for governing bank searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_banks", 
            "order_bank_results", 
            "get_bank_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_banks", 
               "doc": {
                  "headline": "Execute this search among the given list of banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_ids (osid.id.IdList): list of banks\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_ids`` is ``null``", 
               "sphinx_param_doc": "        :param bank_ids: list of banks\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_bank_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    bank_search_order (osid.assessment.BankSearchOrder):\n                bank search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``bank_search_order`` is ``null``\n        raise:  Unsupported - ``bank_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param bank_search_order: bank search order\n        :type bank_search_order: ``osid.assessment.BankSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``bank_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.assessment.BankSearchOrder", 
                     "var_name": "bank_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.assessment.BankSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_search_record", 
               "doc": {
                  "headline": "Gets the bank search record corresponding to the given bank search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    bank_search_record_type (osid.type.Type): a bank search\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankSearchRecord) - the bank\n                search record", 
               "error_doc": "        raise:  NullArgument - ``bank_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(bank_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_search_record_type: a bank search record type\n        :type bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank search record\n        :rtype: ``osid.assessment.records.BankSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankSearchRecord", 
         "shortname": "BankSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankSearchResults", 
         "shortname": "BankSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_banks", 
            "get_bank_query_inspector", 
            "get_bank_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_banks", 
               "doc": {
                  "headline": "Gets the bank list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankList) - the bank list", 
               "error_doc": "        raise:  IllegalState - the bank list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank list\n        :rtype: ``osid.assessment.BankList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the bank list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_bank_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankQueryInspector) - the query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.assessment.BankQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_bank_search_results_record", 
               "doc": {
                  "headline": "Gets the bank search results record corresponding to the given bank search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    bank_search_record_type (osid.type.Type): a bank search\n                record type\n", 
               "return_doc": "        return: (osid.assessment.records.BankSearchResultsRecord) - the\n                bank search results record", 
               "error_doc": "        raise:  NullArgument - ``bank_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(bank_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param bank_search_record_type: a bank search record type\n        :type bank_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the bank search results record\n        :rtype: ``osid.assessment.records.BankSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``bank_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(bank_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "bank_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.BankSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.BankSearchResultsRecord", 
         "shortname": "BankSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``BankSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.BankReceiver", 
         "shortname": "BankReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The bank receiver is the consumer supplied interface for receiving notifications pertaining to new, updated, or deleted Bank objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_banks", 
            "changed_banks", 
            "deleted_banks", 
            "changed_child_of_banks"
         ], 
         "methods": [
            {
               "name": "new_banks", 
               "doc": {
                  "headline": "The callback for notifications of new banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    bank_ids (osid.id.IdList): the ``Ids`` of the ``Banks``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param bank_ids: the ``Ids`` of the ``Banks``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_banks", 
               "doc": {
                  "headline": "The callback for notification of updated banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    bank_ids (osid.id.IdList): the ``Ids`` of the ``Banks``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param bank_ids: the ``Ids`` of the ``Banks``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_banks", 
               "doc": {
                  "headline": "The callback for notification of deleted banks.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    bank_ids (osid.id.IdList): the ``Ids`` of the ``Banks``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param bank_ids: the ``Ids`` of the ``Banks``\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_child_of_banks", 
               "doc": {
                  "headline": "The callback for notifications of changes to children of bank hierarchy nodes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    notification_id (osid.id.Id): the notification Id\n        arg:    bank_ids (osid.id.IdList): the ``Ids`` of the ``Banks``\n                whose children have changed\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param notification_id: the notification Id\n        :type notification_id: ``osid.id.Id``\n        :param bank_ids: the ``Ids`` of the ``Banks`` whose children have changed\n        :type bank_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "notification_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "bank_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankList", 
         "shortname": "BankList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BankList`` provides a means for accessing ``Bank`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bl.hasNext()) { Bank bank = bl.getNextBank(); }\n\n    or\n      while (bl.hasNext()) {\n           Bank[] banks = bl.getNextBanks(bl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_bank", 
            "get_next_banks"
         ], 
         "methods": [
            {
               "name": "get_next_bank", 
               "doc": {
                  "headline": "Gets the next ``Bank`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the next ``Bank`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Bank`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Bank`` in this list. The ``has_next()`` method should be used to test that a next ``Bank`` is available before calling this method.\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_banks", 
               "doc": {
                  "headline": "Gets the next set of ``Bank`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Bank`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Bank) - an array of ``Bank``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Bank`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Bank`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Bank", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankNode", 
         "shortname": "BankNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``BankHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_bank", 
            "get_parent_bank_nodes", 
            "get_child_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_bank", 
               "doc": {
                  "headline": "Gets the ``Bank`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Bank) - the bank represented by this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the bank represented by this node\n        :rtype: ``osid.assessment.Bank``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Bank", 
               "errors": {}
            }, 
            {
               "name": "get_parent_bank_nodes", 
               "doc": {
                  "headline": "Gets the parents of this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankNodeList) - the parents of this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this node\n        :rtype: ``osid.assessment.BankNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_bank_nodes", 
               "doc": {
                  "headline": "Gets the children of this bank.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankNodeList) - the children of this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this node\n        :rtype: ``osid.assessment.BankNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.BankNodeList", 
         "shortname": "BankNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``BankNodeList`` provides a means for accessing ``BankNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (bnl.hasNext()) { BankNode node =\n    bnl.getNextBankNode(); }\n\n    or\n      while (bnl.hasNext()) {\n           BankNode[] nodes = bnl.getNextBankNodes(bnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_bank_node", 
            "get_next_bank_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_bank_node", 
               "doc": {
                  "headline": "Gets the next ``BankNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.BankNode) - the next ``BankNode`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``BankNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``BankNode`` in this list. The ``has_next()`` method should be used to test that a next ``BankNode`` is available before calling this method.\n        :rtype: ``osid.assessment.BankNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.BankNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_bank_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``BankNode`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``BankNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.BankNode) - an array of ``BanklNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``BankNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``BanklNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.BankNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.BankNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.Response", 
         "shortname": "Response", 
         "category": "rules", 
         "doc": {
            "headline": "A response to an assessment item.", 
            "body": "    This interface contains methods to set values in response to an\n    assessmet item and mirrors the item record structure with the\n    corresponding setters."
         }, 
         "inherit_fullnames": [
            "osid.OsidCondition"
         ], 
         "inherit_shortnames": [
            "OsidCondition"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCondition"
            }
         ], 
         "method_names": [
            "get_item_id", 
            "get_item", 
            "get_response_record"
         ], 
         "methods": [
            {
               "name": "get_item_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the ``Item``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the assessment item ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_item", 
               "doc": {
                  "headline": "Gets the ``Item``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Item) - the assessment item", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the assessment item\n        :rtype: ``osid.assessment.Item``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Item", 
               "errors": {}
            }, 
            {
               "name": "get_response_record", 
               "doc": {
                  "headline": "Gets the response record corresponding to the given ``Item`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``item_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(item_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    item_record_type (osid.type.Type): an item record type\n", 
               "return_doc": "        return: (osid.assessment.records.ResponseRecord) - the response\n                record", 
               "error_doc": "        raise:  NullArgument - ``item_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(item_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param item_record_type: an item record type\n        :type item_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the response record\n        :rtype: ``osid.assessment.records.ResponseRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``item_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(item_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "item_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.assessment.records.ResponseRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.assessment.records.ResponseRecord", 
         "shortname": "ResponseRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Response``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.assessment.ResponseList", 
         "shortname": "ResponseList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ResponseList`` provides a means for accessing ``Response`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Response response =\n    rl.getNextResponse(); }\n\n    or\n      while (rl.hasNext()) {\n           Response[] responses = rl.getNextResponses(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_response", 
            "get_next_responses"
         ], 
         "methods": [
            {
               "name": "get_next_response", 
               "doc": {
                  "headline": "Gets the next ``Response`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.assessment.Response) - the next ``Response`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Response`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Response`` in this list. The ``has_next()`` method should be used to test that a next ``Response`` is available before calling this method.\n        :rtype: ``osid.assessment.Response``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.assessment.Response", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_responses", 
               "doc": {
                  "headline": "Gets the next set of ``Response`` elements in this list which must be less than or equal to the return from ``available()``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Response`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.assessment.Response) - an array of ``Response``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Response`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Response`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.assessment.Response``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.assessment.Response", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.assessment"
}
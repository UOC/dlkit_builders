{
   "name": "hierarchy", 
   "version": "3.0.0", 
   "title": "Hierarchy Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002,2008 Massachusetts Institute of Technology.\n\nCopyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Hierarchy OSID is an auxiliary service providing a means for\naccessing and managing hierarchical relationships among OSID ``Ids``.\n\nAn OSID ``Id`` may have onr or more parents or children and the\nhierarchy itself represents a directed acyclic graph. The hierarchy\nservice defines a set of interfaces used among other OSIDs that utilize\nhierarchies and can also be used to abstract hierarchical data into a\nstandalone service.\n\nHierarchical queries may be performed using the\n``HierarchyTraversalSession``. A set of methods exist to query parents,\nchildren, ancestors, and decendants. A Node structure may be retrieved\nto access a portion of a hierarchy in bulk. The ``Node`` provides\nmethods to get parents and children of the node directly.\n\nHierarchies are federateable by combining nodes. There is no hierarchy\nservice for the hierarchy catalog.", 
   "interfaces": [
      {
         "fullname": "osid.hierarchy.HierarchyProfile", 
         "shortname": "HierarchyProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The hierarchy profile describes the interoperability among hierarchy services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_hierarchy_traversal", 
            "supports_hierarchy_design", 
            "supports_hierarchy_sequencing", 
            "supports_hierarchy_structure_notification", 
            "supports_hierarchy_lookup", 
            "supports_hierarchy_query", 
            "supports_hierarchy_search", 
            "supports_hierarchy_admin", 
            "supports_hierarchy_notification", 
            "get_hierarchy_record_types", 
            "supports_hierarchy_record_type", 
            "get_hierarchy_search_record_types", 
            "supports_hierarchy_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if federation is visible.", 
                  "body": "        Visible federation allows for selecting among multiple\n        hierarchies."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported\n                ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_traversal", 
               "doc": {
                  "headline": "Tests if hierarchy traversal is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy traversal is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy traversal is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_design", 
               "doc": {
                  "headline": "Tests if hierarchy design is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy design is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy design is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_sequencing", 
               "doc": {
                  "headline": "Tests if hierarchy sequencing is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy sequencing is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy sequencing is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_structure_notification", 
               "doc": {
                  "headline": "Tests if hierarchy structure notification is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy structure notification\n                is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy structure notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_lookup", 
               "doc": {
                  "headline": "Tests if a hierarchy lookup is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_query", 
               "doc": {
                  "headline": "Tests if a hierarchy query is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_search", 
               "doc": {
                  "headline": "Tests if a hierarchy search is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_admin", 
               "doc": {
                  "headline": "Tests if a hierarchy administration is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_notification", 
               "doc": {
                  "headline": "Tests if hierarchy notification is supported.", 
                  "body": "        Messages may be sent when hierarchies are created, modified, or\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if hierarchy notification is\n                supported ``,``  ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if hierarchy notification is supported ``,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Hierarchy`` types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Hierarchy`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Hierarchy`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Hierarchy`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): a ``Type``\n                indicating a ``Hierarchy`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given record Type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: a ``Type`` indicating a ``Hierarchy`` record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given record Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Hierarchy`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Hierarchy`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Hierarchy`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_hierarchy_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Hierarchy`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``Hierarchy`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given Type is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param hierarchy_search_record_type: a ``Type`` indicating a ``Hierarchy`` search record type\n        :type hierarchy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given Type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyManager", 
         "shortname": "HierarchyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The hierarchy manager provides access sessions to traverse and manage hierrachies of ``Ids``.", 
            "body": "    The sessions included in this manager are:\n\n      * ``HierarchyTraversalSession:`` a basic session traversing a\n        hierarchy\n      * ``HierarchyDesignSession:`` a session to design a hierarchy\n      * ``HierarchySequencingSession:`` a session to sequence nodes in a\n        hierarchy\n      * ``HierarchyStructureNotificationSession:`` a session for\n        notififcations within a hierarchy structure\n      * ``HierarchyLookupSession:`` a session looking up hiererachies\n      * ``HierarchyQuerySession:`` a session querying hiererachies\n      * ``HierarchySearchSession:`` a session for searching for\n        hierarchies\n      * ``HierarchyAdminSession:`` a session for creating and deleting\n        hierarchies\n      * ``HierarchyNotificationSession:`` a session for subscribing to\n        changes in hierarchies\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.hierarchy.HierarchyProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "HierarchyProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "hierarchy"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "hierarchy", 
               "name": "HierarchyProfile"
            }
         ], 
         "method_names": [
            "get_hierarchy_traversal_session", 
            "get_hierarchy_traversal_session_for_hierarchy", 
            "get_hierarchy_design_session", 
            "get_hierarchy_design_session_for_hierarchy", 
            "get_hierarchy_sequencing_session", 
            "get_hierarchy_sequencing_session_for_hierarchy", 
            "get_hierarchy_structure_notification_session", 
            "get_hierarchy_structure_notification_session_for_hierarchy", 
            "get_hierarchy_lookup_session", 
            "get_hierarchy_query_session", 
            "get_hierarchy_search_session", 
            "get_hierarchy_admin_session", 
            "get_hierarchy_notification_session"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_traversal_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyTraversalSession) - a\n                ``HierarchyTraversalSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_traversal()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyTraversalSession``\n        :rtype: ``osid.hierarchy.HierarchyTraversalSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_traversal()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_traversal()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyTraversalSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_traversal_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy traversal service for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the hierarchy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyTraversalSession) - the new\n                ``HierarchyTraversalSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` not found\n        raise:  NullArgument - ``hierarchyid`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_hierarchy_traversal()`` or\n                ``supports_visible_fedaration()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the hierarchy\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the new ``HierarchyTraversalSession``\n        :rtype: ``osid.hierarchy.HierarchyTraversalSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` not found\n        :raise: ``NullArgument`` -- ``hierarchyid`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_traversal()`` or ``supports_visible_fedaration()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_traversal()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchyTraversalSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyDesignSession) - a\n                ``HierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession``\n        :rtype: ``osid.hierarchy.HierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_design_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the topology design service using for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the graph\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyDesignSession) - a\n                ``HierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_design()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the graph\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession``\n        :rtype: ``osid.hierarchy.HierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_sequencing_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy sequencing service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchySequencingSession) - a\n                ``HierarchySequencingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_sequencing()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchySequencingSession``\n        :rtype: ``osid.hierarchy.HierarchySequencingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_sequencing()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_sequencing()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchySequencingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_sequencing_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the sequencing design service using for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the graph\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchySequencingSession) - a\n                ``HierarchySequencingSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_sequencing()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the graph\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchySequencingSession``\n        :rtype: ``osid.hierarchy.HierarchySequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_sequencing()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_sequencing()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchySequencingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_structure_notification_session", 
               "doc": {
                  "headline": "Gets the session for subscribing to notifications of changes within a hierarchy structure.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_structure_receiver\n                (osid.hierarchy.HierarchyStructureReceiver): a receiver\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyStructureNotificationSession) -\n                a ``HierarchyStructureNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_structure_receiver`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_hierarchy_structure_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_structure_receiver: a receiver\n        :type hierarchy_structure_receiver: ``osid.hierarchy.HierarchyStructureReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyStructureNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyStructureNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_structure_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_structure_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_structure_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyStructureReceiver", 
                     "var_name": "hierarchy_structure_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyStructureReceiver"
               ], 
               "return_type": "osid.hierarchy.HierarchyStructureNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_structure_notification_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the session for subscribing to notifications of changes within a hierarchy structure for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_structure_receiver\n                (osid.hierarchy.HierarchyStructureReceiver): a receiver\n        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the graph\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyStructureNotificationSession) -\n                a ``HierarchyStructureNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_structure_receiver`` or\n                ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_hierarchy_structure_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_structure_receiver: a receiver\n        :type hierarchy_structure_receiver: ``osid.hierarchy.HierarchyStructureReceiver``\n        :param hierarchy_id: the ``Id`` of the graph\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyStructureNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyStructureNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_structure_receiver`` or ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_structure_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_structure_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyStructureReceiver", 
                     "var_name": "hierarchy_structure_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyStructureReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchyStructureNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyLookupSession) - a\n                ``HierarchyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyLookupSession``\n        :rtype: ``osid.hierarchy.HierarchyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyQuerySession) - a\n                ``HierarchyQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyQuerySession``\n        :rtype: ``osid.hierarchy.HierarchyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchySearchSession) - a\n                ``HierarchySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchySearchSession``\n        :rtype: ``osid.hierarchy.HierarchySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_admin_session", 
               "doc": {
                  "headline": "Gets the hierarchy administrative session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyAdminSession) - a\n                ``HierarchyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyAdminSession``\n        :rtype: ``osid.hierarchy.HierarchyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_notification_session", 
               "doc": {
                  "headline": "Gets a hierarchy notification session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_receiver (osid.hierarchy.HierarchyReceiver):\n                notification callback\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyNotificationSession) - a\n                ``HierarchyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_receiver: notification callback\n        :type hierarchy_receiver: ``osid.hierarchy.HierarchyReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyReceiver", 
                     "var_name": "hierarchy_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyReceiver"
               ], 
               "return_type": "osid.hierarchy.HierarchyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyProxyManager", 
         "shortname": "HierarchyProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The hierarchy manager provides access sessions to traverse and manage hierrachies of ``Ids``.", 
            "body": "    Methods in this manager accept a ``Proxy`` to pass information from\n    server environments. The sessions included in this manager are:\n\n      * ``HierarchyTraversalSession:`` a basic session traversing a\n        hierarchy\n      * ``HierarchyDesignSession:`` a session to design a hierarchy\n      * ``HierarchySequencingSession:`` a session to sequence nodes in a\n        hierarchy\n      * ``HierarchyStructureNotificationSession:`` a session for\n        notififcations within a hierarchy structure\n      * ``HierarchyLookupSession:`` a session looking up hiererachies\n      * ``HierarchyQuerySession:`` a session querying hiererachies\n      * ``HierarchySearchSession:`` a session for searching for\n        hierarchies\n      * ``HierarchyAdminSession:`` a session for creating and deleting\n        hierarchies\n      * ``HierarchyNotificationSession:`` a session for subscribing to\n        changes in hierarchies\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.hierarchy.HierarchyProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "HierarchyProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "hierarchy"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "hierarchy", 
               "name": "HierarchyProfile"
            }
         ], 
         "method_names": [
            "get_hierarchy_traversal_session", 
            "get_hierarchy_traversal_session_for_hierarchy", 
            "get_hierarchy_design_session", 
            "get_hierarchy_design_session_for_hierarchy", 
            "get_hierarchy_sequencing_session", 
            "get_hierarchy_sequencing_session_for_hierarchy", 
            "get_hierarchy_structure_notification_session", 
            "get_hierarchy_structure_notification_session_for_hierarchy", 
            "get_hierarchy_lookup_session", 
            "get_hierarchy_query_session", 
            "get_hierarchy_search_session", 
            "get_hierarchy_admin_session", 
            "get_hierarchy_notification_session"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_traversal_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyTraversalSession) - a\n                ``HierarchyTraversalSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_traversal()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyTraversalSession``\n        :rtype: ``osid.hierarchy.HierarchyTraversalSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_traversal()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_traversal()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyTraversalSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_traversal_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy traversal service for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the hierarchy\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyTraversalSession) - a\n                ``HierarchyTraversalSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchyid`` not found\n        raise:  NullArgument - ``hierarchy_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - ``unable to complete request``\n        raise:  Unimplemented - ``supports_hierarchy_traversal()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the hierarchy\n        :type hierarchy_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyTraversalSession``\n        :rtype: ``osid.hierarchy.HierarchyTraversalSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchyid`` not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- ``unable to complete request``\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_traversal()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_traversal()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyTraversalSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyDesignSession) - a\n                ``HierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession``\n        :rtype: ``osid.hierarchy.HierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_design_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the topology design service using for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the hierarchy\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyDesignSession) - a\n                ``HierarchyDesignSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_design()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the hierarchy\n        :type hierarchy_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession``\n        :rtype: ``osid.hierarchy.HierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_design()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_design()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyDesignSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_sequencing_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy sequencing service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchySequencingSession) - a\n                ``HierarchySequencingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_sequencing()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchySequencingSession``\n        :rtype: ``osid.hierarchy.HierarchySequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_sequencing()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_sequencing()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchySequencingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_sequencing_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the sequencing design service using for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the graph\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchySequencingSession) - a\n                ``HierarchySequencingSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_sequencing()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the graph\n        :type hierarchy_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchySequencingSession``\n        :rtype: ``osid.hierarchy.HierarchySequencingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_sequencing()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_sequencing()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchySequencingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_structure_notification_session", 
               "doc": {
                  "headline": "Gets the session for subscribing to notifications of changes within a hierarchy structure.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_structure_receiver\n                (osid.hierarchy.HierarchyStructureReceiver): a receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyStructureNotificationSession) -\n                a ``HierarchyStructureNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_structure_receiver`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_hierarchy_structure_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_structure_receiver: a receiver\n        :type hierarchy_structure_receiver: ``osid.hierarchy.HierarchyStructureReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyStructureNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyStructureNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_structure_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_structure_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_structure_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyStructureReceiver", 
                     "var_name": "hierarchy_structure_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyStructureReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyStructureNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_structure_notification_session_for_hierarchy", 
               "doc": {
                  "headline": "Gets the session for subscribing to notifications of changes within a hierarchy structure for the given hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_structure_receiver\n                (osid.hierarchy.HierarchyStructureReceiver): a receiver\n        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the hierarchy\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyStructureNotificationSession) -\n                a ``HierarchyStructureNotificationSession``", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_structure_receiver,\n                hierarchy_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_hierarchy_structure_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_structure_receiver: a receiver\n        :type hierarchy_structure_receiver: ``osid.hierarchy.HierarchyStructureReceiver``\n        :param hierarchy_id: the ``Id`` of the hierarchy\n        :type hierarchy_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyStructureNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyStructureNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_structure_receiver, hierarchy_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_structure_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_structure_notification()`` and ``supports_visible_federation()`` are ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyStructureReceiver", 
                     "var_name": "hierarchy_structure_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyStructureReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyStructureNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyLookupSession) - a\n                ``HierarchyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyLookupSession``\n        :rtype: ``osid.hierarchy.HierarchyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyQuerySession) - a\n                ``HierarchyQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyQuerySession``\n        :rtype: ``osid.hierarchy.HierarchyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the hierarchy search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchySearchSession) - a\n                ``HierarchySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchySearchSession``\n        :rtype: ``osid.hierarchy.HierarchySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_admin_session", 
               "doc": {
                  "headline": "Gets the hierarchy administrative session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyAdminSession) - a\n                ``HierarchyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyAdminSession``\n        :rtype: ``osid.hierarchy.HierarchyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_notification_session", 
               "doc": {
                  "headline": "Gets the hierarchy notification session.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_receiver (osid.hierarchy.HierarchyReceiver):\n                notification callback\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyNotificationSession) - a\n                ``HierarchyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_hierarchy_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_receiver: notification callback\n        :type hierarchy_receiver: ``osid.hierarchy.HierarchyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyNotificationSession``\n        :rtype: ``osid.hierarchy.HierarchyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_hierarchy_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_hierarchy_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyReceiver", 
                     "var_name": "hierarchy_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.hierarchy.HierarchyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyTraversalSession", 
         "shortname": "HierarchyTraversalSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy.", 
            "body": "    Each node in the hierarchy is a unique OSID ``Id``. The hierarchy\n    may be traversed recursively to establish the tree structure through\n    ``get_parents()`` and ``getChildren()``. To relate these ``Ids`` to\n    another OSID, ``get_nodes()`` can be used for retrievals that can be\n    used for bulk lookups in other OSIDs.\n\n    Any Id available in an associated OSID is known to this hierarchy. A\n    lookup up a particular ``Id`` in this hierarchy for the purposes of\n    establishing a starting point for traversal or determining\n    relationships should use the ``Id`` returned from the corresponding\n    OSID object, not an Id that has been stored, to avoid problems with\n    ``Id`` translation or aliasing.\n    \n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parents()`` or ``get_children()`` in lieu of a\n    ``PermissionDenied`` error that may disrupt the traversal through\n    authorized pathways."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_hierarchy_id", 
            "get_hierarchy", 
            "can_access_hierarchy", 
            "get_roots", 
            "has_parents", 
            "is_parent", 
            "get_parents", 
            "is_ancestor", 
            "has_children", 
            "is_child", 
            "get_children", 
            "is_descendant", 
            "get_nodes"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_roots", 
               "doc": {
                  "headline": "Gets the root nodes of this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root nodes", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root nodes\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parents", 
               "doc": {
                  "headline": "Tests if this ``Id`` contains any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``Id`` contains parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``Id`` contains parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n        arg:    parent_id (osid.id.Id): the ``Id`` of a parent\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``parent_id`` is a parent\n                of ``id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` or ``parent_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n        :param parent_id: the ``Id`` of a parent\n        :type parent_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``parent_id`` is a parent of ``id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``parent_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``parent_id`` not found return\n        ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parents", 
               "doc": {
                  "headline": "Gets the parents of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the parents of the ``id``", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of an ancestor\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``ancestor_id`` is a parent\n                of ``id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` or ``ancestor_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of an ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``ancestor_id`` is a parent of ``id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``ancestor_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``ancestor_id`` not found return\n        ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_children", 
               "doc": {
                  "headline": "Tests if this ``Id`` has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``Id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``Id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child", 
               "doc": {
                  "headline": "Tests if a node is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n        arg:    child_id (osid.id.Id): the ``Id`` of a child\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``child_id`` is a child of\n                the ``Id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n        :param child_id: the ``Id`` of a child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``child_id`` is a child of the ``Id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``child_id`` not found return\n        ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_children", 
               "doc": {
                  "headline": "Gets the children of the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the ``id``", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the ``id``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant", 
               "doc": {
                  "headline": "Tests if a node is a descendant of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n        arg:    descendant_id (osid.id.Id): the ``Id`` of a descendant\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``descendant_id`` is a\n                child of the ``Id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` or ``descendant`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of a descendant\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``descendant_id`` is a child of the ``Id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``descendant`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a node", 
               "error_doc": "        raise:  NotFound - ``id`` is not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` to query\n        :type id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` is not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyDesignSession", 
         "shortname": "HierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to manage a hierarchy.", 
            "body": "    Each node is expressed as an OSID ``Id`` that represents an external\n    object. The hierarchy only expresses relationships among these Ids.\n    However, changing the hierarchy may have implications, such as\n    inherited data, in the associated OSID."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_hierarchy_id", 
            "get_hierarchy", 
            "can_modify_hierarchy", 
            "add_root", 
            "add_child", 
            "remove_root", 
            "remove_child", 
            "remove_children"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root", 
               "doc": {
                  "headline": "Adds a root node.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` of the node\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``id`` is already in hierarchy\n        raise:  NotFound - ``id`` not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` of the node\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``id`` not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child", 
               "doc": {
                  "headline": "Adds a child to a ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` of the node\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``child_id`` is already a child of\n                ``id``\n        raise:  NotFound - ``id`` or ``child_id`` not found\n        raise:  NullArgument - ``id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` of the node\n        :type id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``child_id`` is already a child of ``id``\n        :raise: ``NotFound`` -- ``id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root", 
               "doc": {
                  "headline": "Removes a root node.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` of the node\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``id`` was not found or not in hierarchy\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` of the node\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` was not found or not in hierarchy\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child", 
               "doc": {
                  "headline": "Removes a childfrom an ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` of the node\n        arg:    child_id (osid.id.Id): the ``Id`` of the child to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``id`` or ``child_id`` was not found or\n                ``child_id`` is not a child of ``id``\n        raise:  NullArgument - ``id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` of the node\n        :type id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the child to remove\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``id`` or ``child_id`` was not found or ``child_id`` is not a child of ``id``\n        :raise: ``NullArgument`` -- ``id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_children", 
               "doc": {
                  "headline": "Removes all childrenfrom an ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): the ``Id`` of the node\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - an node identified by the given ``Id`` was\n                not found\n        raise:  NullArgument - ``id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: the ``Id`` of the node\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an node identified by the given ``Id`` was not found\n        :raise: ``NullArgument`` -- ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchySequencingSession", 
         "shortname": "HierarchySequencingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to sequence the nodes in a hierarchy.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_hierarchy_id", 
            "get_hierarchy", 
            "can_sequence_hierarchy", 
            "move_node_ahead", 
            "move_node_behind", 
            "sequence_nodes"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_sequence_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "move_node_ahead", 
               "doc": {
                  "headline": "Moves a node ahead of a refrence node under the given parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_id (osid.id.Id): the ``Id`` of the parent node\n        arg:    reference_id (osid.id.Id): the ``Id`` of the node\n        arg:    id (osid.id.Id): the ``Id`` of the node to move ahead of\n                ``reference_id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_id, reference_id,`` or ``id`` not\n                found, or ``reference_id`` or ``id`` is not a child of\n                ``parent_id``\n        raise:  NullArgument - ``parent_id, reference_id,`` or ``id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_id: the ``Id`` of the parent node\n        :type parent_id: ``osid.id.Id``\n        :param reference_id: the ``Id`` of the node\n        :type reference_id: ``osid.id.Id``\n        :param id: the ``Id`` of the node to move ahead of ``reference_id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_id, reference_id,`` or ``id`` not found, or ``reference_id`` or ``id`` is not a child of ``parent_id``\n        :raise: ``NullArgument`` -- ``parent_id, reference_id,`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "move_node_behind", 
               "doc": {
                  "headline": "Moves a node behind a refrence node under the given parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_id (osid.id.Id): the ``Id`` of the parent node\n        arg:    reference_id (osid.id.Id): the ``Id`` of the node\n        arg:    id (osid.id.Id): the ``Id`` of the node to move behind\n                ``reference_id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_id, reference_id,`` or ``id`` not\n                found, or ``reference_id`` or ``id`` is not a child of\n                ``parent_id``\n        raise:  NullArgument - ``parent_id, reference_id,`` or ``id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_id: the ``Id`` of the parent node\n        :type parent_id: ``osid.id.Id``\n        :param reference_id: the ``Id`` of the node\n        :type reference_id: ``osid.id.Id``\n        :param id: the ``Id`` of the node to move behind ``reference_id``\n        :type id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_id, reference_id,`` or ``id`` not found, or ``reference_id`` or ``id`` is not a child of ``parent_id``\n        :raise: ``NullArgument`` -- ``parent_id, reference_id,`` or ``id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reference_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "sequence_nodes", 
               "doc": {
                  "headline": "Sequences a set of nodes under a parent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    parent_id (osid.id.Id): the ``Id`` of the parent node\n        arg:    ids (osid.id.Id[]): the ``Id`` of the nodes\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``parent_id`` or an ``id`` not found, or an\n                ``id`` is not a child of ``parent_id``\n        raise:  NullArgument - ``parent_id`` or ``ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param parent_id: the ``Id`` of the parent node\n        :type parent_id: ``osid.id.Id``\n        :param ids: the ``Id`` of the nodes\n        :type ids: ``osid.id.Id[]``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``parent_id`` or an ``id`` not found, or an ``id`` is not a child of ``parent_id``\n        :raise: ``NullArgument`` -- ``parent_id`` or ``ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "parent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id[]", 
                     "var_name": "ids", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id[]"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyStructureNotificationSession", 
         "shortname": "HierarchyStructureNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to a hierarchical structure.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the structure of a\n    hierarchy. For notifications of changes to the ``Hierarchy`` object\n    use ``HierarchyNotificationSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_hierarchy_id", 
            "get_hierarchy", 
            "can_register_for_hierarchy_structure_notifications", 
            "register_for_new_hierarchy_nodes", 
            "register_for_changed_ancestor", 
            "register_for_changed_descendant", 
            "register_for_deleted_hierarchy_nodes", 
            "register_for_deleted_hierarchy_node"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy", 
               "doc": {
                  "headline": "Gets the ``Hierarchy`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the ``Hierarchy``\n                associated with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Hierarchy`` associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_hierarchy_structure_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Hierarchy`` node notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_hierarchy_nodes", 
               "doc": {
                  "headline": "Register for notifications of new hierarchy nodes.", 
                  "body": "        ``HierarchyStructureReceiver.newNode()`` is invoked when a new\n        ``Hierarchy`` node is added."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_ancestor", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that impacts the ancestors of the specified node.", 
                  "body": "        ``HierarchyStructureReceiver.newAncestor()`` or\n        ``HierarchyStructureReceiver.deletedAncestor()`` is invoked when\n        the specified hierarchy node experiences a change in ancestry."
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the ``hierarchy``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``node_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the ``hierarchy`` node to monitor\n        :type node_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``node_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_descendant", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that impacts the descendants of the specified node.", 
                  "body": "        ``HierarchyStructureReceiver.newDescendant()`` or\n        ``HierarchyStructureReceiver.deletedDescendant()`` is invoked\n        when the specified hierarchy node experiences a change in\n        offspring."
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the ``hierarchy``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``node_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the ``hierarchy`` node to monitor\n        :type node_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``node_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_hierarchy_nodes", 
               "doc": {
                  "headline": "Registers for notification of deleted hierarchy nodes.", 
                  "body": "        ``HierarchyStructureReceiver.deletedNode()`` is invoked when a\n        hierarchy ndoe is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_hierarchy_node", 
               "doc": {
                  "headline": "Registers for notification of a deleted hierarchy node.", 
                  "body": "        ``HierarchyStructureReceiver.deletedNode()`` is invoked when the\n        specified hierarchy node is deleted."
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the ``Hierarchy``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``node_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the ``Hierarchy`` node to monitor\n        :type node_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``node_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyLookupSession", 
         "shortname": "HierarchyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Hierarchy`` objects.", 
            "body": "    The ``Hierarchy`` represents a structure of OSID ``Ids``.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Hierarchies`` objects it can access, without breaking\n    execution. However, an assessment may only be useful if all\n    ``Hierarchy`` objects referenced by it are available, and a test-\n    taking applicationmay sacrifice some interoperability for the sake\n    of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_hierarchies", 
            "use_comparative_hierarchy_view", 
            "use_plenary_hierarchy_view", 
            "get_hierarchy", 
            "get_hierarchies_by_ids", 
            "get_hierarchies_by_genus_type", 
            "get_hierarchies_by_parent_genus_type", 
            "get_hierarchies_by_record_type", 
            "get_hierarchies_by_provider", 
            "get_hierarchies"
         ], 
         "methods": [
            {
               "name": "can_lookup_hierarchies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Hierarchy`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_hierarchy_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_hierarchy_view", 
               "doc": {
                  "headline": "A complete view of the ``Hierarchy`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy", 
               "doc": {
                  "headline": "Gets the ``Hierarchy`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Hierarchy`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``Hierarchy`` and retained\n        for compati"
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the\n                ``Hierarchy`` to retrieve\n", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the returned ``Hierarchy``", 
               "error_doc": "        raise:  NotFound - no ``Hierarchy`` found with the given ``Id``\n        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the ``Hierarchy`` to retrieve\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy``\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Hierarchy`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies_by_ids", 
               "doc": {
                  "headline": "Gets a ``Hierarchy`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the\n        hierarchies specified in the ``Id`` list, in the order of the\n        list, including duplicates, or an error results if an ``Id`` in\n        the supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Hierarchy`` objects may be omitted from the list\n        and may present the elements in any order including returning a\n        unique set."
               }, 
               "arg_doc": "        arg:    hierarchy_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``Hierarchy`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``hierarchy_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_ids: the list of ``Ids`` to retrieve\n        :type hierarchy_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy`` list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``hierarchy_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "hierarchy_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``HierarchyList`` corresponding to the given genus ``Type`` which does not include hierarchies of types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        hierarchies or an error results. Otherwise, the returned list\n        may contain only those hierarchies that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    hierarchy_genus_type (osid.type.Type): a hierarchy genus\n                type\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``Hierarchy`` list", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_genus_type: a hierarchy genus type\n        :type hierarchy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy`` list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``HierarchyList`` corresponding to the given hierarchy genus ``Type`` and include any additional hierarchies with types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known\n        hierarchies or an error results. Otherwise, the returned list\n        may contain only those hierarchies that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    hierarchy_genus_type (osid.type.Type): a hierarchy genus\n                type\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``Hierarchy`` list", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_genus_type: a hierarchy genus type\n        :type hierarchy_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy`` list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies_by_record_type", 
               "doc": {
                  "headline": "Gets a ``HierarchyList`` corresponding to the given hierarchy record ``Type``.", 
                  "body": "        The set of hierarchies implementing the given record type are\n        returned.In plenary mode, the returned list contains all known\n        hierarchies or an error results. Otherwise, the returned list\n        may contain only those hierarchies that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): a hierarchy\n                record type\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``Hierarchy`` list", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_record_type: a hierarchy record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy`` list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies_by_provider", 
               "doc": {
                  "headline": "Gets a ``HierarchyList`` for the given provider ````.", 
                  "body": "        The set of hierarchies implementing the given record type are\n        returned.In plenary mode, the returned list contains all known\n        hierarchies or an error results. Otherwise, the returned list\n        may contain only those hierarchies that are accessible through\n        this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``Hierarchy`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Hierarchy`` list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_hierarchies", 
               "doc": {
                  "headline": "Gets all hierarchies.", 
                  "body": "        In plenary mode, the returned list contains all known\n        hierarchies or an error results. Otherwise, the returned list\n        may contain only those hierarchies that are accessible through\n        this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - a list of\n                ``Hierarchies``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Hierarchies``\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyQuerySession", 
         "shortname": "HierarchyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Hierarchy`` objects.", 
            "body": "    The search query is constructed using the ``HierarchyQuery``.\n\n    Hierarchies may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``HierarchuQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_hierarchies", 
            "get_hierarchy_query", 
            "get_hierarchies_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_hierarchies", 
               "doc": {
                  "headline": "Tests if this user can perform ``Hierarchy`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_query", 
               "doc": {
                  "headline": "Gets a hierarchy query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyQuery) - the hierarchy query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy query\n        :rtype: ``osid.hierarchy.HierarchyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchies_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Hierarchy`` objects matching the given hierarchy query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_query (osid.hierarchy.HierarchyQuery): the\n                hierarchy query\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the returned\n                ``HierarchyList``", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``hierarchy_query`` is not of this service", 
               "sphinx_param_doc": "        :param hierarchy_query: the hierarchy query\n        :type hierarchy_query: ``osid.hierarchy.HierarchyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``HierarchyList``\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``hierarchy_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyQuery", 
                     "var_name": "hierarchy_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyQuery"
               ], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchySearchSession", 
         "shortname": "HierarchySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Hierarchy`` objects.", 
            "body": "    The search query is constructed using the ``HierarchyQuery``.\n\n    ``get_hierarchies_by_query()`` is the basic search method and\n    returns a list of ``Hierarchy`` objects. A more advanced search may\n    be performed with ``getHierarchiesBySearch()``. It accepts a\n    ``HierarchySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_hierarchies_by_search()`` returns a\n    ``HierarchySearchResults`` that can be used to access the resulting\n    ``HierarchyList`` or be used to perform a search within the result\n    set through ``HierarchySearch``.\n    \n    Hierarchies may have a query record indicated by their respective\n    record types. The query record query is accessed via the\n    ``HierarchuQuery``."
         }, 
         "inherit_fullnames": [
            "osid.hierarchy.HierarchyQuerySession"
         ], 
         "inherit_shortnames": [
            "HierarchyQuerySession"
         ], 
         "inherit_pkg_names": [
            "hierarchy"
         ], 
         "inheritance": [
            {
               "pkg_name": "hierarchy", 
               "name": "HierarchyQuerySession"
            }
         ], 
         "method_names": [
            "get_hierarchy_search", 
            "get_hierarchy_search_order", 
            "get_hierarchies_by_search", 
            "get_hierarchy_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_search", 
               "doc": {
                  "headline": "Gets a hierarchy search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchySearch) - the hierarchy search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy search\n        :rtype: ``osid.hierarchy.HierarchySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchySearch", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_search_order", 
               "doc": {
                  "headline": "Gets a hierarchy search order.", 
                  "body": "        The ``HierarchySearchOrder`` is supplied to a\n        ``HierarchySearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchySearchOrder) - the hierarchy\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy search order\n        :rtype: ``osid.hierarchy.HierarchySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchies_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_query (osid.hierarchy.HierarchyQuery): the\n                hierarchy query\n        arg:    hierarchy_search (osid.hierarchy.HierarchySearch): the\n                hierarchy search\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchySearchResults) - the hierarchy\n                search results", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_query`` or\n                ``hierarchy_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``hierarchy_query`` or\n                ``hierarchy_search`` is not of this service", 
               "sphinx_param_doc": "        :param hierarchy_query: the hierarchy query\n        :type hierarchy_query: ``osid.hierarchy.HierarchyQuery``\n        :param hierarchy_search: the hierarchy search\n        :type hierarchy_search: ``osid.hierarchy.HierarchySearch``\n", 
               "sphinx_return_doc": "        :return: the hierarchy search results\n        :rtype: ``osid.hierarchy.HierarchySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_query`` or ``hierarchy_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``hierarchy_query`` or ``hierarchy_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyQuery", 
                     "var_name": "hierarchy_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.hierarchy.HierarchySearch", 
                     "var_name": "hierarchy_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyQuery", 
                  "osid.hierarchy.HierarchySearch"
               ], 
               "return_type": "osid.hierarchy.HierarchySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_query_from_inspector", 
               "doc": {
                  "headline": "Gets a hierarchy query from an inspector.", 
                  "body": "        The inspector is available from a ``HierarchySearchResults``."
               }, 
               "arg_doc": "        arg:    hierarchy_query_inspector\n                (osid.hierarchy.HierarchyQueryInspector): a hierarchy\n                query inspector\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyQuery) - the hierarchy query", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_query_inspector`` is ``null``\n        raise:  Unsupported - ``hierarchy_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param hierarchy_query_inspector: a hierarchy query inspector\n        :type hierarchy_query_inspector: ``osid.hierarchy.HierarchyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the hierarchy query\n        :rtype: ``osid.hierarchy.HierarchyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``hierarchy_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyQueryInspector", 
                     "var_name": "hierarchy_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyQueryInspector"
               ], 
               "return_type": "osid.hierarchy.HierarchyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyAdminSession", 
         "shortname": "HierarchyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Hierarchies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Hierarchy,`` a ``HierarchyForm`` is requested using\n    ``get_hierarchy_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``HierarchyForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``HierarchyForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``HierarchyForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``HierarchyForms`` are requested to the ``Hierarchy``\n    ``Id`` that is to be updated using ``getHierarchyFormForUpdate()``.\n    Similarly, the ``HierarchyForm`` has metadata about the data that\n    can be updated and it can perform validation before submitting the\n    update. The ``HierarchyForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``Hierarchies``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_hierarchies", 
            "can_create_hierarchy_with_record_types", 
            "get_hierarchy_form_for_create", 
            "create_hierarchy", 
            "can_update_hierarchies", 
            "get_hierarchy_form_for_update", 
            "update_hierarchy", 
            "can_delete_hierarchies", 
            "delete_hierarchy", 
            "can_manage_hierarchy_aliases", 
            "alias_hierarchy"
         ], 
         "methods": [
            {
               "name": "can_create_hierarchies", 
               "doc": {
                  "headline": "Tests if this user can create ``Hierarchy`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``Hierarchy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Hierarchy`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Hierarchy`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_hierarchy_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Hierarchy`` using the desired record types.", 
                  "body": "        While ``HierarchyManager.getHierarchyRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Hierarchy``.\n        Providing an empty array tests if a ``Hierarchy`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    hierarchy_record_types (osid.type.Type[]): array of\n                hierarchy record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Hierarchy`` creation using the\n                specified ``Types`` is supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param hierarchy_record_types: array of hierarchy record types\n        :type hierarchy_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Hierarchy`` creation using the specified ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "hierarchy_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_form_for_create", 
               "doc": {
                  "headline": "Gets the hierarchy form for creating new hierarchies.", 
                  "body": "        A new form should be requested for each create transaction. This\n        method is used for creating new hierarchies, where only the\n        ``Hierarchy`` ``Type`` is known."
               }, 
               "arg_doc": "        arg:    hierarchy_record_types (osid.type.Type[]): array of\n                hierarchy record types\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyForm) - the hierarchy form", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param hierarchy_record_types: array of hierarchy record types\n        :type hierarchy_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the hierarchy form\n        :rtype: ``osid.hierarchy.HierarchyForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "hierarchy_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.hierarchy.HierarchyForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_hierarchy", 
               "doc": {
                  "headline": "Creates a new ``Hierarchy``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_form (osid.hierarchy.HierarchyForm): the form\n                for this ``Hierarchy``\n", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the new ``Hierarchy``", 
               "error_doc": "        raise:  IllegalState - ``hierarchy_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``hierarchy_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``hierarchy_form`` did not originate from\n                ``get_hierarchy_form_for_create()``", 
               "sphinx_param_doc": "        :param hierarchy_form: the form for this ``Hierarchy``\n        :type hierarchy_form: ``osid.hierarchy.HierarchyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Hierarchy``\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``hierarchy_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``hierarchy_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``hierarchy_form`` did not originate from ``get_hierarchy_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyForm", 
                     "var_name": "hierarchy_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyForm"
               ], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_hierarchies", 
               "doc": {
                  "headline": "Tests if this user can update ``Hierarchy`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Hierarchy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Hierarchy`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Hierarchy`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_form_for_update", 
               "doc": {
                  "headline": "Gets the hierarchy form for updating an existing hierarchy.", 
                  "body": "        A new hierarchy form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the\n                ``Hierarchy``\n", 
               "return_doc": "        return: (osid.hierarchy.HierarchyForm) - the hierarchy form", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` is not found\n        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the ``Hierarchy``\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the hierarchy form\n        :rtype: ``osid.hierarchy.HierarchyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` is not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.hierarchy.HierarchyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_hierarchy", 
               "doc": {
                  "headline": "Updates an existing hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_form (osid.hierarchy.HierarchyForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``hierarchy_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``hierarchy_id`` or ``hierarchy_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``hierarchy_form`` did not originate from\n                ``get_hierarchy_form_for_update()``", 
               "sphinx_param_doc": "        :param hierarchy_form: the form containing the elements to be updated\n        :type hierarchy_form: ``osid.hierarchy.HierarchyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``hierarchy_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``hierarchy_id`` or ``hierarchy_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``hierarchy_form`` did not originate from ``get_hierarchy_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchyForm", 
                     "var_name": "hierarchy_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_hierarchies", 
               "doc": {
                  "headline": "Tests if this user can delete ``Hierarchy`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Hierarchy`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Hierarchy`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Hierarchy`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_hierarchy", 
               "doc": {
                  "headline": "Deletes a ``Hierarchy``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the\n                ``Hierarchy`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``hierarchy_id`` not found\n        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the ``Hierarchy`` to remove\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``hierarchy_id`` not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_hierarchy_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Hierarchy`` objects.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Hierarchy`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Hierarchy`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_hierarchy", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Hierarchy`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Hierarchy`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another vault it is\n        reassigned to the given vault ``Id``."
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of an\n                ``Hierarchy``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``hierarchy_id`` not found\n        raise:  NullArgument - ``hierarchy_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of an ``Hierarchy``\n        :type hierarchy_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``hierarchy_id`` not found\n        :raise: ``NullArgument`` -- ``hierarchy_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyNotificationSession", 
         "shortname": "HierarchyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Hierarchy`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Hierarchy`` object\n    itself. Adding and removing ``Ids`` result in notifications\n    available from the ``HierarchyNodeNotificationSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_hierarchy_notifications", 
            "register_for_new_hierarchies", 
            "register_for_changed_hierarchies", 
            "register_for_changed_hierarchy", 
            "register_for_deleted_hierarchies", 
            "register_for_deleted_hierarchy"
         ], 
         "methods": [
            {
               "name": "can_register_for_hierarchy_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Hierarchy`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_hierarchies", 
               "doc": {
                  "headline": "Register for notifications of new hierarchies.", 
                  "body": "        ``HierarchyReceiver.newHierarchy()`` is invoked when a new\n        ``Hierarchy`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_hierarchies", 
               "doc": {
                  "headline": "Registers for notification of updated hierarchies.", 
                  "body": "        ``HierarchyReceiver.changedHierarchy()`` is invoked when a\n        hierarchy is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_hierarchy", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy.", 
                  "body": "        ``HierarchyReceiver.changedHierarchy()`` is invoked when the\n        specified hierarchy is changed."
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the\n                ``hierarchy`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the ``hierarchy`` to monitor\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_hierarchies", 
               "doc": {
                  "headline": "Registers for notification of deleted hierarchies.", 
                  "body": "        ``HierarchyReceiver.deletedHierarchy()`` is invoked when a\n        hierarchy is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_hierarchy", 
               "doc": {
                  "headline": "Registers for notification of a deleted hierarchy.", 
                  "body": "        ``HierarchyReceiver.deletedHierarchy()`` is invoked when the\n        specified hierarchy is deleted."
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the\n                ``Hierarchy`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the ``Hierarchy`` to monitor\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyStructureReceiver", 
         "shortname": "HierarchyStructureReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The hierarchy receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted hierarchy nodes.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_node", 
            "new_ancestor", 
            "deleted_ancestor", 
            "new_descendant", 
            "deleted_descendant", 
            "deleted_node"
         ], 
         "methods": [
            {
               "name": "new_node", 
               "doc": {
                  "headline": "The callback for notifications of new hierarchy nodes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the new node\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the new node\n        :type node_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor", 
               "doc": {
                  "headline": "The callback for notification of a change to the node's ancestry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the registered node\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the registered node\n        :type node_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor", 
               "doc": {
                  "headline": "The callback for notification of a change to the node's ancestry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the registered node\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the deleted\n                ancestor\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the registered node\n        :type node_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the deleted ancestor\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant", 
               "doc": {
                  "headline": "The callback for notification of a change to the node's descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the registered node\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new\n                descednant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the registered node\n        :type node_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new descednant\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant", 
               "doc": {
                  "headline": "The callback for notification of a change to the node's descendants.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the registered node\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the deleted\n                descednant\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the registered node\n        :type node_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the deleted descednant\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_node", 
               "doc": {
                  "headline": "the callback for notification of deleted hierarchy nodes.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    node_id (osid.id.Id): the ``Id`` of the deleted node\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param node_id: the ``Id`` of the deleted node\n        :type node_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "node_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.Hierarchy", 
         "shortname": "Hierarchy", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Hierarchy`` represents an authenticatable identity.", 
            "body": "    Like all OSID objects, a ``Hierarchy`` is identified by its Id and\n    any persisted references should use the Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_hierarchy_record"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_record", 
               "doc": {
                  "headline": "Gets the hierarchy record corresponding to the given ``Hierarchy`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``hierarchy_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(hierarchy_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): the type of the\n                record to retrieve\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchyRecord) - the hierarchy\n                record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchyrecord_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: the type of the record to retrieve\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy record\n        :rtype: ``osid.hierarchy.records.HierarchyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchyrecord_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchyRecord", 
         "shortname": "HierarchyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Hierarchy``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyQuery", 
         "shortname": "HierarchyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching hierarchies.", 
            "body": "    Results are returned if all the specified elements match. Each\n    method match request produces an ``AND`` term while multiple\n    invocations of a method produces a nested ``OR,`` except for\n    accessing the ``HierarchyQuery`` record."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_node_id", 
            "match_any_node_id", 
            "clear_node_id_terms", 
            "get_hierarchy_query_record"
         ], 
         "methods": [
            {
               "name": "match_node_id", 
               "doc": {
                  "headline": "Matches an ``Id`` of a node in this hierarchy.", 
                  "body": "        Multiple nodes can be added to this query which behave as a\n        boolean ``AND``."
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if a positive match, ``false``\n                for negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``id`` is ``null``", 
               "sphinx_param_doc": "        :param id: ``Id`` to match\n        :type id: ``osid.id.Id``\n        :param match: ``true`` if a positive match, ``false`` for negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_node_id", 
               "doc": {
                  "headline": "Matches hierarchies with any node.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match hierarchies with any\n                nodes, ``false`` to match hierarchies with no nodes\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match hierarchies with any nodes, ``false`` to match hierarchies with no nodes\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_node_id_terms", 
               "doc": {
                  "headline": "Clears the node ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_query_record", 
               "doc": {
                  "headline": "Gets the hierarchy record query corresponding to the given ``Hierarchy`` record ``Type``.", 
                  "body": "        Multiple record retrievals of the same type may return the same\n        underlying object and do not result in adding terms to the\n        query. Multiple record retrievals of different types add ``AND``\n        terms to the other elements set in this form."
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): a hierarchy\n                record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchyQueryRecord) - the\n                hierarchy query record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: a hierarchy record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy query record\n        :rtype: ``osid.hierarchy.records.HierarchyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchyQueryRecord", 
         "shortname": "HierarchyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyQueryInspector", 
         "shortname": "HierarchyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining hierarchy queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_node_id_terms", 
            "get_hierarchy_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_node_id_terms", 
               "doc": {
                  "headline": "Gets the node ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_query_inspector_record", 
               "doc": {
                  "headline": "Gets the hierarchy query inspector record corresponding to the given ``Hierarchy`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): a hierarchy\n                record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchyQueryInspectorRecord) -\n                the hierarchy query inspector record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: a hierarchy record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy query inspector record\n        :rtype: ``osid.hierarchy.records.HierarchyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchyQueryInspectorRecord", 
         "shortname": "HierarchyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyForm", 
         "shortname": "HierarchyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Hierarchy`` objects.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``HierarchyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_hierarchy_form_record"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_form_record", 
               "doc": {
                  "headline": "Gets the ``HierarchyFormRecord`` corresponding to the given hierarchy record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): the hierarchy\n                record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchyFormRecord) - the\n                hierarchy form record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: the hierarchy record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy form record\n        :rtype: ``osid.hierarchy.records.HierarchyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchyFormRecord", 
         "shortname": "HierarchyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchySearchOrder", 
         "shortname": "HierarchySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_hierarchy_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_hierarchy_search_order_record", 
               "doc": {
                  "headline": "Gets the hierarchy search order record corresponding to the given hierarchy record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    hierarchy_record_type (osid.type.Type): a hierarchy\n                record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchySearchOrderRecord) -\n                the hierarchy search order record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_record_type: a hierarchy record type\n        :type hierarchy_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy search order record\n        :rtype: ``osid.hierarchy.records.HierarchySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchySearchOrderRecord", 
         "shortname": "HierarchySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchySearch", 
         "shortname": "HierarchySearch", 
         "category": "searches", 
         "doc": {
            "headline": "``HierarchySearch`` defines the interface for specifying hierarchy search options.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_hierarchies", 
            "order_hierarchy_results", 
            "get_hierarchy_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_hierarchies", 
               "doc": {
                  "headline": "Execute this search using a given list of hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_ids (osid.id.IdList): list of hierarchies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_ids`` is ``null``", 
               "sphinx_param_doc": "        :param hierarchy_ids: list of hierarchies\n        :type hierarchy_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "hierarchy_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_hierarchy_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_search_order\n                (osid.hierarchy.HierarchySearchOrder): hierarchy search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_search_order`` is ``null``\n        raise:  Unsupported - ``hierarchy_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param hierarchy_search_order: hierarchy search order\n        :type hierarchy_search_order: ``osid.hierarchy.HierarchySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``hierarchy_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.hierarchy.HierarchySearchOrder", 
                     "var_name": "hierarchy_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.hierarchy.HierarchySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_search_record", 
               "doc": {
                  "headline": "Gets the hierarchy search record corresponding to the given hierarchy search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    hierarchy_search_record_type (osid.type.Type): a\n                hierarchy search record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchySearchRecord) - the\n                hierarchy search record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(hierarchy_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param hierarchy_search_record_type: a hierarchy search record type\n        :type hierarchy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy search record\n        :rtype: ``osid.hierarchy.records.HierarchySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchySearchRecord", 
         "shortname": "HierarchySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchySearchResults", 
         "shortname": "HierarchySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_hierarchies", 
            "get_hierarchy_query_inspector", 
            "get_hierarchy_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_hierarchies", 
               "doc": {
                  "headline": "Gets the hierarchy list resulting from the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyList) - the hierarchy list", 
               "error_doc": "        raise:  IllegalState - the hierarchy list was already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy list\n        :rtype: ``osid.hierarchy.HierarchyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- the hierarchy list was already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_hierarchy_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.HierarchyQueryInspector) - the hierarchy\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy query inspector\n        :rtype: ``osid.hierarchy.HierarchyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.HierarchyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_hierarchy_search_results_record", 
               "doc": {
                  "headline": "Gets the hierarchy search results record corresponding to the given hierarchy search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    hierarchy_search_record_type (osid.type.Type): a\n                hierarchy search record type\n", 
               "return_doc": "        return: (osid.hierarchy.records.HierarchySearchResultsRecord) -\n                the hierarchy search results record", 
               "error_doc": "        raise:  NullArgument - ``hierarchy_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(hierarchy_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param hierarchy_search_record_type: a hierarchy search record type\n        :type hierarchy_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the hierarchy search results record\n        :rtype: ``osid.hierarchy.records.HierarchySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``hierarchy_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(hierarchy_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "hierarchy_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.hierarchy.records.HierarchySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.records.HierarchySearchResultsRecord", 
         "shortname": "HierarchySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``HierarchySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyReceiver", 
         "shortname": "HierarchyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The hierarchy receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Hierarchy`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_hierarchy", 
            "changed_hierarchy", 
            "deleted_hierarchy"
         ], 
         "methods": [
            {
               "name": "new_hierarchy", 
               "doc": {
                  "headline": "The callback for notifications of new hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the new\n                ``Hierarchy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the new ``Hierarchy``\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_hierarchy", 
               "doc": {
                  "headline": "The callback for notification of updated hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the updated\n                ``Hierarchy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the updated ``Hierarchy``\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_hierarchy", 
               "doc": {
                  "headline": "the callback for notification of deleted hierarchies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    hierarchy_id (osid.id.Id): the ``Id`` of the deleted\n                ``Hierarchy``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param hierarchy_id: the ``Id`` of the deleted ``Hierarchy``\n        :type hierarchy_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "hierarchy_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.HierarchyList", 
         "shortname": "HierarchyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``HierarchyList`` provides a means for accessing ``Id`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (hl.hasNext()) { Hierarchy hierarchy =\n    hl.getNextHierarchy(); }\n\n    or\n      while (hl.hasNext()) {\n           Hierarchy[] hierarchies = hl.getNextHierarchies(hl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_hierarchy", 
            "get_next_hierarchies"
         ], 
         "methods": [
            {
               "name": "get_next_hierarchy", 
               "doc": {
                  "headline": "Gets the next ``Hierarchy`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the next ``Hierarchy`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``Hierarchy`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Hierarchy`` in this list. The ``has_next()`` method should be used to test that a next ``Hierarchy`` is available before calling this method.\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_hierarchies", 
               "doc": {
                  "headline": "Gets the next set of ``Hierarchy`` objects in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Hierarchy`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - an array of ``Hierarchy``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Hierarchy`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Hierarchy`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.Node", 
         "shortname": "Node", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the hierarchy traversal\n    session."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_parents", 
            "get_children"
         ], 
         "methods": [
            {
               "name": "get_parents", 
               "doc": {
                  "headline": "Gets the parents of this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.NodeList) - the parents of this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this node\n        :rtype: ``osid.hierarchy.NodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.NodeList", 
               "errors": {}
            }, 
            {
               "name": "get_children", 
               "doc": {
                  "headline": "Gets the children of this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.NodeList) - the children of this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this node\n        :rtype: ``osid.hierarchy.NodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.NodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.hierarchy.NodeList", 
         "shortname": "NodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``NodeList`` provides a means for accessing ``Id`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (nl.hasNext()) { Node node = nl.getNextNode(); }\n\n    or\n      while (nl.hasNext()) {\n           Node[] nodes = nl.getNextNodes(nl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_node", 
            "get_next_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_node", 
               "doc": {
                  "headline": "Gets the next ``Node`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Node) - the next ``Node`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Node`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Node`` in this list. The ``has_next()`` method should be used to test that a next ``Node`` is available before calling this method.\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``Node`` objects in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Node`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - an array of ``Node``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Node`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Node`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.hierarchy"
}
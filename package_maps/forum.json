{
   "name": "forum", 
   "version": "3.0.0", 
   "title": "Reply Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Forum OSID defines threaded diiscussion groups managing a set of\nposts and replies.\n\nPosts\n\nA ``Post`` is an ``OsidObject`` that defines some text, a timestamp, and\na poster.\n\nReplies\n\nA ``Reply`` is similar to a ``Post`` but is in response to either a\n``Post`` or another ``Reply``. A ``Reply`` is a ``Containable`` making\ndirectly accessible any nested ``Replies`` outside of the session.\n\nPosters\n\nAn ``Agent`` posts to a ``Forum`` or an ``Agent`` replies to a ``Post``.\nThe relationship between the ``Agent`` and its associated ``Resource``\nis orchestrated within the Froum OSID. ``Posts`` and ``Replies`` reveal\nboth the posting ``Agent`` and the associated poster ``Resource``.\n\nForum Catalogs\n\nForums represent collections of ``Posts``. Forums may be created through\nfederation or by selecting ``Posts`` based on their attributes to create\na virtual catalog of Posts. ``Replies`` are always associated with their\n``Posts`` and may not be cataloged independently.\n\nSub Packages\n\nThe Forum OSID contains a Forum Batch OSID for managing ``Posts`` and\n``Replies`` in bulk.", 
   "interfaces": [
      {
         "fullname": "osid.forum.ForumProfile", 
         "shortname": "ForumProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The reply profile describes the interoperability among forum services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_post_lookup", 
            "supports_post_query", 
            "supports_post_search", 
            "supports_post_admin", 
            "supports_post_notification", 
            "supports_post_forum", 
            "supports_post_forum_assignment", 
            "supports_post_smart_forum", 
            "supports_reply_lookup", 
            "supports_reply_admin", 
            "supports_reply_notification", 
            "supports_forum_lookup", 
            "supports_forum_query", 
            "supports_forum_search", 
            "supports_forum_admin", 
            "supports_forum_notification", 
            "supports_forum_hierarchy", 
            "supports_forum_hierarchy_design", 
            "supports_forum_batch", 
            "get_post_record_types", 
            "supports_post_record_type", 
            "get_post_search_record_types", 
            "supports_post_search_record_type", 
            "get_reply_record_types", 
            "supports_reply_record_type", 
            "get_reply_search_record_types", 
            "supports_reply_search_record_type", 
            "get_forum_record_types", 
            "supports_forum_record_type", 
            "get_forum_search_record_types", 
            "supports_forum_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any post federation is exposed.", 
                  "body": "        Federation is exposed when a specific post may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of posts appears as a\n        single post."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supproted,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supproted, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_lookup", 
               "doc": {
                  "headline": "Tests for the availability of an post lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_query", 
               "doc": {
                  "headline": "Tests if querying posts is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_search", 
               "doc": {
                  "headline": "Tests if searching for posts is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_admin", 
               "doc": {
                  "headline": "Tests for the availability of a post administrative service for creating and deleting posts.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post administration is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post administration is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_notification", 
               "doc": {
                  "headline": "Tests for the availability of a post notification service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_forum", 
               "doc": {
                  "headline": "Tests if a post to forum lookup session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post forum lookup session is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post forum lookup session is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_forum_assignment", 
               "doc": {
                  "headline": "Tests if a post to forum assignment session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post forum assignment is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post forum assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_post_smart_forum", 
               "doc": {
                  "headline": "Tests if a post smart foruming session is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if post smart foruming is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if post smart foruming is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_lookup", 
               "doc": {
                  "headline": "Tests for the availability of a reply lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if reply lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if reply lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_admin", 
               "doc": {
                  "headline": "Tests if searching for replies is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if reply search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if reply search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_notification", 
               "doc": {
                  "headline": "Tests if reply notification is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if reply notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if reply notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_lookup", 
               "doc": {
                  "headline": "Tests for the availability of an forum lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_query", 
               "doc": {
                  "headline": "Tests if querying forums is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_search", 
               "doc": {
                  "headline": "Tests if searching for forums is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_admin", 
               "doc": {
                  "headline": "Tests for the availability of a forum administrative service for creating and deleting forums.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum administration is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum administration is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_notification", 
               "doc": {
                  "headline": "Tests for the availability of a forum notification service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a forum hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a forum hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_batch", 
               "doc": {
                  "headline": "Tests if forum batch service is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if forum batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if forum batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Post`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                post record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported post record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_post_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Post`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Post`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param post_record_type: a ``Type`` indicating a ``Post`` record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_record_types", 
               "doc": {
                  "headline": "Gets the supported post search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                post search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported post search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_post_search_record_type", 
               "doc": {
                  "headline": "Tests if the given post search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_search_record_type (osid.type.Type): a ``Type``\n                indicating a post record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``post_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param post_search_record_type: a ``Type`` indicating a post record type\n        :type post_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Reply`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                reply record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported reply record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Reply`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): a ``Type``\n                indicating a ``Reply`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param reply_record_type: a ``Type`` indicating a ``Reply`` record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_search_record_types", 
               "doc": {
                  "headline": "Gets the supported reply search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                reply search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported reply search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_search_record_type", 
               "doc": {
                  "headline": "Tests if the given reply search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_search_record_type (osid.type.Type): a ``Type``\n                indicating a reply record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``reply_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param reply_search_record_type: a ``Type`` indicating a reply record type\n        :type reply_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Forum`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                forum record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported forum record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Forum`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): a ``Type``\n                indicating a ``Forum`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param forum_record_type: a ``Type`` indicating a ``Forum`` record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_search_record_types", 
               "doc": {
                  "headline": "Gets the supported forum search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                forum search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported forum search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_search_record_type", 
               "doc": {
                  "headline": "Tests if the given forum search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_search_record_type (osid.type.Type): a ``Type``\n                indicating a forum record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``forum_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param forum_search_record_type: a ``Type`` indicating a forum record type\n        :type forum_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumManager", 
         "shortname": "ForumManager", 
         "category": "managers", 
         "doc": {
            "headline": "The reply manager provides access to forum sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``PostLookupSession:`` a session to retrieve posts\n      * ``PostQuerySession:`` a session to query posts\n      * ``PostSearchSession:`` a session to search for posts\n      * ``PostAdminSession:`` a session to create, update and delete\n        posts\n      * ``PostNotificationSession:`` a session to receive notifications\n        for changes in posts\n      * ``PostForumSession:`` a session to lookup post forum mappings\n      * ``PostForumAssignmentSession:`` a session to manage post forum\n        mappings\n      * ``PostSmartForumSession:`` a session to manage smart forums of\n        posts\n    \n      * ``ReplyLookupSession:`` a session to lookup replies\n      * ``ReplyAdminSession:`` a session to manage replies\n      * ``ReplyNotificationSession:`` a session to subscribe to\n        notifications of reply changes\n    \n      * ``ForumLookupSession:`` a session to retrieve forums\n      * ``ForumQuerySession:`` a session to query forums\n      * ``ForumSearchSession:`` a session to search for forums\n      * ``ForumAdminSession:`` a session to create, update and delete\n        forums\n      * ``ForumNotificationSession:`` a session to receive notifications\n        for changes in forums\n      * ``ForumHierarchySession:`` a session to traverse hierarchies of\n        forums\n      * ``ForumHierarchyDesignSession:`` a session to manage hierarchies\n        of forums\n\n    \n    The forum manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.forum.ForumProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "ForumProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "forum"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "forum", 
               "name": "ForumProfile"
            }
         ], 
         "method_names": [
            "get_post_lookup_session", 
            "get_post_lookup_session_for_forum", 
            "get_post_query_session", 
            "get_post_query_session_for_forum", 
            "get_post_search_session", 
            "get_post_search_session_for_forum", 
            "get_post_admin_session", 
            "get_post_admin_session_for_forum", 
            "get_post_notification_session", 
            "get_post_notification_session_for_forum", 
            "get_post_forum_session", 
            "get_post_forum_assignment_session", 
            "get_post_smart_forum_session", 
            "get_reply_lookup_session", 
            "get_reply_lookup_session_for_forum", 
            "get_reply_admin_session", 
            "get_reply_admin_session_for_forum", 
            "get_reply_notification_session", 
            "get_reply_notification_session_for_forum", 
            "get_forum_lookup_session", 
            "get_forum_query_session", 
            "get_forum_search_session", 
            "get_forum_admin_session", 
            "get_forum_notification_session", 
            "get_forum_hierarchy_session", 
            "get_forum_hierarchy_design_session", 
            "get_forum_batch_manager"
         ], 
         "methods": [
            {
               "name": "get_post_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostLookupSession) - a ``PostLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostLookupSession``\n        :rtype: ``osid.forum.PostLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_lookup_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post lookup service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.PostLookupSession) - a ``PostLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Post``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostLookupSession``\n        :rtype: ``osid.forum.PostLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQuerySession) - a ``PostQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostQuerySession``\n        :rtype: ``osid.forum.PostQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post query service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.PostQuerySession) - a ``PostQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Post``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostQuerySession``\n        :rtype: ``osid.forum.PostQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostSearchSession) - a ``PostSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostSearchSession``\n        :rtype: ``osid.forum.PostSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post search service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.PostSearchSession) - a ``PostSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Post``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostSearchSession``\n        :rtype: ``osid.forum.PostSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostAdminSession) - a ``PostAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostAdminSession``\n        :rtype: ``osid.forum.PostAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_admin_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post administrative service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.PostAdminSession) - a ``PostAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Post``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostAdminSession``\n        :rtype: ``osid.forum.PostAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_receiver (osid.forum.PostReceiver): the receiver\n", 
               "return_doc": "        return: (osid.forum.PostNotificationSession) - a\n                ``PostNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``post_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_receiver: the receiver\n        :type post_receiver: ``osid.forum.PostReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``PostNotificationSession``\n        :rtype: ``osid.forum.PostNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostReceiver", 
                     "var_name": "post_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostReceiver"
               ], 
               "return_type": "osid.forum.PostNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_notification_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post notification service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_receiver (osid.forum.PostReceiver): the receiver\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.PostNotificationSession) - a\n                ``PostNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``post_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param post_receiver: the receiver\n        :type post_receiver: ``osid.forum.PostReceiver``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostNotificationSession``\n        :rtype: ``osid.forum.PostNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``post_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostReceiver", 
                     "var_name": "post_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_forum_session", 
               "doc": {
                  "headline": "Gets the session for retrieving post to forum mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostForumSession) - a ``PostForumSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_forum()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostForumSession``\n        :rtype: ``osid.forum.PostForumSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_forum()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_forum()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostForumSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_forum_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning post to forum mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostForumAssignmentSession) - a\n                ``PostForumAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_forum_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``PostForumAssignmentSession``\n        :rtype: ``osid.forum.PostForumAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_forum_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_forum_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostForumAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_smart_forum_session", 
               "doc": {
                  "headline": "Gets the session associated with the post smart forum for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the forum\n", 
               "return_doc": "        return: (osid.forum.PostSmartForumSession) - a\n                ``PostSmartForumSession``", 
               "error_doc": "        raise:  NotFound - ``forum_id`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_smart_forum()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``PostSmartForumSession``\n        :rtype: ``osid.forum.PostSmartForumSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_smart_forum()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_smart_forum()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostSmartForumSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyLookupSession) - a\n                ``ReplyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ReplyLookupSession``\n        :rtype: ``osid.forum.ReplyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_lookup_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply lookup service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.ReplyLookupSession) - a\n                ``ReplyLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyLookupSession``\n        :rtype: ``osid.forum.ReplyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyAdminSession) - a ``ReplyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ReplyAdminSession``\n        :rtype: ``osid.forum.ReplyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_admin_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply administration service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.ReplyAdminSession) - a ``ReplyAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyAdminSession``\n        :rtype: ``osid.forum.ReplyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_receiver (osid.forum.ReplyReceiver): the receiver\n", 
               "return_doc": "        return: (osid.forum.ReplyNotificationSession) - a\n                ``ReplyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``reply_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_receiver: the receiver\n        :type reply_receiver: ``osid.forum.ReplyReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyNotificationSession``\n        :rtype: ``osid.forum.ReplyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyReceiver", 
                     "var_name": "reply_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyReceiver"
               ], 
               "return_type": "osid.forum.ReplyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_notification_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply notification service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_receiver (osid.forum.ReplyReceiver): the receiver\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.ReplyNotificationSession) - a\n                ``ReplyNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``reply_receiver`` or ``forum_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param reply_receiver: the receiver\n        :type reply_receiver: ``osid.forum.ReplyReceiver``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyNotificationSession``\n        :rtype: ``osid.forum.ReplyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``reply_receiver`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyReceiver", 
                     "var_name": "reply_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumLookupSession) - a\n                ``ForumLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumLookupSession``\n        :rtype: ``osid.forum.ForumLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuerySession) - a ``ForumQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumQuerySession``\n        :rtype: ``osid.forum.ForumQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumSearchSession) - a\n                ``ForumSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumSearchSession``\n        :rtype: ``osid.forum.ForumSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumAdminSession) - a ``ForumAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumAdminSession``\n        :rtype: ``osid.forum.ForumAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_receiver (osid.forum.ForumReceiver): the receiver\n", 
               "return_doc": "        return: (osid.forum.ForumNotificationSession) - a\n                ``ForumNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``forum_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_receiver: the receiver\n        :type forum_receiver: ``osid.forum.ForumReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``ForumNotificationSession``\n        :rtype: ``osid.forum.ForumNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumReceiver", 
                     "var_name": "forum_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumReceiver"
               ], 
               "return_type": "osid.forum.ForumNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumHierarchySession) - a\n                ``ForumHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumHierarchySession``\n        :rtype: ``osid.forum.ForumHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumHierarchyDesignSession) - a\n                ``ForumHierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumHierarchyDesignSession``\n        :rtype: ``osid.forum.ForumHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_batch_manager", 
               "doc": {
                  "headline": "Gets a ``ForumBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.batch.ForumBatchManager) - a\n                ``ForumBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_batch()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumBatchManager``\n        :rtype: ``osid.forum.batch.ForumBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.batch.ForumBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumProxyManager", 
         "shortname": "ForumProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The reply manager provides access to forum sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager accept a ``Proxy`` for passing information\n    from a server environment. The sessions included in this manager\n    are:\n\n      * ``PostLookupSession:`` a session to retrieve posts\n      * ``PostQuerySession:`` a session to query posts\n      * ``PostSearchSession:`` a session to search for posts\n      * ``PostAdminSession:`` a session to create, update and delete\n        posts\n      * ``PostNotificationSession:`` a session to receive notifications\n        for changes in posts\n      * ``PostForumSession:`` a session to lookup post forum mappings\n      * ``PostForumAssignmentSession:`` a session to manage post forum\n        mappings\n      * ``PostSmartForumSession:`` a session to manage smart forums of\n        posts\n    \n      * ``ReplyLookupSession:`` a session to lookup replies\n      * ``ReplyAdminSession:`` a session to manage replies\n      * ``ReplyNotificationSession:`` a session to subscribe to\n        notifications of reply changes\n    \n      * ``ForumLookupSession:`` a session to retrieve forums\n      * ``ForumQuerySession:`` a session to query forums\n      * ``ForumSearchSession:`` a session to search for forums\n      * ``ForumAdminSession:`` a session to create, update and delete\n        forums\n      * ``ForumNotificationSession:`` a session to receive notifications\n        for changes in forums\n      * ``ForumHierarchySession:`` a session to traverse hierarchies of\n        forums\n      * ``ForumHierarchyDesignSession:`` a session to manage hierarchies\n        of forums\n\n    \n    The forum manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.forum.ForumProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "ForumProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "forum"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "forum", 
               "name": "ForumProfile"
            }
         ], 
         "method_names": [
            "get_post_lookup_session", 
            "get_post_lookup_session_for_forum", 
            "get_post_query_session", 
            "get_post_query_session_for_forum", 
            "get_post_search_session", 
            "get_post_search_session_for_forum", 
            "get_post_admin_session", 
            "get_post_admin_session_for_forum", 
            "get_post_notification_session", 
            "get_post_notification_session_for_forum", 
            "get_post_forum_session", 
            "get_post_forum_assignment_session", 
            "get_post_smart_forum_session", 
            "get_reply_lookup_session", 
            "get_reply_lookup_session_for_forum", 
            "get_reply_admin_session", 
            "get_reply_admin_session_for_forum", 
            "get_reply_notification_session", 
            "get_reply_notification_session_for_forum", 
            "get_forum_lookup_session", 
            "get_forum_query_session", 
            "get_forum_search_session", 
            "get_forum_admin_session", 
            "get_forum_notification_session", 
            "get_forum_hierarchy_session", 
            "get_forum_hierarchy_design_session", 
            "get_forum_batch_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_post_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostLookupSession) - a ``PostLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostLookupSession``\n        :rtype: ``osid.forum.PostLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_lookup_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post lookup service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostLookupSession) - a ``PostLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostLookupSession``\n        :rtype: ``osid.forum.PostLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostQuerySession) - a ``PostQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostQuerySession``\n        :rtype: ``osid.forum.PostQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post query service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostQuerySession) - a ``PostQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Post`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostQuerySession``\n        :rtype: ``osid.forum.PostQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Post`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostSearchSession) - a ``PostSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostSearchSession``\n        :rtype: ``osid.forum.PostSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post search service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostSearchSession) - a ``PostSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Post`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostSearchSession``\n        :rtype: ``osid.forum.PostSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Post`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostAdminSession) - a ``PostAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostAdminSession``\n        :rtype: ``osid.forum.PostAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_admin_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post administration service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostAdminSession) - a ``PostAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Post`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostAdminSession``\n        :rtype: ``osid.forum.PostAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Post`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_receiver (osid.forum.PostReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostNotificationSession) - a\n                ``PostNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``post_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_receiver: the receiver\n        :type post_receiver: ``osid.forum.PostReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostNotificationSession``\n        :rtype: ``osid.forum.PostNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostReceiver", 
                     "var_name": "post_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_notification_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the post notification service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_receiver (osid.forum.PostReceiver): the receiver\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostNotificationSession) - a\n                ``PostNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Post`` found by the given ``Id``\n        raise:  NullArgument - ``post_receiver, forum_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param post_receiver: the receiver\n        :type post_receiver: ``osid.forum.PostReceiver``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostNotificationSession``\n        :rtype: ``osid.forum.PostNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Post`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``post_receiver, forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostReceiver", 
                     "var_name": "post_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_forum_session", 
               "doc": {
                  "headline": "Gets the session for retrieving post to forum mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostForumSession) - a ``PostForumSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_forum()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostForumSession``\n        :rtype: ``osid.forum.PostForumSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_forum()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_forum()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostForumSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_forum_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning post to forum mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostForumAssignmentSession) - a\n                ``PostForumAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_forum_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``PostForumAssignmentSession``\n        :rtype: ``osid.forum.PostForumAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_forum_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_forum_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostForumAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_smart_forum_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic post forums for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.PostSmartForumSession) - ``forum_id`` not\n                found", 
               "error_doc": "        raise:  NotFound - ``forum_id`` or ``proxy`` is ``null``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_post_smart_forum()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: ``forum_id`` not found\n        :rtype: ``osid.forum.PostSmartForumSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_post_smart_forum()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_smart_forum()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.PostSmartForumSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyLookupSession) - a\n                ``ReplyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyLookupSession``\n        :rtype: ``osid.forum.ReplyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_lookup_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply lookup service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyLookupSession) - a\n                ``ReplyLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyLookupSession``\n        :rtype: ``osid.forum.ReplyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyAdminSession) - a ``ReplyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyAdminSession``\n        :rtype: ``osid.forum.ReplyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_admin_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply administration service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyAdminSession) - a ``ReplyAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``forum_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyAdminSession``\n        :rtype: ``osid.forum.ReplyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_receiver (osid.forum.ReplyReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyNotificationSession) - a\n                ``ReplyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``reply_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_receiver: the receiver\n        :type reply_receiver: ``osid.forum.ReplyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyNotificationSession``\n        :rtype: ``osid.forum.ReplyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyReceiver", 
                     "var_name": "reply_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_notification_session_for_forum", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the reply notification service for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_receiver (osid.forum.ReplyReceiver): the receiver\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ReplyNotificationSession) - a\n                ``ReplyNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Forum`` found by the given ``Id``\n        raise:  NullArgument - ``reply_receiver, forum_id,`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_reply_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param reply_receiver: the receiver\n        :type reply_receiver: ``osid.forum.ReplyReceiver``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ReplyNotificationSession``\n        :rtype: ``osid.forum.ReplyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Forum`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``reply_receiver, forum_id,`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_reply_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyReceiver", 
                     "var_name": "reply_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ReplyNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumLookupSession) - a\n                ``ForumLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumLookupSession``\n        :rtype: ``osid.forum.ForumLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumQuerySession) - a ``ForumQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumQuerySession``\n        :rtype: ``osid.forum.ForumQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumSearchSession) - a\n                ``ForumSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumSearchSession``\n        :rtype: ``osid.forum.ForumSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumAdminSession) - a ``ForumAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumAdminSession``\n        :rtype: ``osid.forum.ForumAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_receiver (osid.forum.ForumReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumNotificationSession) - a\n                ``ForumNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``forum_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_receiver: the receiver\n        :type forum_receiver: ``osid.forum.ForumReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumNotificationSession``\n        :rtype: ``osid.forum.ForumNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumReceiver", 
                     "var_name": "forum_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumHierarchySession) - a\n                ``ForumHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumHierarchySession``\n        :rtype: ``osid.forum.ForumHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the forum hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.forum.ForumHierarchyDesignSession) - a\n                ``ForumHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``ForumHierarchyDesignSession``\n        :rtype: ``osid.forum.ForumHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.forum.ForumHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``ForumBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.batch.ForumBatchProxyManager) - a\n                ``ForumBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_forum_batch()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``ForumBatchProxyManager``\n        :rtype: ``osid.forum.batch.ForumBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_forum_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.batch.ForumBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostLookupSession", 
         "shortname": "PostLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Post`` objects.", 
            "body": "    The ``Post`` represents a collection of replies.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n      * isolated forum view: All reply methods in this session operate,\n        retrieve and pertain to posts defined explicitly in the current\n        forum. Using an isolated view is useful for managing posts with\n        the ``PostAdminSession.``\n      * federated forum view: All post lookup methods in this session\n        operate, retrieve and pertain to all posts defined in this forum\n        and any other forums implicitly available in this forum through\n        forum inheritence.\n\n    \n    The methods useFederatedForumView() and useIsolatedForumView()\n    behave as a radio group and one should be selected before invoking\n    any lookup methods."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_lookup_posts", 
            "use_comparative_post_view", 
            "use_plenary_post_view", 
            "use_federated_forum_view", 
            "use_isolated_forum_view", 
            "get_post", 
            "get_posts_by_ids", 
            "get_posts_by_genus_type", 
            "get_posts_by_parent_genus_type", 
            "get_posts_by_record_type", 
            "get_posts_by_date", 
            "get_posts_for_poster", 
            "get_posts_by_date_for_poster", 
            "get_posts"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_posts", 
               "doc": {
                  "headline": "Tests if this user can perform ``Post`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_post_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_post_view", 
               "doc": {
                  "headline": "A complete view of the ``Post`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_forum_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include posts in forums which are children\n        of this forum in the forum hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_forum_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this forum only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_post", 
               "doc": {
                  "headline": "Gets the ``Post`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Post`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Post`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.Post) - the post", 
               "error_doc": "        raise:  NotFound - ``post_id`` not found\n        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: ``Id`` of the ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the post\n        :rtype: ``osid.forum.Post``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` not found\n        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.Post", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_ids", 
               "doc": {
                  "headline": "Gets a ``PostList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the posts\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Posts`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    post_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``post_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_ids: the list of ``Ids`` to retrieve\n        :type post_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``post_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "post_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``PostList`` corresponding to the given post genus ``Type`` which does not include posts of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    post_genus_type (osid.type.Type): a post genus type\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``post_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_genus_type: a post genus type\n        :type post_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``PostList`` corresponding to the given post genus ``Type`` and include any additional posts with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    post_genus_type (osid.type.Type): a post genus type\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``post_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_genus_type: a post genus type\n        :type post_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_record_type", 
               "doc": {
                  "headline": "Gets a ``PostList`` containing the given post record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): a post record type\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_record_type: a post record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_date", 
               "doc": {
                  "headline": "Gets a ``PostList`` in the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_for_poster", 
               "doc": {
                  "headline": "Gets a ``PostList`` for the given poster.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_date_for_poster", 
               "doc": {
                  "headline": "Gets a ``PostList`` by the given poster and in the given date range inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``Post`` list", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts", 
               "doc": {
                  "headline": "Gets all ``Posts``.", 
                  "body": "        In plenary mode, the returned list contains all known posts or\n        an error results. Otherwise, the returned list may contain only\n        those posts that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostList) - a list of ``Posts``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Posts``\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostQuerySession", 
         "shortname": "PostQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Post`` objects.", 
            "body": "    The search query is constructed using the ``PostQuery``. The post\n    record ``Type`` also specifies the record for the post query.\n\n    Posts may have a query record indicated by their respective record\n    types. The query record is accessed via the ``PostQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "use_federated_forum_view", 
            "use_isolated_forum_view", 
            "can_search_posts", 
            "get_post_query", 
            "get_posts_by_query"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "use_federated_forum_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include posts in forums which are children\n        of this forum in the forum hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_forum_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this forum only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_search_posts", 
               "doc": {
                  "headline": "Tests if this user can perform ``Post`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_query", 
               "doc": {
                  "headline": "Gets a post query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQuery) - the post query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {}
            }, 
            {
               "name": "get_posts_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Posts`` matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_query (osid.forum.PostQuery): the post query\n", 
               "return_doc": "        return: (osid.forum.PostList) - the returned ``PostList``", 
               "error_doc": "        raise:  NullArgument - ``post_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``post_query`` is not of this service", 
               "sphinx_param_doc": "        :param post_query: the post query\n        :type post_query: ``osid.forum.PostQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``PostList``\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``post_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostQuery", 
                     "var_name": "post_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostQuery"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostSearchSession", 
         "shortname": "PostSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Post`` objects.", 
            "body": "    The search query is constructed using the ``PostQuery``. The post\n    record ``Type`` also specifies the record for the post query.\n\n    ``get_posts_by_query()`` is the basic search method and returns a\n    list of ``Post`` elements. A more advanced search may be performed\n    with ``getPostsBySearch()``. It accepts a ``PostSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_posts_by_search()`` returns a ``PostSearchResults`` that can\n    be used to access the resulting ``PostList`` or be used to perform a\n    search within the result set through ``PostSearch``.\n    \n    Posts may have a query record indicated by their respective record\n    types. The query record is accessed via the ``PostQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.forum.PostQuerySession"
         ], 
         "inherit_shortnames": [
            "PostQuerySession"
         ], 
         "inherit_pkg_names": [
            "forum"
         ], 
         "inheritance": [
            {
               "pkg_name": "forum", 
               "name": "PostQuerySession"
            }
         ], 
         "method_names": [
            "get_post_search", 
            "get_post_search_order", 
            "get_posts_by_search", 
            "get_post_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_post_search", 
               "doc": {
                  "headline": "Gets a post search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostSearch) - the post search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post search\n        :rtype: ``osid.forum.PostSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostSearch", 
               "errors": {}
            }, 
            {
               "name": "get_post_search_order", 
               "doc": {
                  "headline": "Gets a post search order.", 
                  "body": "        The ``PostSearchOrder`` is supplied to a ``PostSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostSearchOrder) - the post search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post search order\n        :rtype: ``osid.forum.PostSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_posts_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_query (osid.forum.PostQuery): the post query\n        arg:    post_search (osid.forum.PostSearch): the post search\n", 
               "return_doc": "        return: (osid.forum.PostSearchResults) - the post search results", 
               "error_doc": "        raise:  NullArgument - ``post_query`` or ``post_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``post_query`` or ``post_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param post_query: the post query\n        :type post_query: ``osid.forum.PostQuery``\n        :param post_search: the post search\n        :type post_search: ``osid.forum.PostSearch``\n", 
               "sphinx_return_doc": "        :return: the post search results\n        :rtype: ``osid.forum.PostSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_query`` or ``post_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``post_query`` or ``post_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostQuery", 
                     "var_name": "post_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.forum.PostSearch", 
                     "var_name": "post_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostQuery", 
                  "osid.forum.PostSearch"
               ], 
               "return_type": "osid.forum.PostSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_from_inspector", 
               "doc": {
                  "headline": "Gets an entry query from an inspector.", 
                  "body": "        The inspector is available from an ``PostSearchResults``."
               }, 
               "arg_doc": "        arg:    post_query_inspector (osid.forum.PostQueryInspector): a\n                query inspector\n", 
               "return_doc": "        return: (osid.forum.PostQuery) - the entry query", 
               "error_doc": "        raise:  NullArgument - ``post_query_inspector`` is ``null``\n        raise:  Unsupported - ``post_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param post_query_inspector: a query inspector\n        :type post_query_inspector: ``osid.forum.PostQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the entry query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``post_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostQueryInspector", 
                     "var_name": "post_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostQueryInspector"
               ], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostAdminSession", 
         "shortname": "PostAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Posts``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Post,`` a ``PostForm`` is requested using\n    ``get_post_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``PostForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``PostForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``PostForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``PostForms`` are requested to the ``Post``  ``Id``\n    that is to be updated using ``getPostFormForUpdate()``. Similarly,\n    the ``PostForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``PostForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Posts``. To unmap a ``Post`` from the\n    current ``Forum,`` the ``PostForumAssignmentSession`` should be\n    used. These delete operations attempt to remove the ``Post`` itself\n    thus removing it from all known ``Forum`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_create_posts", 
            "can_create_post_with_record_types", 
            "get_post_form_for_create", 
            "create_post", 
            "can_update_posts", 
            "get_post_form_for_update", 
            "update_post", 
            "can_delete_posts", 
            "delete_post", 
            "can_manage_post_aliases", 
            "alias_post"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_posts", 
               "doc": {
                  "headline": "Tests if this user can create ``Posts``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Post``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Post`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Post`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_post_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Post`` using the desired record types.", 
                  "body": "        While ``ForumManager.getPostRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Post``.\n        Providing an empty array tests if a ``Post`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    post_record_types (osid.type.Type[]): array of post\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Post`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``post_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param post_record_types: array of post record types\n        :type post_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Post`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "post_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_form_for_create", 
               "doc": {
                  "headline": "Gets the post form for creating new posts.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    post_record_types (osid.type.Type[]): array of post\n                record types\n", 
               "return_doc": "        return: (osid.forum.PostForm) - the post form", 
               "error_doc": "        raise:  NullArgument - ``post_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param post_record_types: array of post record types\n        :type post_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the post form\n        :rtype: ``osid.forum.PostForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "post_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.forum.PostForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_post", 
               "doc": {
                  "headline": "Creates a new ``Post``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_form (osid.forum.PostForm): the form for this\n                ``Post``\n", 
               "return_doc": "        return: (osid.forum.Post) - the new ``Post``", 
               "error_doc": "        raise:  IllegalState - ``post_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``post_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``post_form`` did not originate from\n                ``get_post_form_for_create()``", 
               "sphinx_param_doc": "        :param post_form: the form for this ``Post``\n        :type post_form: ``osid.forum.PostForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Post``\n        :rtype: ``osid.forum.Post``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``post_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``post_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``post_form`` did not originate from ``get_post_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostForm", 
                     "var_name": "post_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostForm"
               ], 
               "return_type": "osid.forum.Post", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_posts", 
               "doc": {
                  "headline": "Tests if this user can update ``Posts``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Post``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Post`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Post`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_form_for_update", 
               "doc": {
                  "headline": "Gets the post form for updating an existing post.", 
                  "body": "        A new post form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.forum.PostForm) - the post form", 
               "error_doc": "        raise:  NotFound - ``post_id`` is not found\n        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the post form\n        :rtype: ``osid.forum.PostForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` is not found\n        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_post", 
               "doc": {
                  "headline": "Updates an existing post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_form (osid.forum.PostForm): the form containing the\n                elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``post_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``post_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``post_form`` did not originate from\n                ``get_post_form_for_update()``", 
               "sphinx_param_doc": "        :param post_form: the form containing the elements to be updated\n        :type post_form: ``osid.forum.PostForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``post_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``post_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``post_form`` did not originate from ``get_post_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostForm", 
                     "var_name": "post_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_posts", 
               "doc": {
                  "headline": "Tests if this user can delete ``Posts`` A return of true does not guarantee successful authorization.", 
                  "body": "        A return of false indicates that it is known deleting a ``Post``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Post`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Post`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_post", 
               "doc": {
                  "headline": "Deletes a ``Post``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``post_id`` not found\n        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post`` to remove\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` not found\n        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_post_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Posts``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Post`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Post`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_post", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Post`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Post`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another post, it is\n        reassigned to the given post ``Id``."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of a ``Post``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``post_id`` not found\n        raise:  NullArgument - ``post_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of a ``Post``\n        :type post_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``post_id`` not found\n        :raise: ``NullArgument`` -- ``post_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostNotificationSession", 
         "shortname": "PostNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Post`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Post`` object\n    itself. Adding and removing replies result in notifications\n    available from the notification session for replies."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_register_for_post_notifications", 
            "use_federated_forum_view", 
            "use_isolated_forum_view", 
            "register_for_new_posts", 
            "register_for_new_posts_for_poster", 
            "register_for_changed_posts", 
            "register_for_changed_posts_for_poster", 
            "register_for_changed_post", 
            "register_for_deleted_posts", 
            "register_for_deleted_posts_for_poster", 
            "register_for_deleted_post"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_post_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Post`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_forum_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include posts in forums which are children\n        of this forum in the forum hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_forum_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this forum only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_posts", 
               "doc": {
                  "headline": "Register for notifications of new posts.", 
                  "body": "        ``PostReceiver.newPost()`` is invoked when a new ``Post`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_posts_for_poster", 
               "doc": {
                  "headline": "Register for notifications of new posts for the given poster resource ``Id``.", 
                  "body": "        ``PostReceiver.newPost()`` is invoked when a new ``Post`` is\n        created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_posts", 
               "doc": {
                  "headline": "Registers for notification of updated posts.", 
                  "body": "        ``PostReceiver.changedPost()`` is invoked when a post is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_posts_for_poster", 
               "doc": {
                  "headline": "Register for notifications of changed posts for the given poster resource ``Id``.", 
                  "body": "        ``PostReceiver.changedPost()`` is invoked when a ``Post`` for\n        the given agent is updated."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_post", 
               "doc": {
                  "headline": "Registers for notification of an updated post.", 
                  "body": "        ``PostReceiver.changedPost()`` is invoked when the specified\n        post is changed."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post`` to monitor\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_posts", 
               "doc": {
                  "headline": "Registers for notification of deleted posts.", 
                  "body": "        ``PostReceiver.deletedPost()`` is invoked when a post is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_posts_for_poster", 
               "doc": {
                  "headline": "Register for notifications of deleted posts for the given poster resource ``Id``.", 
                  "body": "        ``PostReceiver.deletedPost()`` is invoked when a ``Post`` for\n        the given agent is removed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_post", 
               "doc": {
                  "headline": "Registers for notification of a deleted post.", 
                  "body": "        ``PostReceiver.deletedPost()`` is invoked when the specified\n        post is deleted."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post`` to monitor\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostForumSession", 
         "shortname": "PostForumSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Post`` to ``Forum`` mappings.", 
            "body": "    A ``Post`` may appear in multiple ``Forums``. Each ``Forum`` may\n    have its own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_post_forum_mappings", 
            "use_comparative_forum_view", 
            "use_plenary_forum_view", 
            "get_post_ids_by_forum", 
            "get_posts_by_forum", 
            "get_post_ids_by_forums", 
            "get_posts_by_forums", 
            "get_forum_ids_by_post", 
            "get_forums_by_post"
         ], 
         "methods": [
            {
               "name": "can_lookup_post_forum_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of post/forum mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intendedas a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_forum_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_forum_view", 
               "doc": {
                  "headline": "A complete view of the ``Post`` and ``Forum`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_post_ids_by_forum", 
               "doc": {
                  "headline": "Gets the list of Post Ids associated with a ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): ``Id`` of a ``Forum``.\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related post ``Ids``", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: ``Id`` of a ``Forum``.\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related post ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_forum", 
               "doc": {
                  "headline": "Gets the list of ``Posts`` associated with a ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): ``Id`` of a ``Forum``\n", 
               "return_doc": "        return: (osid.forum.PostList) - list of related posts", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: ``Id`` of a ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related posts\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_post_ids_by_forums", 
               "doc": {
                  "headline": "Gets the list of ``Post Ids`` corresponding to a list of ``Forum`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_ids (osid.id.IdList): list of forum ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of post ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``forum_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_ids: list of forum ``Ids``\n        :type forum_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of post ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "forum_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_posts_by_forums", 
               "doc": {
                  "headline": "Gets the list of ``Posts`` corresponding to a list of ``Forums``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_ids (osid.id.IdList): list of forum ``Ids``\n", 
               "return_doc": "        return: (osid.forum.PostList) - list of posts", 
               "error_doc": "        raise:  NullArgument - ``forum_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_ids: list of forum ``Ids``\n        :type forum_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of posts\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "forum_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forum_ids_by_post", 
               "doc": {
                  "headline": "Gets the list of ``Forum``  ``Ids`` mapped to a ``Post``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): ``Id`` of a ``Post``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of forum ``Ids``", 
               "error_doc": "        raise:  NotFound - ``post_id`` is not found\n        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: ``Id`` of a ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of forum ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` is not found\n        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_post", 
               "doc": {
                  "headline": "Gets the list of ``Forum`` objects mapped to a ``Post``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): ``Id`` of a ``Post``\n", 
               "return_doc": "        return: (osid.forum.ForumList) - list of forums", 
               "error_doc": "        raise:  NotFound - ``post_id`` is not found\n        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: ``Id`` of a ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of forums\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` is not found\n        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostForumAssignmentSession", 
         "shortname": "PostForumAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Posts`` to ``Forums``.", 
            "body": "    A ``Post`` may map to multiple ``Forums`` and removing the last\n    reference to a ``Post`` is the equivalent of deleting it. Each\n    ``Forum`` may have its own authorizations governing who is allowed\n    to operate on it.\n\n    Adding a reference of a ``Post`` to another ``Forum`` is not a copy\n    operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_posts", 
            "can_assign_posts_to_forum", 
            "get_assignable_forum_ids", 
            "get_assignable_forum_ids_for_post", 
            "assign_post_to_forum", 
            "unassign_post_from_forum"
         ], 
         "methods": [
            {
               "name": "can_assign_posts", 
               "doc": {
                  "headline": "Tests if this user can alter post/forum mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_posts_to_forum", 
               "doc": {
                  "headline": "Tests if this user can alter post/forum mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_forum_ids", 
               "doc": {
                  "headline": "Gets a list of forums including and under the given forum node in which any post can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable forum ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable forum ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_forum_ids_for_post", 
               "doc": {
                  "headline": "Gets a list of forums including and under the given forum node in which a specific post can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable forum ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` or ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param post_id: the ``Id`` of the ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable forum ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` or ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_post_to_forum", 
               "doc": {
                  "headline": "Adds an existing ``Post`` to a ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post``\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``post_id`` is already assigned to\n                ``forum_id``\n        raise:  NotFound - ``post_id`` or ``forum_id`` not found\n        raise:  NullArgument - ``post_id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post``\n        :type post_id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``post_id`` is already assigned to ``forum_id``\n        :raise: ``NotFound`` -- ``post_id`` or ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``post_id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_post_from_forum", 
               "doc": {
                  "headline": "Removes a ``Post`` from a ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the ``Post``\n        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``post_id`` or ``forum_id`` not found or\n                ``post_id`` not assigned to ``forum_id``\n        raise:  NullArgument - ``post_id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the ``Post``\n        :type post_id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` or ``forum_id`` not found or ``post_id`` not assigned to ``forum_id``\n        :raise: ``NullArgument`` -- ``post_id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostSmartForumSession", 
         "shortname": "PostSmartForumSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``PostQuery`` can be retrieved from this session and mapped to\n    this ``Forum`` to create a virtual collection of ``Posts``. The\n    posts may be sequenced using the ``PostSearchOrder`` from this\n    session.\n\n    This ``Forum`` has a default query that matches any post and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``PostQueryInspector``. The query may be\n    modified by converting the inspector back to a ``PostQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_manage_smart_forums", 
            "get_post_query", 
            "get_post_search_order", 
            "apply_post_query", 
            "inspect_post_query", 
            "apply_post_sequencing", 
            "get_post_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the ``Forum`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum`` associated with this session\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_forums", 
               "doc": {
                  "headline": "Tests if this user can manage smart forums.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart forum management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart forum management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_query", 
               "doc": {
                  "headline": "Gets a post query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQuery) - the post query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {}
            }, 
            {
               "name": "get_post_search_order", 
               "doc": {
                  "headline": "Gets a post search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostSearchOrder) - the post search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post search order\n        :rtype: ``osid.forum.PostSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_post_query", 
               "doc": {
                  "headline": "Applies a post query to this forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_query (osid.forum.PostQuery): the post query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``post_query`` not of this service", 
               "sphinx_param_doc": "        :param post_query: the post query\n        :type post_query: ``osid.forum.PostQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``post_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostQuery", 
                     "var_name": "post_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_post_query", 
               "doc": {
                  "headline": "Gets a post query inspector for this forum.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQueryInspector) - the post query\n                inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post query inspector\n        :rtype: ``osid.forum.PostQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_post_sequencing", 
               "doc": {
                  "headline": "Applies a post search order to this forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_search_order (osid.forum.PostSearchOrder): the post\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``post_search_order`` not of this service", 
               "sphinx_param_doc": "        :param post_search_order: the post search order\n        :type post_search_order: ``osid.forum.PostSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``post_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostSearchOrder", 
                     "var_name": "post_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_from_inspector", 
               "doc": {
                  "headline": "Gets a post query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_query_inspector (osid.forum.PostQueryInspector): a\n                query inspector\n", 
               "return_doc": "        return: (osid.forum.PostQuery) - the post query", 
               "error_doc": "        raise:  NullArgument - ``post_query_inspector`` is ``null``\n        raise:  Unsupported - ``post_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param post_query_inspector: a query inspector\n        :type post_query_inspector: ``osid.forum.PostQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the post query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``post_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostQueryInspector", 
                     "var_name": "post_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostQueryInspector"
               ], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ReplyLookupSession", 
         "shortname": "ReplyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving replies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_lookup_replies", 
            "use_comparative_reply_view", 
            "use_plenary_reply_view", 
            "use_federated_forum_view", 
            "use_isolated_forum_view", 
            "use_sequestered_reply_view", 
            "use_unsequestered_reply_view", 
            "get_reply", 
            "get_replies_by_ids", 
            "get_replies_by_genus_type", 
            "get_replies_by_parent_genus_type", 
            "get_replies_by_record_type", 
            "get_replies_by_date", 
            "get_replies_for_post", 
            "get_replies_by_date_for_post", 
            "get_replies_for_poster", 
            "get_replies_by_date_for_poster", 
            "get_replies_for_post_and_poster", 
            "get_replies_by_date_for_post_and_poster", 
            "get_replies"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_replies", 
               "doc": {
                  "headline": "Tests if this user can lookup replies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer these\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if reply lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if reply lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_reply_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_reply_view", 
               "doc": {
                  "headline": "A complete view of the ``Reply`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_forum_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include replies in forums which are\n        children of this forum in the forum hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_forum_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this forum only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_sequestered_reply_view", 
               "doc": {
                  "headline": "The returns from the lookup methods omit sequestered replies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_unsequestered_reply_view", 
               "doc": {
                  "headline": "All replies are returned including sequestered replies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_reply", 
               "doc": {
                  "headline": "Gets the ``Reply`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the ``Reply`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.forum.Reply) - the returned ``Reply``", 
               "error_doc": "        raise:  NotFound - no ``Reply`` found with the given ``Id``\n        raise:  NullArgument - ``reply_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the ``Reply`` to retrieve\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Reply``\n        :rtype: ``osid.forum.Reply``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Reply`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``reply_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.Reply", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_ids", 
               "doc": {
                  "headline": "Gets a ``ReplyList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``Reply list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``reply_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_ids: the list of ``Ids`` to retrieve\n        :type reply_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Reply list``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``reply_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "reply_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ReplyList`` corresponding to the given reply genus ``Type`` which does not include replies of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_genus_type (osid.type.Type): a reply genus type\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``Reply`` list", 
               "error_doc": "        raise:  NullArgument - ``reply_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_genus_type: a reply genus type\n        :type reply_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Reply`` list\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ReplyList`` corresponding to the given reply genus ``Type`` and include any additional replies with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_genus_type (osid.type.Type): a reply genus type\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``post_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_genus_type: a reply genus type\n        :type reply_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ReplyList`` containing the given reply record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): a reply record type\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``Post`` list", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_record_type: a reply record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Post`` list\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_date", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to the given date range inclusive ````.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_for_post", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to a post ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_date_for_post", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to post ``Id`` in the given daterange inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``post_id, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post\n        :type post_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``post_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_for_poster", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to a poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the resource ``Id``\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_date_for_poster", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to a post ``Id`` for the given poster within the date range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``resource_id, from`` or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_for_post_and_poster", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to a post ``Id`` and poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post\n        arg:    resource_id (osid.id.Id): the resource ``Id``\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  NullArgument - ``post_id`` or ``resource_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post\n        :type post_id: ``osid.id.Id``\n        :param resource_id: the resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` or ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies_by_date_for_post_and_poster", 
               "doc": {
                  "headline": "Gets a list of all replies corresponding to a post ``Id`` and poster within the given daterange incluisve.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post\n        arg:    resource_id (osid.id.Id): the resource ``Id``\n        arg:    from (osid.calendaring.DateTime): start of date range\n        arg:    to (osid.calendaring.DateTime): end of date range\n", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``post_id, resource_id, from`` or ``to``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post\n        :type post_id: ``osid.id.Id``\n        :param resource_id: the resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param from: start of date range\n        :type from: ``osid.calendaring.DateTime``\n        :param to: end of date range\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``post_id, resource_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_replies", 
               "doc": {
                  "headline": "Gets a list of all replies.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyList) - the returned ``ReplyList``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the returned ``ReplyList``\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ReplyAdminSession", 
         "shortname": "ReplyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Replies``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Reply,`` a ``ReplyForm`` is requested using\n    ``get_reply_form_for_create()`` specifying the desired post and\n    record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``ReplyForm`` will indicate that it is to be used with a\n    create operation and can be used to examine metdata or validate data\n    prior to creation. Once the ``ReplyForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ReplyForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``ReplyForms`` are requested to the ``Reply``  ``Id``\n    that is to be updated using ``getReplyFormForUpdate()``. Similarly,\n    the ``ReplyForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``ReplyForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Replies``. To unmap a ``Reply`` from\n    the current ``Forum,`` the ``ReplyForumAssignmentSession`` should be\n    used. These delete operations attempt to remove the ``Reply`` itself\n    thus removing it from all known ``Forum`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_create_replies", 
            "can_create_reply_with_record_types", 
            "get_reply_form_for_create_to_post", 
            "get_reply_form_for_create_to_reply", 
            "create_reply", 
            "can_update_replies", 
            "get_reply_form_for_update", 
            "update_reply", 
            "can_delete_replies", 
            "delete_reply", 
            "can_manage_reply_aliases", 
            "alias_reply"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_replies", 
               "doc": {
                  "headline": "Tests if this user can create hournal entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Reply``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Reply`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Reply`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_reply_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Reply`` using the desired record types.", 
                  "body": "        While ``ForumManager.getReplyRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Reply``.\n        Providing an empty array tests if a ``Reply`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    reply_record_types (osid.type.Type[]): array of reply\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Reply`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``reply_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param reply_record_types: array of reply record types\n        :type reply_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Reply`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "reply_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_form_for_create_to_post", 
               "doc": {
                  "headline": "Gets the reply form for creating new replies to a post.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` for the post\n        arg:    reply_record_types (osid.type.Type[]): array of reply\n                record types\n", 
               "return_doc": "        return: (osid.forum.ReplyForm) - the reply form", 
               "error_doc": "        raise:  NotFound - ``post_id`` is not found\n        raise:  NullArgument - ``post_id`` or ``reply_record_types`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` for the post\n        :type post_id: ``osid.id.Id``\n        :param reply_record_types: array of reply record types\n        :type reply_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the reply form\n        :rtype: ``osid.forum.ReplyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``post_id`` is not found\n        :raise: ``NullArgument`` -- ``post_id`` or ``reply_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "reply_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.forum.ReplyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_form_for_create_to_reply", 
               "doc": {
                  "headline": "Gets the reply form for creating new replies to another reply.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` for the reply\n        arg:    reply_record_types (osid.type.Type[]): array of reply\n                record types\n", 
               "return_doc": "        return: (osid.forum.ReplyForm) - the reply form", 
               "error_doc": "        raise:  NotFound - ``reply_id`` is not found\n        raise:  NullArgument - ``reply_id`` or ``reply_record_types`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` for the reply\n        :type reply_id: ``osid.id.Id``\n        :param reply_record_types: array of reply record types\n        :type reply_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the reply form\n        :rtype: ``osid.forum.ReplyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``reply_id`` is not found\n        :raise: ``NullArgument`` -- ``reply_id`` or ``reply_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "reply_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.forum.ReplyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_reply", 
               "doc": {
                  "headline": "Creates a new ``Reply``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_form (osid.forum.ReplyForm): the form for this\n                ``Reply``\n", 
               "return_doc": "        return: (osid.forum.Reply) - the new ``Reply``", 
               "error_doc": "        raise:  IllegalState - ``reply_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``reply_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``reply_form`` did not originate from\n                ``get_reply_form_for_create_to_post()`` or\n                ``get_reply_form_for_create_to_reply()``", 
               "sphinx_param_doc": "        :param reply_form: the form for this ``Reply``\n        :type reply_form: ``osid.forum.ReplyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Reply``\n        :rtype: ``osid.forum.Reply``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``reply_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``reply_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``reply_form`` did not originate from ``get_reply_form_for_create_to_post()`` or ``get_reply_form_for_create_to_reply()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyForm", 
                     "var_name": "reply_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyForm"
               ], 
               "return_type": "osid.forum.Reply", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_replies", 
               "doc": {
                  "headline": "Tests if this user can update replies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Reply``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Reply`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Reply`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_reply_form_for_update", 
               "doc": {
                  "headline": "Gets the reply form for updating an existing reply.", 
                  "body": "        A new reply form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the ``Reply``\n", 
               "return_doc": "        return: (osid.forum.ReplyForm) - the reply form", 
               "error_doc": "        raise:  NotFound - ``reply_id`` is not found\n        raise:  NullArgument - ``reply_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the ``Reply``\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the reply form\n        :rtype: ``osid.forum.ReplyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``reply_id`` is not found\n        :raise: ``NullArgument`` -- ``reply_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ReplyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_reply", 
               "doc": {
                  "headline": "Updates an existing reply.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_form (osid.forum.ReplyForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``reply_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``reply_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``reply_form`` did not originate from\n                ``get_reply_form_for_update()``", 
               "sphinx_param_doc": "        :param reply_form: the form containing the elements to be updated\n        :type reply_form: ``osid.forum.ReplyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``reply_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``reply_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``reply_form`` did not originate from ``get_reply_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplyForm", 
                     "var_name": "reply_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_replies", 
               "doc": {
                  "headline": "Tests if this user can delete replies.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an ``Reply``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Reply`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Reply`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_reply", 
               "doc": {
                  "headline": "Deletes an ``Reply``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the ``Reply`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``reply_id`` not found\n        raise:  NullArgument - ``reply_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the ``Reply`` to remove\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``reply_id`` not found\n        :raise: ``NullArgument`` -- ``reply_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_reply_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Comnents``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Reply`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Reply`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_reply", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Reply`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Reply`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another reply, it is\n        reassigned to the given reply ``Id``."
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of a ``Reply``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``reply_id`` not found\n        raise:  NullArgument - ``reply_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of a ``Reply``\n        :type reply_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``reply_id`` not found\n        :raise: ``NullArgument`` -- ``reply_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ReplyNotificationSession", 
         "shortname": "ReplyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Reply`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_id", 
            "get_forum", 
            "can_register_for_reply_notifications", 
            "use_federated_forum_view", 
            "use_isolated_forum_view", 
            "register_for_new_replies", 
            "register_for_new_replies_for_poster", 
            "register_for_new_replies_for_post", 
            "register_for_changed_replies", 
            "register_for_changed_replies_for_poster", 
            "register_for_changed_replies_for_post", 
            "register_for_changed_reply", 
            "register_for_deleted_replies", 
            "register_for_deleted_replies_for_poster", 
            "register_for_deleted_replies_for_post", 
            "register_for_deleted_reply"
         ], 
         "methods": [
            {
               "name": "get_forum_id", 
               "doc": {
                  "headline": "Gets the ``Forum``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Forum Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Forum Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_reply_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Reply`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_forum_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for replies in\n        forums which are children of this forum in the forum hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_forum_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this forum only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_replies", 
               "doc": {
                  "headline": "Register for notifications of new replies.", 
                  "body": "        ``ReplyReceiver.newReply()`` is invoked when a new ``Reply`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_replies_for_poster", 
               "doc": {
                  "headline": "Register for notifications of new replies for the given poster resource ``Id``.", 
                  "body": "        ``ReplyReceiver.newReply()`` is invoked when a new ``Reply`` is\n        created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_replies_for_post", 
               "doc": {
                  "headline": "Register for notifications of new replies for the given post ``Id``.", 
                  "body": "        ``ReplyReceiver.newReply()`` is invoked when a new ``Reply`` is\n        created."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post to monitor\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_replies", 
               "doc": {
                  "headline": "Registers for notification of updated replies.", 
                  "body": "        ``ReplyReceiver.changedReply()`` is invoked when a reply is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_replies_for_poster", 
               "doc": {
                  "headline": "Register for notifications of changed replies for the given poster resource ``Id``.", 
                  "body": "        ``ReplyReceiver.changedReply()`` is invoked when a ``Reply`` for\n        the poster is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_replies_for_post", 
               "doc": {
                  "headline": "Register for notifications of changed replies for the given post ``Id``.", 
                  "body": "        ``ReplyReceiver.changedReply()`` is invoked when a ``Reply`` for\n        the post is changed."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post to monitor\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_reply", 
               "doc": {
                  "headline": "Registers for notification of an updated reply.", 
                  "body": "        ``ReplyReceiver.changedReply()`` is invoked when the specified\n        reply is changed."
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the ``Reply`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the ``Reply`` to monitor\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_replies", 
               "doc": {
                  "headline": "Registers for notification of deleted replies.", 
                  "body": "        ``ReplyReceiver.deletedReply()`` is invoked when a reply is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_replies_for_poster", 
               "doc": {
                  "headline": "Register for notifications of deleted replies for the given poster resource ``Id``.", 
                  "body": "        ``ReplyReceiver.deletedReply()`` is invoked when a ``Reply`` for\n        the poster is deleted."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the ``Id`` of the resource to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: the ``Id`` of the resource to monitor\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_replies_for_post", 
               "doc": {
                  "headline": "Register for notifications of deleted replies for the given post ``Id``.", 
                  "body": "        ``ReplyReceiver.deletedReply()`` is invoked when a ``Reply`` for\n        the post is deleted."
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the post to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the post to monitor\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_reply", 
               "doc": {
                  "headline": "Registers for notification of a deleted reply.", 
                  "body": "        ``ReplyReceiver.deletedReply()`` is invoked when the specified\n        reply is deleted."
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the ``Reply`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the ``Reply`` to monitor\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumLookupSession", 
         "shortname": "ForumLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Forum`` objects.", 
            "body": "    The ``Forum`` represents a collection of posts and replies.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_forums", 
            "use_comparative_forum_view", 
            "use_plenary_forum_view", 
            "get_forum", 
            "get_forums_by_ids", 
            "get_forums_by_genus_type", 
            "get_forums_by_parent_genus_type", 
            "get_forums_by_record_type", 
            "get_forums_by_provider", 
            "get_forums"
         ], 
         "methods": [
            {
               "name": "can_lookup_forums", 
               "doc": {
                  "headline": "Tests if this user can perform ``Forum`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_forum_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_forum_view", 
               "doc": {
                  "headline": "A complete view of the ``Forum`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Forum`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Forum`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.Forum) - the forum", 
               "error_doc": "        raise:  NotFound - ``forum_id`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the forum\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_ids", 
               "doc": {
                  "headline": "Gets a ``ForumList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the forums\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Forums`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    forum_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``Forum`` list", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``forum_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_ids: the list of ``Ids`` to retrieve\n        :type forum_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Forum`` list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``forum_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "forum_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``ForumList`` corresponding to the given forum genus ``Type`` which does not include forums of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known forums or\n        an error results. Otherwise, the returned list may contain only\n        those forums that are accessible through this session."
               }, 
               "arg_doc": "        arg:    forum_genus_type (osid.type.Type): a forum genus type\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``Forum`` list", 
               "error_doc": "        raise:  NullArgument - ``forum_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_genus_type: a forum genus type\n        :type forum_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Forum`` list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``ForumList`` corresponding to the given forum genus ``Type`` and include any additional forums with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known forums or\n        an error results. Otherwise, the returned list may contain only\n        those forums that are accessible through this session."
               }, 
               "arg_doc": "        arg:    forum_genus_type (osid.type.Type): a forum genus type\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``Forum`` list", 
               "error_doc": "        raise:  NullArgument - ``forum_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_genus_type: a forum genus type\n        :type forum_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Forum`` list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_record_type", 
               "doc": {
                  "headline": "Gets a ``ForumList`` containing the given forum record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known forums or\n        an error results. Otherwise, the returned list may contain only\n        those forums that are accessible through this session."
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): a forum record type\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``Forum`` list", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_record_type: a forum record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Forum`` list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums_by_provider", 
               "doc": {
                  "headline": "Gets a ``ForumList`` for the given provider ````.", 
                  "body": "        In plenary mode, the returned list contains all known forums or\n        an error results. Otherwise, the returned list may contain only\n        those forums that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``Forum`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Forum`` list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forums", 
               "doc": {
                  "headline": "Gets all ``Forums``.", 
                  "body": "        In plenary mode, the returned list contains all known forums or\n        an error results. Otherwise, the returned list may contain only\n        those forums that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumList) - a list of ``Forums``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Forums``\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumQuerySession", 
         "shortname": "ForumQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Forum`` objects.", 
            "body": "    The search query is constructed using the ``ForumQuery``. The forum\n    record ``Type`` also specifies the record for the forum query.\n\n    Forums may have a query record indicated by their respective record\n    types. The query record is accessed via the ``ForumQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_forums", 
            "get_forum_query", 
            "get_forums_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_forums", 
               "doc": {
                  "headline": "Tests if this user can perform ``Forum`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_forum_query", 
               "doc": {
                  "headline": "Gets a forum query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {}
            }, 
            {
               "name": "get_forums_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Forums`` matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_query (osid.forum.ForumQuery): the forum query\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the returned ``ForumList``", 
               "error_doc": "        raise:  NullArgument - ``forum_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``forum_query`` is not of this service", 
               "sphinx_param_doc": "        :param forum_query: the forum query\n        :type forum_query: ``osid.forum.ForumQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``ForumList``\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``forum_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumQuery", 
                     "var_name": "forum_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumQuery"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumSearchSession", 
         "shortname": "ForumSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Forum`` objects.", 
            "body": "    The search query is constructed using the ``ForumQuery``. The forum\n    record ``Type`` also specifies the record for the forum query.\n\n    ``get_forums_by_query()`` is the basic search method and returns a\n    list of ``Forum`` elements. A more advanced search may be performed\n    with ``getForumsBySearch()``. It accepts a ``ForumSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_forums_by_search()`` returns a ``ForumSearchResults`` that can\n    be used to access the resulting ``ForumList`` or be used to perform\n    a search within the result set through ``ForumSearch``.\n    \n    Forums may have a query record indicated by their respective record\n    types. The query record is accessed via the ``ForumQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.forum.ForumQuerySession"
         ], 
         "inherit_shortnames": [
            "ForumQuerySession"
         ], 
         "inherit_pkg_names": [
            "forum"
         ], 
         "inheritance": [
            {
               "pkg_name": "forum", 
               "name": "ForumQuerySession"
            }
         ], 
         "method_names": [
            "get_forum_search", 
            "get_forum_search_order", 
            "get_forums_by_search", 
            "get_forum_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_forum_search", 
               "doc": {
                  "headline": "Gets a forum search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumSearch) - the forum search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum search\n        :rtype: ``osid.forum.ForumSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumSearch", 
               "errors": {}
            }, 
            {
               "name": "get_forum_search_order", 
               "doc": {
                  "headline": "Gets a forum search order.", 
                  "body": "        The ``ForumSearchOrder`` is supplied to a ``ForumSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumSearchOrder) - the forum search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum search order\n        :rtype: ``osid.forum.ForumSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_forums_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_query (osid.forum.ForumQuery): the forum query\n        arg:    forum_search (osid.forum.ForumSearch): the forum search\n", 
               "return_doc": "        return: (osid.forum.ForumSearchResults) - the forum search\n                results", 
               "error_doc": "        raise:  NullArgument - ``forum_query`` or ``forum_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``forum_query`` or ``forum_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param forum_query: the forum query\n        :type forum_query: ``osid.forum.ForumQuery``\n        :param forum_search: the forum search\n        :type forum_search: ``osid.forum.ForumSearch``\n", 
               "sphinx_return_doc": "        :return: the forum search results\n        :rtype: ``osid.forum.ForumSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_query`` or ``forum_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``forum_query`` or ``forum_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumQuery", 
                     "var_name": "forum_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.forum.ForumSearch", 
                     "var_name": "forum_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumQuery", 
                  "osid.forum.ForumSearch"
               ], 
               "return_type": "osid.forum.ForumSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_query_from_inspector", 
               "doc": {
                  "headline": "Gets a forum query from an inspector.", 
                  "body": "        The inspector is available from an ``ForumSearchResults``."
               }, 
               "arg_doc": "        arg:    forum_query_inspector (osid.forum.ForumQueryInspector):\n                a query inspector\n", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "        raise:  NullArgument - ``forum_query_inspector`` is ``null``\n        raise:  Unsupported - ``forum_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param forum_query_inspector: a query inspector\n        :type forum_query_inspector: ``osid.forum.ForumQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``forum_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumQueryInspector", 
                     "var_name": "forum_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumQueryInspector"
               ], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumAdminSession", 
         "shortname": "ForumAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Forums``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Forum,`` a ``ForumForm`` is requested using\n    ``get_forum_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``ForumForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``ForumForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``ForumForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``ForumForms`` are requested to the ``Forum``  ``Id``\n    that is to be updated using ``getForumFormForUpdate()``. Similarly,\n    the ``ForumForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``ForumForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Forums``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_forums", 
            "can_create_forum_with_record_types", 
            "get_forum_form_for_create", 
            "create_forum", 
            "can_update_forums", 
            "get_forum_form_for_update", 
            "update_forum", 
            "can_delete_forums", 
            "delete_forum", 
            "can_manage_forum_aliases", 
            "alias_forum"
         ], 
         "methods": [
            {
               "name": "can_create_forums", 
               "doc": {
                  "headline": "Tests if this user can create ``Forums``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Forum``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Forum`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Forum`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_forum_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Forum`` using the desired record types.", 
                  "body": "        While ``ForumManager.getForumRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Forum``.\n        Providing an empty array tests if a ``Forum`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    forum_record_types (osid.type.Type[]): array of forum\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Forum`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``forum_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param forum_record_types: array of forum record types\n        :type forum_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Forum`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "forum_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_form_for_create", 
               "doc": {
                  "headline": "Gets the forum form for creating new forums.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    forum_record_types (osid.type.Type[]): array of forum\n                record types\n", 
               "return_doc": "        return: (osid.forum.ForumForm) - the forum form", 
               "error_doc": "        raise:  NullArgument - ``forum_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param forum_record_types: array of forum record types\n        :type forum_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the forum form\n        :rtype: ``osid.forum.ForumForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "forum_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.forum.ForumForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_forum", 
               "doc": {
                  "headline": "Creates a new ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_form (osid.forum.ForumForm): the form for this\n                ``Forum``\n", 
               "return_doc": "        return: (osid.forum.Forum) - the new ``Forum``", 
               "error_doc": "        raise:  IllegalState - ``forum_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``forum_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``forum_form`` did not originate from\n                ``get_forum_form_for_create()``", 
               "sphinx_param_doc": "        :param forum_form: the form for this ``Forum``\n        :type forum_form: ``osid.forum.ForumForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Forum``\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``forum_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``forum_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``forum_form`` did not originate from ``get_forum_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumForm", 
                     "var_name": "forum_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumForm"
               ], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_forums", 
               "doc": {
                  "headline": "Tests if this user can update ``Forums``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Forum``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Forum`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Forum`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_forum_form_for_update", 
               "doc": {
                  "headline": "Gets the forum form for updating an existing forum.", 
                  "body": "        A new forum form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum``\n", 
               "return_doc": "        return: (osid.forum.ForumForm) - the forum form", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the forum form\n        :rtype: ``osid.forum.ForumForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ForumForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_forum", 
               "doc": {
                  "headline": "Updates an existing forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_form (osid.forum.ForumForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``forum_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``forum_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``forum_form`` did not originate from\n                ``get_forum_form_for_update()``", 
               "sphinx_param_doc": "        :param forum_form: the form containing the elements to be updated\n        :type forum_form: ``osid.forum.ForumForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``forum_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``forum_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``forum_form`` did not originate from ``get_forum_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumForm", 
                     "var_name": "forum_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_forums", 
               "doc": {
                  "headline": "Tests if this user can delete ``Forums`` A return of true does not guarantee successful authorization.", 
                  "body": "        A return of false indicates that it is known deleting a\n        ``Forum`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Forum`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Forum`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_forum", 
               "doc": {
                  "headline": "Deletes a ``Forum``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``forum_id`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to remove\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_forum_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Forums``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Forum`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Forum`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_forum", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Forum`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Forum`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another forum, it is\n        reassigned to the given forum ``Id``."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a ``Forum``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``forum_id`` not found\n        raise:  NullArgument - ``forum_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumNotificationSession", 
         "shortname": "ForumNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Forum`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Forum`` object\n    itself. Adding and removing replies result in notifications\n    available from the notification session for replies."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_forum_notifications", 
            "register_for_new_forums", 
            "register_for_new_forum_ancestors", 
            "register_for_new_forum_descendants", 
            "register_for_changed_forums", 
            "register_for_changed_forum", 
            "register_for_deleted_forums", 
            "register_for_deleted_forum", 
            "register_for_deleted_forum_ancestors", 
            "register_for_deleted_forum_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_forum_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Forum`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_forums", 
               "doc": {
                  "headline": "Register for notifications of new forums.", 
                  "body": "        ``ForumReceiver.newForum()`` is invoked when a new ``Forum`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_forum_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new ancestor of the specified forum.", 
                  "body": "        ``ForumReceiver.newAncestorForum()`` is invoked when the\n        specified forum node gets a new ancestor."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` node\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` node to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_forum_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new descendant of the specified forum.", 
                  "body": "        ``ForumReceiver.newDescendantForum()`` is invoked when the\n        specified forum node gets a new descendant."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` node\n                to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` node to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_forums", 
               "doc": {
                  "headline": "Registers for notification of updated forums.", 
                  "body": "        ``ForumReceiver.changedForum()`` is invoked when a forum is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_forum", 
               "doc": {
                  "headline": "Registers for notification of an updated forum.", 
                  "body": "        ``ForumReceiver.changedForum()`` is invoked when the specified\n        forum is changed."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_forums", 
               "doc": {
                  "headline": "Registers for notification of deleted forums.", 
                  "body": "        ``ForumReceiver.deletedForum()`` is invoked when a forum is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_forum", 
               "doc": {
                  "headline": "Registers for notification of a deleted forum.", 
                  "body": "        ``ForumReceiver.deletedForum()`` is invoked when the specified\n        forum is deleted."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_forum_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes an ancestor of the specified forum ``ForumReceiver.", 
                  "body": "        deletedAncestor()`` is invoked when the specified forum node\n        loses an ancestor."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_forum_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes a descendant of the specified forum.", 
                  "body": "        ``ForumReceiver.deletedDescendant()`` is invoked when the\n        specified forum node loses a descendant."
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to monitor\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumHierarchySession", 
         "shortname": "ForumHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Forum`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Forum``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_forums()`` and ``getChildForums()``. To relate these\n    ``Ids`` to another OSID, ``get_forum_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Forum`` available in the Reply OSID is known to this hierarchy but\n    does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_forums()`` or ``get_child_forums()`` in lieu\n    of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: forum elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_hierarchy_id", 
            "get_forum_hierarchy", 
            "can_access_forum_hierarchy", 
            "use_comparative_forum_view", 
            "use_plenary_forum_view", 
            "get_root_forum_ids", 
            "get_root_forums", 
            "has_parent_forums", 
            "is_parent_of_forum", 
            "get_parent_forum_ids", 
            "get_parent_forums", 
            "is_ancestor_of_forum", 
            "has_child_forums", 
            "is_child_of_forum", 
            "get_child_forum_ids", 
            "get_child_forums", 
            "is_descendant_of_forum", 
            "get_forum_node_ids", 
            "get_forum_nodes"
         ], 
         "methods": [
            {
               "name": "get_forum_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_forum_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_forum_view", 
               "doc": {
                  "headline": "The returns from the forum methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_forum_view", 
               "doc": {
                  "headline": "A complete view of the ``Forum`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_forum_ids", 
               "doc": {
                  "headline": "Gets the root forum ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root forum ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root forum ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_forums", 
               "doc": {
                  "headline": "Gets the root forums in the forum hierarchy.", 
                  "body": "        A node with no parents is an orphan. While all forum ``Ids`` are\n        known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root node or child of\n        another node."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumList) - the root forums", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root forums\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_forums", 
               "doc": {
                  "headline": "Tests if the ``Forum`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the forum has parents, f\n                ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the forum has parents, f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_forum", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``forum_id,`` f ``alse`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``forum_id,`` f ``alse`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_forum_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the forum", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the forum\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_forums", 
               "doc": {
                  "headline": "Gets the parent forums of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                query\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the parent forums of the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Forum`` identified by ``Id is`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to query\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent forums of the ``id``\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Forum`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_forum", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "        return: (boolean) - ``tru`` e if this ``id`` is an ancestor of\n                ``forum_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``tru`` e if this ``id`` is an ancestor of ``forum_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_forums", 
               "doc": {
                  "headline": "Tests if a forum has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``forum_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``forum_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_forum", 
               "doc": {
                  "headline": "Tests if a forum is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``forum_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``forum_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_forum_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the forum", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` to query\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the forum\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_forums", 
               "doc": {
                  "headline": "Gets the child forums of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the ``Forum`` to\n                query\n", 
               "return_doc": "        return: (osid.forum.ForumList) - the child forums of the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Forum`` identified by ``Id is`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the ``Forum`` to query\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the child forums of the ``id``\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Forum`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_forum", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``forum_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``id`` or ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``forum_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forum_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a forum node", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` to query\n        :type forum_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a forum node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_forum_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.forum.ForumNode) - a forum node", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` to query\n        :type forum_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a forum node\n        :rtype: ``osid.forum.ForumNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.forum.ForumNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumHierarchyDesignSession", 
         "shortname": "ForumHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages a hierarchy of forums.", 
            "body": "    Forums may be organized into a hierarchy for organizing or\n    federating. A parent ``Forum`` includes all of the replies of its\n    children such that a single root node contains all of the replies of\n    the federation."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_forum_hierarchy_id", 
            "get_forum_hierarchy", 
            "can_modify_forum_hierarchy", 
            "add_root_forum", 
            "remove_root_forum", 
            "add_child_forum", 
            "remove_child_forum", 
            "remove_child_forums"
         ], 
         "methods": [
            {
               "name": "get_forum_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_forum_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_forum_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_forum", 
               "doc": {
                  "headline": "Adds a root forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``forum_id`` is already in hierarchy\n        raise:  NotFound - ``forum_id`` is not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``forum_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``forum_id`` is not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_forum", 
               "doc": {
                  "headline": "Removes a root forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``forum_id`` is not a root\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` is not a root\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_forum", 
               "doc": {
                  "headline": "Adds a child to a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``forum_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``forum_id`` or ``child_id`` not found\n        raise:  NullArgument - ``forum_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``forum_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``forum_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_forum", 
               "doc": {
                  "headline": "Removes a child from a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``forum_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``forum_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``forum_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_forums", 
               "doc": {
                  "headline": "Removes all children from a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of a forum\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``forum_id`` not found\n        raise:  NullArgument - ``forum_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of a forum\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``forum_id`` not found\n        :raise: ``NullArgument`` -- ``forum_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.Post", 
         "shortname": "Post", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Post`` represents a blob of text posted to a forum by a poster.", 
            "body": "    Like all OSID objects, a ``Post`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_timestamp", 
            "get_poster_id", 
            "get_poster", 
            "get_posting_agent_id", 
            "get_posting_agent", 
            "get_subject_line", 
            "get_text", 
            "get_post_record"
         ], 
         "methods": [
            {
               "name": "get_timestamp", 
               "doc": {
                  "headline": "Gets the time of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the time", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_poster_id", 
               "doc": {
                  "headline": "Gets the poster ``Id`` of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the poster resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the poster resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_poster", 
               "doc": {
                  "headline": "Gets the poster of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the poster resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the poster resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_posting_agent_id", 
               "doc": {
                  "headline": "Gets the posting agent ``Id`` of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the posting agent ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the posting agent ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent", 
               "doc": {
                  "headline": "Gets the posting agent of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the posting agent", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the posting agent\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_subject_line", 
               "doc": {
                  "headline": "Gets the subject line of this post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the subject", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_text", 
               "doc": {
                  "headline": "Gets the text of the post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the entry text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the entry text\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_post_record", 
               "doc": {
                  "headline": "Gets the post record corresponding to the given ``Post`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``post_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(post_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): the type of post\n                record to retrieve\n", 
               "return_doc": "        return: (osid.forum.records.PostRecord) - the post record", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(post_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_record_type: the type of post record to retrieve\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post record\n        :rtype: ``osid.forum.records.PostRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostRecord", 
         "shortname": "PostRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Post``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostQuery", 
         "shortname": "PostQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching for posts.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_timestamp", 
            "clear_timestamp_terms", 
            "match_poster_id", 
            "clear_poster_id_terms", 
            "supports_poster_query", 
            "get_poster_query", 
            "clear_poster_terms", 
            "match_posting_agent_id", 
            "clear_posting_agent_id_terms", 
            "supports_posting_agent_query", 
            "get_posting_agent_query", 
            "clear_posting_agent_terms", 
            "match_subject_line", 
            "match_any_subject_line", 
            "clear_subject_line_terms", 
            "match_text", 
            "match_any_text", 
            "clear_text_terms", 
            "match_reply_id", 
            "clear_reply_id_terms", 
            "supports_reply_query", 
            "get_reply_query", 
            "match_any_reply", 
            "clear_reply_terms", 
            "match_forum_id", 
            "clear_forum_id_terms", 
            "supports_forum_query", 
            "get_forum_query", 
            "clear_forum_terms", 
            "get_post_query_record"
         ], 
         "methods": [
            {
               "name": "match_timestamp", 
               "doc": {
                  "headline": "Matches entries whose sent time is between the supplied range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start_time (osid.calendaring.DateTime): start time\n        arg:    end_time (osid.calendaring.DateTime): end time\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start_time`` is greater than\n                ``end_time``\n        raise:  NullArgument - ``start_time`` or ``end_time`` is\n                ``null``", 
               "sphinx_param_doc": "        :param start_time: start time\n        :type start_time: ``osid.calendaring.DateTime``\n        :param end_time: end time\n        :type end_time: ``osid.calendaring.DateTime``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start_time`` is greater than ``end_time``\n        :raise: ``NullArgument`` -- ``start_time`` or ``end_time`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_timestamp_terms", 
               "doc": {
                  "headline": "Clears the timestamp terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_poster_id", 
               "doc": {
                  "headline": "Matches the poster of the entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` to match\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster_id_terms", 
               "doc": {
                  "headline": "Clears the poster ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_poster_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying senders.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_poster_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_poster_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_poster_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_poster_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster_terms", 
               "doc": {
                  "headline": "Clears the poster terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_posting_agent_id", 
               "doc": {
                  "headline": "Matches the posting agent of the entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` to match\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_posting_agent_id_terms", 
               "doc": {
                  "headline": "Clears the posting agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_posting_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available for querying posters.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_posting_agent_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_posting_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_posting_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_posting_agent_terms", 
               "doc": {
                  "headline": "Clears the posting agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_subject_line", 
               "doc": {
                  "headline": "Adds a subject line to match.", 
                  "body": "        Multiple subject line matches can be added to perform a boolean\n        ``OR`` among them."
               }, 
               "arg_doc": "        arg:    subject (string): display name to match\n        arg:    string_match_type (osid.type.Type): the string match\n                type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``subject is`` not of\n                ``string_match_type``\n        raise:  NullArgument - ``subject`` or ``string_match_type`` is\n                ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject: display name to match\n        :type subject: ``string``\n        :param string_match_type: the string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``subject is`` not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``subject`` or ``string_match_type`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "subject", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_subject_line", 
               "doc": {
                  "headline": "Matches entries with any subject line.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match entries with any\n                subject line, ``false`` to match entries with no subject\n                line\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match entries with any subject line, ``false`` to match entries with no subject line\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_subject_line_terms", 
               "doc": {
                  "headline": "Clears the subject line terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_text", 
               "doc": {
                  "headline": "Adds text to match.", 
                  "body": "        Multiple text matches can be added to perform a boolean ``OR``\n        among them."
               }, 
               "arg_doc": "        arg:    text (string): text to match\n        arg:    string_match_type (osid.type.Type): the string match\n                type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text is`` not of\n                ``string_match_type``\n        raise:  NullArgument - ``text`` or ``string_match_type`` is\n                ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param text: text to match\n        :type text: ``string``\n        :param string_match_type: the string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text is`` not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``text`` or ``string_match_type`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_text", 
               "doc": {
                  "headline": "Matches entries with any text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match entries with any\n                text, ``false`` to match entries with no text\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match entries with any text, ``false`` to match entries with no text\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_text_terms", 
               "doc": {
                  "headline": "Clears the text terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_reply_id", 
               "doc": {
                  "headline": "Sets the reply ``Id`` for this query to match replies assigned to posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): a reply ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``", 
               "sphinx_param_doc": "        :param reply_id: a reply ``Id``\n        :type reply_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_reply_id_terms", 
               "doc": {
                  "headline": "Clears the reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_query", 
               "doc": {
                  "headline": "Tests if a reply query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a reply query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a reply query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_reply_query", 
               "doc": {
                  "headline": "Gets the query for a post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQuery) - the reply query", 
               "error_doc": "        raise:  Unimplemented - ``supports_reply_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply query\n        :rtype: ``osid.forum.ReplyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_reply_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_reply", 
               "doc": {
                  "headline": "Matches posts with any reply.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match posts with any reply,\n                ``false`` to match posts with no replies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match posts with any reply, ``false`` to match posts with no replies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_reply_terms", 
               "doc": {
                  "headline": "Clears the reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_forum_id", 
               "doc": {
                  "headline": "Sets the post ``Id`` for this query to match replies assigned to forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_forum_id_terms", 
               "doc": {
                  "headline": "Clears the forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_query", 
               "doc": {
                  "headline": "Tests if a ``ForumQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a forum query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a forum query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_forum_query", 
               "doc": {
                  "headline": "Gets the query for a forum query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "        raise:  Unimplemented - ``supports_forum_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_forum_terms", 
               "doc": {
                  "headline": "Clears the forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_post_query_record", 
               "doc": {
                  "headline": "Gets the post query record corresponding to the given ``Post`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): a post record type\n", 
               "return_doc": "        return: (osid.forum.records.PostQueryRecord) - the post query\n                record", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(post_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_record_type: a post record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post query record\n        :rtype: ``osid.forum.records.PostQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostQueryRecord", 
         "shortname": "PostQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostQueryInspector", 
         "shortname": "PostQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining for post queries.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_timestamp_terms", 
            "get_poster_id_terms", 
            "get_poster_terms", 
            "get_posting_agent_id_terms", 
            "get_posting_agent_terms", 
            "get_subject_line_terms", 
            "get_text_terms", 
            "get_reply_id_terms", 
            "get_reply_terms", 
            "get_forum_id_terms", 
            "get_forum_terms", 
            "get_post_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_timestamp_terms", 
               "doc": {
                  "headline": "Gets the timestamp terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the timestamp terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the timestamp terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_poster_id_terms", 
               "doc": {
                  "headline": "Gets the poster ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_poster_terms", 
               "doc": {
                  "headline": "Gets the poster terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_id_terms", 
               "doc": {
                  "headline": "Gets the poster ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_terms", 
               "doc": {
                  "headline": "Gets the poster terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_subject_line_terms", 
               "doc": {
                  "headline": "Gets the subject line terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_text_terms", 
               "doc": {
                  "headline": "Gets the text terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_reply_id_terms", 
               "doc": {
                  "headline": "Gets the reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the reply ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_reply_terms", 
               "doc": {
                  "headline": "Gets the reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the reply terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply terms\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_forum_id_terms", 
               "doc": {
                  "headline": "Gets the forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the forum ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_forum_terms", 
               "doc": {
                  "headline": "Gets the forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQueryInspector) - the forum terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum terms\n        :rtype: ``osid.forum.ForumQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_post_query_inspector_record", 
               "doc": {
                  "headline": "Gets the query inspector record corresponding to the given ``Post`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): a post record type\n", 
               "return_doc": "        return: (osid.forum.records.PostQueryInspectorRecord) - the post\n                query inspector record", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(post_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_record_type: a post record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post query inspector record\n        :rtype: ``osid.forum.records.PostQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostQueryInspectorRecord", 
         "shortname": "PostQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostForm", 
         "shortname": "PostForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Posts``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``PostAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_timestamp_metadata", 
            "set_timestamp", 
            "clear_timestamp", 
            "get_poster_metadata", 
            "set_poster", 
            "clear_poster", 
            "get_subject_line_metadata", 
            "set_subject_line", 
            "clear_subject_line", 
            "get_text_metadata", 
            "set_text", 
            "clear_text", 
            "get_post_form_record"
         ], 
         "methods": [
            {
               "name": "get_timestamp_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the timestamp", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the timestamp\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_timestamp", 
               "doc": {
                  "headline": "Sets the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    timestamp (osid.calendaring.DateTime): the new timestamp\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``timestamp`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``timestamp`` is ``null``", 
               "sphinx_param_doc": "        :param timestamp: the new timestamp\n        :type timestamp: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``timestamp`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``timestamp`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "timestamp", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_timestamp", 
               "doc": {
                  "headline": "Clears the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_poster_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the poster", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the poster\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_poster", 
               "doc": {
                  "headline": "Sets the poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the new poster\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``resource_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: the new poster\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``resource_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster", 
               "doc": {
                  "headline": "Clears the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_line_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the subject line", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the subject line\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_subject_line", 
               "doc": {
                  "headline": "Sets the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_line (string): the new subject line\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``subject_line`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``subject_line`` is ``null``", 
               "sphinx_param_doc": "        :param subject_line: the new subject line\n        :type subject_line: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``subject_line`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``subject_line`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "subject_line", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_subject_line", 
               "doc": {
                  "headline": "Clears the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_text_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the text\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_text", 
               "doc": {
                  "headline": "Sets the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    text (string): the new text\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``text`` is ``null``", 
               "sphinx_param_doc": "        :param text: the new text\n        :type text: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``text`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_text", 
               "doc": {
                  "headline": "Clears the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_form_record", 
               "doc": {
                  "headline": "Gets the ``PostFormRecord`` corresponding to the given post record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): the post record type\n", 
               "return_doc": "        return: (osid.forum.records.PostFormRecord) - the post form\n                record", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(post_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_record_type: the post record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post form record\n        :rtype: ``osid.forum.records.PostFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostFormRecord", 
         "shortname": "PostFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostSearchOrder", 
         "shortname": "PostSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_timestamp", 
            "order_by_poster", 
            "supports_poster_search_order", 
            "get_poster_search_order", 
            "order_by_posting_agent", 
            "supports_posting_agent_search_order", 
            "get_posting_agent_search_order", 
            "order_by_subject", 
            "order_by_text", 
            "get_post_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_timestamp", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_poster", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_poster_search_order", 
               "doc": {
                  "headline": "Tests if a resource order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a poster order interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a poster order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_poster_search_order", 
               "doc": {
                  "headline": "Gets the poster order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the poster search\n                order interface", 
               "error_doc": "        raise:  Unimplemented - ``supports_poster_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the poster search order interface\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_poster_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_poster_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_posting_agent", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the posting agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_posting_agent_search_order", 
               "doc": {
                  "headline": "Tests if a posting agent order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a posting agent order interface\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a posting agent order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_search_order", 
               "doc": {
                  "headline": "Gets the posting agent search order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the posting\n                agent search order interface", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_posting_agent_search_order()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the posting agent search order interface\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_posting_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_posting_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_subject", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_text", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_order_record", 
               "doc": {
                  "headline": "Gets the post search record order corresponding to the given post record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    post_record_type (osid.type.Type): a post record type\n", 
               "return_doc": "        return: (osid.forum.records.PostSearchOrderRecord) - the post\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``post_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(post_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_record_type: a post record type\n        :type post_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post search order record\n        :rtype: ``osid.forum.records.PostSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostSearchOrderRecord", 
         "shortname": "PostSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostSearch", 
         "shortname": "PostSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing post searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_posts", 
            "order_post_results", 
            "get_post_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_posts", 
               "doc": {
                  "headline": "Execute this search among the given list of posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_ids (osid.id.IdList): list of posts\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_ids`` is ``null``", 
               "sphinx_param_doc": "        :param post_ids: list of posts\n        :type post_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "post_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_post_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_search_order (osid.forum.PostSearchOrder): post\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_search_order`` is ``null``\n        raise:  Unsupported - ``post_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param post_search_order: post search order\n        :type post_search_order: ``osid.forum.PostSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``post_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.PostSearchOrder", 
                     "var_name": "post_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.PostSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_search_record", 
               "doc": {
                  "headline": "Gets the post search record corresponding to the given post search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    post_search_record_type (osid.type.Type): a post search\n                record type\n", 
               "return_doc": "        return: (osid.forum.records.PostSearchRecord) - the post search\n                record", 
               "error_doc": "        raise:  NullArgument - ``post_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(post_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_search_record_type: a post search record type\n        :type post_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post search record\n        :rtype: ``osid.forum.records.PostSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostSearchRecord", 
         "shortname": "PostSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostSearchResults", 
         "shortname": "PostSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_posts", 
            "get_post_query_inspector", 
            "get_post_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_posts", 
               "doc": {
                  "headline": "Gets the post list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostList) - the post list", 
               "error_doc": "        raise:  IllegalState - list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post list\n        :rtype: ``osid.forum.PostList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_post_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terns used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQueryInspector) - the query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.forum.PostQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_post_search_results_record", 
               "doc": {
                  "headline": "Gets the post search results record corresponding to the given post search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    post_search_record_type (osid.type.Type): a post search\n                record type\n", 
               "return_doc": "        return: (osid.forum.records.PostSearchResultsRecord) - the post\n                search results record", 
               "error_doc": "        raise:  NullArgument - ``PostSearchRecordType`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(post_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param post_search_record_type: a post search record type\n        :type post_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the post search results record\n        :rtype: ``osid.forum.records.PostSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``PostSearchRecordType`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(post_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "post_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.PostSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.PostSearchResultsRecord", 
         "shortname": "PostSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``PostSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.PostReceiver", 
         "shortname": "PostReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The post receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Post`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_post", 
            "new_ancestor_post", 
            "new_descendant_post", 
            "changed_post", 
            "deleted_post", 
            "deleted_ancestor_post", 
            "deleted_descendant_post"
         ], 
         "methods": [
            {
               "name": "new_post", 
               "doc": {
                  "headline": "The callback for notifications of new posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the new ``Post``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the new ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_post", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of a post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the registered\n                ``Post``\n        arg:    ancestor_id (osid.id.Id): the Id of the new ancestor\n                post\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the registered ``Post``\n        :type post_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the new ancestor post\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_post", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of a post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the registered\n                ``Post``\n        arg:    descendant_id (osid.id.Id): the Id of the new descendant\n                post\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the registered ``Post``\n        :type post_id: ``osid.id.Id``\n        :param descendant_id: the Id of the new descendant post\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_post", 
               "doc": {
                  "headline": "The callback for notification of updated posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the updated ``Post``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the updated ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_post", 
               "doc": {
                  "headline": "the callback for notification of deleted posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the registered\n                ``Post``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the registered ``Post``\n        :type post_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_post", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of a post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the registered\n                ``Post``\n        arg:    ancestor_id (osid.id.Id): the Id of the removed ancestor\n                post\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the registered ``Post``\n        :type post_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the removed ancestor post\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_post", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of a post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): the ``Id`` of the registered\n                ``Post``\n        arg:    descendant_id (osid.id.Id): the Id of the deleted\n                descendant post\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param post_id: the ``Id`` of the registered ``Post``\n        :type post_id: ``osid.id.Id``\n        :param descendant_id: the Id of the deleted descendant post\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.forum.PostList", 
         "shortname": "PostList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``PostList`` provides a means for accessing ``Post`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (pl.hasNext()) { Post post = pl.getNextPost(); }\n\n    orp\n      while (bl.hasNext()) {\n           Post[] posts = pl.getNextPosts(pl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_post", 
            "get_next_posts"
         ], 
         "methods": [
            {
               "name": "get_next_post", 
               "doc": {
                  "headline": "Gets the next ``Post`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Post) - the next ``Post`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``Post`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Post`` in this list. The ``has_next()`` method should be used to test that a next ``Post`` is available before calling this method.\n        :rtype: ``osid.forum.Post``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Post", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_posts", 
               "doc": {
                  "headline": "Gets the next set of ``Post`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Post`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.forum.Post) - an array of ``Post`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Post`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Post`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.forum.Post``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.forum.Post", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.Reply", 
         "shortname": "Reply", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Reply`` is a response to a ``Post`` or another ``Reply``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject", 
            "osid.Containable", 
            "osid.Subjugateable"
         ], 
         "inherit_shortnames": [
            "OsidObject", 
            "Containable", 
            "Subjugateable"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Containable"
            }, 
            {
               "pkg_name": "osid", 
               "name": "Subjugateable"
            }
         ], 
         "method_names": [
            "get_post_id", 
            "get_post", 
            "get_reply_ids", 
            "get_replies", 
            "get_timestamp", 
            "get_poster_id", 
            "get_poster", 
            "get_posting_agent_id", 
            "get_posting_agent", 
            "get_subject_line", 
            "get_text", 
            "get_reply_record"
         ], 
         "methods": [
            {
               "name": "get_post_id", 
               "doc": {
                  "headline": "Gets the ``Id`` of the original top level post for this reply.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the post ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_post", 
               "doc": {
                  "headline": "Gets the original top level post.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Post) - the post", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post\n        :rtype: ``osid.forum.Post``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Post", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_reply_ids", 
               "doc": {
                  "headline": "Gets the ``Ids`` of the replies to this rpely.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the reply ``Ids``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {}
            }, 
            {
               "name": "get_replies", 
               "doc": {
                  "headline": "Gets the replies to this reply.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyList) - the replies", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the replies\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_timestamp", 
               "doc": {
                  "headline": "Gets the time of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the time", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_poster_id", 
               "doc": {
                  "headline": "Gets the poster resource ``Id`` of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the poster resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the poster resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_poster", 
               "doc": {
                  "headline": "Gets the posting of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the poster resource", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the poster resource\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_posting_agent_id", 
               "doc": {
                  "headline": "Gets the posting ``Id`` of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the posting agent ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the posting agent ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent", 
               "doc": {
                  "headline": "Gets the posting of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the posting agent", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the posting agent\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_subject_line", 
               "doc": {
                  "headline": "Gets the subject line of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the subject", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the subject\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_text", 
               "doc": {
                  "headline": "Gets the text of the entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.locale.DisplayText) - the entry text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the entry text\n        :rtype: ``osid.locale.DisplayText``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.locale.DisplayText", 
               "errors": {}
            }, 
            {
               "name": "get_reply_record", 
               "doc": {
                  "headline": "Gets the reply record corresponding to the given ``Reply`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``reply_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(reply_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): the type of reply\n                record to retrieve\n", 
               "return_doc": "        return: (osid.forum.records.ReplyRecord) - the reply record", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(reply_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_record_type: the type of reply record to retrieve\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply record\n        :rtype: ``osid.forum.records.ReplyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplyRecord", 
         "shortname": "ReplyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Reply``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplyQuery", 
         "shortname": "ReplyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching for replies.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery", 
            "osid.OsidContainableQuery", 
            "osid.OsidSubjugateableQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery", 
            "OsidContainableQuery", 
            "OsidSubjugateableQuery"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidContainableQuery"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQuery"
            }
         ], 
         "method_names": [
            "match_post_id", 
            "clear_post_id_terms", 
            "supports_post_query", 
            "get_post_query", 
            "clear_post_terms", 
            "match_timestamp", 
            "clear_timestamp_terms", 
            "match_poster_id", 
            "clear_poster_id_terms", 
            "supports_poster_query", 
            "get_poster_query", 
            "clear_poster_terms", 
            "match_posting_agent_id", 
            "clear_posting_agent_id_terms", 
            "supports_posting_agent_query", 
            "get_posting_agent_query", 
            "clear_posting_agent_terms", 
            "match_subject_line", 
            "match_any_subject_line", 
            "clear_subject_line_terms", 
            "match_text", 
            "match_any_text", 
            "clear_text_terms", 
            "match_containing_reply_id", 
            "clear_containing_reply_id_terms", 
            "supports_containing_reply_query", 
            "get_containing_reply_query", 
            "match_any_containing_reply", 
            "clear_containing_reply_terms", 
            "match_contained_reply_id", 
            "clear_contained_reply_id_terms", 
            "supports_contained_reply_query", 
            "get_contained_reply_query", 
            "match_any_contained_reply", 
            "clear_contained_reply_terms", 
            "match_forum_id", 
            "clear_forum_id_terms", 
            "supports_forum_query", 
            "get_forum_query", 
            "clear_forum_terms", 
            "get_reply_query_record"
         ], 
         "methods": [
            {
               "name": "match_post_id", 
               "doc": {
                  "headline": "Sets the post ``Id`` for this query to match replies to posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): a post ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``", 
               "sphinx_param_doc": "        :param post_id: a post ``Id``\n        :type post_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_post_id_terms", 
               "doc": {
                  "headline": "Clears the post ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_post_query", 
               "doc": {
                  "headline": "Tests if a ``PostQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a post query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a post query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_query", 
               "doc": {
                  "headline": "Gets the query for a post query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQuery) - the post query", 
               "error_doc": "        raise:  Unimplemented - ``supports_post_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_post_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_post_terms", 
               "doc": {
                  "headline": "Clears the post terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_timestamp", 
               "doc": {
                  "headline": "Matches entries whose sent time is between the supplied range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start_time (osid.calendaring.DateTime): start time\n        arg:    end_time (osid.calendaring.DateTime): end time\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start_time`` is greater than\n                ``end_time``\n        raise:  NullArgument - ``start_time`` or ``end_time`` is\n                ``null``", 
               "sphinx_param_doc": "        :param start_time: start time\n        :type start_time: ``osid.calendaring.DateTime``\n        :param end_time: end time\n        :type end_time: ``osid.calendaring.DateTime``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start_time`` is greater than ``end_time``\n        :raise: ``NullArgument`` -- ``start_time`` or ``end_time`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_timestamp_terms", 
               "doc": {
                  "headline": "Clears the timestamp terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_poster_id", 
               "doc": {
                  "headline": "Matches the poster of the entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): resource ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: resource ``Id`` to match\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster_id_terms", 
               "doc": {
                  "headline": "Clears the poster resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_poster_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying posters.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_poster_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_poster_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_poster_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_poster_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster_terms", 
               "doc": {
                  "headline": "Clears the poster terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_posting_agent_id", 
               "doc": {
                  "headline": "Matches the posting agent of the entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): agent ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: agent ``Id`` to match\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_posting_agent_id_terms", 
               "doc": {
                  "headline": "Clears the posting agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_posting_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available for querying posting agents.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_posting_agent_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_posting_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_posting_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_posting_agent_terms", 
               "doc": {
                  "headline": "Clears the posting agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_subject_line", 
               "doc": {
                  "headline": "Adds a subject line to match.", 
                  "body": "        Multiple subject line matches can be added to perform a boolean\n        ``OR`` among them."
               }, 
               "arg_doc": "        arg:    subject (string): display name to match\n        arg:    string_match_type (osid.type.Type): the string match\n                type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``subject is`` not of\n                ``string_match_type``\n        raise:  NullArgument - ``subject`` or ``string_match_type`` is\n                ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param subject: display name to match\n        :type subject: ``string``\n        :param string_match_type: the string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``subject is`` not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``subject`` or ``string_match_type`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "subject", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_subject_line", 
               "doc": {
                  "headline": "Matches entries with any subject line.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match entries with any\n                subject line, ``false`` to match entries with no subject\n                line\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match entries with any subject line, ``false`` to match entries with no subject line\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_subject_line_terms", 
               "doc": {
                  "headline": "Clears the subject line terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_text", 
               "doc": {
                  "headline": "Adds text to match.", 
                  "body": "        Multiple text matches can be added to perform a boolean ``OR``\n        among them."
               }, 
               "arg_doc": "        arg:    text (string): text to match\n        arg:    string_match_type (osid.type.Type): the string match\n                type\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text is`` not of\n                ``string_match_type``\n        raise:  NullArgument - ``text`` or ``string_match_type`` is\n                ``null``\n        raise:  Unsupported -\n                ``supports_string_match_type(string_match_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param text: text to match\n        :type text: ``string``\n        :param string_match_type: the string match type\n        :type string_match_type: ``osid.type.Type``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text is`` not of ``string_match_type``\n        :raise: ``NullArgument`` -- ``text`` or ``string_match_type`` is ``null``\n        :raise: ``Unsupported`` -- ``supports_string_match_type(string_match_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "string_match_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string", 
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_text", 
               "doc": {
                  "headline": "Matches entries with any text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match entries with any\n                text, ``false`` to match entries with no text\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match entries with any text, ``false`` to match entries with no text\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_text_terms", 
               "doc": {
                  "headline": "Clears the text terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_containing_reply_id", 
               "doc": {
                  "headline": "Sets the reply ``Id`` for this query to match replies that have the specified reply as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): a reply ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``", 
               "sphinx_param_doc": "        :param reply_id: a reply ``Id``\n        :type reply_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_containing_reply_id_terms", 
               "doc": {
                  "headline": "Clears the containing reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_containing_reply_query", 
               "doc": {
                  "headline": "Tests if a containing reply query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a containing reply query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a containing reply query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_containing_reply_query", 
               "doc": {
                  "headline": "Gets the query for a containing reply.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQuery) - the containing reply query", 
               "error_doc": "        raise:  Unimplemented - ``supports_containing_reply_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the containing reply query\n        :rtype: ``osid.forum.ReplyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_containing_reply_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_containing_reply_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_containing_reply", 
               "doc": {
                  "headline": "Matches replies with any ancestor reply.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match replies with any\n                ancestor reply, ``false`` to match replies with no\n                ancestor replies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match replies with any ancestor reply, ``false`` to match replies with no ancestor replies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_containing_reply_terms", 
               "doc": {
                  "headline": "Clears the containing reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_contained_reply_id", 
               "doc": {
                  "headline": "Sets the reply ``Id`` for this query to match replies that have the specified reply as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): a reply ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``", 
               "sphinx_param_doc": "        :param reply_id: a reply ``Id``\n        :type reply_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_contained_reply_id_terms", 
               "doc": {
                  "headline": "Clears the contained reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_contained_reply_query", 
               "doc": {
                  "headline": "Tests if a contained reply query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a contained reply query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a contained reply query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_contained_reply_query", 
               "doc": {
                  "headline": "Gets the query for a contained reply.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQuery) - the contained reply query", 
               "error_doc": "        raise:  Unimplemented - ``supports_contained_reply_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the contained reply query\n        :rtype: ``osid.forum.ReplyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_contained_reply_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_contained_reply_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_contained_reply", 
               "doc": {
                  "headline": "Matches replies with any descednant reply.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match replies with any\n                descendant reply, ``false`` to match replies with no\n                descendant replies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match replies with any descendant reply, ``false`` to match replies with no descendant replies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_contained_reply_terms", 
               "doc": {
                  "headline": "Clears the contained reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_forum_id", 
               "doc": {
                  "headline": "Sets the post ``Id`` for this query to match replies assigned to forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_forum_id_terms", 
               "doc": {
                  "headline": "Clears the forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_forum_query", 
               "doc": {
                  "headline": "Tests if a ``ForumQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a forum query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a forum query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_forum_query", 
               "doc": {
                  "headline": "Gets the query for a forum query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "        raise:  Unimplemented - ``supports_forum_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_forum_terms", 
               "doc": {
                  "headline": "Clears the forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_reply_query_record", 
               "doc": {
                  "headline": "Gets the reply query record corresponding to the given ``Reply`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): a reply record type\n", 
               "return_doc": "        return: (osid.forum.records.ReplyQueryRecord) - the reply query\n                record", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(reply_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_record_type: a reply record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply query record\n        :rtype: ``osid.forum.records.ReplyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplyQueryRecord", 
         "shortname": "ReplyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplyQueryInspector", 
         "shortname": "ReplyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining reply queries.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector", 
            "osid.OsidContainableQueryInspector", 
            "osid.OsidSubjugateableQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector", 
            "OsidContainableQueryInspector", 
            "OsidSubjugateableQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidContainableQueryInspector"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableQueryInspector"
            }
         ], 
         "method_names": [
            "get_post_id_terms", 
            "get_post_terms", 
            "get_timestamp_terms", 
            "get_poster_id_terms", 
            "get_poster_terms", 
            "get_posting_agent_id_terms", 
            "get_posting_agent_terms", 
            "get_subject_line_terms", 
            "get_text_terms", 
            "get_containing_reply_id_terms", 
            "get_containing_reply_terms", 
            "get_contained_reply_id_terms", 
            "get_contained_reply_terms", 
            "get_forum_id_terms", 
            "get_forum_terms", 
            "get_reply_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_post_id_terms", 
               "doc": {
                  "headline": "Gets the post ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the post ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_post_terms", 
               "doc": {
                  "headline": "Gets the post terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the post terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post terms\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_timestamp_terms", 
               "doc": {
                  "headline": "Gets the timestamp terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeTerm) - the timestamp terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the timestamp terms\n        :rtype: ``osid.search.terms.DateTimeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_poster_id_terms", 
               "doc": {
                  "headline": "Gets the poster ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_poster_terms", 
               "doc": {
                  "headline": "Gets the poster terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_id_terms", 
               "doc": {
                  "headline": "Gets the posting agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_terms", 
               "doc": {
                  "headline": "Gets the posting agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the query\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_subject_line_terms", 
               "doc": {
                  "headline": "Gets the subject line terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_text_terms", 
               "doc": {
                  "headline": "Gets the text terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.StringTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.StringTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.StringTerm", 
               "errors": {}
            }, 
            {
               "name": "get_containing_reply_id_terms", 
               "doc": {
                  "headline": "Gets the containing reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the containing reply ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the containing reply ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_containing_reply_terms", 
               "doc": {
                  "headline": "Gets the containing reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the containing reply\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the containing reply terms\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_contained_reply_id_terms", 
               "doc": {
                  "headline": "Gets the contained reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the contained reply ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the contained reply ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_contained_reply_terms", 
               "doc": {
                  "headline": "Gets the contained reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the contained reply\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the contained reply terms\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_forum_id_terms", 
               "doc": {
                  "headline": "Gets the forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the forum ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_forum_terms", 
               "doc": {
                  "headline": "Gets the forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQueryInspector) - the forum terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum terms\n        :rtype: ``osid.forum.ForumQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_reply_query_inspector_record", 
               "doc": {
                  "headline": "Gets the reply query inspector record corresponding to the given ``Reply`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): a reply record type\n", 
               "return_doc": "        return: (osid.forum.records.ReplyQueryInspectorRecord) - the\n                reply query inspector record", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(reply_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_record_type: a reply record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply query inspector record\n        :rtype: ``osid.forum.records.ReplyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplyQueryInspectorRecord", 
         "shortname": "ReplyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplyForm", 
         "shortname": "ReplyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Reply`` objects.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ReplyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm", 
            "osid.OsidContainableForm", 
            "osid.OsidSubjugateableForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm", 
            "OsidContainableForm", 
            "OsidSubjugateableForm"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidContainableForm"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableForm"
            }
         ], 
         "method_names": [
            "get_timestamp_metadata", 
            "set_timestamp", 
            "clear_timestamp", 
            "get_poster_metadata", 
            "set_poster", 
            "clear_poster", 
            "get_subject_line_metadata", 
            "set_subject_line", 
            "clear_subject_line", 
            "get_text_metadata", 
            "set_text", 
            "clear_text", 
            "get_reply_form_record"
         ], 
         "methods": [
            {
               "name": "get_timestamp_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the timestamp", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the timestamp\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_timestamp", 
               "doc": {
                  "headline": "Sets the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    timestamp (osid.calendaring.DateTime): the new timestamp\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``timestamp`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``timestamp`` is ``null``", 
               "sphinx_param_doc": "        :param timestamp: the new timestamp\n        :type timestamp: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``timestamp`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``timestamp`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "timestamp", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_timestamp", 
               "doc": {
                  "headline": "Clears the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_poster_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the poster", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the poster\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_poster", 
               "doc": {
                  "headline": "Sets the poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): the new poster\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``resource_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: the new poster\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``resource_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_poster", 
               "doc": {
                  "headline": "Clears the poster.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_subject_line_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the subject line", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the subject line\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_subject_line", 
               "doc": {
                  "headline": "Sets the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    subject_line (string): the new subject line\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``subject_line`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``subject_line`` is ``null``", 
               "sphinx_param_doc": "        :param subject_line: the new subject line\n        :type subject_line: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``subject_line`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``subject_line`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "subject_line", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_subject_line", 
               "doc": {
                  "headline": "Clears the subject line.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_text_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the text", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the text\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_text", 
               "doc": {
                  "headline": "Sets the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    text (string): the new text\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``text`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``text`` is ``null``", 
               "sphinx_param_doc": "        :param text: the new text\n        :type text: ``string``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``text`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``text`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "string", 
                     "var_name": "text", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "string"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_text", 
               "doc": {
                  "headline": "Clears the text.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_form_record", 
               "doc": {
                  "headline": "Gets the ``ReplyFormRecord`` corresponding to the given reply record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): the reply record\n                type\n", 
               "return_doc": "        return: (osid.forum.records.ReplyFormRecord) - the reply form\n                record", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(reply_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_record_type: the reply record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply form record\n        :rtype: ``osid.forum.records.ReplyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplyFormRecord", 
         "shortname": "ReplyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplySearchOrder", 
         "shortname": "ReplySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder", 
            "osid.OsidContainableSearchOrder", 
            "osid.OsidSubjugateableSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder", 
            "OsidContainableSearchOrder", 
            "OsidSubjugateableSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "osid", 
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidContainableSearchOrder"
            }, 
            {
               "pkg_name": "osid", 
               "name": "OsidSubjugateableSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_timestamp", 
            "order_by_poster", 
            "supports_poster_search_order", 
            "get_poster_search_order", 
            "order_by_posting_agent", 
            "supports_posting_agent_search_order", 
            "get_posting_agent_search_order", 
            "order_by_subject_line", 
            "order_by_text", 
            "get_reply_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_timestamp", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_poster", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the poster.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_poster_search_order", 
               "doc": {
                  "headline": "Tests if a poster resource search order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource search order\n                interface is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource search order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_poster_search_order", 
               "doc": {
                  "headline": "Gets the resource search order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order interface", 
               "error_doc": "        raise:  Unimplemented - ``supports_poster_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order interface\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_poster_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_poster_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_posting_agent", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the posting agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_posting_agent_search_order", 
               "doc": {
                  "headline": "Tests if a posting agent search order interface is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a agent search order interface\n                is available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a agent search order interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_posting_agent_search_order", 
               "doc": {
                  "headline": "Gets the posting agent search order interface.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order interface", 
               "error_doc": "        raise:  Unimplemented -\n                ``supports_posting_agent_search_order()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order interface\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_posting_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_posting_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_subject_line", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the subject.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_text", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the text.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_search_order_record", 
               "doc": {
                  "headline": "Gets the reply search order record corresponding to the given reply record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    reply_record_type (osid.type.Type): a reply record type\n", 
               "return_doc": "        return: (osid.forum.records.ReplySearchOrderRecord) - the reply\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``reply_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(reply_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_record_type: a reply record type\n        :type reply_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply search order record\n        :rtype: ``osid.forum.records.ReplySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplySearchOrderRecord", 
         "shortname": "ReplySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplySearch", 
         "shortname": "ReplySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing reply searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_replies", 
            "order_reply_results", 
            "get_reply_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_replies", 
               "doc": {
                  "headline": "Execute this search among the given list of replies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_ids (osid.id.IdList): list of replies\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_ids`` is ``null``", 
               "sphinx_param_doc": "        :param reply_ids: list of replies\n        :type reply_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "reply_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_reply_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_search_order (osid.forum.ReplySearchOrder): reply\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_search_order`` is ``null``\n        raise:  Unsupported - ``reply_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param reply_search_order: reply search order\n        :type reply_search_order: ``osid.forum.ReplySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``reply_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ReplySearchOrder", 
                     "var_name": "reply_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ReplySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_search_record", 
               "doc": {
                  "headline": "Gets the reply search record corresponding to the given reply search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record ."
               }, 
               "arg_doc": "        arg:    reply_search_record_type (osid.type.Type): a reply\n                search record type\n", 
               "return_doc": "        return: (osid.forum.records.ReplySearchRecord) - the reply\n                search record", 
               "error_doc": "        raise:  NullArgument - ``reply_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(reply_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_search_record_type: a reply search record type\n        :type reply_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply search record\n        :rtype: ``osid.forum.records.ReplySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplySearchRecord", 
         "shortname": "ReplySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplySearchResults", 
         "shortname": "ReplySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_replies", 
            "get_reply_query_inspector", 
            "get_reply_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_replies", 
               "doc": {
                  "headline": "Gets the reply list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyList) - the reply list", 
               "error_doc": "        raise:  IllegalState - list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply list\n        :rtype: ``osid.forum.ReplyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_reply_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terns used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_reply_search_results_record", 
               "doc": {
                  "headline": "Gets the reply search results record corresponding to the given reply search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    reply_search_record_type (osid.type.Type): a reply\n                search record type\n", 
               "return_doc": "        return: (osid.forum.records.ReplySearchResultsRecord) - the\n                reply search results record", 
               "error_doc": "        raise:  NullArgument - ``reply_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(reply_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param reply_search_record_type: a reply search record type\n        :type reply_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the reply search results record\n        :rtype: ``osid.forum.records.ReplySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(reply_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "reply_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ReplySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ReplySearchResultsRecord", 
         "shortname": "ReplySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ReplySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ReplyReceiver", 
         "shortname": "ReplyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The reply receiver is the consumer supplied interface for receiving notifications pertaining to new or deleted replies.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_reply", 
            "changed_reply", 
            "deleted_reply"
         ], 
         "methods": [
            {
               "name": "new_reply", 
               "doc": {
                  "headline": "The callback for notifications of new replies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the new reply\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the new reply\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_reply", 
               "doc": {
                  "headline": "The callback for notifications of updated replies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the updated reply\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the updated reply\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_reply", 
               "doc": {
                  "headline": "the callback for notification of deleted replies.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): the ``Id`` of the deleted reply\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param reply_id: the ``Id`` of the deleted reply\n        :type reply_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ReplyList", 
         "shortname": "ReplyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ReplyList`` provides a means for accessing ``Reply`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Reply reply = rl.getNextReply(); }\n\n    or\n      while (rl.hasNext()) {\n           Reply[] replies = rl.getNextRepliess(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_reply", 
            "get_next_replies"
         ], 
         "methods": [
            {
               "name": "get_next_reply", 
               "doc": {
                  "headline": "Gets the next ``Reply`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Reply) - the next ``Reply`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Reply`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Reply`` in this list. The ``has_next()`` method should be used to test that a next ``Reply`` is available before calling this method.\n        :rtype: ``osid.forum.Reply``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Reply", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_replies", 
               "doc": {
                  "headline": "Gets the next set of ``Reply`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Reply`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.forum.Reply) - an array of ``Reply`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Reply`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Reply`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.forum.Reply``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.forum.Reply", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.Forum", 
         "shortname": "Forum", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Forum`` represents a collection of posts and replies.", 
            "body": "    Like all OSID objects, a ``Forum`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_forum_record"
         ], 
         "methods": [
            {
               "name": "get_forum_record", 
               "doc": {
                  "headline": "Gets the forum record corresponding to the given ``Forum`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``forum_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(forum_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): the type of forum\n                record to retrieve\n", 
               "return_doc": "        return: (osid.forum.records.ForumRecord) - the forum record", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(forum_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_record_type: the type of forum record to retrieve\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum record\n        :rtype: ``osid.forum.records.ForumRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumRecord", 
         "shortname": "ForumRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Forum``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumQuery", 
         "shortname": "ForumQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching for forums.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_reply_id", 
            "clear_reply_id_terms", 
            "supports_reply_query", 
            "get_reply_query", 
            "match_any_reply", 
            "clear_reply_terms", 
            "match_post_id", 
            "clear_post_id_terms", 
            "supports_post_query", 
            "get_post_query", 
            "match_any_post", 
            "clear_post_terms", 
            "match_ancestor_forum_id", 
            "clear_ancestor_forum_id_terms", 
            "supports_ancestor_forum_query", 
            "get_ancestor_forum_query", 
            "match_any_ancestor_forum", 
            "clear_ancestor_forum_terms", 
            "match_descendant_forum_id", 
            "clear_descendant_forum_id_terms", 
            "supports_descendant_forum_query", 
            "get_descendant_forum_query", 
            "match_any_descendant_forum", 
            "clear_descendant_forum_terms", 
            "get_forum_query_record"
         ], 
         "methods": [
            {
               "name": "match_reply_id", 
               "doc": {
                  "headline": "Sets the reply ``Id`` for this query to match replies assigned to forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    reply_id (osid.id.Id): a reply ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``reply_id`` is ``null``", 
               "sphinx_param_doc": "        :param reply_id: a reply ``Id``\n        :type reply_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``reply_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "reply_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_reply_id_terms", 
               "doc": {
                  "headline": "Clears the reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_reply_query", 
               "doc": {
                  "headline": "Tests if a reply query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a reply query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a reply query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_reply_query", 
               "doc": {
                  "headline": "Gets the query for a forum.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQuery) - the reply query", 
               "error_doc": "        raise:  Unimplemented - ``supports_reply_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply query\n        :rtype: ``osid.forum.ReplyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_reply_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_reply_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_reply", 
               "doc": {
                  "headline": "Matches forums with any reply.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match forums with any\n                reply, ``false`` to match forums with no replies\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match forums with any reply, ``false`` to match forums with no replies\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_reply_terms", 
               "doc": {
                  "headline": "Clears the reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_post_id", 
               "doc": {
                  "headline": "Sets the post ``Id`` for this query to match replies assigned to posts.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    post_id (osid.id.Id): a post ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``post_id`` is ``null``", 
               "sphinx_param_doc": "        :param post_id: a post ``Id``\n        :type post_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``post_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "post_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_post_id_terms", 
               "doc": {
                  "headline": "Clears the post ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_post_query", 
               "doc": {
                  "headline": "Tests if a ``PostQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a post query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a post query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_post_query", 
               "doc": {
                  "headline": "Gets the query for a post query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQuery) - the post query", 
               "error_doc": "        raise:  Unimplemented - ``supports_post_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post query\n        :rtype: ``osid.forum.PostQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_post_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_post_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_post", 
               "doc": {
                  "headline": "Matches forums with any post.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match forums with any post,\n                ``false`` to match forums with no posts\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match forums with any post, ``false`` to match forums with no posts\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_post_terms", 
               "doc": {
                  "headline": "Clears the post terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_forum_id", 
               "doc": {
                  "headline": "Sets the forum ``Id`` for this query to match forums that have the specified forum as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_forum_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_forum_query", 
               "doc": {
                  "headline": "Tests if a ``ForumQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a forum query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a forum query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_forum_query", 
               "doc": {
                  "headline": "Gets the query for a forum.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_forum_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_forum", 
               "doc": {
                  "headline": "Matches forums with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match forums with any\n                ancestor, ``false`` to match root forums\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match forums with any ancestor, ``false`` to match root forums\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_forum_terms", 
               "doc": {
                  "headline": "Clears the ancestor forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_forum_id", 
               "doc": {
                  "headline": "Sets the forum ``Id`` for this query to match forums that have the specified forum as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): a forum ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_id`` is ``null``", 
               "sphinx_param_doc": "        :param forum_id: a forum ``Id``\n        :type forum_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_forum_id_terms", 
               "doc": {
                  "headline": "Clears the descendant forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_forum_query", 
               "doc": {
                  "headline": "Tests if a ``ForumQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a forum query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a forum query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_forum_query", 
               "doc": {
                  "headline": "Gets the query for a forum.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQuery) - the forum query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_forum_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum query\n        :rtype: ``osid.forum.ForumQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_forum_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_forum_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_forum", 
               "doc": {
                  "headline": "Matches forums with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match forums with any\n                descendant, ``false`` to match leaf forums\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match forums with any descendant, ``false`` to match leaf forums\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_forum_terms", 
               "doc": {
                  "headline": "Clears the descendant forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_forum_query_record", 
               "doc": {
                  "headline": "Gets the forum query record corresponding to the given ``Forum`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): a forum record type\n", 
               "return_doc": "        return: (osid.forum.records.ForumQueryRecord) - the forum query\n                record", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(forum_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_record_type: a forum record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum query record\n        :rtype: ``osid.forum.records.ForumQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumQueryRecord", 
         "shortname": "ForumQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumQueryInspector", 
         "shortname": "ForumQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining forum queries.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_reply_id_terms", 
            "get_reply_terms", 
            "get_post_id_terms", 
            "get_post_terms", 
            "get_ancestor_forum_id_terms", 
            "get_ancestor_forum_terms", 
            "get_descendant_forum_id_terms", 
            "get_descendant_forum_terms", 
            "get_forum_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_reply_id_terms", 
               "doc": {
                  "headline": "Gets the reply ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the reply ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_reply_terms", 
               "doc": {
                  "headline": "Gets the reply terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ReplyQueryInspector) - the reply terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the reply terms\n        :rtype: ``osid.forum.ReplyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ReplyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_post_id_terms", 
               "doc": {
                  "headline": "Gets the post ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the post ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_post_terms", 
               "doc": {
                  "headline": "Gets the post terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.PostQueryInspector) - the post terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the post terms\n        :rtype: ``osid.forum.PostQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.PostQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_forum_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor forum ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor forum ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_forum_terms", 
               "doc": {
                  "headline": "Gets the ancestor forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQueryInspector) - the ancestor forum\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor forum terms\n        :rtype: ``osid.forum.ForumQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_forum_id_terms", 
               "doc": {
                  "headline": "Gets the descendant forum ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant forum ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant forum ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_forum_terms", 
               "doc": {
                  "headline": "Gets the descendant forum terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQueryInspector) - the descendant forum\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant forum terms\n        :rtype: ``osid.forum.ForumQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_forum_query_inspector_record", 
               "doc": {
                  "headline": "Gets the forum query inspector record corresponding to the given ``Forum`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): a forum record type\n", 
               "return_doc": "        return: (osid.forum.records.ForumQueryInspectorRecord) - the\n                forum query inspector record", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(forum_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_record_type: a forum record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum query inspector record\n        :rtype: ``osid.forum.records.ForumQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumQueryInspectorRecord", 
         "shortname": "ForumQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumForm", 
         "shortname": "ForumForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Forums``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``ForumAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_forum_form_record"
         ], 
         "methods": [
            {
               "name": "get_forum_form_record", 
               "doc": {
                  "headline": "Gets the ``ForumFormRecord`` corresponding to the given forum record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): the forum record\n                type\n", 
               "return_doc": "        return: (osid.forum.records.ForumFormRecord) - the forum form\n                record", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(forum_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_record_type: the forum record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum form record\n        :rtype: ``osid.forum.records.ForumFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumFormRecord", 
         "shortname": "ForumFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumSearchOrder", 
         "shortname": "ForumSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_forum_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_forum_search_order_record", 
               "doc": {
                  "headline": "Gets the forum search order record corresponding to the given forum record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    forum_record_type (osid.type.Type): a forum record type\n", 
               "return_doc": "        return: (osid.forum.records.ForumSearchOrderRecord) - the forum\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``forum_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(forum_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_record_type: a forum record type\n        :type forum_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum search order record\n        :rtype: ``osid.forum.records.ForumSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumSearchOrderRecord", 
         "shortname": "ForumSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumSearch", 
         "shortname": "ForumSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing forum searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_forums", 
            "order_forum_results", 
            "get_forum_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_forums", 
               "doc": {
                  "headline": "Execute this search among the given list of forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_ids (osid.id.IdList): list of forums\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forum_ids`` is ``null``", 
               "sphinx_param_doc": "        :param forum_ids: list of forums\n        :type forum_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "forum_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_forum_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forumsearch_order (osid.forum.ForumSearchOrder): forum\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``forumsearch_order`` is ``null``\n        raise:  Unsupported - ``forumsearch_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param forumsearch_order: forum search order\n        :type forumsearch_order: ``osid.forum.ForumSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forumsearch_order`` is ``null``\n        :raise: ``Unsupported`` -- ``forumsearch_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.forum.ForumSearchOrder", 
                     "var_name": "forumsearch_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.forum.ForumSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_search_record", 
               "doc": {
                  "headline": "Gets the forum search record corresponding to the given forum search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    forum_search_record_type (osid.type.Type): a forum\n                search record type\n", 
               "return_doc": "        return: (osid.forum.records.ForumSearchRecord) - the forum\n                search record", 
               "error_doc": "        raise:  NullArgument - ``forum_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(forum_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_search_record_type: a forum search record type\n        :type forum_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum search record\n        :rtype: ``osid.forum.records.ForumSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumSearchRecord", 
         "shortname": "ForumSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumSearchResults", 
         "shortname": "ForumSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_forums", 
            "get_forum_query_inspector", 
            "get_forum_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_forums", 
               "doc": {
                  "headline": "Gets the forum list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumList) - the forum list", 
               "error_doc": "        raise:  IllegalState - list has already been retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum list\n        :rtype: ``osid.forum.ForumList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list has already been retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_forum_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terns used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumQueryInspector) - the query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query inspector\n        :rtype: ``osid.forum.ForumQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_forum_search_results_record", 
               "doc": {
                  "headline": "Gets the forum search results record corresponding to the given forum search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    forum_search_record_type (osid.type.Type): a forum\n                search record type\n", 
               "return_doc": "        return: (osid.forum.records.ForumSearchResultsRecord) - the\n                forum search results record", 
               "error_doc": "        raise:  NullArgument - ``forum_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(forum_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param forum_search_record_type: a forum search record type\n        :type forum_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the forum search results record\n        :rtype: ``osid.forum.records.ForumSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``forum_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(forum_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "forum_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.forum.records.ForumSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.records.ForumSearchResultsRecord", 
         "shortname": "ForumSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``ForumSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.forum.ForumReceiver", 
         "shortname": "ForumReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The forum receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Forum`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_forum", 
            "new_ancestor_forum", 
            "new_descendant_forum", 
            "changed_forum", 
            "deleted_forum", 
            "deleted_ancestor_forum", 
            "deleted_descendant_forum"
         ], 
         "methods": [
            {
               "name": "new_forum", 
               "doc": {
                  "headline": "The callback for notifications of new forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the new ``Forum``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the new ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_forum", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the registered\n                ``Forum``\n        arg:    ancestor_id (osid.id.Id): the Id of the new ancestor\n                forum\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the registered ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the new ancestor forum\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_forum", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the registered\n                ``Forum``\n        arg:    descendant_id (osid.id.Id): the Id of the new descendant\n                forum\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the registered ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param descendant_id: the Id of the new descendant forum\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_forum", 
               "doc": {
                  "headline": "The callback for notification of updated forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the updated\n                ``Forum``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the updated ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_forum", 
               "doc": {
                  "headline": "the callback for notification of deleted forums.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the registered\n                ``Forum``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the registered ``Forum``\n        :type forum_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_forum", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the registered\n                ``Forum``\n        arg:    ancestor_id (osid.id.Id): the Id of the removed ancestor\n                forum\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the registered ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the removed ancestor forum\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_forum", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of a forum.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    forum_id (osid.id.Id): the ``Id`` of the registered\n                ``Forum``\n        arg:    descendant_id (osid.id.Id): the Id of the deleted\n                descendant forum\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param forum_id: the ``Id`` of the registered ``Forum``\n        :type forum_id: ``osid.id.Id``\n        :param descendant_id: the Id of the deleted descendant forum\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "forum_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumList", 
         "shortname": "ForumList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ForumList`` provides a means for accessing ``Forum`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (fl.hasNext()) { Forum forum = fl.getNextForum(); }\n\n    or\n      while (fl.hasNext()) {\n           Forum[] forums = fl.getNextForums(fl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_forum", 
            "get_next_forums"
         ], 
         "methods": [
            {
               "name": "get_next_forum", 
               "doc": {
                  "headline": "Gets the next ``Forum`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the next ``Forum`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Forum`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Forum`` in this list. The ``has_next()`` method should be used to test that a next ``Forum`` is available before calling this method.\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_forums", 
               "doc": {
                  "headline": "Gets the next set of ``Forum`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Forum`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.forum.Forum) - an array of ``Forum`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Forum`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Forum`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.forum.Forum", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumNode", 
         "shortname": "ForumNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``ForumHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_forum", 
            "get_parent_forum_nodes", 
            "get_child_forum_nodes"
         ], 
         "methods": [
            {
               "name": "get_forum", 
               "doc": {
                  "headline": "Gets the ``Forum`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.Forum) - the forum represented by this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the forum represented by this node\n        :rtype: ``osid.forum.Forum``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.Forum", 
               "errors": {}
            }, 
            {
               "name": "get_parent_forum_nodes", 
               "doc": {
                  "headline": "Gets the parents of this forum.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumNodeList) - the parents of this forum", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this forum\n        :rtype: ``osid.forum.ForumNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_forum_nodes", 
               "doc": {
                  "headline": "Gets the children of this forum.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumNodeList) - the children of this forum", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this forum\n        :rtype: ``osid.forum.ForumNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.forum.ForumNodeList", 
         "shortname": "ForumNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``ForumNodeList`` provides a means for accessing ``ForumNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (fnl.hasNext()) { ForumNode node =\n    fnl.getNextForumNode(); }\n\n    or\n      while (fnl.hasNext()) {\n           ForumNode[] nodes = fnl.getNextForumNodes(fnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_forum_node", 
            "get_next_forum_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_forum_node", 
               "doc": {
                  "headline": "Gets the next ``ForumNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.forum.ForumNode) - the next ``ForumNode`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``ForumNode`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``ForumNode`` in this list. The ``has_next()`` method should be used to test that a next ``ForumNode`` is available before calling this method.\n        :rtype: ``osid.forum.ForumNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.forum.ForumNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_forum_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``ForumNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``ForumNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.forum.ForumNode) - an array of ``ForumNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``ForumNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``ForumNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.forum.ForumNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.forum.ForumNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.forum"
}
{
   "name": "logging", 
   "version": "3.0.0", 
   "title": "Logging Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2002-2004, 2006-2008 Massachusetts Institute of\nTechnology.\n\nCopyright (c) 2011 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Logging OSID provides a means to read and wite to logs. A Log\nrepresents a collection of log entries. Each log entry is composed of a\npriority ``Type,`` timestamp, ``Agent,`` the agent's associated\n``Resource,`` and a record.\n\nLogs can be organized into hierarchies for federation. A log that is a\nparent of another log makes visible the log entries of its children.\n\nExample\n  LoggingSession out = manager.getLoggingSession();\n  out.log(warningLogEntryPriorityType, \"hello world\", stringLogEntryContentType);\n  \n  LogReadingSession in = manager.getLogReadingSession();\n  LogEntryList entries = inn.getLogEntries();\n  while (entries.hasNext()) {\n      LogEntry entry = entries.getNextLogEntry();\n      printEntry(entry);\n  }\n\n", 
   "interfaces": [
      {
         "fullname": "osid.logging.LoggingProfile", 
         "shortname": "LoggingProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The logging profile describes the interoperability among logging services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_logging", 
            "supports_log_entry_lookup", 
            "supports_log_entry_query", 
            "supports_log_entry_search", 
            "supports_log_entry_notification", 
            "supports_log_entry_log", 
            "supports_log_entry_log_assignment", 
            "supports_log_entry_smart_log", 
            "supports_log_lookup", 
            "supports_log_query", 
            "supports_log_search", 
            "supports_log_admin", 
            "supports_log_notification", 
            "supports_log_hierarchy", 
            "supports_log_hierarchy_design", 
            "supports_logging_batch", 
            "get_log_entry_record_types", 
            "supports_log_entry_record_type", 
            "get_log_entry_search_record_types", 
            "supports_log_entry_search_record_type", 
            "get_log_record_types", 
            "supports_log_record_type", 
            "get_log_search_record_types", 
            "supports_log_search_record_type", 
            "get_priority_types", 
            "supports_priority_type", 
            "get_content_types", 
            "supports_content_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if visible federation is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supproted,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supproted, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_logging", 
               "doc": {
                  "headline": "Tests if logging is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if logging is supported, ``false``\n                otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if logging is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_lookup", 
               "doc": {
                  "headline": "Tests if reading logs is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if reading logs is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if reading logs is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_query", 
               "doc": {
                  "headline": "Tests if querying log entries is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if querying log entries is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if querying log entries is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_search", 
               "doc": {
                  "headline": "Tests if searching log entries is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if searching log entries is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if searching log entries is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_notification", 
               "doc": {
                  "headline": "Tests if log entry notification is supported,.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log entry notification is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log entry notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_log", 
               "doc": {
                  "headline": "Tests if looking up log entry log mappings is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log entry logs is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log entry logs is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_log_assignment", 
               "doc": {
                  "headline": "Tests if managing log entry log mappings is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log entry logs mapping\n                assignment is supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log entry logs mapping assignment is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_smart_log", 
               "doc": {
                  "headline": "Tests if smart logs is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if smart logs is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if smart logs is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_lookup", 
               "doc": {
                  "headline": "Tests for the availability of a log lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_query", 
               "doc": {
                  "headline": "Tests if querying logs is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_search", 
               "doc": {
                  "headline": "Tests if searching for logs is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_admin", 
               "doc": {
                  "headline": "Tests for the availability of a log administrative service for creating and deleting logs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log administration is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log administration is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_notification", 
               "doc": {
                  "headline": "Tests for the availability of a log notification service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a log hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_log_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a log hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if log hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if log hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_logging_batch", 
               "doc": {
                  "headline": "Tests for the availability of a logging batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if loggin batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if loggin batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Log`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                log record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported log record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_record_type", 
               "doc": {
                  "headline": "Tests if the given ``LogEntry`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): a ``Type``\n                indicating a ``LogEntry`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param log_entry_record_type: a ``Type`` indicating a ``LogEntry`` record type\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_record_types", 
               "doc": {
                  "headline": "Gets the supported log entry search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                log entry search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported log entry search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_search_record_type", 
               "doc": {
                  "headline": "Tests if the given log entry search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_search_record_type (osid.type.Type): a\n                ``Type`` indicating a log entry record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_entry_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param log_entry_search_record_type: a ``Type`` indicating a log entry record type\n        :type log_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Log`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                log record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported log record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_log_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Log`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Log`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param log_record_type: a ``Type`` indicating a ``Log`` record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_search_record_types", 
               "doc": {
                  "headline": "Gets the supported log search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                log search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported log search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_log_search_record_type", 
               "doc": {
                  "headline": "Tests if the given log search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_search_record_type (osid.type.Type): a ``Type``\n                indicating a log record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param log_search_record_type: a ``Type`` indicating a log record type\n        :type log_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_priority_types", 
               "doc": {
                  "headline": "Gets the priority types supported, in ascending order of the priority level.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                priority types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported priority types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_priority_type", 
               "doc": {
                  "headline": "Tests if the priority type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a ``Type`` indicating a\n                priority type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``", 
               "sphinx_param_doc": "        :param priority_type: a ``Type`` indicating a priority type\n        :type priority_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_content_types", 
               "doc": {
                  "headline": "Gets the content types supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                content types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported content types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_content_type", 
               "doc": {
                  "headline": "Tests if the content type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    content_type (osid.type.Type): a ``Type`` indicating a\n                content type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``content_type`` is ``null``", 
               "sphinx_param_doc": "        :param content_type: a ``Type`` indicating a content type\n        :type content_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``content_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "content_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LoggingManager", 
         "shortname": "LoggingManager", 
         "category": "managers", 
         "doc": {
            "headline": "The logging manager provides access to logging sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``LoggingSession:`` a session to write to a log\n      * ``LogEntryLookupSession:`` a session to read a log\n      * ``LogEntryQuerySession:`` a session to search a log\n      * ``LogEntrySearchSession:`` a session to search a log\n      * ``LogEntryAdminSession:`` a session to manage log entries in a\n        log\n      * ``LogEntryNotificationSession:`` a session to subscribe to\n        notifications of new log entries\n      * ``LogEntryLogSession:`` a session to examine log entry to log\n        mappings\n      * ``LogEntryLogAssignmentSession:`` a session to manage log entry\n        to log mappings\n      * ``LogEntrySmartLogSession:`` a session to manage dynamic logs\n      * ``LogLookupSession:`` a session to retrieve log objects\n      * ``LogQuerySession:`` a session to search for logs\n      * ``LogSearchSession:`` a session to search for logs\n      * ``LogAdminSession:`` a session to create, update and delete logs\n      * ``LogNotificationSession:`` a session to receive notifications\n        for changes in logs\n      * ``LogHierarchyTraversalSession:`` a session to traverse\n        hierarchies of logs\n      * ``LogHierarchyDesignSession:`` a session to manage hierarchies\n        of logs\n\n    \n    The logging manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.logging.LoggingProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "LoggingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "logging"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "logging", 
               "name": "LoggingProfile"
            }
         ], 
         "method_names": [
            "get_logging_session", 
            "get_logging_session_for_log", 
            "get_log_entry_lookup_session", 
            "get_log_entry_lookup_session_for_log", 
            "get_log_entry_query_session", 
            "get_log_entry_query_session_for_log", 
            "get_log_entry_search_session", 
            "get_log_entry_search_session_for_log", 
            "get_log_entry_admin_session", 
            "get_log_entry_admin_session_for_log", 
            "get_log_entry_notification_session", 
            "get_log_entry_notification_session_for_log", 
            "get_log_entry_log_session", 
            "get_log_entry_log_assignment_session", 
            "get_log_entry_smart_log_session", 
            "get_log_lookup_session", 
            "get_log_query_session", 
            "get_log_search_session", 
            "get_log_admin_session", 
            "get_log_notification_session", 
            "get_log_hierarchy_session", 
            "get_log_hierarchy_design_session", 
            "get_logging_batch_manager"
         ], 
         "methods": [
            {
               "name": "get_logging_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LoggingSession) - a ``LoggingSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LoggingSession``\n        :rtype: ``osid.logging.LoggingSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LoggingSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_logging_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LoggingSession) - a ``LoggingSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LoggingSession``\n        :rtype: ``osid.logging.LoggingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LoggingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log reading service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryLookupSession) - a\n                ``LogEntryLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntryLookupSession``\n        :rtype: ``osid.logging.LogEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_lookup_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log reading service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntryLookupSession) - a\n                ``LogEntryLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryLookupSession``\n        :rtype: ``osid.logging.LogEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQuerySession) - a\n                ``LogEntryQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntryQuerySession``\n        :rtype: ``osid.logging.LogEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry query service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntryQuerySession) - a\n                ``LogEntryQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryQuerySession``\n        :rtype: ``osid.logging.LogEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntrySearchSession) - a\n                ``LogEntrySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntrySearchSession``\n        :rtype: ``osid.logging.LogEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntrySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry search service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntrySearchSession) - a\n                ``LogEntrySearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntrySearchSession``\n        :rtype: ``osid.logging.LogEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntrySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryAdminSession) - a\n                ``LogEntryAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntryAdminSession``\n        :rtype: ``osid.logging.LogEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_admin_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry administrative service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntryAdminSession) - a\n                ``LogEntryAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryAdminSession``\n        :rtype: ``osid.logging.LogEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_receiver (osid.logging.LogEntryReceiver): the\n                receiver\n", 
               "return_doc": "        return: (osid.logging.LogEntryNotificationSession) - a\n                ``LogEntryNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``log_entry_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_entry_receiver: the receiver\n        :type log_entry_receiver: ``osid.logging.LogEntryReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryNotificationSession``\n        :rtype: ``osid.logging.LogEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryReceiver", 
                     "var_name": "log_entry_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryReceiver"
               ], 
               "return_type": "osid.logging.LogEntryNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_notification_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry notification service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_receiver (osid.logging.LogEntryReceiver): the\n                receiver\n        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntryNotificationSession) - a\n                ``LogEntryNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_entry_receiver`` or ``log_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_entry_receiver: the receiver\n        :type log_entry_receiver: ``osid.logging.LogEntryReceiver``\n        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryNotificationSession``\n        :rtype: ``osid.logging.LogEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_entry_receiver`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryReceiver", 
                     "var_name": "log_entry_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_log_session", 
               "doc": {
                  "headline": "Gets the session for retrieving log entry to log mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryLogSession) - a\n                ``LogEntryLogSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_log()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntryLogSession``\n        :rtype: ``osid.logging.LogEntryLogSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_log()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_log()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryLogSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_log_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning log entry to logs mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryLogAssignmentSession) - a\n                ``LogEntryLogAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_log_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogEntryLogAssignmentSession``\n        :rtype: ``osid.logging.LogEntryLogAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_log_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_log_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryLogAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_smart_log_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic logEntry log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the log\n", 
               "return_doc": "        return: (osid.logging.LogEntrySmartLogSession) - a\n                ``LogEntrySmartLogSession``", 
               "error_doc": "        raise:  NotFound - ``log_id`` not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_smart_log()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntrySmartLogSession``\n        :rtype: ``osid.logging.LogEntrySmartLogSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_smart_log()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_smart_log()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntrySmartLogSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogLookupSession) - a ``LogLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogLookupSession``\n        :rtype: ``osid.logging.LogLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQuerySession) - a ``LogQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogQuerySession``\n        :rtype: ``osid.logging.LogQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogSearchSession) - a ``LogSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogSearchSession``\n        :rtype: ``osid.logging.LogSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogAdminSession) - a ``LogAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogAdminSession``\n        :rtype: ``osid.logging.LogAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_receiver (osid.logging.LogReceiver): the receiver\n", 
               "return_doc": "        return: (osid.logging.LogNotificationSession) - a\n                ``LogNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``log_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_receiver: the receiver\n        :type log_receiver: ``osid.logging.LogReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``LogNotificationSession``\n        :rtype: ``osid.logging.LogNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogReceiver", 
                     "var_name": "log_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogReceiver"
               ], 
               "return_type": "osid.logging.LogNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogHierarchySession) - a\n                ``LogHierarchySession`` for logs", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LogHierarchySession`` for logs\n        :rtype: ``osid.logging.LogHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for logs", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for logs\n        :rtype: ``osid.logging.LogHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_logging_batch_manager", 
               "doc": {
                  "headline": "Gets a ``LoggingBatchManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.batch.LoggingBatchManager) - a\n                ``LoggingBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LoggingBatchManager``\n        :rtype: ``osid.logging.batch.LoggingBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.batch.LoggingBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LoggingProxyManager", 
         "shortname": "LoggingProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The logging manager provides access to logging sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a ``Proxy`` for the\n    purposes of passing information from server environments. The\n    sessions included in this manager are:\n\n      * ``LoggingSession:`` a session to write to a log\n      * ``LogEntryLookupSession:`` a session to read a log\n      * ``LogEntryQuerySession:`` a session to search a log\n      * ``LogEntrySearchSession:`` a session to search a log\n      * ``LogEntryAdminSession:`` a session to manage log entries in a\n        log\n      * ``LogEntryNotificationSession:`` a session to subscribe to\n        notifications of new log entries\n      * ``LogEntryLogSession:`` a session to examine log entry to log\n        mappings\n      * ``LogEntryLogAssignmentSession:`` a session to manage log entry\n        to log mappings\n      * ``LogEntrySmartLogSession:`` a session to manage dynamic logs\n      * ``LogLookupSession:`` a session to retrieve log objects\n      * ``LogQuerySession:`` a session to search for logs\n      * ``LogSearchSession:`` a session to search for logs\n      * ``LogAdminSession:`` a session to create, update and delete logs\n      * ``LogNotificationSession:`` a session to receive notifications\n        for changes in logs\n      * ``LogHierarchyTraversalSession:`` a session to traverse\n        hierarchies of logs\n      * ``LogHierarchyDesignSession:`` a session to manage hierarchies\n        of logs\n\n    \n    The logging manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.logging.LoggingProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "LoggingProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "logging"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "logging", 
               "name": "LoggingProfile"
            }
         ], 
         "method_names": [
            "get_logging_session", 
            "get_logging_session_for_log", 
            "get_log_entry_lookup_session", 
            "get_log_entry_lookup_session_for_log", 
            "get_log_entry_query_session", 
            "get_log_entry_query_session_for_log", 
            "get_log_entry_search_session", 
            "get_log_entry_search_session_for_log", 
            "get_log_entry_admin_session", 
            "get_log_entry_admin_session_for_log", 
            "get_log_entry_notification_session", 
            "get_log_entry_notification_session_for_log", 
            "get_log_entry_log_session", 
            "get_log_entry_log_assignment_session", 
            "get_log_entry_smart_log_session", 
            "get_log_lookup_session", 
            "get_log_query_session", 
            "get_log_search_session", 
            "get_log_admin_session", 
            "get_log_notification_session", 
            "get_log_hierarchy_session", 
            "get_log_hierarchy_design_session", 
            "get_logging_batch_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_logging_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LoggingSession) - a ``LoggingSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LoggingSession``\n        :rtype: ``osid.logging.LoggingSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LoggingSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_logging_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LoggingSession) - a ``LoggingSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LoggingSession``\n        :rtype: ``osid.logging.LoggingSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LoggingSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging reading service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryLookupSession) - a\n                ``LogEntryLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryLookupSession``\n        :rtype: ``osid.logging.LogEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_lookup_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log reading service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryLookupSession) - a\n                ``LogEntryLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryLookupSession``\n        :rtype: ``osid.logging.LogEntryLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryQuerySession) - a\n                ``LogEntryQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryQuerySession``\n        :rtype: ``osid.logging.LogEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry query service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryQuerySession) - a\n                ``LogEntryQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryQuerySession``\n        :rtype: ``osid.logging.LogEntryQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntrySearchSession) - a\n                ``LogEntrySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntrySearchSession``\n        :rtype: ``osid.logging.LogEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntrySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry search service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntrySearchSession) - a\n                ``LogEntrySearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntrySearchSession``\n        :rtype: ``osid.logging.LogEntrySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntrySearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryAdminSession) - a\n                ``LogEntryAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryAdminSession``\n        :rtype: ``osid.logging.LogEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_admin_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry administrative service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryAdminSession) - a\n                ``LogEntryAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryAdminSession``\n        :rtype: ``osid.logging.LogEntryAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the logging entry notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_receiver (osid.logging.LogEntryReceiver): the\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryNotificationSession) - a\n                ``LogEntryNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``log_entry_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_entry_receiver: the receiver\n        :type log_entry_receiver: ``osid.logging.LogEntryReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryNotificationSession``\n        :rtype: ``osid.logging.LogEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryReceiver", 
                     "var_name": "log_entry_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_notification_session_for_log", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log entry notification service for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_receiver (osid.logging.LogEntryReceiver): the\n                receiver\n        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryNotificationSession) - a\n                ``LogEntryNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Log`` found by the given ``Id``\n        raise:  NullArgument - ``log_entry_receiver, log_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param log_entry_receiver: the receiver\n        :type log_entry_receiver: ``osid.logging.LogEntryReceiver``\n        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryNotificationSession``\n        :rtype: ``osid.logging.LogEntryNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Log`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``log_entry_receiver, log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryReceiver", 
                     "var_name": "log_entry_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_log_session", 
               "doc": {
                  "headline": "Gets the session for retrieving log entry to log mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryLogSession) - a\n                ``LogEntryLogSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_log()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryLogSession``\n        :rtype: ``osid.logging.LogEntryLogSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_log()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_log()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryLogSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_log_assignment_session", 
               "doc": {
                  "headline": "Gets the session for assigning log entry to log mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntryLogAssignmentSession) - a\n                ``LogEntryLogAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_log_assignment()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntryLogAssignmentSession``\n        :rtype: ``osid.logging.LogEntryLogAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_log_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_log_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntryLogAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_smart_log_session", 
               "doc": {
                  "headline": "Gets the session for managing dynamic log entry logs.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the log\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogEntrySmartLogSession) - a\n                ``LogEntrySmartLogSession``", 
               "error_doc": "        raise:  NotFound - ``log_id`` not found\n        raise:  NullArgument - ``log_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_entry_smart_log()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the log\n        :type log_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogEntrySmartLogSession``\n        :rtype: ``osid.logging.LogEntrySmartLogSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_entry_smart_log()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_smart_log()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogEntrySmartLogSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogLookupSession) - a ``LogLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogLookupSession``\n        :rtype: ``osid.logging.LogLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogQuerySession) - a ``LogQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogQuerySession``\n        :rtype: ``osid.logging.LogQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogSearchSession) - a ``LogSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogSearchSession``\n        :rtype: ``osid.logging.LogSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogAdminSession) - a ``LogAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogAdminSession``\n        :rtype: ``osid.logging.LogAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_receiver (osid.logging.LogReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogNotificationSession) - a\n                ``LogNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``log_receiver`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_receiver: the receiver\n        :type log_receiver: ``osid.logging.LogReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogNotificationSession``\n        :rtype: ``osid.logging.LogNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogReceiver", 
                     "var_name": "log_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogHierarchySession) - a\n                ``LogHierarchySession`` for logs", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``LogHierarchySession`` for logs\n        :rtype: ``osid.logging.LogHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the log hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.logging.LogHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for logs", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_log_hierarchy_design()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for logs\n        :rtype: ``osid.logging.LogHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_log_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.logging.LogHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_logging_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets a ``LoggingBatchProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.batch.LoggingBatchProxyManager) - a\n                ``LoggingBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_logging_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``LoggingBatchProxyManager``\n        :rtype: ``osid.logging.batch.LoggingBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_logging_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_logging_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.batch.LoggingBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LoggingSession", 
         "shortname": "LoggingSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session is used to log entries to a log.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_log", 
            "log", 
            "log_at_priority", 
            "get_log_entry_form", 
            "create_log_entry"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the log", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_log", 
               "doc": {
                  "headline": "Tests if this user can log.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer logging\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if logging methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if logging methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "log", 
               "doc": {
                  "headline": "Logs an item.", 
                  "body": "        This method is a shortcut to ``createLogEntry()``."
               }, 
               "arg_doc": "        arg:    content (object): the entry to log\n        arg:    content_type (osid.type.Type): the type of this entry\n                which must be one of the types returned by\n                ``LoggingManager.getContentTypes()``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``content`` is not of ``content_type``\n        raise:  NullArgument - ``content`` or ``content_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported -\n                ``LoggingManager.supportsContentType(contentType)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param content: the entry to log\n        :type content: ``object``\n        :param content_type: the type of this entry which must be one of the types returned by ``LoggingManager.getContentTypes()``\n        :type content_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``content`` is not of ``content_type``\n        :raise: ``NullArgument`` -- ``content`` or ``content_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``LoggingManager.supportsContentType(contentType)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "object", 
                     "var_name": "content", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "content_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "object", 
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "log_at_priority", 
               "doc": {
                  "headline": "Logs an item.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): the entry priority\n        arg:    content (object): the entry to log\n        arg:    content_type (osid.type.Type): the type of this entry\n                which must be one of the types returned by\n                ``LoggingManager.getContentTypes()``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``content`` is not of ``content_type``\n        raise:  NullArgument - ``content`` , ``content_type`` or\n                ``priority_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported -\n                ``LoggingManager.supportsContentType(contentType)`` is\n                ``false`` or\n                ``LoggingManager.supportsPriorityType(priorityType)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param priority_type: the entry priority\n        :type priority_type: ``osid.type.Type``\n        :param content: the entry to log\n        :type content: ``object``\n        :param content_type: the type of this entry which must be one of the types returned by ``LoggingManager.getContentTypes()``\n        :type content_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``content`` is not of ``content_type``\n        :raise: ``NullArgument`` -- ``content`` , ``content_type`` or ``priority_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``LoggingManager.supportsContentType(contentType)`` is ``false`` or ``LoggingManager.supportsPriorityType(priorityType)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "object", 
                     "var_name": "content", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "content_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "object", 
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_form", 
               "doc": {
                  "headline": "Gets a log entry form for creating a log entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryForm) - the log entry form", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry form\n        :rtype: ``osid.logging.LogEntryForm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryForm", 
               "errors": {}
            }, 
            {
               "name": "create_log_entry", 
               "doc": {
                  "headline": "Logs an entry through the log entry form.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_form (osid.logging.LogEntryForm): the log\n                entry form\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``log_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_entry_form`` is not of this service", 
               "sphinx_param_doc": "        :param log_entry_form: the log entry form\n        :type log_entry_form: ``osid.logging.LogEntryForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``log_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_entry_form`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryForm", 
                     "var_name": "log_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryForm"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryLookupSession", 
         "shortname": "LogEntryLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``log entries``.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_read_log", 
            "use_comparative_log_entry_view", 
            "use_plenary_log_entry_view", 
            "use_federated_log_view", 
            "use_isolated_log_view", 
            "get_log_entry", 
            "get_log_entries_by_ids", 
            "get_log_entries_by_genus_type", 
            "get_log_entries_by_parent_genus_type", 
            "get_log_entries_by_record_type", 
            "get_log_entries_by_priority_type", 
            "get_log_entries_by_date", 
            "get_log_entries_by_priority_type_and_date", 
            "get_log_entries_for_resource", 
            "get_log_entries_by_date_for_resource", 
            "get_log_entries_by_priority_type_and_date_for_resource", 
            "get_log_entries"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the log", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_read_log", 
               "doc": {
                  "headline": "Tests if this user can read the log.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer reading\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if reading methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if reading methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_log_entry_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_log_entry_view", 
               "doc": {
                  "headline": "A complete view of the ``LogEntry`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_log_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include entries in logs which are children\n        of this log in the log hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_log_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this log only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry", 
               "doc": {
                  "headline": "Gets the ``LogEntry`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``LogEntry`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to a ``LogEntry`` and retained for\n        compatibility."
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry`` to retrieve\n", 
               "return_doc": "        return: (osid.logging.LogEntry) - the returned ``LogEntry``", 
               "error_doc": "        raise:  NotFound - no ``LogEntry`` found with the given ``Id``\n        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry`` to retrieve\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry``\n        :rtype: ``osid.logging.LogEntry``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``LogEntry`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntry", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_ids", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the entries\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible logentries may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    log_entry_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry\n                list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``log_entry_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_ids: the list of ``Ids`` to retrieve\n        :type log_entry_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry list``\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``log_entry_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_entry_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given log entry genus ``Type`` which doe snot include entries of genus types derived form the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session"
               }, 
               "arg_doc": "        arg:    log_entry_genus_type (osid.type.Type): a log entry genus\n                type\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  NullArgument - ``log_entry_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_genus_type: a log entry genus type\n        :type log_entry_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given log entry genus ``Type`` and include any additional entries with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    log_entry_genus_type (osid.type.Type): a log entry genus\n                type\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  NullArgument - ``log_entry_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_genus_type: a log entry genus type\n        :type log_entry_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_record_type", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` containing the given log entry record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known log\n        entries or an error results. Otherwise, the returned list may\n        contain only those log entries that are accessible through this\n        session."
               }, 
               "arg_doc": "        arg:    log_entry_genus_type (osid.type.Type): a log entry genus\n                type\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  NullArgument - ``log_entry_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_genus_type: a log entry genus type\n        :type log_entry_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_priority_type", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` filtering the list to log entries including and above the given priority ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a log entry priority\n                type\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param priority_type: a log entry priority type\n        :type priority_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_date", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given time interval inclusive.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    start (osid.calendaring.DateTime): a starting time\n        arg:    end (osid.calendaring.DateTime): a starting time\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``start`` or ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param start: a starting time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: a starting time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_priority_type_and_date", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given time interval inclusive filtering the list to log entries including and above the given priority ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a log entry priority\n                type\n        arg:    start (osid.calendaring.DateTime): a starting time\n        arg:    end (osid.calendaring.DateTime): a starting time\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``priority_type, start`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param priority_type: a log entry priority type\n        :type priority_type: ``osid.type.Type``\n        :param start: a starting time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: a starting time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``priority_type, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_for_resource", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` for an agent associated with the given resource.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_date_for_resource", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given time interval inclusive for an agent associated with the given resource.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    start (osid.calendaring.DateTime): a starting time\n        arg:    end (osid.calendaring.DateTime): a starting time\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``resource_id, start`` or ``end`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param start: a starting time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: a starting time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``resource_id, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_priority_type_and_date_for_resource", 
               "doc": {
                  "headline": "Gets a ``LogEntryList`` corresponding to the given time interval inclusive for an agent associated with the given resource filtering the list to log entries including and above the given priority ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n        arg:    priority_type (osid.type.Type): a log entry priority\n                type\n        arg:    start (osid.calendaring.DateTime): a starting time\n        arg:    end (osid.calendaring.DateTime): a starting time\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned ``LogEntry``\n                list", 
               "error_doc": "        raise:  InvalidArgument - ``start`` is greater than ``end``\n        raise:  NullArgument - ``resource_id, priority_type, start`` or\n                ``end`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n        :param priority_type: a log entry priority type\n        :type priority_type: ``osid.type.Type``\n        :param start: a starting time\n        :type start: ``osid.calendaring.DateTime``\n        :param end: a starting time\n        :type end: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntry`` list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start`` is greater than ``end``\n        :raise: ``NullArgument`` -- ``resource_id, priority_type, start`` or ``end`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries", 
               "doc": {
                  "headline": "Gets all log entries.", 
                  "body": "        In plenary mode, the returned list contains all known entries or\n        an error results. Otherwise, the returned list may contain only\n        those entries that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryList) - a list of log entries", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of log entries\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryQuerySession", 
         "shortname": "LogEntryQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among log entries.", 
            "body": "    The search query is constructed using the ``LogEntryQuery``.\n\n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated log view: searches include entries in logs of which\n        this log is an ancestor in the log hierarchy\n      * isolated log view: searches are restricted to entries in this\n        log only\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_search_log_entries", 
            "use_federated_log_view", 
            "use_isolated_log_view", 
            "get_log_entry_query", 
            "get_log_entries_by_query"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the ``Log`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log`` associated with this session\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_search_log_entries", 
               "doc": {
                  "headline": "Tests if this user can perform ``LogEntry`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_log_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include entries in logs which are children\n        of this log in the log hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_log_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts lookups to this log only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_query", 
               "doc": {
                  "headline": "Gets a log entry query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQuery) - the log entry query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry query\n        :rtype: ``osid.logging.LogEntryQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQuery", 
               "errors": {}
            }, 
            {
               "name": "get_log_entries_by_query", 
               "doc": {
                  "headline": "Gets a list of log entries matching the given log entry query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_query (osid.logging.LogEntryQuery): the log\n                entry query\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the returned\n                ``LogEntryList``", 
               "error_doc": "        raise:  NullArgument - ``log_entry_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_entry_query`` is not of this service", 
               "sphinx_param_doc": "        :param log_entry_query: the log entry query\n        :type log_entry_query: ``osid.logging.LogEntryQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogEntryList``\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_entry_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryQuery", 
                     "var_name": "log_entry_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryQuery"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntrySearchSession", 
         "shortname": "LogEntrySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among log entries.", 
            "body": "    The search query is constructed using the ``LogEntryQuery``.\n\n    ``get_log_entries_by_query()`` is the basic search method and\n    returns a list of log entries. A more advanced search may be\n    performed with ``getLogEntriesBySearch()``. It accepts a\n    ``LogEntrySearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_log_entries_by_search()`` returns a\n    ``LogEntrySearchResults`` that can be used to access the resulting\n    ``LogEntryList`` or be used to perform a search within the result\n    set through ``LogEntrySearch``.\n    \n    This session defines views that offer differing behaviors for\n    searching.\n    \n      * federated log view: searches include entries in logs of which\n        this log is an ancestor in the log hierarchy\n      * isolated log view: searches are restricted to entries in this\n        log only\n"
         }, 
         "inherit_fullnames": [
            "osid.logging.LogEntryQuerySession"
         ], 
         "inherit_shortnames": [
            "LogEntryQuerySession"
         ], 
         "inherit_pkg_names": [
            "logging"
         ], 
         "inheritance": [
            {
               "pkg_name": "logging", 
               "name": "LogEntryQuerySession"
            }
         ], 
         "method_names": [
            "get_log_entry_search", 
            "get_log_entry_search_order", 
            "get_log_entries_by_search", 
            "get_log_entry_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_log_entry_search", 
               "doc": {
                  "headline": "Gets a log entry search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntrySearch) - the log entry search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry search\n        :rtype: ``osid.logging.LogEntrySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntrySearch", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_search_order", 
               "doc": {
                  "headline": "Gets a log entry search order.", 
                  "body": "        The ``LogEntrySearchOrder`` is supplied to a ``LogEntrySearch``\n        to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntrySearchOrder) - the log entry\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry search order\n        :rtype: ``osid.logging.LogEntrySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntrySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_log_entries_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_query (osid.logging.LogEntryQuery): the log\n                entry query\n        arg:    log_entry_search (osid.logging.LogEntrySearch): the log\n                entry search\n", 
               "return_doc": "        return: (osid.logging.LogEntrySearchResults) - the returned\n                search results", 
               "error_doc": "        raise:  NullArgument - ``log_entry_query`` or\n                ``log_entry_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_entry_query`` or\n                ``log_entry_search`` is not of this service", 
               "sphinx_param_doc": "        :param log_entry_query: the log entry query\n        :type log_entry_query: ``osid.logging.LogEntryQuery``\n        :param log_entry_search: the log entry search\n        :type log_entry_search: ``osid.logging.LogEntrySearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.logging.LogEntrySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_query`` or ``log_entry_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_entry_query`` or ``log_entry_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryQuery", 
                     "var_name": "log_entry_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.logging.LogEntrySearch", 
                     "var_name": "log_entry_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryQuery", 
                  "osid.logging.LogEntrySearch"
               ], 
               "return_type": "osid.logging.LogEntrySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_from_inspector", 
               "doc": {
                  "headline": "Gets a log entry query from an inspector.", 
                  "body": "        The inspector is available from a ``LogEntrySearchResults``."
               }, 
               "arg_doc": "        arg:    log_entry_query_inspector\n                (osid.logging.LogQueryInspector): a log entry query\n                inspector\n", 
               "return_doc": "        return: (osid.logging.LogEntryQuery) - the log entry query", 
               "error_doc": "        raise:  NullArgument - ``log_entry_query_inspector`` is ``null``\n        raise:  Unsupported - ``log_entry_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param log_entry_query_inspector: a log entry query inspector\n        :type log_entry_query_inspector: ``osid.logging.LogQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the log entry query\n        :rtype: ``osid.logging.LogEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``log_entry_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogQueryInspector", 
                     "var_name": "log_entry_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogQueryInspector"
               ], 
               "return_type": "osid.logging.LogEntryQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryAdminSession", 
         "shortname": "LogEntryAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``LogEntries``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``LogEntry,`` a ``LogEntryForm`` is requested using\n    ``get_log_entry_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``LogEntryForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``LogEntryForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``LogEntryForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``LogEntryForms`` are requested to the ``LogEntry``\n    ``Id`` that is to be updated using ``getLogEntryFormForUpdate()``.\n    Similarly, the ``LogEntryForm`` has metadata about the data that can\n    be updated and it can perform validation before submitting the\n    update. The ``LogEntryForm`` can only be used once for a successful\n    update and cannot be reused.\n    \n    The delete operations delete ``LogEntries``. To unmap a ``LogEntry``\n    from the current ``Log,`` the ``LogEntryLogAssignmentSession``\n    should be used. These delete operations attempt to remove the\n    ``LogEntry`` itself thus removing it from all known ``Log``\n    catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_create_log_entries", 
            "can_create_log_entry_with_record_types", 
            "get_log_entry_form_for_create", 
            "create_log_entry", 
            "can_update_log_entries", 
            "get_log_entry_form_for_update", 
            "update_log_entry", 
            "can_delete_log_entries", 
            "delete_log_entry", 
            "can_manage_log_entry_aliases", 
            "alias_log_entry"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the ``Log`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log`` associated with this session\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_log_entries", 
               "doc": {
                  "headline": "Tests if this user can create log entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a\n        ``LogEntry`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``LogEntry`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``LogEntry`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_log_entry_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``LogEntry`` using the desired record types.", 
                  "body": "        While ``LoggingManager.getLogEntryRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``LogEntry``.\n        Providing an empty array tests if a ``LogEntry`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    log_entry_record_types (osid.type.Type[]): array of log\n                entry record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``LogEntry`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param log_entry_record_types: array of log entry record types\n        :type log_entry_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``LogEntry`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "log_entry_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_form_for_create", 
               "doc": {
                  "headline": "Gets the log entry form for creating new log entries.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    log_entry_record_types (osid.type.Type[]): array of log\n                entry record types\n", 
               "return_doc": "        return: (osid.logging.LogForm) - the log entry form", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param log_entry_record_types: array of log entry record types\n        :type log_entry_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the log entry form\n        :rtype: ``osid.logging.LogForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "log_entry_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.logging.LogForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_log_entry", 
               "doc": {
                  "headline": "Creates a new ``LogEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_form (osid.logging.LogEntryForm): the form for\n                this ``LogEntry``\n", 
               "return_doc": "        return: (osid.logging.LogEntry) - the new ``LogEntry``", 
               "error_doc": "        raise:  IllegalState - ``log_entry_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``log_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_entry_form`` did not originate from\n                ``get_log_entry_form_for_create()``", 
               "sphinx_param_doc": "        :param log_entry_form: the form for this ``LogEntry``\n        :type log_entry_form: ``osid.logging.LogEntryForm``\n", 
               "sphinx_return_doc": "        :return: the new ``LogEntry``\n        :rtype: ``osid.logging.LogEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``log_entry_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``log_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_entry_form`` did not originate from ``get_log_entry_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryForm", 
                     "var_name": "log_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryForm"
               ], 
               "return_type": "osid.logging.LogEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_log_entries", 
               "doc": {
                  "headline": "Tests if this user can update log entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Log``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``LogEntry`` modification is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``LogEntry`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_form_for_update", 
               "doc": {
                  "headline": "Gets the log entry form for updating an existing log.", 
                  "body": "        A new log entry form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry``\n", 
               "return_doc": "        return: (osid.logging.LogEntryForm) - the log entry form", 
               "error_doc": "        raise:  NotFound - ``log_entry_id`` is not found\n        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the log entry form\n        :rtype: ``osid.logging.LogEntryForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_entry_id`` is not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_log_entry", 
               "doc": {
                  "headline": "Updates an existing log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_form (osid.logging.LogEntryForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``log_entry_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``log_entry_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_entry_form`` did not originate from\n                ``get_log_entry_form_for_update()``", 
               "sphinx_param_doc": "        :param log_entry_form: the form containing the elements to be updated\n        :type log_entry_form: ``osid.logging.LogEntryForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``log_entry_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``log_entry_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_entry_form`` did not originate from ``get_log_entry_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryForm", 
                     "var_name": "log_entry_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_log_entries", 
               "doc": {
                  "headline": "Tests if this user can delete log entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``LogEntry`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``LogEntry`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``LogEntry`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_log_entry", 
               "doc": {
                  "headline": "Deletes a ``LogEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``log_entry_id`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_entry_id`` not found\n        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``log_entry_id`` to remove\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_entry_id`` not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_log_entry_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for log entries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``LogEntry`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``LogEntry`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_log_entry", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``LogEntry`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``LogEntry`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another log entry, it is\n        reassigned to the given log entry ``Id``."
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of a ``LogEntry``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``log_entry_id`` not found\n        raise:  NullArgument - ``log_entry_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of a ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``log_entry_id`` not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryNotificationSession", 
         "shortname": "LogEntryNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on new or deleted log entries.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to assignments of ``Ids``\n    to this log. For notifications of changes to the ``Log`` object use\n    ``LogNotificationSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_register_for_log_entry_notifications", 
            "use_federated_log_view", 
            "use_isolated_log_view", 
            "register_for_new_log_entries", 
            "register_for_new_log_entries_at_priority", 
            "register_for_new_log_entries_for_resource", 
            "register_for_changed_log_entries", 
            "register_for_changed_entries_at_priority", 
            "register_for_changed_entries_for_resource", 
            "register_for_changed_log_entry", 
            "register_for_deleted_log_entries", 
            "register_for_deleted_log_entries_at_priority", 
            "register_for_deleted_log_entries_for_resource", 
            "register_for_deleted_log_entry"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the ``Log`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log`` associated with this session\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_log_entry_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Log`` entry notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_log_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include entries from parent logs in the\n        log hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_log_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications for entries to this log\n        only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_log_entries", 
               "doc": {
                  "headline": "Register for notifications of new log entries.", 
                  "body": "        ``LogEntryReceiver.newLogEntry()`` is invoked when a new\n        ``LogEntry`` is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_log_entries_at_priority", 
               "doc": {
                  "headline": "Register for notifications of new log entries at or above the given priority type.", 
                  "body": "        ``LogEntryReceiver.newLogEntry()`` is invoked when a new\n        ``LogEntry`` is created."
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a priority type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param priority_type: a priority type\n        :type priority_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_log_entries_for_resource", 
               "doc": {
                  "headline": "Register for notifications of new log entries logged by an agent associated with the given resource.", 
                  "body": "        ``LogEntryReceiver.newLogEntry()`` is invoked when a new\n        ``LogEntry`` is created."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_log_entries", 
               "doc": {
                  "headline": "Register for notifications of updated log entries.", 
                  "body": "        ``LogEntryReceiver.changedLogEntry()`` is invoked when a\n        ``LogEntry`` iin this log is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_entries_at_priority", 
               "doc": {
                  "headline": "Register for notifications of updated log entries at or above the given priority type.", 
                  "body": "        ``LogEntryReceiver.changedLogEntry()`` is invoked when a\n        ``LogEntry`` in this log is changed."
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a priority type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param priority_type: a priority type\n        :type priority_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_entries_for_resource", 
               "doc": {
                  "headline": "Register for notifications of updated log entries logged by an agent associated with the given resource.", 
                  "body": "        ``LogEntryReceiver.changedLogEntry()`` is invoked when a\n        ``LogEntry`` in this log is changed."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_log_entry", 
               "doc": {
                  "headline": "Registers for notification of an updated log entry.", 
                  "body": "        ``LogEntryReceiver.changedLogENtry()`` is invoked when the\n        specified log entry is changed."
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry`` to monitor\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_entries", 
               "doc": {
                  "headline": "Registers for notification of deleted log entries.", 
                  "body": "        ``LogEntryReceiver.deletedLogEntry()`` is invoked when a log\n        entry is deleted or removed from this log."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_entries_at_priority", 
               "doc": {
                  "headline": "Register for notifications of deleted log entries at or above the given priority type.", 
                  "body": "        ``LogEntryReceiver.deletedLogEntry()`` is invoked when a\n        ``LogEntry`` is deleted or removed from this log."
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): a priority type\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param priority_type: a priority type\n        :type priority_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_entries_for_resource", 
               "doc": {
                  "headline": "Register for notifications of deleted log entries logged by an agent associated with the given resource.", 
                  "body": "        ``LogEntryReceiver.deletedLogEntry()`` is invoked when a\n        ``LogEntry`` is deleted or removed from this log."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_entry", 
               "doc": {
                  "headline": "Registers for notification of a deleted log entry.", 
                  "body": "        ``LogEntryReceiver.deleteddLogENtry()`` is invoked when the\n        specified log entry is deleted or removed from this log."
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry`` to monitor\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryLogSession", 
         "shortname": "LogEntryLogSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``LogEntry`` to ``Log`` mappings.", 
            "body": "    An entry may appear in multiple ``Logs``. Each ``Log`` may have its\n    own authorizations governing who is allowed to look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "use_comparative_log_view", 
            "use_plenary_log_view", 
            "can_lookup_log_entry_log_mappings", 
            "get_log_entry_ids_by_log", 
            "get_log_entries_by_log", 
            "get_log_entry_ids_by_log", 
            "get_log_entrie_by_log", 
            "get_log_ids_by_log_entry", 
            "get_log_by_log_entry"
         ], 
         "methods": [
            {
               "name": "use_comparative_log_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_log_view", 
               "doc": {
                  "headline": "A complete view of the ``LogEntry`` and ``Log`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_lookup_log_entry_log_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of logEntry/log mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_ids_by_log", 
               "doc": {
                  "headline": "Gets the list of ``LogEntry``  ``Ids`` associated with a ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): ``Id`` of a ``Log``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related logEntry ``Ids``", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: ``Id`` of a ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related logEntry ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entries_by_log", 
               "doc": {
                  "headline": "Gets the list of log entries associated with a ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): ``Id`` of a ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - list of related logEntry", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: ``Id`` of a ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related logEntry\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entry_ids_by_log", 
               "doc": {
                  "headline": "Gets the list of ``LogEntry Ids`` corresponding to a list of ``Log`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_ids (osid.id.IdList): list of log ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of logEntry ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``log_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_ids: list of log ``Ids``\n        :type log_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of logEntry ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_entrie_by_log", 
               "doc": {
                  "headline": "Gets the list of log entries corresponding to a list of ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_ids (osid.id.IdList): list of log ``Ids``\n", 
               "return_doc": "        return: (osid.logging.LogEntryList) - list of log entries", 
               "error_doc": "        raise:  NullArgument - ``log_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_ids: list of log ``Ids``\n        :type log_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of log entries\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_ids_by_log_entry", 
               "doc": {
                  "headline": "Gets the list of ``Log``  ``Ids`` mapped to a ``LogEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): ``Id`` of a ``LogEntry``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of log ``Ids``", 
               "error_doc": "        raise:  NotFound - ``log_entry_id`` is not found\n        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: ``Id`` of a ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of log ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_entry_id`` is not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_by_log_entry", 
               "doc": {
                  "headline": "Gets the list of ``Log`` objects mapped to a ``LogEntry``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): ``Id`` of a ``LogEntry``\n", 
               "return_doc": "        return: (osid.logging.LogList) - list of log", 
               "error_doc": "        raise:  NotFound - ``log_entry_id`` is not found\n        raise:  NullArgument - ``log_entry_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: ``Id`` of a ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of log\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_entry_id`` is not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryLogAssignmentSession", 
         "shortname": "LogEntryLogAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign log entries to ``Logs``.", 
            "body": "    A ``LogEntry`` may map to multiple ``Log`` objects and removing the\n    last reference to a ``LogEntry`` is the equivalent of deleting it.\n    Each ``Log`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Moving or adding a reference of a ``LogEntry`` to another ``Log`` is\n    not a copy operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_log_entries", 
            "can_assign_log_entries_to_log", 
            "get_assignable_log_ids", 
            "get_assignable_log_ids_for_log_entry", 
            "assign_log_entry_to_log", 
            "unassign_log_entry_from_log"
         ], 
         "methods": [
            {
               "name": "can_assign_log_entries", 
               "doc": {
                  "headline": "Tests if this user can alter log entry/log mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_log_entries_to_log", 
               "doc": {
                  "headline": "Tests if this user can alter log entry/log mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_log_ids", 
               "doc": {
                  "headline": "Gets a list of log including and under the given log node in which any log entry can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable log ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable log ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_log_ids_for_log_entry", 
               "doc": {
                  "headline": "Gets a list of log including and under the given log node in which a specific log entry can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable log ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``log_id`` or ``log_entry_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n        :param log_entry_id: the ``Id`` of the ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable log ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` or ``log_entry_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_log_entry_to_log", 
               "doc": {
                  "headline": "Adds an existing ``LogEntry`` to a ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry``\n        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``log_entry_id`` is already assigned to\n                ``log_id``\n        raise:  NotFound - ``log_entry_id`` or ``log_id`` not found\n        raise:  NullArgument - ``log_entry_id`` or ``log_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``log_entry_id`` is already assigned to ``log_id``\n        :raise: ``NotFound`` -- ``log_entry_id`` or ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_entry_id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_log_entry_from_log", 
               "doc": {
                  "headline": "Removes a ``LogEntry`` from a ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): the ``Id`` of the\n                ``LogEntry``\n        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_entry_id`` or ``log_id`` not found or\n                ``log_entry_id`` not assigned to ``log_id``\n        raise:  NullArgument - ``log_entry_id`` or ``log_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_entry_id: the ``Id`` of the ``LogEntry``\n        :type log_entry_id: ``osid.id.Id``\n        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_entry_id`` or ``log_id`` not found or ``log_entry_id`` not assigned to ``log_id``\n        :raise: ``NullArgument`` -- ``log_entry_id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntrySmartLogSession", 
         "shortname": "LogEntrySmartLogSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``LogEntryQuery`` can be retrieved from this session and mapped to\n    this ``Log`` to create a virtual collection of log entries. The log\n    entries may be sequenced using the ``LogEntrySearchOrder`` from this\n    session.\n\n    This ``Log`` has a default query that matches any log entry and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``LogEntryQueryInspector``. The query may be\n    modified by converting the inspector back to a ``LogEntryQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_id", 
            "get_log", 
            "can_manage_smart_log", 
            "get_log_entry_query", 
            "get_log_entry_search_order", 
            "apply_log_entry_query", 
            "inspect_log_entry_query", 
            "apply_log_entry_sequencing", 
            "get_log_entry_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_log_id", 
               "doc": {
                  "headline": "Gets the ``Log``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Log Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the ``Log`` associated with this\n                session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Log`` associated with this session\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_log", 
               "doc": {
                  "headline": "Tests if this user can manage smart log.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart log management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart log management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_query", 
               "doc": {
                  "headline": "Gets a logEntry query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQuery) - the log entry query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry query\n        :rtype: ``osid.logging.LogEntryQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQuery", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_search_order", 
               "doc": {
                  "headline": "Gets a logEntry search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntrySearchOrder) - the logEntry search\n                order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the logEntry search order\n        :rtype: ``osid.logging.LogEntrySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntrySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_log_entry_query", 
               "doc": {
                  "headline": "Applies a logEntry query to this log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_query (osid.logging.LogEntryQuery): the\n                logEntry query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``log_entry_query`` not of this service", 
               "sphinx_param_doc": "        :param log_entry_query: the logEntry query\n        :type log_entry_query: ``osid.logging.LogEntryQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``log_entry_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryQuery", 
                     "var_name": "log_entry_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_log_entry_query", 
               "doc": {
                  "headline": "Gets a logEntry query inspector for this log.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQueryInspector) - the logEntry\n                query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the logEntry query inspector\n        :rtype: ``osid.logging.LogEntryQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_log_entry_sequencing", 
               "doc": {
                  "headline": "Applies a logEntry search order to this log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_search_order\n                (osid.logging.LogEntrySearchOrder): the logEntry search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``log_entry_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param log_entry_search_order: the logEntry search order\n        :type log_entry_search_order: ``osid.logging.LogEntrySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``log_entry_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntrySearchOrder", 
                     "var_name": "log_entry_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntrySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_from_inspector", 
               "doc": {
                  "headline": "Gets a logEntry query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_query_inspector\n                (osid.logging.LogEntryQueryInspector): a resorce\n                relationship query inspector\n", 
               "return_doc": "        return: (osid.logging.LogEntryQuery) - the logEntry query", 
               "error_doc": "        raise:  NullArgument - ``log_entry_query_inspector`` is ``null``\n        raise:  Unsupported - ``log_entry_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param log_entry_query_inspector: a resorce relationship query inspector\n        :type log_entry_query_inspector: ``osid.logging.LogEntryQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the logEntry query\n        :rtype: ``osid.logging.LogEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``log_entry_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntryQueryInspector", 
                     "var_name": "log_entry_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntryQueryInspector"
               ], 
               "return_type": "osid.logging.LogEntryQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogLookupSession", 
         "shortname": "LogLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Log`` objects.", 
            "body": "    The ``Log`` represents a collection of log entries.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Logs`` it can access, without breaking execution.\n    However, an assessment may only be useful if all ``Logs`` referenced\n    by it are available, and a test-taking applicationmay sacrifice some\n    interoperability for the sake of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_logs", 
            "use_comparative_log_view", 
            "use_plenary_log_view", 
            "get_log", 
            "get_logs_by_ids", 
            "get_logs_by_genus_type", 
            "get_logs_by_parent_genus_type", 
            "get_logs_by_record_type", 
            "get_logs_by_provider", 
            "get_logs"
         ], 
         "methods": [
            {
               "name": "can_lookup_logs", 
               "doc": {
                  "headline": "Tests if this user can perform ``Log`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_log_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_log_view", 
               "doc": {
                  "headline": "A complete view of the ``Log`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Log`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Log`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.Log) - the log", 
               "error_doc": "        raise:  NotFound - ``log_id`` not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the log\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs_by_ids", 
               "doc": {
                  "headline": "Gets a ``LogList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the logs\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Logs`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    log_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``Log list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``log_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_ids: the list of ``Ids`` to retrieve\n        :type log_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Log list``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``log_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``LogList`` corresponding to the given log genus ``Type`` which does not include logs of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known logs or an\n        error results. Otherwise, the returned list may contain only\n        those logs that are accessible through this session."
               }, 
               "arg_doc": "        arg:    log_genus_type (osid.type.Type): a log genus type\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``Log list``", 
               "error_doc": "        raise:  NullArgument - ``log_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_genus_type: a log genus type\n        :type log_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Log list``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``LogList`` corresponding to the given log genus ``Type`` and include any additional logs with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known logs or an\n        error results. Otherwise, the returned list may contain only\n        those logs that are accessible through this session."
               }, 
               "arg_doc": "        arg:    log_genus_type (osid.type.Type): a log genus type\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``Log list``", 
               "error_doc": "        raise:  NullArgument - ``log_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_genus_type: a log genus type\n        :type log_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Log list``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs_by_record_type", 
               "doc": {
                  "headline": "Gets a ``LogList`` containing the given log record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known logs or an\n        error results. Otherwise, the returned list may contain only\n        those logs that are accessible through this session."
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): a log record type\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``Log list``", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_record_type: a log record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Log list``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs_by_provider", 
               "doc": {
                  "headline": "Gets a ``LogList`` for a given provider.", 
                  "body": "        In plenary mode, the returned list contains all known logs or an\n        error results. Otherwise, the returned list may contain only\n        those logs that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``Log list``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Log list``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_logs", 
               "doc": {
                  "headline": "Gets all ``Logs``.", 
                  "body": "        In plenary mode, the returned list contains all known logs or an\n        error results. Otherwise, the returned list may contain only\n        those logs that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogList) - a list of ``Logs``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Logs``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogQuerySession", 
         "shortname": "LogQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Log`` objects.", 
            "body": "    The search query is constructed using the ``LogQuery``. The log\n    record ``Type`` also specifies the record for the log query.\n\n    Logs may have a query record indicated by their respective record\n    types. The query record is accessed via the ``LogQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_logs", 
            "get_log_query", 
            "get_logs_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_logs", 
               "doc": {
                  "headline": "Tests if this user can perform ``Log`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_query", 
               "doc": {
                  "headline": "Gets a log query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQuery) - the log query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log query\n        :rtype: ``osid.logging.LogQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQuery", 
               "errors": {}
            }, 
            {
               "name": "get_logs_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Logs`` matching the given log query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_query (osid.logging.LogQuery): the log query\n", 
               "return_doc": "        return: (osid.logging.LogList) - the returned ``LogList``", 
               "error_doc": "        raise:  NullArgument - ``log_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_query`` is not of this service", 
               "sphinx_param_doc": "        :param log_query: the log query\n        :type log_query: ``osid.logging.LogQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``LogList``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogQuery", 
                     "var_name": "log_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogQuery"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogSearchSession", 
         "shortname": "LogSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Log`` objects.", 
            "body": "    The search query is constructed using the ``LogQuery`` . The log\n    record ``Type`` also specifies the record for the log query.\n\n    ``get_logs_by_query()`` is the basic search method and returns a\n    list of ``Log`` elements. A more advanced search may be performed\n    with ``getLogsBySearch()``. It accepts a ``LogSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_logs_by_search()`` returns a ``LogSearchResults`` that can be\n    used to access the resulting ``LogList`` or be used to perform a\n    search within the result set through ``LogSearch``.\n    \n    Logs may have a query record indicated by their respective record\n    types. The query record is accessed via the ``LogQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.logging.LogQuerySession"
         ], 
         "inherit_shortnames": [
            "LogQuerySession"
         ], 
         "inherit_pkg_names": [
            "logging"
         ], 
         "inheritance": [
            {
               "pkg_name": "logging", 
               "name": "LogQuerySession"
            }
         ], 
         "method_names": [
            "get_log_search", 
            "get_log_search_order", 
            "get_logs_by_search", 
            "get_log_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_log_search", 
               "doc": {
                  "headline": "Gets a log search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogSearch) - the log search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log search\n        :rtype: ``osid.logging.LogSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogSearch", 
               "errors": {}
            }, 
            {
               "name": "get_log_search_order", 
               "doc": {
                  "headline": "Gets a log search order.", 
                  "body": "        The ``LogSearchOrder`` is supplied to a ``LogSearch`` to specify\n        the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogSearchOrder) - the log search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log search order\n        :rtype: ``osid.logging.LogSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_logs_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_query (osid.logging.LogQuery): the log query\n        arg:    log_search (osid.logging.LogSearch): the log search\n", 
               "return_doc": "        return: (osid.logging.LogSearchResults) - the log search results", 
               "error_doc": "        raise:  NullArgument - ``log_query`` or ``log_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_query`` or ``log_search`` is not of\n                this service", 
               "sphinx_param_doc": "        :param log_query: the log query\n        :type log_query: ``osid.logging.LogQuery``\n        :param log_search: the log search\n        :type log_search: ``osid.logging.LogSearch``\n", 
               "sphinx_return_doc": "        :return: the log search results\n        :rtype: ``osid.logging.LogSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_query`` or ``log_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_query`` or ``log_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogQuery", 
                     "var_name": "log_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.logging.LogSearch", 
                     "var_name": "log_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogQuery", 
                  "osid.logging.LogSearch"
               ], 
               "return_type": "osid.logging.LogSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_query_from_inspector", 
               "doc": {
                  "headline": "Gets a log query from an inspector.", 
                  "body": "        The inspector is available from a ``LogSearchResults``."
               }, 
               "arg_doc": "        arg:    log_query_inspector (osid.logging.LogQueryInspector): a\n                log query inspector\n", 
               "return_doc": "        return: (osid.logging.LogQuery) - the log query", 
               "error_doc": "        raise:  NullArgument - ``log_query_inspector`` is ``null``\n        raise:  Unsupported - ``log_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param log_query_inspector: a log query inspector\n        :type log_query_inspector: ``osid.logging.LogQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the log query\n        :rtype: ``osid.logging.LogQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``log_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogQueryInspector", 
                     "var_name": "log_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogQueryInspector"
               ], 
               "return_type": "osid.logging.LogQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogAdminSession", 
         "shortname": "LogAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Logs``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Log,`` a ``LogForm`` is requested using\n    ``get_log_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``LogForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``LogForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``LogForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``LogForms`` are requested to the ``Log``  ``Id`` that\n    is to be updated using ``getLogFormForUpdate()``. Similarly, the\n    ``LogForm`` has metadata about the data that can be updated and it\n    can perform validation before submitting the update. The ``LogForm``\n    can only be used once for a successful update and cannot be reused.\n    \n    The delete operations delete ``Logs``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_logs", 
            "can_create_log_with_record_types", 
            "get_log_form_for_create", 
            "create_log", 
            "can_update_logs", 
            "get_log_form_for_update", 
            "update_log", 
            "can_delete_logs", 
            "delete_log", 
            "can_manage_log_aliases", 
            "alias_log"
         ], 
         "methods": [
            {
               "name": "can_create_logs", 
               "doc": {
                  "headline": "Tests if this user can create ``Logs``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Log``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Log`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Log`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_log_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Log`` using the desired record types.", 
                  "body": "        While ``LoggingManager.getLogRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Log``.\n        Providing an empty array tests if a ``Log`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    log_record_types (osid.type.Type[]): array of log record\n                types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Log`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``log_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param log_record_types: array of log record types\n        :type log_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Log`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "log_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_form_for_create", 
               "doc": {
                  "headline": "Gets the log form for creating new logs.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    log_record_types (osid.type.Type[]): array of log record\n                types\n", 
               "return_doc": "        return: (osid.logging.LogForm) - the log form", 
               "error_doc": "        raise:  NullArgument - ``log_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param log_record_types: array of log record types\n        :type log_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the log form\n        :rtype: ``osid.logging.LogForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "log_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.logging.LogForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_log", 
               "doc": {
                  "headline": "Creates a new ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_form (osid.logging.LogForm): the form for this\n                ``Log``\n", 
               "return_doc": "        return: (osid.logging.Log) - the new ``Log``", 
               "error_doc": "        raise:  IllegalState - ``log_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``log_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_form`` did not originate from\n                ``get_log_form_for_create()``", 
               "sphinx_param_doc": "        :param log_form: the form for this ``Log``\n        :type log_form: ``osid.logging.LogForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Log``\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``log_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``log_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_form`` did not originate from ``get_log_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogForm", 
                     "var_name": "log_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogForm"
               ], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_logs", 
               "doc": {
                  "headline": "Tests if this user can update ``Logs``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Log``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Log`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Log`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_form_for_update", 
               "doc": {
                  "headline": "Gets the log form for updating an existing log.", 
                  "body": "        A new log form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log``\n", 
               "return_doc": "        return: (osid.logging.LogForm) - the log form", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the log form\n        :rtype: ``osid.logging.LogForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_log", 
               "doc": {
                  "headline": "Updates an existing log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_form (osid.logging.LogForm): the form containing the\n                elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``log_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``log_id`` or ``log_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``log_form`` did not originate from\n                ``get_log_form_for_update()``", 
               "sphinx_param_doc": "        :param log_form: the form containing the elements to be updated\n        :type log_form: ``osid.logging.LogForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``log_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``log_id`` or ``log_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``log_form`` did not originate from ``get_log_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogForm", 
                     "var_name": "log_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_logs", 
               "doc": {
                  "headline": "Tests if this user can delete ``Logs``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Log``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Log`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Log`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_log", 
               "doc": {
                  "headline": "Deletes a ``Log``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_id`` not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` to remove\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_log_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Logs``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Log`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Log`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_log", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Log`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Log`` is determined by the provider.\n        The new ``Id`` performs as an alias to the primary ``Id``. If\n        the alias is a pointer to another log, it is reassigned to the\n        given log ``Id``."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a ``Log``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``log_id`` not found\n        raise:  NullArgument - ``log_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a ``Log``\n        :type log_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``log_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogNotificationSession", 
         "shortname": "LogNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Log`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Log`` object\n    itself. Adding and removing entries result in notifications\n    available from the notification session for log entries."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_log_notifications", 
            "register_for_new_logs", 
            "register_for_new_log_ancestors", 
            "register_for_new_log_descendants", 
            "register_for_changed_logs", 
            "register_for_changed_log", 
            "register_for_deleted_logs", 
            "register_for_deleted_log", 
            "register_for_deleted_log_ancestors", 
            "register_for_deleted_log_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_log_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Log`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_logs", 
               "doc": {
                  "headline": "Register for notifications of new logs.", 
                  "body": "        ``LogReceiver.newLog()`` is invoked when a new ``Log`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_log_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new ancestor of the specified log.", 
                  "body": "        ``LogReceiver.newAncestorLog()`` is invoked when the specified\n        log node gets a new ancestor."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` node to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_log_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new descendant of the specified log.", 
                  "body": "        ``LogReceiver.newDescendantLog()`` is invoked when the specified\n        log node gets a new descendant."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` node to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_logs", 
               "doc": {
                  "headline": "Registers for notification of updated logs.", 
                  "body": "        ``LogReceiver.changedLog()`` is invoked when a log is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_log", 
               "doc": {
                  "headline": "Registers for notification of an updated log.", 
                  "body": "        ``LogReceiver.changedLog()`` is invoked when the specified log\n        is changed."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_logs", 
               "doc": {
                  "headline": "Registers for notification of deleted logs.", 
                  "body": "        ``LogReceiver.deletedLog()`` is invoked when a log is deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log", 
               "doc": {
                  "headline": "Registers for notification of a deleted log.", 
                  "body": "        ``LogReceiver.deletedLog()`` is invoked when the specified log\n        is deleted."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes an ancestor of the specified log.", 
                  "body": "        ``LogReceiver.deletedAncestor()`` is invoked when the specified\n        log node loses an ancestor."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` node to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_log_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes a descendant of the specified log.", 
                  "body": "        ``LogReceiver.deletedDescendant()`` is invoked when the\n        specified log node loses a descendant."
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` node to monitor\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogHierarchySession", 
         "shortname": "LogHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Log`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Log``. The hierarchy may be\n    traversed recursively to establish the tree structure through\n    ``get_parent_logs()`` and ``getChildLogs()``. To relate these\n    ``Ids`` to another OSID, ``get_log_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Log`` available in the Log OSID is known to this hierarchy but\n    does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_logs()`` or ``get_child_logs()`` in lieu of\n    a ``PermissionDenied`` error that may disrupt the traversal through\n    authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: log elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_hierarchy_id", 
            "get_log_hierarchy", 
            "can_access_log_hierarchy", 
            "use_comparative_log_view", 
            "use_plenary_log_view", 
            "get_root_log_ids", 
            "get_root_logs", 
            "has_parent_logs", 
            "is_parent_of_log", 
            "get_parent_log_ids", 
            "get_parent_logs", 
            "is_ancestor_of_log", 
            "has_child_logs", 
            "is_child_of_log", 
            "get_child_log_ids", 
            "get_child_logs", 
            "is_descendant_of_log", 
            "get_log_node_ids", 
            "get_log_nodes"
         ], 
         "methods": [
            {
               "name": "get_log_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_log_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer hierrachy\n        traversal operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_log_view", 
               "doc": {
                  "headline": "The returns from the log methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_log_view", 
               "doc": {
                  "headline": "A complete view of the ``Log`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_log_ids", 
               "doc": {
                  "headline": "Gets the root log ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root log ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root log ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_logs", 
               "doc": {
                  "headline": "Gets the root logs in the log hierarchy.", 
                  "body": "        A node with no parents is an orphan. While all log ``Ids`` are\n        known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root node or child of\n        another node."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogList) - the root logs", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root logs\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_logs", 
               "doc": {
                  "headline": "Tests if the ``Log`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if the log has parents, ``false``\n                otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the log has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_log", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``log_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``id`` or ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``log_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_log_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the log", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the log\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_logs", 
               "doc": {
                  "headline": "Gets the parent logs of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` to query\n", 
               "return_doc": "        return: (osid.logging.LogList) - the parent logs of the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Log`` identified by ``Id is`` not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` to query\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent logs of the ``id``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Log`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_log", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is an ancestor of the\n                ``log_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``id`` or ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is an ancestor of the ``log_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_logs", 
               "doc": {
                  "headline": "Tests if a log has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``log_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``log_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_log", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct child of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a child of\n                ``log_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``id`` or ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a child of ``log_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_log_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the depot", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` to query\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the depot\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_logs", 
               "doc": {
                  "headline": "Gets the child logs of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the ``Log`` to query\n", 
               "return_doc": "        return: (osid.logging.LogList) - the child logs of the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Log`` identified by ``Id is`` not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the ``Log`` to query\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the child logs of the ``id``\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Log`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_log", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``log_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``id`` or ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``log_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a log node", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` to query\n        :type log_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a log node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_log_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.logging.LogNode) - a log node", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` to query\n        :type log_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a log node\n        :rtype: ``osid.logging.LogNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.logging.LogNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogHierarchyDesignSession", 
         "shortname": "LogHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages a hierarchy of logs.", 
            "body": "    Logs may be organized into a hierarchy for organizing or federating.\n    A parent ``Log`` includes all of the Ids of its children such that a\n    single root node contains all of the ``Ids`` of the federation."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_log_hierarchy_id", 
            "get_log_hierarchy", 
            "can_modify_log_hierarchy", 
            "add_root_log", 
            "remove_root_log", 
            "add_child_log", 
            "remove_child_log", 
            "remove_child_logs"
         ], 
         "methods": [
            {
               "name": "get_log_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_log_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_log_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_log", 
               "doc": {
                  "headline": "Adds a root log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``log_id`` is already in hierarchy\n        raise:  NotFound - ``log_id`` is not found\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``log_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``log_id`` is not found\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_log", 
               "doc": {
                  "headline": "Removes a root log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_id`` is not a root\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` is not a root\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_log", 
               "doc": {
                  "headline": "Adds a child to a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``log_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``log_id`` or ``child_id`` not found\n        raise:  NullArgument - ``log_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``log_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``log_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``log_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_log", 
               "doc": {
                  "headline": "Removes a child from a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``log_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``log_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_logs", 
               "doc": {
                  "headline": "Removes all children from a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of a log\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``log_id`` not in hierarchy\n        raise:  NullArgument - ``log_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of a log\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``log_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``log_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntry", 
         "shortname": "LogEntry", 
         "category": "objects", 
         "doc": {
            "headline": "A log entry consists of a time, an agent, and a priority type.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObject"
         ], 
         "inherit_shortnames": [
            "OsidObject"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObject"
            }
         ], 
         "method_names": [
            "get_priority", 
            "get_timestamp", 
            "get_resource_id", 
            "get_resource", 
            "get_agent_id", 
            "get_agent", 
            "get_log_entry_record"
         ], 
         "methods": [
            {
               "name": "get_priority", 
               "doc": {
                  "headline": "Gets the priority level of this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.Type) - the priority level", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the priority level\n        :rtype: ``osid.type.Type``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.Type", 
               "errors": {}
            }, 
            {
               "name": "get_timestamp", 
               "doc": {
                  "headline": "Gets the time this entry was logged.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.calendaring.DateTime) - the time stamp of this\n                entry", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the time stamp of this entry\n        :rtype: ``osid.calendaring.DateTime``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.calendaring.DateTime", 
               "errors": {}
            }, 
            {
               "name": "get_resource_id", 
               "doc": {
                  "headline": "Gets the resource ``Id`` who created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the resource ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_resource", 
               "doc": {
                  "headline": "Gets the ``Resource`` who created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.Resource) - the ``Resource``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Resource``\n        :rtype: ``osid.resource.Resource``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.Resource", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_agent_id", 
               "doc": {
                  "headline": "Gets the agent ``Id`` who created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the agent ``Id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id``\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_agent", 
               "doc": {
                  "headline": "Gets the ``Agent`` who created this entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.Agent) - the ``Agent``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Agent``\n        :rtype: ``osid.authentication.Agent``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.Agent", 
               "errors": {
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_log_entry_record", 
               "doc": {
                  "headline": "Gets the log entry record corresponding to the given ``LogEntry`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``log_entry_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(log_entry_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): the type of log\n                entry record to retrieve\n", 
               "return_doc": "        return: (osid.logging.records.LogEntryRecord) - the log entry\n                record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_entry_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param log_entry_record_type: the type of log entry record to retrieve\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry record\n        :rtype: ``osid.logging.records.LogEntryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntryRecord", 
         "shortname": "LogEntryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntry``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntryQuery", 
         "shortname": "LogEntryQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching log entries.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQuery"
         ], 
         "inherit_shortnames": [
            "OsidObjectQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQuery"
            }
         ], 
         "method_names": [
            "match_priority", 
            "match_any_priority", 
            "clear_priority_terms", 
            "match_minimum_priority", 
            "clear_minimum_priority_terms", 
            "match_timestamp", 
            "clear_timestamp_terms", 
            "match_resource_id", 
            "clear_resource_id_terms", 
            "supports_resource_query", 
            "get_resource_query", 
            "clear_resource_terms", 
            "match_agent_id", 
            "clear_agent_id_terms", 
            "supports_agent_query", 
            "get_agent_query", 
            "clear_agent_terms", 
            "match_log_id", 
            "clear_log_id_terms", 
            "supports_log_query", 
            "get_log_query", 
            "clear_log_terms", 
            "get_log_entry_query_record"
         ], 
         "methods": [
            {
               "name": "match_priority", 
               "doc": {
                  "headline": "Matches a priority ``Type`` for the log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): ``Type`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``", 
               "sphinx_param_doc": "        :param priority_type: ``Type`` to match\n        :type priority_type: ``osid.type.Type``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_priority", 
               "doc": {
                  "headline": "Matches log entries with any priority.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match log entries with any\n                priority, ``false`` to match log entries with no\n                priority\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match log entries with any priority, ``false`` to match log entries with no priority\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_priority_terms", 
               "doc": {
                  "headline": "Clears the priority terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_minimum_priority", 
               "doc": {
                  "headline": "Matches a log entries including and above the given priority type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    priority_type (osid.type.Type): ``Type`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``priority_type`` is ``null``", 
               "sphinx_param_doc": "        :param priority_type: ``Type`` to match\n        :type priority_type: ``osid.type.Type``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``priority_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_minimum_priority_terms", 
               "doc": {
                  "headline": "Clears the minimum priority terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_timestamp", 
               "doc": {
                  "headline": "Matches the time of this log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    start_time (osid.calendaring.DateTime): start time\n        arg:    end_time (osid.calendaring.DateTime): end time\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``start_time`` is greater than\n                ``end_time``\n        raise:  NullArgument - ``start_time`` or ``end_time`` is\n                ``null``", 
               "sphinx_param_doc": "        :param start_time: start time\n        :type start_time: ``osid.calendaring.DateTime``\n        :param end_time: end time\n        :type end_time: ``osid.calendaring.DateTime``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``start_time`` is greater than ``end_time``\n        :raise: ``NullArgument`` -- ``start_time`` or ``end_time`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "start_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "end_time", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_timestamp_terms", 
               "doc": {
                  "headline": "Clears the timestamp terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_resource_id", 
               "doc": {
                  "headline": "Matches a resource in this log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``", 
               "sphinx_param_doc": "        :param resource_id: ``Id`` to match\n        :type resource_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_id_terms", 
               "doc": {
                  "headline": "Clears the resource ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_resource_query", 
               "doc": {
                  "headline": "Tests if a ``ResourceQuery`` is available for querying agents.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_query", 
               "doc": {
                  "headline": "Gets the query for a resource.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQuery) - the resource query", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource query\n        :rtype: ``osid.resource.ResourceQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_resource_terms", 
               "doc": {
                  "headline": "Clears the resource terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_agent_id", 
               "doc": {
                  "headline": "Matches an agent in this log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: ``Id`` to match\n        :type agent_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "agent_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agent_id_terms", 
               "doc": {
                  "headline": "Clears the agent ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_agent_query", 
               "doc": {
                  "headline": "Tests if an ``AgentQuery`` is available for querying agents.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_query", 
               "doc": {
                  "headline": "Gets the query for an agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQuery) - the agent query", 
               "error_doc": "        raise:  Unimplemented - ``supports_agent_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent query\n        :rtype: ``osid.authentication.AgentQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_agent_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_agent_terms", 
               "doc": {
                  "headline": "Clears the agent terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_log_id", 
               "doc": {
                  "headline": "Matches a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): ``Id`` to match\n        arg:    match (boolean): ``true`` if for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``", 
               "sphinx_param_doc": "        :param log_id: ``Id`` to match\n        :type log_id: ``osid.id.Id``\n        :param match: ``true`` if for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_log_id_terms", 
               "doc": {
                  "headline": "Clears the log ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_log_query", 
               "doc": {
                  "headline": "Tests if a ``LogQuery`` is available for querying logs.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a log query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a log query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_query", 
               "doc": {
                  "headline": "Gets the query for a log.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQuery) - the log query", 
               "error_doc": "        raise:  Unimplemented - ``supports_log_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log query\n        :rtype: ``osid.logging.LogQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_log_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_log_terms", 
               "doc": {
                  "headline": "Clears the log terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_query_record", 
               "doc": {
                  "headline": "Gets the log entry query corresponding to the given ``LogEntry`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): a log entry\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntryQueryRecord) - the log\n                entry query record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_eutry_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param log_entry_record_type: a log entry record type\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry query record\n        :rtype: ``osid.logging.records.LogEntryQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_eutry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntryQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntryQueryRecord", 
         "shortname": "LogEntryQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LoglEntryQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntryQueryInspector", 
         "shortname": "LogEntryQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining log entry queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_priority_terms", 
            "get_minimum_priority_terms", 
            "get_timestamp_terms", 
            "get_resource_id_terms", 
            "get_resource_terms", 
            "get_agent_id_terms", 
            "get_agent_terms", 
            "get_log_id_terms", 
            "get_log_terms", 
            "get_log_entry_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_priority_terms", 
               "doc": {
                  "headline": "Gets the prirority query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.TypeTerm) - the priority terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the priority terms\n        :rtype: ``osid.search.terms.TypeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.TypeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_minimum_priority_terms", 
               "doc": {
                  "headline": "Gets the minimum prirority query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.TypeTerm) - the minimum priority\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the minimum priority terms\n        :rtype: ``osid.search.terms.TypeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.TypeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_timestamp_terms", 
               "doc": {
                  "headline": "Gets the timestamp query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.DateTimeRangeTerm) - the timestamp\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the timestamp terms\n        :rtype: ``osid.search.terms.DateTimeRangeTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.DateTimeRangeTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_id_terms", 
               "doc": {
                  "headline": "Gets the resource ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the resource ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_resource_terms", 
               "doc": {
                  "headline": "Gets the resource query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceQueryInspector) - the resource\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource terms\n        :rtype: ``osid.resource.ResourceQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_agent_id_terms", 
               "doc": {
                  "headline": "Gets the agent ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the agent ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_agent_terms", 
               "doc": {
                  "headline": "Gets the agent query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentQueryInspector) - the agent\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent terms\n        :rtype: ``osid.authentication.AgentQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_log_id_terms", 
               "doc": {
                  "headline": "Gets the log ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the log ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_log_terms", 
               "doc": {
                  "headline": "Gets the log query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQueryInspector) - the log terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log terms\n        :rtype: ``osid.logging.LogQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_query_inspector_record", 
               "doc": {
                  "headline": "Gets the log entry query inspector corresponding to the given ``LogEntry`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): a log entry\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntryQueryInspectorRecord) -\n                the log entry query record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_entry_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param log_entry_record_type: a log entry record type\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry query record\n        :rtype: ``osid.logging.records.LogEntryQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntryQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntryQueryInspectorRecord", 
         "shortname": "LogEntryQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntryQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntryForm", 
         "shortname": "LogEntryForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating log entries.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``LogEntryAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectForm"
         ], 
         "inherit_shortnames": [
            "OsidObjectForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectForm"
            }
         ], 
         "method_names": [
            "get_priority_metadata", 
            "set_priority", 
            "clear_priority", 
            "get_timestamp_metadata", 
            "set_timestamp", 
            "get_agent_metadata", 
            "set_agent", 
            "get_log_entry_form_record"
         ], 
         "methods": [
            {
               "name": "get_priority_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a priority type.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the priority", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the priority\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_priority", 
               "doc": {
                  "headline": "Sets the priority.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    priority (osid.type.Type): the new priority\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``priority`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``priority`` is ``null``", 
               "sphinx_param_doc": "        :param priority: the new priority\n        :type priority: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``priority`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``priority`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "priority", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_priority", 
               "doc": {
                  "headline": "Removes the priority.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  NoAccess - ``Metadata.isRequired()`` is ``true`` or\n                ``Metadata.isReadOnly()`` is ``true``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NoAccess`` -- ``Metadata.isRequired()`` is ``true`` or ``Metadata.isReadOnly()`` is ``true``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "NO_ACCESS": "ConsumerContract"
               }
            }, 
            {
               "name": "get_timestamp_metadata", 
               "doc": {
                  "headline": "Gets the metadata for a timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the timestamp", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the timestamp\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_timestamp", 
               "doc": {
                  "headline": "Sets the timestamp.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    timestamp (osid.calendaring.DateTime): the new timestamp\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``timestamp`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``timestamp`` is ``null``", 
               "sphinx_param_doc": "        :param timestamp: the new timestamp\n        :type timestamp: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``timestamp`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``timestamp`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "timestamp", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_agent_metadata", 
               "doc": {
                  "headline": "Gets the metadata for the agent.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.Metadata) - metadata for the agent", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: metadata for the agent\n        :rtype: ``osid.Metadata``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.Metadata", 
               "errors": {}
            }, 
            {
               "name": "set_agent", 
               "doc": {
                  "headline": "Sets the agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    agent_id (osid.calendaring.DateTime): the new agent\n", 
               "return_doc": "", 
               "error_doc": "        raise:  InvalidArgument - ``agent_id`` is invalid\n        raise:  NoAccess - ``Metadata.isReadOnly()`` is ``true``\n        raise:  NullArgument - ``agent_id`` is ``null``", 
               "sphinx_param_doc": "        :param agent_id: the new agent\n        :type agent_id: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``agent_id`` is invalid\n        :raise: ``NoAccess`` -- ``Metadata.isReadOnly()`` is ``true``\n        :raise: ``NullArgument`` -- ``agent_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "agent_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NO_ACCESS": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_form_record", 
               "doc": {
                  "headline": "Gets the ``LogEntryFormRecord`` corresponding to the given log entry record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): the log entry\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntryFormRecord) - the log\n                entry form record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_entry_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param log_entry_record_type: the log entry record type\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry form record\n        :rtype: ``osid.logging.records.LogEntryFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntryFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntryFormRecord", 
         "shortname": "LogEntryFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntryForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntrySearchOrder", 
         "shortname": "LogEntrySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidObjectSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_priority", 
            "order_by_timestamp", 
            "order_by_resource", 
            "supports_resource_search_order", 
            "get_resource_search_order", 
            "order_by_agent", 
            "supports_agent_search_order", 
            "get_agent_search_order", 
            "get_log_entry_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_priority", 
               "doc": {
                  "headline": "Specifies a preference for ordering log entris by priority type.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search otrder style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search otrder style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_timestamp", 
               "doc": {
                  "headline": "Specifies a preference for ordering log entries by time.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search otrder style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search otrder style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_resource", 
               "doc": {
                  "headline": "Specifies a preference for ordering log entries by resource.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search otrder style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search otrder style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_resource_search_order", 
               "doc": {
                  "headline": "Tests if a resource order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a resource order is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a resource order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_resource_search_order", 
               "doc": {
                  "headline": "Gets the resource order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.resource.ResourceSearchOrder) - the resource\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_resource_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the resource search order\n        :rtype: ``osid.resource.ResourceSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_resource_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_resource_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.resource.ResourceSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_agent", 
               "doc": {
                  "headline": "Specifies a preference for ordering log entries by agent.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search otrder style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search otrder style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "supports_agent_search_order", 
               "doc": {
                  "headline": "Tests if an agent order is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an agent order is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an agent order is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_agent_search_order", 
               "doc": {
                  "headline": "Gets the agent order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.authentication.AgentSearchOrder) - the agent\n                search order", 
               "error_doc": "        raise:  Unimplemented - ``supports_agent_search_order()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the agent search order\n        :rtype: ``osid.authentication.AgentSearchOrder``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_agent_search_order()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_agent_search_order()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.authentication.AgentSearchOrder", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_order_record", 
               "doc": {
                  "headline": "Gets the log entry search order record corresponding to the given log entry record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    log_entry_record_type (osid.type.Type): a log entry\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntrySearchOrderRecord) - the\n                log entry search order record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_entry_record_type)``\n                is ``false``", 
               "sphinx_param_doc": "        :param log_entry_record_type: a log entry record type\n        :type log_entry_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry search order record\n        :rtype: ``osid.logging.records.LogEntrySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntrySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntrySearchOrderRecord", 
         "shortname": "LogEntrySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntrySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntrySearch", 
         "shortname": "LogEntrySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing log entry searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_log_entries", 
            "order_log_entry_results", 
            "get_log_entry_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_log_entries", 
               "doc": {
                  "headline": "Execute this search among the given list of log entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_ids (osid.id.IdList): list of log entries\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_ids`` is ``null``", 
               "sphinx_param_doc": "        :param log_entry_ids: list of log entries\n        :type log_entry_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_entry_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_log_entry_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_search_order\n                (osid.logging.LogEntrySearchOrder): log entry search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_search_order`` is ``null``\n        raise:  Unsupported - ``log_entry_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param log_entry_search_order: log entry search order\n        :type log_entry_search_order: ``osid.logging.LogEntrySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``log_entry_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogEntrySearchOrder", 
                     "var_name": "log_entry_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogEntrySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_search_record", 
               "doc": {
                  "headline": "Gets the log search record corresponding to the given log entry search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    log_entry_search_record_type (osid.type.Type): a log\n                entry search record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntrySearchRecord) - the log\n                entry search record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(log_entry_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_entry_search_record_type: a log entry search record type\n        :type log_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry search record\n        :rtype: ``osid.logging.records.LogEntrySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntrySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntrySearchRecord", 
         "shortname": "LogEntrySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntrySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntrySearchResults", 
         "shortname": "LogEntrySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_log_entries", 
            "get_log_entry_query_inspector", 
            "get_log_entry_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_log_entries", 
               "doc": {
                  "headline": "Gets the log entry list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryList) - the log entry list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry list\n        :rtype: ``osid.logging.LogEntryList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_entry_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQueryInspector) - the log entry\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry query inspector\n        :rtype: ``osid.logging.LogEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_search_results_record", 
               "doc": {
                  "headline": "Gets the log entry search results record corresponding to the given log entry search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    log_entry_search_record_type (osid.type.Type): a log\n                entry search record type\n", 
               "return_doc": "        return: (osid.logging.records.LogEntrySearchResultsRecord) - the\n                log entry search results record", 
               "error_doc": "        raise:  NullArgument - ``log_entry_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(log_entry_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_entry_search_record_type: a log entry search record type\n        :type log_entry_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log entry search results record\n        :rtype: ``osid.logging.records.LogEntrySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_entry_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_entry_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogEntrySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogEntrySearchResultsRecord", 
         "shortname": "LogEntrySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogEntrySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogEntryReceiver", 
         "shortname": "LogEntryReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The log entry receiver is the consumer supplied interface for receiving notifications pertaining to new log entries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_log_entry", 
            "changed_log_entry", 
            "deleted_log_entry"
         ], 
         "methods": [
            {
               "name": "new_log_entry", 
               "doc": {
                  "headline": "The callback for notifications of new log entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    entry_id (osid.id.Id): the ``Id`` of the new entry\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param entry_id: the ``Id`` of the new entry\n        :type entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_log_entry", 
               "doc": {
                  "headline": "The callback for notifications of changed log entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    entry_id (osid.id.Id): the ``Id`` of the changed entry\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param entry_id: the ``Id`` of the changed entry\n        :type entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_log_entry", 
               "doc": {
                  "headline": "the callback for notification of deleted log entries.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    entry_id (osid.id.Id): the ``Id`` of the deleted entry\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param entry_id: the ``Id`` of the deleted entry\n        :type entry_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "entry_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogEntryList", 
         "shortname": "LogEntryList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LogList`` provides a means for accessing ``LogEntry`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (lel.hasNext()) { LogEntry entry =\n    lel.getNextLogEntry(); }\n\n    or\n      while (lel.hasNext()) {\n           LogEntry[] entries = lel.getNextLogEntries(lel.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_log_entry", 
            "get_next_log_entries"
         ], 
         "methods": [
            {
               "name": "get_next_log_entry", 
               "doc": {
                  "headline": "Gets the next ``LogEntry`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntry) - the next ``LogEntry`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``LogEntry`` is available before calling\n                this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``LogEntry`` in this list. The ``has_next()`` method should be used to test that a next ``LogEntry`` is available before calling this method.\n        :rtype: ``osid.logging.LogEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_log_entries", 
               "doc": {
                  "headline": "Gets the next set of ``LogEntry elements`` in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``LogEntry`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.logging.LogEntry) - an array of ``LogEntry``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``LogEntry`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``LogEntry`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.logging.LogEntry``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.logging.LogEntry", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.Log", 
         "shortname": "Log", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Log`` represents a collection of entries.", 
            "body": "    Like all ``OsidObjects,`` a ``Log`` is identified by its Id and any\n    persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_log_record"
         ], 
         "methods": [
            {
               "name": "get_log_record", 
               "doc": {
                  "headline": "Gets the record corresponding to the given ``Log`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``log_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(log_record_type)`` is\n        ``true`` ."
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): the type of log record\n                to retrieve\n", 
               "return_doc": "        return: (osid.logging.records.LogRecord) - the log record", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_record_type: the type of log record to retrieve\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log record\n        :rtype: ``osid.logging.records.LogRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogRecord", 
         "shortname": "LogRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Log``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogQuery", 
         "shortname": "LogQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching for logs.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_log_entry_id", 
            "clear_log_entry_id_terms", 
            "supports_log_entry_query", 
            "get_log_entry_query", 
            "match_any_log_entry", 
            "clear_log_entry_terms", 
            "match_ancestor_log_id", 
            "clear_ancestor_log_id_terms", 
            "supports_ancestor_log_query", 
            "get_ancestor_log_query", 
            "match_any_ancestor_log", 
            "clear_ancestor_log_terms", 
            "match_descendant_log_id", 
            "clear_descendant_log_id_terms", 
            "supports_descendant_log_query", 
            "get_descendant_log_query", 
            "match_any_descendant_log", 
            "clear_descendant_log_terms", 
            "get_log_query_record"
         ], 
         "methods": [
            {
               "name": "match_log_entry_id", 
               "doc": {
                  "headline": "Sets a log entry ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_entry_id (osid.id.Id): a log entry ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_entry_id`` is ``null``", 
               "sphinx_param_doc": "        :param log_entry_id: a log entry ``Id``\n        :type log_entry_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_entry_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_entry_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_log_entry_id_terms", 
               "doc": {
                  "headline": "Clesrs the log entry ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_log_entry_query", 
               "doc": {
                  "headline": "Tests if a log entry query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a log entry query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a log entry query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_query", 
               "doc": {
                  "headline": "Gets the query for a log entry.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQuery) - the log entry query", 
               "error_doc": "        raise:  Unimplemented - ``supports_log_entry_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry query\n        :rtype: ``osid.logging.LogEntryQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_log_entry_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_log_entry_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_log_entry", 
               "doc": {
                  "headline": "Matches logs with any log entry.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match logs with any entry,\n                ``false`` to match logs with no log entries\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match logs with any entry, ``false`` to match logs with no log entries\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_log_entry_terms", 
               "doc": {
                  "headline": "Clesrs the log entry terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_log_id", 
               "doc": {
                  "headline": "Sets the log ``Id`` for this query to match logs that have the specified log as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): a log ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``", 
               "sphinx_param_doc": "        :param log_id: a log ``Id``\n        :type log_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_log_id_terms", 
               "doc": {
                  "headline": "Clesrs the ancestor log ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_log_query", 
               "doc": {
                  "headline": "Tests if a ``LogQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a log query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a log query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_log_query", 
               "doc": {
                  "headline": "Gets the query for a log.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQuery) - the log query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_log_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log query\n        :rtype: ``osid.logging.LogQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_log_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_log_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_log", 
               "doc": {
                  "headline": "Matches logs with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match logs with any\n                ancestor, ``false`` to match root logs\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match logs with any ancestor, ``false`` to match root logs\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_log_terms", 
               "doc": {
                  "headline": "Clesrs the ancestor log terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_log_id", 
               "doc": {
                  "headline": "Sets the log ``Id`` for this query to match logs that have the specified log as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): a log ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_id`` is ``null``", 
               "sphinx_param_doc": "        :param log_id: a log ``Id``\n        :type log_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_log_id_terms", 
               "doc": {
                  "headline": "Clesrs the descendant log ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_log_query", 
               "doc": {
                  "headline": "Tests if a ``LogQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a log query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a log query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_log_query", 
               "doc": {
                  "headline": "Gets the query for a log.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQuery) - the log query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_log_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log query\n        :rtype: ``osid.logging.LogQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_log_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_log_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_log", 
               "doc": {
                  "headline": "Matches logs with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match logs with any\n                descendant, ``false`` to match leaf logs\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match logs with any descendant, ``false`` to match leaf logs\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_log_terms", 
               "doc": {
                  "headline": "Clesrs the descendant log terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_log_query_record", 
               "doc": {
                  "headline": "Gets the log query record corresponding to the given ``Log`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): a log record type\n", 
               "return_doc": "        return: (osid.logging.records.LogQueryRecord) - the log query\n                record", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_record_type: a log record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log query record\n        :rtype: ``osid.logging.records.LogQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogQueryRecord", 
         "shortname": "LogQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogQueryInspector", 
         "shortname": "LogQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining log queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_log_entry_id_terms", 
            "get_log_entry_terms", 
            "get_ancestor_log_id_terms", 
            "get_ancestor_log_terms", 
            "get_descendant_log_id_terms", 
            "get_descendant_log_terms", 
            "get_log_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_log_entry_id_terms", 
               "doc": {
                  "headline": "Gets the log entry ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the log entry ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_log_entry_terms", 
               "doc": {
                  "headline": "Gets the log entry query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogEntryQueryInspector) - the log entry\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log entry terms\n        :rtype: ``osid.logging.LogEntryQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogEntryQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_log_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_log_terms", 
               "doc": {
                  "headline": "Gets the ancestor query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQueryInspector) - the ancestor terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor terms\n        :rtype: ``osid.logging.LogQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_log_id_terms", 
               "doc": {
                  "headline": "Gets the descendant log ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant log ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant log ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_log_terms", 
               "doc": {
                  "headline": "Gets the descendant log query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQueryInspector) - the descendant log\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant log terms\n        :rtype: ``osid.logging.LogQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_log_query_inspector_record", 
               "doc": {
                  "headline": "Gets the log query inspector record corresponding to the given ``Log`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): a log record type\n", 
               "return_doc": "        return: (osid.logging.records.LogQueryInspectorRecord) - the log\n                query inspector record", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_record_type: a log record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log query inspector record\n        :rtype: ``osid.logging.records.LogQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogQueryInspectorRecord", 
         "shortname": "LogQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogForm", 
         "shortname": "LogForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Logs``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the ``LogAdminSession``.\n    For each data element that may be set, metadata may be examined to\n    provide display hints or data constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_log_form_record"
         ], 
         "methods": [
            {
               "name": "get_log_form_record", 
               "doc": {
                  "headline": "Gets the ``LogFormRecord`` corresponding to the given log record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): the log record type\n", 
               "return_doc": "        return: (osid.logging.records.LogFormRecord) - the log form\n                record", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_record_type: the log record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log form record\n        :rtype: ``osid.logging.records.LogFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogFormRecord", 
         "shortname": "LogFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogSearchOrder", 
         "shortname": "LogSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_log_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_log_search_order_record", 
               "doc": {
                  "headline": "Gets the log search order record corresponding to the given log record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    log_record_type (osid.type.Type): a log record type\n", 
               "return_doc": "        return: (osid.logging.records.LogSearchOrderRecord) - the log\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``log_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(log_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param log_record_type: a log record type\n        :type log_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log search order record\n        :rtype: ``osid.logging.records.LogSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogSearchOrderRecord", 
         "shortname": "LogSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogSearch", 
         "shortname": "LogSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing log searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_logs", 
            "order_log_results", 
            "get_log_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_logs", 
               "doc": {
                  "headline": "Execute this search among the given list of logs.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_ids (osid.id.IdList): list of logs\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_ids`` is ``null``", 
               "sphinx_param_doc": "        :param log_ids: list of logs\n        :type log_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "log_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_log_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_search_order (osid.logging.LogSearchOrder): log\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``log_search_order`` is ``null``\n        raise:  Unsupported - ``log_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param log_search_order: log search order\n        :type log_search_order: ``osid.logging.LogSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``log_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.logging.LogSearchOrder", 
                     "var_name": "log_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.logging.LogSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_search_record", 
               "doc": {
                  "headline": "Gets the log search record corresponding to the given log search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    log_search_record_type (osid.type.Type): a log search\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogSearchRecord) - the log search\n                record", 
               "error_doc": "        raise:  NullArgument - ``log_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(log_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param log_search_record_type: a log search record type\n        :type log_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log search record\n        :rtype: ``osid.logging.records.LogSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogSearchRecord", 
         "shortname": "LogSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogSearchResults", 
         "shortname": "LogSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_logs", 
            "get_log_query_inspector", 
            "get_log_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_logs", 
               "doc": {
                  "headline": "Gets the log list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogList) - the log list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log list\n        :rtype: ``osid.logging.LogList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_log_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogQueryInspector) - the log query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log query inspector\n        :rtype: ``osid.logging.LogQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_log_search_results_record", 
               "doc": {
                  "headline": "Gets the log search results record corresponding to the given log search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    log_search_record_type (osid.type.Type): a log search\n                record type\n", 
               "return_doc": "        return: (osid.logging.records.LogSearchResultsRecord) - the log\n                search results record", 
               "error_doc": "        raise:  NullArgument - ``log_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(log_search_record_type)`` is ``false``", 
               "sphinx_param_doc": "        :param log_search_record_type: a log search record type\n        :type log_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the log search results record\n        :rtype: ``osid.logging.records.LogSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``log_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(log_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "log_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.logging.records.LogSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.records.LogSearchResultsRecord", 
         "shortname": "LogSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``LogSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.logging.LogReceiver", 
         "shortname": "LogReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The log receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Log`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_log", 
            "new_ancestor_log", 
            "new_descendant_log", 
            "changed_log", 
            "deleted_log", 
            "deleted_ancestor_log", 
            "deleted_descendant_log"
         ], 
         "methods": [
            {
               "name": "new_log", 
               "doc": {
                  "headline": "The callback for notifications of new logs.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the new ``Log``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the new ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_log", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the registered\n                ``Log``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ancestor\n                log\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the registered ``Log``\n        :type log_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ancestor log\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_log", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the registered\n                ``Log``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                descendant log\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the registered ``Log``\n        :type log_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new descendant log\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_log", 
               "doc": {
                  "headline": "The callback for notification of updated logs.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the updated ``Log``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the updated ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_log", 
               "doc": {
                  "headline": "the callback for notification of deleted logs.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the registered\n                ``Log``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the registered ``Log``\n        :type log_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_log", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the registered\n                ``Log``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ancestor log\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the registered ``Log``\n        :type log_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ancestor log\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_log", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of a log.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    log_id (osid.id.Id): the ``Id`` of the registered\n                ``Log``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the deleted\n                descendant log\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param log_id: the ``Id`` of the registered ``Log``\n        :type log_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the deleted descendant log\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "log_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogList", 
         "shortname": "LogList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LogList`` provides a means for accessing ``Log`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (ll.hasNext()) { Log log = ll.getNextLog(); }\n\n    or\n      while (ll.hasNext()) {\n           Log[] logs = ll.getNextLogs(ll.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_log", 
            "get_next_logs"
         ], 
         "methods": [
            {
               "name": "get_next_log", 
               "doc": {
                  "headline": "Gets the next ``Log`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the next ``Log`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``Log`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Log`` in this list. The ``has_next()`` method should be used to test that a next ``Log`` is available before calling this method.\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_logs", 
               "doc": {
                  "headline": "Gets the next set of ``Log`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Log`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.logging.Log) - an array of ``Log`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Log`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Log`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.logging.Log", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogNode", 
         "shortname": "LogNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``LogHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_log", 
            "get_parent_log_nodes", 
            "get_child_log_nodes"
         ], 
         "methods": [
            {
               "name": "get_log", 
               "doc": {
                  "headline": "Gets the ``Log`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.Log) - the log represented by this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the log represented by this node\n        :rtype: ``osid.logging.Log``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.Log", 
               "errors": {}
            }, 
            {
               "name": "get_parent_log_nodes", 
               "doc": {
                  "headline": "Gets the parents of this log.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogNodeList) - the parents of this log", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of this log\n        :rtype: ``osid.logging.LogNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_log_nodes", 
               "doc": {
                  "headline": "Gets the children of this log.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogNodeList) - the children of this log", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this log\n        :rtype: ``osid.logging.LogNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.logging.LogNodeList", 
         "shortname": "LogNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``LogNodeList`` provides a means for accessing ``LogNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (lnl.hasNext()) { LogNode node =\n    lnl.getNextLogNode(); }\n\n    or\n      while (lnl.hasNext()) {\n           LogNode[] nodes = lnl.getNextLogNodes(lnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_log_node", 
            "get_next_log_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_log_node", 
               "doc": {
                  "headline": "Gets the next ``LogNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.logging.LogNode) - the next ``LogNode`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``LogNode`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``LogNode`` in this list. The ``has_next()`` method should be used to test that a next ``LogNode`` is available before calling this method.\n        :rtype: ``osid.logging.LogNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.logging.LogNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_log_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``LogNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``LogNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.logging.LogNode) - an array of ``LogNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``LogNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``LogNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.logging.LogNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.logging.LogNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.logging"
}
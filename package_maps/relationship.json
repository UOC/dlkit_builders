{
   "name": "relationship", 
   "version": "3.0.0", 
   "title": "Relationship Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Relationship OSID provides the ability to relate and manage data\nbetween ``OsidObjects``.\n\nRelationships\n\nThe Relationship OSID defines a ``Relationship`` that can be used to\nexplicitly identify a relationship between two OSID ``Ids`` and manage\ninformation specific to the relationship.\n\nThe Relationship OSID is a building block on which relationships defined\nin the context of other OSIDs can be built. Examples of relationships\ninclude the enrollment record of a student in a ``Course`` or the\ncommitment or a person to an ``Event``.\n\nThe Relationship OSID depends on the relationship Type to indicate the\nnature of the relationship including its natural ordering between the\nsource and destination ``Ids``. A relationship of type \"friend\" may\nplace the peers in either order and be queryable in either order. A\nrelationship of type \"parent\" is between a father peer and a son peer,\nbut not the other way around. Queries of the son peer based on the\n\"parent\" type is not equiavelent to queries of the father peer based on\nthe \"parent\" type.\n\nSuch directional relationships may be accompanied by two types. An\nadditional relationship type of \"child\" can be used with the son peer to\ndetermine the father peer. The directionality and the inverse among the\ntypes are part of the type definition.\n\nFamily Cataloging\n\n``Relationships`` may be cataloged using the ``Family`` interface.\n\nSub Packages\n\nThe Relationship OSID includes a Relationship Rules OSID for controlling\nthe enable status of ``Relationships``.", 
   "interfaces": [
      {
         "fullname": "osid.relationship.RelationshipProfile", 
         "shortname": "RelationshipProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The relationship profile describes the interoperability among relationship services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_relationship_lookup", 
            "supports_relationship_query", 
            "supports_relationship_search", 
            "supports_relationship_admin", 
            "supports_relationship_notification", 
            "supports_relationship_family", 
            "supports_relationship_family_assignment", 
            "supports_relationship_smart_family", 
            "supports_family_lookup", 
            "supports_family_query", 
            "supports_family_search", 
            "supports_family_admin", 
            "supports_family_notification", 
            "supports_family_hierarchy", 
            "supports_family_hierarchy_design", 
            "supports_relationship_batch", 
            "supports_relationship_rules", 
            "get_relationship_record_types", 
            "supports_relationship_record_type", 
            "get_relationship_search_record_types", 
            "supports_relationship_search_record_type", 
            "get_family_record_types", 
            "supports_family_record_type", 
            "get_family_search_record_types", 
            "supports_family_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any family federation is exposed.", 
                  "body": "        Federation is exposed when a specific family may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of families appears as a\n        single family."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_lookup", 
               "doc": {
                  "headline": "Tests if looking up relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship lookup is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_query", 
               "doc": {
                  "headline": "Tests if querying relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_search", 
               "doc": {
                  "headline": "Tests if searching relationships is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship search is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_admin", 
               "doc": {
                  "headline": "Tests if relationship administrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_notification", 
               "doc": {
                  "headline": "Tests if a relationship notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_family", 
               "doc": {
                  "headline": "Tests if a relationship family cataloging service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship families are\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship families are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_family_assignment", 
               "doc": {
                  "headline": "Tests if a relationship cataloging service is supported.", 
                  "body": "        A relationship cataloging service maps relationships to\n        families."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship families are\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship families are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_smart_family", 
               "doc": {
                  "headline": "Tests if a relationship smart family cataloging service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship smart families are\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship smart families are supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_lookup", 
               "doc": {
                  "headline": "Tests if looking up families is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family lookup is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family lookup is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_query", 
               "doc": {
                  "headline": "Tests if querying families is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family query is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family query is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_search", 
               "doc": {
                  "headline": "Tests if searching families is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family search is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family search is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_admin", 
               "doc": {
                  "headline": "Tests if familyadministrative service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family administration is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family administration is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_notification", 
               "doc": {
                  "headline": "Tests if a family notification service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family notification is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family notification is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of a family hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_family_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of a family hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if family hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if family hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_batch", 
               "doc": {
                  "headline": "Tests for the availability of a relationship batch service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a relationship batch service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a relationship batch service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_rules", 
               "doc": {
                  "headline": "Tests if a relationship rules service is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if relationship rules service is\n                supported, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if relationship rules service is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Relationship`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Relationship`` record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Relationship`` record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Relationship`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a ``Type``\n                indicating a ``Relationship`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param relationship_record_type: a ``Type`` indicating a ``Relationship`` record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Relationship`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Relationship`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Relationship`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Relationship`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_search_record_type (osid.type.Type): a\n                ``Type`` indicating a ``Relationship`` search record\n                type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given search record type is\n                supported, ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``relationship_search_record_type`` is\n                ``null``", 
               "sphinx_param_doc": "        :param relationship_search_record_type: a ``Type`` indicating a ``Relationship`` search record type\n        :type relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given search record type is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Family`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Family`` types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Family`` types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_family_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Family`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): a ``Type``\n                indicating a ``Family`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param family_record_type: a ``Type`` indicating a ``Family`` record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_search_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Family`` search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                ``Family`` search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported ``Family`` search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_family_search_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Family`` search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_search_record_type (osid.type.Type): a ``Type``\n                indicating a ``Family`` search record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``family_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param family_search_record_type: a ``Type`` indicating a ``Family`` search record type\n        :type family_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipManager", 
         "shortname": "RelationshipManager", 
         "category": "managers", 
         "doc": {
            "headline": "The relationship manager provides access to relationship sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``RelationshipLookupSession:`` a session to retrieve and examine\n        relationships\n      * ``RelationshipQuerySession:`` a session to query relationships\n      * ``RelationshipSearchSession:`` a session to search for\n        relationships\n      * ``RelationshipAdminSession:`` a session to manage relationships\n      * ``RelationshipNotificationSession:`` a session to receive\n        notifications pertaining to relationship changes\n      * ``RelationshipFamilySession:`` a session to look up relationship\n        to family mappings\n      * ``RelationshipFamilyAssignmentSession:`` a session to manage\n        relationship to family catalog mappings\n      * ``RelationshipSmartFamilySession:`` a session to manage dynamic\n        relationship families\n    \n      * ``FamilyLookupSession:`` a session to retrieve families\n      * ``FamilyQuerySession:`` a session to query families\n      * ``FamilySearchSession:`` a session to search for families\n      * ``FamilyAdminSession:`` a session to create and delete families\n      * ``FamilyNotificationSession:`` a session to receive\n        notifications pertaining to family changes\n      * ``FamilyHierarchySession:`` a session to traverse a hierarchy of\n        families\n      * ``FamilyHierarchyDesignSession:`` a session to manage a family\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.relationship.RelationshipProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "RelationshipProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "relationship"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "relationship", 
               "name": "RelationshipProfile"
            }
         ], 
         "method_names": [
            "get_relationship_lookup_session", 
            "get_relationship_lookup_session_for_family", 
            "get_relationship_query_session", 
            "get_relationship_query_session_for_family", 
            "get_relationship_search_session", 
            "get_relationship_search_session_for_family", 
            "get_relationship_admin_session", 
            "get_relationship_admin_session_for_family", 
            "get_relationship_notification_session", 
            "get_relationship_notification_session_for_family", 
            "get_relationship_family_session", 
            "get_relationship_family_assignment_session", 
            "get_relationship_smart_family_session", 
            "get_family_lookup_session", 
            "get_family_query_session", 
            "get_family_search_session", 
            "get_family_admin_session", 
            "get_family_notification_session", 
            "get_family_hierarchy_session", 
            "get_family_hierarchy_design_session", 
            "get_relationship_batch_manager", 
            "get_relationship_rules_manager"
         ], 
         "methods": [
            {
               "name": "get_relationship_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipLookupSession) - a\n                ``RelationshipLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipLookupSession``\n        :rtype: ``osid.relationship.RelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_lookup_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship lookup service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n", 
               "return_doc": "        return: (osid.relationship.RelationshipLookupSession) - a\n                ``RelationshipLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipLookupSession``\n        :rtype: ``osid.relationship.RelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQuerySession) - a\n                ``RelationshipQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipQuerySession``\n        :rtype: ``osid.relationship.RelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship query service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n", 
               "return_doc": "        return: (osid.relationship.RelationshipQuerySession) - a\n                ``RelationshipQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipQuerySession``\n        :rtype: ``osid.relationship.RelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchSession) - a\n                ``RelationshipSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipSearchSession``\n        :rtype: ``osid.relationship.RelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship search service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchSession) - a\n                ``RelationshipSearchSession``", 
               "error_doc": "        raise:  NotFound - no family found by the given ``Id``\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipSearchSession``\n        :rtype: ``osid.relationship.RelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no family found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship administration service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipAdminSession) - a\n                ``RelationshipAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipAdminSession``\n        :rtype: ``osid.relationship.RelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_admin_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship administration service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipAdminSession) - a\n                ``RelationshipAdminSession``", 
               "error_doc": "        raise:  NotFound - no family found by the given ``Id``\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipAdminSession``\n        :rtype: ``osid.relationship.RelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no family found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_receiver\n                (osid.relationship.RelationshipReceiver): the receiver\n", 
               "return_doc": "        return: (osid.relationship.RelationshipNotificationSession) - a\n                ``RelationshipNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``relationship_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param relationship_receiver: the receiver\n        :type relationship_receiver: ``osid.relationship.RelationshipReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipNotificationSession``\n        :rtype: ``osid.relationship.RelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipReceiver", 
                     "var_name": "relationship_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipReceiver"
               ], 
               "return_type": "osid.relationship.RelationshipNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_notification_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship notification service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_receiver\n                (osid.relationship.RelationshipReceiver): the receiver\n        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipNotificationSession) - a\n                ``RelationshipNotificationSession``", 
               "error_doc": "        raise:  NotFound - no family found by the given ``Id``\n        raise:  NullArgument - ``relationship_receiver`` or\n                ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param relationship_receiver: the receiver\n        :type relationship_receiver: ``osid.relationship.RelationshipReceiver``\n        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipNotificationSession``\n        :rtype: ``osid.relationship.RelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no family found by the given ``Id``\n        :raise: ``NullArgument`` -- ``relationship_receiver`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipReceiver", 
                     "var_name": "relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_family_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup relationship/family mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipFamilySession) - a\n                ``RelationshipFamilySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_family()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipFamilySession``\n        :rtype: ``osid.relationship.RelationshipFamilySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_family()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_family()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipFamilySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_family_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning relationships to families.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipFamilyAssignmentSession)\n                - a ``RelationshipFamilyAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_relationship_family_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipFamilyAssignmentSession``\n        :rtype: ``osid.relationship.RelationshipFamilyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_family_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_family_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipFamilyAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_smart_family_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic families of retlationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSmartFamilySession) - a\n                ``RelationshipSmartFamilySession``", 
               "error_doc": "        raise:  NotFound - no family found by the given ``Id``\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_smart_family()``\n                is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipSmartFamilySession``\n        :rtype: ``osid.relationship.RelationshipSmartFamilySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no family found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_smart_family()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_smart_family()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipSmartFamilySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyLookupSession) - a\n                ``FamilyLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FamilyLookupSession``\n        :rtype: ``osid.relationship.FamilyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQuerySession) - a\n                ``FamilyQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FamilyQuerySession``\n        :rtype: ``osid.relationship.FamilyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilySearchSession) - a\n                ``FamilySearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FamilySearchSession``\n        :rtype: ``osid.relationship.FamilySearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilySearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyAdminSession) - a\n                ``FamilyAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FamilyAdminSession``\n        :rtype: ``osid.relationship.FamilyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_receiver (osid.relationship.FamilyReceiver): the\n                receiver\n", 
               "return_doc": "        return: (osid.relationship.FamilyNotificationSession) - a\n                ``FamilyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``family_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_receiver: the receiver\n        :type family_receiver: ``osid.relationship.FamilyReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyNotificationSession``\n        :rtype: ``osid.relationship.FamilyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyReceiver", 
                     "var_name": "family_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyReceiver"
               ], 
               "return_type": "osid.relationship.FamilyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyHierarchySession) - a\n                ``FamilyHierarchySession`` for families", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``FamilyHierarchySession`` for families\n        :rtype: ``osid.relationship.FamilyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for families", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for families\n        :rtype: ``osid.relationship.FamilyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_batch_manager", 
               "doc": {
                  "headline": "Gets the relationship batch manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.batch.RelationshipBatchManager) - a\n                ``RelationshipBatchManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_batch()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipBatchManager``\n        :rtype: ``osid.relationship.batch.RelationshipBatchManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_batch()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_batch()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.batch.RelationshipBatchManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_rules_manager", 
               "doc": {
                  "headline": "Gets the relationship rules manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.rules.RelationshipRulesManager) - a\n                ``RelationshipRulesManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_rules()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipRulesManager``\n        :rtype: ``osid.relationship.rules.RelationshipRulesManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.rules.RelationshipRulesManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipProxyManager", 
         "shortname": "RelationshipProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The relationship manager provides access to relationship sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    Methods in this manager support the passing of a Proxy. The sessions\n    included in this manager are:\n\n      * ``RelationshipLookupSession:`` a session to retrieve and examine\n        relationships\n      * ``RelationshipQuerySession:`` a session to query relationships\n      * ``RelationshipSearchSession:`` a session to search for\n        relationships\n      * ``RelationshipAdminSession:`` a session to manage relationships\n      * ``RelationshipNotificationSession:`` a session to receive\n        notifications pertaining to relationship changes\n      * ``RelationshipFamilySession:`` a session to look up relationship\n        to family mappings\n      * ``RelationshipFamilyAssignmentSession:`` a session to manage\n        relationship to family catalog mappings\n      * ``RelationshipSmartFamilySession:`` a session to manage dynamic\n        relationship families\n    \n      * ``FamilyLookupSession:`` a session to retrieve families\n      * ``FamilyQuerySession:`` a session to query families\n      * ``FamilySearchSession:`` a session to search for families\n      * ``FamilyAdminSession:`` a session to create and delete families\n      * ``FamilyNotificationSession:`` a session to receive\n        notifications pertaining to family changes\n      * ``FamilyHierarchySession:`` a session to traverse a hierarchy of\n        families\n      * ``FamilyHierarchyDesignSession:`` a session to manage a family\n        hierarchy\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.relationship.RelationshipProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "RelationshipProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "relationship"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "relationship", 
               "name": "RelationshipProfile"
            }
         ], 
         "method_names": [
            "get_relationship_lookup_session", 
            "get_relationship_lookup_session_for_family", 
            "get_relationship_query_session", 
            "get_relationship_query_session_for_family", 
            "get_relationship_search_session", 
            "get_relationship_search_session_for_family", 
            "get_relationship_admin_session", 
            "get_relationship_admin_session_for_family", 
            "get_relationship_notification_session", 
            "get_relationship_notification_session_for_family", 
            "get_relationship_family_session", 
            "get_relationship_family_assignment_session", 
            "get_relationship_smart_family_session", 
            "get_family_lookup_session", 
            "get_family_query_session", 
            "get_family_search_session", 
            "get_family_admin_session", 
            "get_family_notification_session", 
            "get_family_hierarchy_session", 
            "get_family_hierarchy_design_session", 
            "get_relationship_batch_proxy_manager", 
            "get_relationship_rules_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_relationship_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipLookupSession) - a\n                ``RelationshipLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipLookupSession``\n        :rtype: ``osid.relationship.RelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_lookup_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship lookup service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipLookupSession) - a\n                ``RelationshipLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipLookupSession``\n        :rtype: ``osid.relationship.RelationshipLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipQuerySession) - a\n                ``RelationshipQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_query()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipQuerySession``\n        :rtype: ``osid.relationship.RelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship query service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipQuerySession) - a\n                ``RelationshipQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipQuerySession``\n        :rtype: ``osid.relationship.RelationshipQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchSession) - a\n                ``RelationshipSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipSearchSession``\n        :rtype: ``osid.relationship.RelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship search service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchSession) - a\n                ``RelationshipSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipSearchSession``\n        :rtype: ``osid.relationship.RelationshipSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipAdminSession) - a\n                ``RelationshipAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_admin()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipAdminSession``\n        :rtype: ``osid.relationship.RelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_admin_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship administration service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the family\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipAdminSession) - a\n                ``RelationshipAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``family_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipAdminSession``\n        :rtype: ``osid.relationship.RelationshipAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_receiver\n                (osid.relationship.RelationshipReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipNotificationSession) - a\n                ``RelationshipNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``relationship_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_notification()``\n                is ``false``", 
               "sphinx_param_doc": "        :param relationship_receiver: the receiver\n        :type relationship_receiver: ``osid.relationship.RelationshipReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipNotificationSession``\n        :rtype: ``osid.relationship.RelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipReceiver", 
                     "var_name": "relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_notification_session_for_family", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the relationship notification service for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_receiver\n                (osid.relationship.RelationshipReceiver): the receiver\n        arg:    family_id (osid.id.Id): the ``Id`` of the family\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipNotificationSession) - a\n                ``RelationshipNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Family`` found by the given ``Id``\n        raise:  NullArgument - ``relationship_receiver, family_id`` or\n                ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_notification()``\n                or ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param relationship_receiver: the receiver\n        :type relationship_receiver: ``osid.relationship.RelationshipReceiver``\n        :param family_id: the ``Id`` of the family\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipNotificationSession``\n        :rtype: ``osid.relationship.RelationshipNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Family`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``relationship_receiver, family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipReceiver", 
                     "var_name": "relationship_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_family_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup relationship/family mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipFamilySession) - a\n                ``RelationshipFamilySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_family()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipFamilySession``\n        :rtype: ``osid.relationship.RelationshipFamilySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_family()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_family()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipFamilySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_family_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning relationships to families.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipFamilyAssignmentSession)\n                - a ``RelationshipFamilyAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented -\n                ``supports_relationship_family_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipFamilyAssignmentSession``\n        :rtype: ``osid.relationship.RelationshipFamilyAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_family_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_family_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipFamilyAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_smart_family_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to manage dynamic families of retlationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSmartFamilySession) - a\n                ``RelationshipSmartFamilySession``", 
               "error_doc": "        raise:  NotFound - no family found by the given ``Id``\n        raise:  NullArgument - ``family_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_smart_family()``\n                is ``false``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RelationshipSmartFamilySession``\n        :rtype: ``osid.relationship.RelationshipSmartFamilySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no family found by the given ``Id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_smart_family()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_smart_family()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.RelationshipSmartFamilySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyLookupSession) - a\n                ``FamilyLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyLookupSession``\n        :rtype: ``osid.relationship.FamilyLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyQuerySession) - a\n                ``FamilyQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyQuerySession``\n        :rtype: ``osid.relationship.FamilyQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_famil_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilySearchSession) - a\n                ``FamilySearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilySearchSession``\n        :rtype: ``osid.relationship.FamilySearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilySearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyAdminSession) - a\n                ``FamilyAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyAdminSession``\n        :rtype: ``osid.relationship.FamilyAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_receiver (osid.relationship.FamilyReceiver): the\n                receiver\n        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyNotificationSession) - a\n                ``FamilyNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``family_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_receiver: the receiver\n        :type family_receiver: ``osid.relationship.FamilyReceiver``\n        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyNotificationSession``\n        :rtype: ``osid.relationship.FamilyNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyReceiver", 
                     "var_name": "family_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyHierarchySession) - a\n                ``FamilyHierarchySession`` for families", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``FamilyHierarchySession`` for families\n        :rtype: ``osid.relationship.FamilyHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the family hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): a proxy\n", 
               "return_doc": "        return: (osid.relationship.FamilyHierarchyDesignSession) - a\n                ``HierarchyDesignSession`` for families", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_family_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: a proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``HierarchyDesignSession`` for families\n        :rtype: ``osid.relationship.FamilyHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_family_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.relationship.FamilyHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_batch_proxy_manager", 
               "doc": {
                  "headline": "Gets the relationship batch proxy manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.batch.RelationshipBatchProxyManager)\n                - a ``RelationshipBatchProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_rules()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipBatchProxyManager``\n        :rtype: ``osid.relationship.batch.RelationshipBatchProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.batch.RelationshipBatchProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_rules_proxy_manager", 
               "doc": {
                  "headline": "Gets the relationship rules proxy manager.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.rules.RelationshipRulesProxyManager)\n                - a ``RelationshipRulesProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_relationship_rules()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RelationshipRulesProxyManager``\n        :rtype: ``osid.relationship.rules.RelationshipRulesProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_relationship_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.rules.RelationshipRulesProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipLookupSession", 
         "shortname": "RelationshipLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for retrieving relationships.", 
            "body": "    A ``Relationship`` is mapped to two OSID ``Ids``.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n      * federated family view: includes relationships in families which\n        are children of this family in the family hierarchy\n      * isolated family view: restricts lookups to this family only\n      * effective relationship view: Relationship methods return only\n        relationships currently in effect.\n      * any effective relationship view: Relationship methods return\n        both effective and ineffective relationships.\n\n    \n    Relationships may have an additional records indicated by their\n    respective record types. The record may not be accessed through a\n    cast of the ``Relationship``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_id", 
            "get_family", 
            "can_lookup_relationships", 
            "use_comparative_relationship_view", 
            "use_plenary_relationship_view", 
            "use_federated_family_view", 
            "use_isolated_family_view", 
            "use_effective_relationship_view", 
            "use_any_effective_relationship_view", 
            "get_relationship", 
            "get_relationships_by_ids", 
            "get_relationships_by_genus_type", 
            "get_relationships_by_parent_genus_type", 
            "get_relationships_by_record_type", 
            "get_relationships_on_date", 
            "get_relationships_for_source", 
            "get_relationships_for_source_on_date", 
            "get_relationships_by_genus_type_for_source", 
            "get_relationships_by_genus_type_for_source_on_date", 
            "get_relationships_for_destination", 
            "get_relationships_for_destination_on_date", 
            "get_relationships_by_genus_type_for_destination", 
            "get_relationships_by_genus_type_for_destination_on_date", 
            "get_relationships_for_peers", 
            "get_relationships_for_peers_on_date", 
            "get_relationships_by_genus_type_for_peers", 
            "get_relationships_by_genus_type_for_peers_on_date", 
            "get_relationships"
         ], 
         "methods": [
            {
               "name": "get_family_id", 
               "doc": {
                  "headline": "Gets the ``Family``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Family Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Family Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_relationships", 
               "doc": {
                  "headline": "Tests if this user can perform ``Relationship`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_relationship_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_relationship_view", 
               "doc": {
                  "headline": "A complete view of the ``Relationship`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_family_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relationships in families which\n        are children of this family in the family hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_family_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this family only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_effective_relationship_view", 
               "doc": {
                  "headline": "Only relationships whose effective dates are current are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_effective_relationship_view", 
               "doc": {
                  "headline": "All relationships of any effective dates are returned by all methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relationship", 
               "doc": {
                  "headline": "Gets the ``Relationship`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship`` to retrieve\n", 
               "return_doc": "        return: (osid.relationship.Relationship) - the returned\n                ``Relationship``", 
               "error_doc": "        raise:  NotFound - no ``Relationship`` found with the given\n                ``Id``\n        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship`` to retrieve\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Relationship``\n        :rtype: ``osid.relationship.Relationship``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Relationship`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.Relationship", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_ids", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_ids (osid.id.IdList): the list of ``Ids``\n                to retrieve\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the returned\n                ``Relationship list``", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``relationship_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_ids: the list of ``Ids`` to retrieve\n        :type relationship_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Relationship list``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``relationship_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "relationship_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given relationship genus ``Type`` which does not include relationships of types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the returned\n                ``Relationship list``", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Relationship list``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given relationship genus ``Type`` and include any additional relationships with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the returned\n                ``Relationship list``", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Relationship list``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_record_type", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` containing the given relationship record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the returned\n                ``RelationshipList``", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``RelationshipList``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_source", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``source_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_source_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``source_id, from`` ,or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``source_id, from`` ,or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_source", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` and relationship genus ``Type.", 
                  "body": "        Relationships`` of any genus derived from the given genus are\n        returned.\n\n        In plenary mode, the returned list contains all of the\n        relationships corresponding to the given peer, including\n        duplicates, or an error results if a relationship is\n        inaccessible. Otherwise, inaccessible ``Relationships`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set.\n        \n        In effective mode, relationships are returned that are currently\n        effective. In any effective mode, effective relationships and\n        those currently expired are returned."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``source_id`` or\n                ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` or ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_source_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` and relationship genus ``Type`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``source_id, relationship_genus_type,\n                from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``source_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_destination", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): a peer ``Id``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``destination_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: a peer ``Id``\n        :type destination_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_destination_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` with a starting effective date in the given range inclusive.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): a peer ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``destination_id, from`` ,or ``to`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: a peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``destination_id, from`` ,or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_destination", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` and relationship genus ``Type.", 
                  "body": "        Relationships`` of any genus derived from the given genus are\n        returned.\n\n        In plenary mode, the returned list contains all of the\n        relationships corresponding to the given peer, including\n        duplicates, or an error results if a relationship is\n        inaccessible. Otherwise, inaccessible ``Relationships`` may be\n        omitted from the list and may present the elements in any order\n        including returning a unique set.\n        \n        In effective mode, relationships are returned that are currently\n        effective. In any effective mode, effective relationships and\n        those currently expired are returned."
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): a peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``destination_id`` or\n                ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: a peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_id`` or ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_destination_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Id`` and relationship genus ``Type`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): a peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``destination_id,\n                relationship_genus_type, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: a peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``destination_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_peers", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Ids``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    destination_id (osid.id.Id): a related peer ``Id``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``source_id`` or ``destination_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param destination_id: a related peer ``Id``\n        :type destination_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` or ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_for_peers_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding to the given peer ``Ids`` and effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    destination_id (osid.id.Id): a related peer ``Id``\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from`` is greater than ``to``\n        raise:  NullArgument - ``source_id, destination_id, from`` or\n                ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param destination_id: a related peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from`` is greater than ``to``\n        :raise: ``NullArgument`` -- ``source_id, destination_id, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_peers", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` corresponding between the given peer ``Ids`` and relationship genus ``Type.", 
                  "body": "        Relationships`` of any genus derived from the given genus are\n        returned.\n\n        In plenary mode, the returned list contains all of the\n        relationships corresponding to the given peer or an error\n        results if a relationship is inaccessible. Otherwise,\n        inaccessible ``Relationships`` may be omitted from the list.\n        \n        In effective mode, relationships are returned that are currently\n        effective. In any effective mode, effective relationships and\n        those currently expired are returned."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    destination_id (osid.id.Id): a related peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  NullArgument - ``source_id, destination_id,`` or\n                ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param destination_id: a related peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id, destination_id,`` or ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_genus_type_for_peers_on_date", 
               "doc": {
                  "headline": "Gets a ``RelationshipList`` effective during the entire given date range inclusive but not confined to the date range.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): a peer ``Id``\n        arg:    destination_id (osid.id.Id): a related peer ``Id``\n        arg:    relationship_genus_type (osid.type.Type): a relationship\n                genus type\n        arg:    from (osid.calendaring.DateTime): starting date\n        arg:    to (osid.calendaring.DateTime): ending date\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationships", 
               "error_doc": "        raise:  InvalidArgument - ``from is greater than to``\n        raise:  NullArgument - ``source_id, destination_id,\n                relationship_genus_type, from`` or ``to`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: a peer ``Id``\n        :type source_id: ``osid.id.Id``\n        :param destination_id: a related peer ``Id``\n        :type destination_id: ``osid.id.Id``\n        :param relationship_genus_type: a relationship genus type\n        :type relationship_genus_type: ``osid.type.Type``\n        :param from: starting date\n        :type from: ``osid.calendaring.DateTime``\n        :param to: ending date\n        :type to: ``osid.calendaring.DateTime``\n", 
               "sphinx_return_doc": "        :return: the relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``InvalidArgument`` -- ``from is greater than to``\n        :raise: ``NullArgument`` -- ``source_id, destination_id, relationship_genus_type, from`` or ``to`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "from_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.calendaring.DateTime", 
                     "var_name": "to", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type", 
                  "osid.calendaring.DateTime", 
                  "osid.calendaring.DateTime"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships", 
               "doc": {
                  "headline": "Gets all ``Relationships``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - a list of\n                ``Relationships``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Relationships``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipQuerySession", 
         "shortname": "RelationshipQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Relationship`` objects.", 
            "body": "    The search query is constructed using the ``Relationship``.\n\n    Relationships may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``RelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_id", 
            "get_family", 
            "use_federated_family_view", 
            "use_isolated_family_view", 
            "can_search_relationships", 
            "get_relationship_query", 
            "get_relationships_by_query"
         ], 
         "methods": [
            {
               "name": "get_family_id", 
               "doc": {
                  "headline": "Gets the ``Family``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Family Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Family Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "use_federated_family_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relationships in families which\n        are children of this family in the family hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_family_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this family only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_search_relationships", 
               "doc": {
                  "headline": "Tests if this user can perform ``Relationship`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_query", 
               "doc": {
                  "headline": "Gets a relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQuery) - the relationship\n                query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.relationship.RelationshipQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQuery", 
               "errors": {}
            }, 
            {
               "name": "get_relationships_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Relationships`` matching the given relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_query\n                (osid.relationship.RelationshipQuery): the relationship\n                query\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the returned\n                ``RelationshipList``", 
               "error_doc": "        raise:  NullArgument - ``relationship_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relationship_query`` is not of this\n                service", 
               "sphinx_param_doc": "        :param relationship_query: the relationship query\n        :type relationship_query: ``osid.relationship.RelationshipQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``RelationshipList``\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relationship_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipQuery", 
                     "var_name": "relationship_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipQuery"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipSearchSession", 
         "shortname": "RelationshipSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching among ``Relationship`` objects.", 
            "body": "    The search query is constructed using the ``Relationship``.\n\n    ``get_relationships_by_query()`` is the basic search method and\n    returns a list of ``Relationships``. A more advanced search may be\n    performed with ``getRelationshipsBySearch()``. It accepts a\n    ``RelationshipSearch`` in addition to the query for the purpose of\n    specifying additional options affecting the entire search, such as\n    ordering. ``get_relationships_by_search()`` returns a\n    ``RelationshipSearchResults`` that can be used to access the\n    resulting ``RelationshipList`` or be used to perform a search within\n    the result set through ``RelationshipSearch``.\n    \n    Relationships may have a query record indicated by their respective\n    record types. The query record is accessed via the\n    ``RelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.relationship.RelationshipQuerySession"
         ], 
         "inherit_shortnames": [
            "RelationshipQuerySession"
         ], 
         "inherit_pkg_names": [
            "relationship"
         ], 
         "inheritance": [
            {
               "pkg_name": "relationship", 
               "name": "RelationshipQuerySession"
            }
         ], 
         "method_names": [
            "get_relationship_search", 
            "get_relationship_search_order", 
            "get_relationships_by_search", 
            "get_relationship_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_relationship_search", 
               "doc": {
                  "headline": "Gets a relationship search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipSearch) - the\n                relationship search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship search\n        :rtype: ``osid.relationship.RelationshipSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipSearch", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_search_order", 
               "doc": {
                  "headline": "Gets a relationship search order.", 
                  "body": "        The ``RelationshipSearchOrder`` is supplied to a\n        ``RelationshipSearch`` to specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchOrder) - the\n                relationship search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship search order\n        :rtype: ``osid.relationship.RelationshipSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_relationships_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search query using the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_query\n                (osid.relationship.RelationshipQuery): the relationship\n                query\n        arg:    relationship_search\n                (osid.relationship.RelationshipSearch): the relationship\n                search\n", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchResults) - the\n                returned search results", 
               "error_doc": "        raise:  NullArgument - ``relationship_query`` or\n                ``relationship_search`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relationship_query`` or\n                ``relationship_search`` is not of this service", 
               "sphinx_param_doc": "        :param relationship_query: the relationship query\n        :type relationship_query: ``osid.relationship.RelationshipQuery``\n        :param relationship_search: the relationship search\n        :type relationship_search: ``osid.relationship.RelationshipSearch``\n", 
               "sphinx_return_doc": "        :return: the returned search results\n        :rtype: ``osid.relationship.RelationshipSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_query`` or ``relationship_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relationship_query`` or ``relationship_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipQuery", 
                     "var_name": "relationship_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.relationship.RelationshipSearch", 
                     "var_name": "relationship_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipQuery", 
                  "osid.relationship.RelationshipSearch"
               ], 
               "return_type": "osid.relationship.RelationshipSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_from_inspector", 
               "doc": {
                  "headline": "Gets a relationship query from an inspector.", 
                  "body": "        The inspector is available from a ``RelationshipSearchResults``."
               }, 
               "arg_doc": "        arg:    relationship_query_inspector\n                (osid.relationship.RelationshipQueryInspector): a\n                relationship query inspector\n", 
               "return_doc": "        return: (osid.relationship.RelationshipQuery) - the relationship\n                query", 
               "error_doc": "        raise:  NullArgument - ``relationship_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``relationship_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param relationship_query_inspector: a relationship query inspector\n        :type relationship_query_inspector: ``osid.relationship.RelationshipQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.relationship.RelationshipQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``relationship_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipQueryInspector", 
                     "var_name": "relationship_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipQueryInspector"
               ], 
               "return_type": "osid.relationship.RelationshipQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipAdminSession", 
         "shortname": "RelationshipAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Relationships``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Relationship,`` a ``RelationshipForm`` is requested using\n    ``get_relationship_form_for_create()`` specifying the desired peers\n    and record ``Types`` or none if no record ``Types`` are needed. The\n    returned ``RelationshipForm`` will indicate that it is to be used\n    with a create operation and can be used to examine metdata or\n    validate data prior to creation. Once the ``RelationshipForm`` is\n    submiited to a create operation, it cannot be reused with another\n    create operation unless the first operation was unsuccessful. Each\n    ``RelationshipForm`` corresponds to an attempted transaction.\n    \n    For updates, ``RelationshipForms`` are requested to the\n    ``Relationship``  ``Id`` that is to be updated using\n    ``getRelationshipFormForUpdate()``. Similarly, the\n    ``RelationshipForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``RelationshipForm`` can only be used once for a successful update\n    and cannot be reused.\n    \n    The delete operations delete ``Relationships``. To unmap a\n    ``Relationship`` from the current ``Family,`` the\n    ``RelationshipFamilyAssignmentSession`` should be used. These delete\n    operations attempt to remove the ``Relationship`` itself thus\n    removing it from all known ``Family`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_id", 
            "get_family", 
            "can_create_relationships", 
            "can_create_relationship_with_record_types", 
            "get_relationship_form_for_create", 
            "create_relationship", 
            "can_update_relationships", 
            "get_relationship_form_for_update", 
            "update_relationship", 
            "can_delete_relationships", 
            "delete_relationship", 
            "can_manage_relationship_aliases", 
            "alias_relationship"
         ], 
         "methods": [
            {
               "name": "get_family_id", 
               "doc": {
                  "headline": "Gets the ``Familt``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Family Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Family Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_relationships", 
               "doc": {
                  "headline": "Tests if this user can create ``Relationships`` A return of true does not guarantee successful authorization.", 
                  "body": "        A return of false indicates that it is known creating a\n        ``Relationship`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        create operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relationship`` creation is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relationship`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_relationship_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Relationship`` using the desired record types.", 
                  "body": "        While ``RelationshipManager.getRelationshipRecordTypes()`` can\n        be used to examine which records are supported, this method\n        tests which record(s) are required for creating a specific\n        ``Relationship``. Providing an empty array tests if a\n        ``Relationship`` can be created with no records."
               }, 
               "arg_doc": "        arg:    relationship_record_types (osid.type.Type[]): array of\n                relationship record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Relationship`` creation using\n                the specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param relationship_record_types: array of relationship record types\n        :type relationship_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Relationship`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "relationship_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_form_for_create", 
               "doc": {
                  "headline": "Gets the relationship form for creating new relationships.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): ``Id`` of a peer\n        arg:    destination_id (osid.id.Id): ``Id`` of the related peer\n        arg:    relationship_record_types (osid.type.Type[]): array of\n                relationship record types\n", 
               "return_doc": "        return: (osid.relationship.RelationshipForm) - the relationship\n                form", 
               "error_doc": "        raise:  NotFound - ``source_id`` or ``destination_id`` is not\n                found\n        raise:  NullArgument - ``source_id`` or ``destination_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested recod\n                types", 
               "sphinx_param_doc": "        :param source_id: ``Id`` of a peer\n        :type source_id: ``osid.id.Id``\n        :param destination_id: ``Id`` of the related peer\n        :type destination_id: ``osid.id.Id``\n        :param relationship_record_types: array of relationship record types\n        :type relationship_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the relationship form\n        :rtype: ``osid.relationship.RelationshipForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``source_id`` or ``destination_id`` is not found\n        :raise: ``NullArgument`` -- ``source_id`` or ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested recod types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "relationship_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id", 
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.relationship.RelationshipForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_relationship", 
               "doc": {
                  "headline": "Creates a new ``Relationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_form (osid.relationship.RelationshipForm):\n                the form for this ``Relationship``\n", 
               "return_doc": "        return: (osid.relationship.Relationship) - the new\n                ``Relationship``", 
               "error_doc": "        raise:  IllegalState - ``relationship_form`` already used in a\n                create transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``relationship_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relationship_form`` did not originate\n                from ``get_relationship_form_for_create()``", 
               "sphinx_param_doc": "        :param relationship_form: the form for this ``Relationship``\n        :type relationship_form: ``osid.relationship.RelationshipForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Relationship``\n        :rtype: ``osid.relationship.Relationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``relationship_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``relationship_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relationship_form`` did not originate from ``get_relationship_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipForm", 
                     "var_name": "relationship_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipForm"
               ], 
               "return_type": "osid.relationship.Relationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_relationships", 
               "doc": {
                  "headline": "Tests if this user can update ``Relationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a\n        ``Relationship`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        update operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relationship`` modification\n                is not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relationship`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_form_for_update", 
               "doc": {
                  "headline": "Gets the relationship form for updating an existing relationship.", 
                  "body": "        A new relationship form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipForm) - the relationship\n                form", 
               "error_doc": "        raise:  NotFound - ``relationship_id`` is not found\n        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the relationship form\n        :rtype: ``osid.relationship.RelationshipForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relationship_id`` is not found\n        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_relationship", 
               "doc": {
                  "headline": "Updates an existing relationship.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_form (osid.relationship.RelationshipForm):\n                the form containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``relationship_form`` already used in an\n                update transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``relationship_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``relationship_form`` did not originate\n                from ``get_relationship_form_for_update()``", 
               "sphinx_param_doc": "        :param relationship_form: the form containing the elements to be updated\n        :type relationship_form: ``osid.relationship.RelationshipForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``relationship_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``relationship_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``relationship_form`` did not originate from ``get_relationship_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipForm", 
                     "var_name": "relationship_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_relationships", 
               "doc": {
                  "headline": "Tests if this user can delete ``Relationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a\n        ``Relationship`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        delete operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relationship`` deletion is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relationship`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_relationship", 
               "doc": {
                  "headline": "Deletes a ``Relationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship`` to remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``relationship_id`` not found\n        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship`` to remove\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relationship_id`` not found\n        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_relationship_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Relationships``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Relationship`` aliasing is\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Relationship`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_relationship", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Relationship`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Relationship`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another relationship, it is\n        reassigned to the given relationship ``Id``."
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of a\n                ``Relationship``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``relationship`` not found\n        raise:  NullArgument - ``relationship_id`` or ``alias_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of a ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``relationship`` not found\n        :raise: ``NullArgument`` -- ``relationship_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipNotificationSession", 
         "shortname": "RelationshipNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Relationship`` objects in this ``Family``.", 
            "body": "    This also includes existing relationships that may appear or\n    disappear due to changes in the ``Family`` hierarchy, This session\n    is intended for consumers needing to synchronize their state with\n    this service without the use of polling. Notifications are cancelled\n    when this session is closed.\n\n    The two views defined in this session correspond to the views in the\n    ``RelationshipLookupSession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_id", 
            "get_family", 
            "can_register_for_relationship_notifications", 
            "use_federated_family_view", 
            "use_isolated_family_view", 
            "register_for_new_relationships", 
            "register_for_new_relationships_for_source", 
            "register_for_new_relationships_for_destination", 
            "register_for_new_relationships_by_genus_type", 
            "register_for_changed_relationships", 
            "register_for_changed_relationships_for_source", 
            "register_for_changed_relationships_for_destination", 
            "register_for_changed_relationships_by_genus_type", 
            "register_for_changed_relationship", 
            "register_for_deleted_relationships", 
            "register_for_deleted_relationships_for_source", 
            "register_for_deleted_relationships_for_destination", 
            "register_for_deleted_relationships_by_genus_type", 
            "register_for_deleted_relationship"
         ], 
         "methods": [
            {
               "name": "get_family_id", 
               "doc": {
                  "headline": "Gets the ``Family``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Family Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Family Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_relationship_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Relationship`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_family_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include relationships in families which\n        are children of this family in the family hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_family_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this family only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_relationships", 
               "doc": {
                  "headline": "Register for notifications of new relationships.", 
                  "body": "        ``RelationshipReceiver.newRelationship()`` is invoked when a new\n        ``Relationship`` appears in this family."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relationships_for_source", 
               "doc": {
                  "headline": "Register for notifications of new relationships from the given source.", 
                  "body": "        ``RelationshipReceiver.newRelationship()`` is invoked when a new\n        ``Relationship`` appears for the given peer."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): the ``Id`` of the source to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: the ``Id`` of the source to monitor\n        :type source_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relationships_for_destination", 
               "doc": {
                  "headline": "Register for notifications of new relationships to the given destination.", 
                  "body": "        ``RelationshipReceiver.newRelationship()`` is invoked when a new\n        ``Relationship`` appears for the given peer."
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): the ``Id`` of the\n                destination node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``destination_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: the ``Id`` of the destination node to monitor\n        :type destination_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of new relationships.", 
                  "body": "        ``RelationshipReceiver.newRelationship()`` is invoked when a new\n        ``Relationship`` appears for the given peer."
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): the genus type\n                of the ``Relationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: the genus type of the ``Relationship`` to monitor\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relationships", 
               "doc": {
                  "headline": "Registers for notification of updated relationships.", 
                  "body": "        ``RelationshipReceiver.changedRelationship()`` is invoked when a\n        relationship in this family is changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relationships_for_source", 
               "doc": {
                  "headline": "Register for notifications of updated relationships from the given source node.", 
                  "body": "        ``RelationshipReceiver.changedRelationship()`` is invoked when a\n        ``Relationship`` if changed for the given peer."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): the ``Id`` of the source node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: the ``Id`` of the source node to monitor\n        :type source_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relationships_for_destination", 
               "doc": {
                  "headline": "Register for notifications of updated relationships to the given destination node.", 
                  "body": "        ``RelationshipReceiver.changedRelationship()`` is invoked when a\n        ``Relationship`` if changed for the given peer."
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): the ``Id`` of the\n                destination node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``destination_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: the ``Id`` of the destination node to monitor\n        :type destination_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of updated relationships.", 
                  "body": "        ``RelationshipReceiver.changedRelationship()`` is invoked when a\n        ``Relationship`` if changed for the given peer."
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): the genus type\n                of the ``Relationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: the genus type of the ``Relationship`` to monitor\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_relationship", 
               "doc": {
                  "headline": "Registers for notification of an updated relationship.", 
                  "body": "        ``RelationshipReceiver.changedRelationship()`` is invoked when\n        the specified relationship in this family is changed."
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship`` to monitor\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relationships", 
               "doc": {
                  "headline": "Registers for notification of deleted relationships.", 
                  "body": "        ``RelationshipReceiver.deletedRelationship()`` is invoked when a\n        relationship is deleted or removed from this family."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relationships_for_source", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships from the given source node.", 
                  "body": "        ``RelationshipReceiver.deletedRelationship()`` is invoked when a\n        ``Relationship`` if removed for the given peer."
               }, 
               "arg_doc": "        arg:    source_id (osid.id.Id): the ``Id`` of the source node to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``source_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param source_id: the ``Id`` of the source node to monitor\n        :type source_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``source_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "source_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relationships_for_destination", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships to the given destination node.", 
                  "body": "        ``RelationshipReceiver.deletedRelationship()`` is invoked when a\n        ``Relationship`` if removed for the given peer."
               }, 
               "arg_doc": "        arg:    destination_id (osid.id.Id): the ``Id`` of the\n                destination node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``destination_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param destination_id: the ``Id`` of the destination node to monitor\n        :type destination_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``destination_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "destination_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relationships_by_genus_type", 
               "doc": {
                  "headline": "Register for notifications of deleted relationships.", 
                  "body": "        ``RelationshipReceiver.deletedRelationship()`` is invoked when a\n        ``Relationship`` if removed for the given peer."
               }, 
               "arg_doc": "        arg:    relationship_genus_type (osid.type.Type): the genus type\n                of the ``Relationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_genus_type: the genus type of the ``Relationship`` to monitor\n        :type relationship_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_relationship", 
               "doc": {
                  "headline": "Registers for notification of a deleted relationship.", 
                  "body": "        ``RelationshipReceiver.deletedRelationship()`` is invoked when\n        the specified relationship is deleted or removed from this\n        family."
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship`` to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship`` to monitor\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipFamilySession", 
         "shortname": "RelationshipFamilySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Relationship`` to ``Family`` mappings.", 
            "body": "    A ``Relationship`` may appear in multiple ``Family`` objects. Each\n    catalog may have its own authorizations governing who is allowed to\n    look at it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_relationship_family_mappings", 
            "use_comparative_family_view", 
            "use_plenary_family_view", 
            "get_relationship_ids_by_family", 
            "get_relationships_by_family", 
            "get_relationship_ids_by_families", 
            "get_relationships_by_families", 
            "get_family_ids_by_relationship", 
            "get_families_by_relationship"
         ], 
         "methods": [
            {
               "name": "can_lookup_relationship_family_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of relationship/family mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_family_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_family_view", 
               "doc": {
                  "headline": "A complete view of the ``Relationship`` and ``Family`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_ids_by_family", 
               "doc": {
                  "headline": "Gets the list of ``Relationship Ids`` associated with a ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related relationship ``Ids``", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related relationship ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_family", 
               "doc": {
                  "headline": "Gets the list of ``Relationships`` associated with a ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - list of related\n                relationships", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationship_ids_by_families", 
               "doc": {
                  "headline": "Gets the list of ``Relationship Ids`` corresponding to a list of ``Family`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_ids (osid.id.IdList): list of family ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of relationship ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``family_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_ids: list of family ``Ids``\n        :type family_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relationship ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "family_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_relationships_by_families", 
               "doc": {
                  "headline": "Gets the list of ``Relationships`` corresponding to a list of ``Family`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_ids (osid.id.IdList): list of family ``Ids``\n", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - list of\n                relationships", 
               "error_doc": "        raise:  NullArgument - ``family_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_ids: list of family ``Ids``\n        :type family_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of relationships\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "family_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_family_ids_by_relationship", 
               "doc": {
                  "headline": "Gets the ``Family``  ``Ids`` mapped to a ``Relationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): ``Id`` of a\n                ``Relationship``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of family ``Ids``", 
               "error_doc": "        raise:  NotFound - ``relationship_id`` is not found\n        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: ``Id`` of a ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of family ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relationship_id`` is not found\n        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_relationship", 
               "doc": {
                  "headline": "Gets the ``Family`` objects mapped to a ``Relationship``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): ``Id`` of a\n                ``Relationship``\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - list of family ``Ids``", 
               "error_doc": "        raise:  NotFound - ``relationship_id`` is not found\n        raise:  NullArgument - ``relationship_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: ``Id`` of a ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of family ``Ids``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relationship_id`` is not found\n        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipFamilyAssignmentSession", 
         "shortname": "RelationshipFamilyAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``Relationships`` to ``Family`` objects A ``Relationship`` may appear in multiple ``Family`` objects and removing the last reference to a ``Relationship`` is the equivalent of deleting it.", 
            "body": "    Each ``Family`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Moving or adding a reference of a ``Relationship`` to another\n    ``Family`` is not a copy operation (eg: does not change its ``Id``\n    )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_relationships", 
            "can_assign_relationships_to_family", 
            "get_assignable_family_ids", 
            "get_assignable_family_ids_for_relationship", 
            "assign_relationship_to_family", 
            "unassign_relationship_from_family"
         ], 
         "methods": [
            {
               "name": "can_assign_relationships", 
               "doc": {
                  "headline": "Tests if this user can alter relationship/family mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_relationships_to_family", 
               "doc": {
                  "headline": "Tests if this user can alter relationship/family mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_family_ids", 
               "doc": {
                  "headline": "Gets a list of families including and under the given family node in which any relationship can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable family ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable family ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_family_ids_for_relationship", 
               "doc": {
                  "headline": "Gets a list of families including and under the given family node in which a specific relationship can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable family ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``family_id`` or ``relationship_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n        :param relationship_id: the ``Id`` of the ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable family ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` or ``relationship_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_relationship_to_family", 
               "doc": {
                  "headline": "Adds an existing ``Relationship`` to a ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship``\n        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``relationship_id`` is already assigned\n                to ``family_id``\n        raise:  NotFound - ``relationship_id`` or ``family_id`` not\n                found\n        raise:  NullArgument - ``relationship_id`` or ``family_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``relationship_id`` is already assigned to ``family_id``\n        :raise: ``NotFound`` -- ``relationship_id`` or ``family_id`` not found\n        :raise: ``NullArgument`` -- ``relationship_id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_relationship_from_family", 
               "doc": {
                  "headline": "Removes a ``Relationship`` from a ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the\n                ``Relationship``\n        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``relationship_id`` or ``family_id`` not\n                found or ``relationship_id`` not assigned to\n                ``family_id``\n        raise:  NullArgument - ``relationship_id`` or ``family_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``relationship_id`` or ``family_id`` not found or ``relationship_id`` not assigned to ``family_id``\n        :raise: ``NullArgument`` -- ``relationship_id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipSmartFamilySession", 
         "shortname": "RelationshipSmartFamilySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``RelationshipQuery`` can be retrieved from this session and\n    mapped to this ``Family`` to create a virtual collection of\n    ``Relationships``. The entries may be sequenced using the\n    ``RelationshipSearchOrder`` from this session.\n\n    This ``Family`` has a default query that matches any relationship\n    and a default search order that specifies no sequencing. The queries\n    may be examined using a ``RelationshipQueryInspector``. The query\n    may be modified by converting the inspector back to a\n    ``RelationshipQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_id", 
            "get_family", 
            "can_manage_smart_families", 
            "get_relationship_query", 
            "get_relationship_search_order", 
            "apply_relationship_query", 
            "inspect_relationship_query", 
            "apply_relationship_sequencing", 
            "get_relationship_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_family_id", 
               "doc": {
                  "headline": "Gets the ``Family``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Family Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Family Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_families", 
               "doc": {
                  "headline": "Tests if this user can manage smart families.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer smart\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart family methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart family methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_query", 
               "doc": {
                  "headline": "Gets a relationship query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQuery) - the relationship\n                query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.relationship.RelationshipQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQuery", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_search_order", 
               "doc": {
                  "headline": "Gets a relationship search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipSearchOrder) - the\n                relationship search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship search order\n        :rtype: ``osid.relationship.RelationshipSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_relationship_query", 
               "doc": {
                  "headline": "Applies a relationship query to this family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_query\n                (osid.relationship.RelationshipQuery): the relationship\n                query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``relationship_query`` not of this service", 
               "sphinx_param_doc": "        :param relationship_query: the relationship query\n        :type relationship_query: ``osid.relationship.RelationshipQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``relationship_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipQuery", 
                     "var_name": "relationship_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_relationship_query", 
               "doc": {
                  "headline": "Gets a relationship query inspector for this family.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQueryInspector) - the\n                relationship query inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query inspector\n        :rtype: ``osid.relationship.RelationshipQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_relationship_sequencing", 
               "doc": {
                  "headline": "Applies a relationship search order to this family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_search_order\n                (osid.relationship.RelationshipSearchOrder): the\n                relationship search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``relationship_search_order`` not of this\n                service", 
               "sphinx_param_doc": "        :param relationship_search_order: the relationship search order\n        :type relationship_search_order: ``osid.relationship.RelationshipSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``relationship_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipSearchOrder", 
                     "var_name": "relationship_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_from_inspector", 
               "doc": {
                  "headline": "Gets a relationship query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_query_inspector\n                (osid.relationship.RelationshipQueryInspector): a\n                relationship query inspector\n", 
               "return_doc": "        return: (osid.relationship.RelationshipQuery) - the relationship\n                query", 
               "error_doc": "        raise:  NullArgument - ``relatinship_query_inspector`` is\n                ``null``\n        raise:  Unsupported - ``relationship_query_inspector`` is not of\n                this service", 
               "sphinx_param_doc": "        :param relationship_query_inspector: a relationship query inspector\n        :type relationship_query_inspector: ``osid.relationship.RelationshipQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.relationship.RelationshipQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relatinship_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``relationship_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipQueryInspector", 
                     "var_name": "relationship_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipQueryInspector"
               ], 
               "return_type": "osid.relationship.RelationshipQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyLookupSession", 
         "shortname": "FamilyLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Family`` objects.", 
            "body": "    The ``Family`` represents a collection of relationships.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Families`` it can access, without breaking execution.\n    However, an assessment may only be useful if all ``Families``\n    referenced by it are available, and a test-taking applicationmay\n    sacrifice some interoperability for the sake of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_families", 
            "use_comparative_family_view", 
            "use_plenary_family_view", 
            "get_family", 
            "get_families_by_ids", 
            "get_families_by_genus_type", 
            "get_families_by_parent_genus_type", 
            "get_families_by_record_type", 
            "get_families_by_provider", 
            "get_families"
         ], 
         "methods": [
            {
               "name": "can_lookup_families", 
               "doc": {
                  "headline": "Tests if this user can perform ``Family`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_family_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_family_view", 
               "doc": {
                  "headline": "A complete view of the ``Family`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Family`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to a ``Family`` and retained for compatibil"
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.Family) - the family", 
               "error_doc": "        raise:  NotFound - ``family_id`` not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the family\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_ids", 
               "doc": {
                  "headline": "Gets a ``FamilyList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the families\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible families may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    family_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned ``Family\n                list``", 
               "error_doc": "        raise:  NotFound - an ``Id was`` not found\n        raise:  NullArgument - ``family_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_ids: the list of ``Ids`` to retrieve\n        :type family_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Family list``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id was`` not found\n        :raise: ``NullArgument`` -- ``family_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "family_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``FamilyList`` corresponding to the given family genus ``Type`` which does not include families of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known families\n        or an error results. Otherwise, the returned list may contain\n        only those families that are accessible through this session."
               }, 
               "arg_doc": "        arg:    family_genus_type (osid.type.Type): a family genus type\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned ``Family\n                list``", 
               "error_doc": "        raise:  NullArgument - ``family_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_genus_type: a family genus type\n        :type family_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Family list``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``FamilyList`` corresponding to the given family genus ``Type`` and include any additional families with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known families\n        or an error results. Otherwise, the returned list may contain\n        only those families that are accessible through this session."
               }, 
               "arg_doc": "        arg:    family_genus_type (osid.type.Type): a family genus type\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned ``Family\n                list``", 
               "error_doc": "        raise:  NullArgument - ``family_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_genus_type: a family genus type\n        :type family_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Family list``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_record_type", 
               "doc": {
                  "headline": "Gets a ``FamilyList`` containing the given family record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known families\n        or an error results. Otherwise, the returned list may contain\n        only those families that are accessible through this session."
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): a family record\n                type\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned ``Family\n                list``", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_record_type: a family record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Family list``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families_by_provider", 
               "doc": {
                  "headline": "Gets a ``FamilyList`` from the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known families\n        or an error results. Otherwise, the returned list may contain\n        only those families that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned ``Family\n                list``", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Family list``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_families", 
               "doc": {
                  "headline": "Gets all families.", 
                  "body": "        In plenary mode, the returned list contains all known families\n        or an error results. Otherwise, the returned list may contain\n        only those families that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyList) - a list of families", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of families\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyQuerySession", 
         "shortname": "FamilyQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Family`` objects.", 
            "body": "    The search query is constructed using the ``FamilyQuery``. The\n    family record ``Type`` also specifies the record for the family\n    query.\n\n    Families may have a query record indicated by their respective\n    record types. The query record is accessed via the ``FamilyQuery``.\n    The returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_families", 
            "get_family_query", 
            "get_families_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_families", 
               "doc": {
                  "headline": "Tests if this user can perform ``Family`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_family_query", 
               "doc": {
                  "headline": "Gets a family query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQuery) - the family query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family query\n        :rtype: ``osid.relationship.FamilyQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQuery", 
               "errors": {}
            }, 
            {
               "name": "get_families_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Family`` objects matching the given family query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_query (osid.relationship.FamilyQuery): the family\n                query\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the returned\n                ``FamilyList``", 
               "error_doc": "        raise:  NullArgument - ``family_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``family_query`` is not of this service", 
               "sphinx_param_doc": "        :param family_query: the family query\n        :type family_query: ``osid.relationship.FamilyQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``FamilyList``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``family_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyQuery", 
                     "var_name": "family_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyQuery"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilySearchSession", 
         "shortname": "FamilySearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Family`` objects.", 
            "body": "    The search query is constructed using the ``FamilyQuery``. The\n    family record ``Type`` also specifies the record for the family\n    query.\n\n    ``get_families_by_query()`` is the basic search method and returns a\n    list of ``Family`` elements. A more advanced search may be performed\n    with ``getFamiliesBySearch()``. It accepts a ``FamilySearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_families_by_search()`` returns a ``FamilySearchResults`` that\n    can be used to access the resulting ``FamilyList`` or be used to\n    perform a search within the result set through ``FamilySearch``.\n    \n    Families may have a query record indicated by their respective\n    record types. The query record is accessed via the ``FamilyQuery``.\n    The returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.relationship.FamilyQuerySession"
         ], 
         "inherit_shortnames": [
            "FamilyQuerySession"
         ], 
         "inherit_pkg_names": [
            "relationship"
         ], 
         "inheritance": [
            {
               "pkg_name": "relationship", 
               "name": "FamilyQuerySession"
            }
         ], 
         "method_names": [
            "get_family_search", 
            "get_family_search_order", 
            "get_families_by_search", 
            "get_family_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_family_search", 
               "doc": {
                  "headline": "Gets a family search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilySearch) - the family search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family search\n        :rtype: ``osid.relationship.FamilySearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilySearch", 
               "errors": {}
            }, 
            {
               "name": "get_family_search_order", 
               "doc": {
                  "headline": "Gets a family search order.", 
                  "body": "        The ``FamilySearchOrder`` is supplied to a ``FamilySearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilySearchOrder) - the family\n                search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family search order\n        :rtype: ``osid.relationship.FamilySearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilySearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_families_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_query (osid.relationship.FamilyQuery): the family\n                query\n        arg:    family_search (osid.relationship.FamilySearch): the\n                family search\n", 
               "return_doc": "        return: (osid.relationship.FamilySearchResults) - the search\n                results", 
               "error_doc": "        raise:  NullArgument - ``family_query`` or ``family_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``family_query`` or ``family_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param family_query: the family query\n        :type family_query: ``osid.relationship.FamilyQuery``\n        :param family_search: the family search\n        :type family_search: ``osid.relationship.FamilySearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.relationship.FamilySearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_query`` or ``family_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``family_query`` or ``family_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyQuery", 
                     "var_name": "family_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.relationship.FamilySearch", 
                     "var_name": "family_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyQuery", 
                  "osid.relationship.FamilySearch"
               ], 
               "return_type": "osid.relationship.FamilySearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_query_from_inspector", 
               "doc": {
                  "headline": "Gets a family query from an inspector.", 
                  "body": "        The inspector is available from an ``FamilySearchResults``."
               }, 
               "arg_doc": "        arg:    family_query_inspector\n                (osid.relationship.FamilyQueryInspector): a family query\n                inspector\n", 
               "return_doc": "        return: (osid.relationship.FamilyQuery) - the familyh query", 
               "error_doc": "        raise:  NullArgument - ``family_query_inspector`` is ``null``\n        raise:  Unsupported - ``family_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param family_query_inspector: a family query inspector\n        :type family_query_inspector: ``osid.relationship.FamilyQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the familyh query\n        :rtype: ``osid.relationship.FamilyQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``family_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyQueryInspector", 
                     "var_name": "family_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyQueryInspector"
               ], 
               "return_type": "osid.relationship.FamilyQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyAdminSession", 
         "shortname": "FamilyAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Families``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Family,`` a ``FamilyForm`` is requested using\n    ``get_family_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``FamilyForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``FamilyForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``FamilyForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``FamilyForms`` are requested to the ``Family``  ``Id``\n    that is to be updated using ``getFamilyFormForUpdate()``. Similarly,\n    the ``FamilyForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``FamilyForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Families``.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_families", 
            "can_create_family_with_record_types", 
            "get_family_form_for_create", 
            "create_family", 
            "can_update_families", 
            "get_family_form_for_update", 
            "update_family", 
            "can_delete_families", 
            "delete_family", 
            "can_manage_family_aliases", 
            "alias_family"
         ], 
         "methods": [
            {
               "name": "can_create_families", 
               "doc": {
                  "headline": "Tests if this user can create families.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Family``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer create\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Family`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Family`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_family_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Family`` using the desired record types.", 
                  "body": "        While ``RelationshipManager.getFamilyRecordTypes()`` can be used\n        to examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Family``.\n        Providing an empty array tests if a ``Family`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    family_record_types (osid.type.Type[]): array of family\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Family`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``family_record_types is null``", 
               "sphinx_param_doc": "        :param family_record_types: array of family record types\n        :type family_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Family`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_types is null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "family_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_form_for_create", 
               "doc": {
                  "headline": "Gets the family form for creating new families.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    family_record_types (osid.type.Type[]): array of family\n                record types\n", 
               "return_doc": "        return: (osid.relationship.FamilyForm) - the family form", 
               "error_doc": "        raise:  NullArgument - ``family_record_types is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form for requested record\n                types", 
               "sphinx_param_doc": "        :param family_record_types: array of family record types\n        :type family_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the family form\n        :rtype: ``osid.relationship.FamilyForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_types is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form for requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "family_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.relationship.FamilyForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_family", 
               "doc": {
                  "headline": "Creates a new ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_form (osid.relationship.FamilyForm): the form for\n                this ``Family``.\n", 
               "return_doc": "        return: (osid.relationship.Family) - the new ``Family``", 
               "error_doc": "        raise:  IllegalState - ``family_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``family_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``family_form`` did not originate from\n                ``get_family_form_for_create()``", 
               "sphinx_param_doc": "        :param family_form: the form for this ``Family``.\n        :type family_form: ``osid.relationship.FamilyForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Family``\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``family_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``family_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``family_form`` did not originate from ``get_family_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyForm", 
                     "var_name": "family_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyForm"
               ], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_families", 
               "doc": {
                  "headline": "Tests if this user can update families.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Family``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer update\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Family`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Family`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_family_form_for_update", 
               "doc": {
                  "headline": "Gets the family form for updating an existing family.", 
                  "body": "        A new family form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n", 
               "return_doc": "        return: (osid.relationship.FamilyForm) - the family form", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the family form\n        :rtype: ``osid.relationship.FamilyForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.FamilyForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_family", 
               "doc": {
                  "headline": "Updates an existing family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_form (osid.relationship.FamilyForm): the form\n                containing the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``family_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``family_id`` or ``family_form`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``family_form`` did not originate from\n                ``get_family_form_for_update()``", 
               "sphinx_param_doc": "        :param family_form: the form containing the elements to be updated\n        :type family_form: ``osid.relationship.FamilyForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``family_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``family_id`` or ``family_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``family_form`` did not originate from ``get_family_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilyForm", 
                     "var_name": "family_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilyForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_families", 
               "doc": {
                  "headline": "Tests if this user can delete families.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Family``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may not wish to offer delete\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Family`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Family`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_family", 
               "doc": {
                  "headline": "Deletes a ``Family``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``family_id`` not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to remove\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_family_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for families.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Family`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Family`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_family", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Family`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Family`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another family, it is\n        reassigned to the given family ``Id``."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a ``Family``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``family_id`` not found\n        raise:  NullArgument - ``family_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a ``Family``\n        :type family_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``family_id`` not found\n        :raise: ``NullArgument`` -- ``family_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyNotificationSession", 
         "shortname": "FamilyNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Family`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Family`` object\n    itself. Adding and removing relationships result in notifications\n    available from the notification session for rules."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_family_notifications", 
            "register_for_new_families", 
            "register_for_new_family_ancestors", 
            "register_for_new_family_descendants", 
            "register_for_changed_families", 
            "register_for_changed_family", 
            "register_for_deleted_families", 
            "register_for_deleted_family", 
            "register_for_deleted_family_ancestors", 
            "register_for_deleted_family_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_family_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Family`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_families", 
               "doc": {
                  "headline": "Register for notifications of new families.", 
                  "body": "        ``FamilyReceiver.newFamily()`` is invoked when a new ``Family``\n        is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_family_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new ancestor of the specified family.", 
                  "body": "        ``FamilyReceiver.newAncestorFamily()`` is invoked when the\n        specified family node gets a new ancestor."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` node to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_family_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new descendant of the specified family.", 
                  "body": "        ``FamilyReceiver.newDescendantFamily()`` is invoked when the\n        specified family node gets a new descendant."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` node to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_families", 
               "doc": {
                  "headline": "Registers for notification of updated families.", 
                  "body": "        ``FamilyReceiver.changedFamily()`` is invoked when a family is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_family", 
               "doc": {
                  "headline": "Registers for notification of an updated family.", 
                  "body": "        ``FamilyReceiver.changedFamily()`` is invoked when the specified\n        family is changed."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_families", 
               "doc": {
                  "headline": "Registers for notification of deleted families.", 
                  "body": "        ``FamilyReceiver.deletedFamily()`` is invoked when a family is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_family", 
               "doc": {
                  "headline": "Registers for notification of a deleted family.", 
                  "body": "        ``FamilyReceiver.deletedFamily()`` is invoked when the specified\n        family is deleted."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id is null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id is null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_family_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes an ancestor of the specified family.", 
                  "body": "        ``FamilyReceiver.deletedAncestor()`` is invoked when the\n        specified family node loses an ancestor."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_family_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes a descendant of the specified family.", 
                  "body": "        ``FamilyReceiver.deletedDescendant()`` is invoked when the\n        specified family node loses a descendant."
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to monitor\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyHierarchySession", 
         "shortname": "FamilyHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Family`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Family``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_families()`` and ``getChildFamilies()``. To relate\n    these ``Ids`` to another OSID, ``get_family_nodes()`` can be used\n    for retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Family`` available in the Relationship OSID is known to this\n    hierarchy but does not appear in the hierarchy traversal until added\n    as a root node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_families()`` or ``get_child_families()`` in\n    lieu of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: family elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_hierarchy_id", 
            "get_family_hierarchy", 
            "can_access_family_hierarchy", 
            "use_comparative_family_view", 
            "use_plenary_family_view", 
            "get_root_family_ids", 
            "get_root_families", 
            "has_parent_families", 
            "is_parent_of_family", 
            "get_parent_family_ids", 
            "get_parent_families", 
            "is_ancestor_of_family", 
            "has_child_families", 
            "is_child_of_family", 
            "get_child_family_ids", 
            "get_child_families", 
            "is_descendant_of_family", 
            "get_family_node_ids", 
            "get_family_nodes"
         ], 
         "methods": [
            {
               "name": "get_family_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_family_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may not offer hierrachy\n        traversal operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_family_view", 
               "doc": {
                  "headline": "The returns from the family methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_family_view", 
               "doc": {
                  "headline": "A complete view of the ``Family`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_family_ids", 
               "doc": {
                  "headline": "Gets the root family ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root family ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root family ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_families", 
               "doc": {
                  "headline": "Gets the root families in the family hierarchy.", 
                  "body": "        A node with no parents is an orphan. While all family ``Ids``\n        are known to the hierarchy, an orphan does not appear in the\n        hierarchy unless explicitly added as a root node or child of\n        another node."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the root families", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root families\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_families", 
               "doc": {
                  "headline": "Tests if the ``Family`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if the family has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the family has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_family", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``family_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``id`` or ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``family_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_family_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the family", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the family\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_families", 
               "doc": {
                  "headline": "Gets the parent families of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                query\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the parent families of\n                the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Family`` identified by ``Id is`` not\n                found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to query\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent families of the ``id``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Family`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_family", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``family_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``id`` or ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``family_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_families", 
               "doc": {
                  "headline": "Tests if a family has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``family_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``family_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_family", 
               "doc": {
                  "headline": "Tests if a family is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``family_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``id`` or ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``family_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_family_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the family", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` to query\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the family\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_families", 
               "doc": {
                  "headline": "Gets the child families of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the ``Family`` to\n                query\n", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the child families of\n                the ``id``", 
               "error_doc": "        raise:  NotFound - a ``Family`` identified by ``Id is`` not\n                found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the ``Family`` to query\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the child families of the ``id``\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Family`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_family", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``family_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``id`` or ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``family_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_family_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - a family node", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` to query\n        :type family_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a family node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_family_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.relationship.FamilyNode) - a family node", 
               "error_doc": "        raise:  NotFound - ``family_id`` is not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` to query\n        :type family_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: a family node\n        :rtype: ``osid.relationship.FamilyNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` is not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.relationship.FamilyNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyHierarchyDesignSession", 
         "shortname": "FamilyHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages a hierarchy of families may be organized into a hierarchy for organizing or federating.", 
            "body": "    A parent ``Family`` includes all of the relationships of its\n    children such that a single root node contains all of the\n    relationships of the federation."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_family_hierarchy_id", 
            "get_family_hierarchy", 
            "can_modify_family_hierarchy", 
            "add_root_family", 
            "remove_root_family", 
            "add_child_family", 
            "remove_child_family", 
            "remove_child_families"
         ], 
         "methods": [
            {
               "name": "get_family_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_family_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_family_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_family", 
               "doc": {
                  "headline": "Adds a root family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``family_id`` is already in hierarchy\n        raise:  NotFound - ``family_id`` not found\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``family_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``family_id`` not found\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_family", 
               "doc": {
                  "headline": "Removes a root family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``family_id`` not a root\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` not a root\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_family", 
               "doc": {
                  "headline": "Adds a child to a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``family_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``family_id`` or ``child_id`` not found\n        raise:  NullArgument - ``family_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``family_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``family_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``family_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_family", 
               "doc": {
                  "headline": "Removes a child from a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``family_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``family_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``family_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_families", 
               "doc": {
                  "headline": "Removes all children from a family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of a family\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``family_id`` not in hierarchy\n        raise:  NullArgument - ``family_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of a family\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``family_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``family_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.Relationship", 
         "shortname": "Relationship", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Relationship`` is an object between two peers.", 
            "body": "    The genus type indicates the relationship between the peer and the\n    related peer."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationship"
         ], 
         "inherit_shortnames": [
            "OsidRelationship"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationship"
            }
         ], 
         "method_names": [
            "get_source_id", 
            "get_destination_id", 
            "get_relationship_record"
         ], 
         "methods": [
            {
               "name": "get_source_id", 
               "doc": {
                  "headline": "Gets the from peer ``Id`` in this relationship.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the peer", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the peer\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_destination_id", 
               "doc": {
                  "headline": "Gets the to peer ``Id`` in this relationship.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the related peer", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the related peer\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_record", 
               "doc": {
                  "headline": "Gets the relationshop record corresponding to the given ``Relationship`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``relationship_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(relationship_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): the type of\n                relationship record to retrieve\n", 
               "return_doc": "        return: (osid.relationship.records.RelationshipRecord) - the\n                relationship record", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_record_type: the type of relationship record to retrieve\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship record\n        :rtype: ``osid.relationship.records.RelationshipRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipRecord", 
         "shortname": "RelationshipRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Relationship``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipQuery", 
         "shortname": "RelationshipQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching relationships.", 
            "body": "    Each method match specifies an ``AND`` term while multiple\n    invocations of the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQuery"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQuery"
            }
         ], 
         "method_names": [
            "match_source_id", 
            "clear_source_id_terms", 
            "match_destination_id", 
            "clear_destination_id_terms", 
            "match_same_peer_id", 
            "clear_same_peer_id_terms", 
            "match_family_id", 
            "clear_family_id_terms", 
            "supports_family_query", 
            "get_family_query", 
            "clear_family_terms", 
            "get_relationship_query_record"
         ], 
         "methods": [
            {
               "name": "match_source_id", 
               "doc": {
                  "headline": "Matches a relationship peer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    peer (osid.id.Id): peer ``Id`` to match\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``peer`` is ``null``", 
               "sphinx_param_doc": "        :param peer: peer ``Id`` to match\n        :type peer: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``peer`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "peer", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_source_id_terms", 
               "doc": {
                  "headline": "Clears the peer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_destination_id", 
               "doc": {
                  "headline": "Matches the other relationship peer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    peer (osid.id.Id): peer ``Id`` to match\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``peer`` is ``null``", 
               "sphinx_param_doc": "        :param peer: peer ``Id`` to match\n        :type peer: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``peer`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "peer", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_destination_id_terms", 
               "doc": {
                  "headline": "Clears the other peer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_same_peer_id", 
               "doc": {
                  "headline": "Matches circular relationships to the same peer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_same_peer_id_terms", 
               "doc": {
                  "headline": "Clears the same peer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_family_id", 
               "doc": {
                  "headline": "Sets the family ``Id`` for this query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): a family ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``", 
               "sphinx_param_doc": "        :param family_id: a family ``Id``\n        :type family_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_family_id_terms", 
               "doc": {
                  "headline": "Clears the family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_family_query", 
               "doc": {
                  "headline": "Tests if a ``FamilyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a family query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a family query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_family_query", 
               "doc": {
                  "headline": "Gets the query for a family.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQuery) - the family query", 
               "error_doc": "        raise:  Unimplemented - ``supports_family_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family query\n        :rtype: ``osid.relationship.FamilyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_family_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_family_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_family_terms", 
               "doc": {
                  "headline": "Clears the family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_query_record", 
               "doc": {
                  "headline": "Gets the relationship query record corresponding to the given ``Relationship`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return: (osid.relationship.records.RelationshipQueryRecord) -\n                the relationship query record", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship query record\n        :rtype: ``osid.relationship.records.RelationshipQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipQueryRecord", 
         "shortname": "RelationshipQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipQueryInspector", 
         "shortname": "RelationshipQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining relationship queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipQueryInspector"
            }
         ], 
         "method_names": [
            "get_source_id_terms", 
            "get_destination_id_terms", 
            "get_same_peer_id_terms", 
            "get_family_id_terms", 
            "get_family_terms", 
            "get_relationship_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_source_id_terms", 
               "doc": {
                  "headline": "Gets the peer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the peer ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the peer ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_destination_id_terms", 
               "doc": {
                  "headline": "Gets the other peer ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the other peer ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the other peer ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_same_peer_id_terms", 
               "doc": {
                  "headline": "Gets the same peer terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.BooleanTerm) - the same peer terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the same peer terms\n        :rtype: ``osid.search.terms.BooleanTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.BooleanTerm", 
               "errors": {}
            }, 
            {
               "name": "get_family_id_terms", 
               "doc": {
                  "headline": "Gets the family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the family ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_family_terms", 
               "doc": {
                  "headline": "Gets the family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQueryInspector) - the family\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family terms\n        :rtype: ``osid.relationship.FamilyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_query_inspector_record", 
               "doc": {
                  "headline": "Gets the relationship query inspector record corresponding to the given ``Relationship`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return:\n                (osid.relationship.records.RelationshipQueryInspectorRec\n                ord) - the relationship query inspector record", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship query inspector record\n        :rtype: ``osid.relationship.records.RelationshipQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipQueryInspectorRecord", 
         "shortname": "RelationshipQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipForm", 
         "shortname": "RelationshipForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Relationships``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``RelationshipAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipForm"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipForm"
            }
         ], 
         "method_names": [
            "get_relationship_form_record"
         ], 
         "methods": [
            {
               "name": "get_relationship_form_record", 
               "doc": {
                  "headline": "Gets the ``RelationshipFormRecord`` corresponding to the given relationship record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return: (osid.relationship.records.RelationshipFormRecord) - the\n                relationship form record", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship form record\n        :rtype: ``osid.relationship.records.RelationshipFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipFormRecord", 
         "shortname": "RelationshipFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipSearchOrder", 
         "shortname": "RelationshipSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRelationshipSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRelationshipSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRelationshipSearchOrder"
            }
         ], 
         "method_names": [
            "order_by_source", 
            "order_by_destination", 
            "get_relationship_search_order_record"
         ], 
         "methods": [
            {
               "name": "order_by_source", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the source peer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_by_destination", 
               "doc": {
                  "headline": "Specifies a preference for ordering the result set by the destination peer.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    style (osid.SearchOrderStyle): search order style\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``style`` is ``null``", 
               "sphinx_param_doc": "        :param style: search order style\n        :type style: ``osid.SearchOrderStyle``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``style`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.SearchOrderStyle", 
                     "var_name": "style", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.SearchOrderStyle"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_order_record", 
               "doc": {
                  "headline": "Gets the relationship search order record corresponding to the given relationship record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    relationship_record_type (osid.type.Type): a\n                relationship record type\n", 
               "return_doc": "        return:\n                (osid.relationship.records.RelationshipSearchOrderRecord\n                ) - the relationship search order record", 
               "error_doc": "        raise:  NullArgument - ``relationship_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_record_type: a relationship record type\n        :type relationship_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship search order record\n        :rtype: ``osid.relationship.records.RelationshipSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipSearchOrderRecord", 
         "shortname": "RelationshipSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipSearch", 
         "shortname": "RelationshipSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing relationship searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_relationships", 
            "order_relationship_results", 
            "get_relationship_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_relationships", 
               "doc": {
                  "headline": "Execute this search among the given list of relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_ids (osid.id.IdList): list of relationships\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_ids`` is ``null``", 
               "sphinx_param_doc": "        :param relationship_ids: list of relationships\n        :type relationship_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "relationship_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_relationship_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_search_order\n                (osid.relationship.RelationshipSearchOrder):\n                relationship search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_search_order`` is ``null``\n        raise:  Unsupported - ``relationship_search_order`` is not of\n                this service", 
               "sphinx_param_doc": "        :param relationship_search_order: relationship search order\n        :type relationship_search_order: ``osid.relationship.RelationshipSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``relationship_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.RelationshipSearchOrder", 
                     "var_name": "relationship_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.RelationshipSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_search_record", 
               "doc": {
                  "headline": "Gets the relationship search record corresponding to the given relationship search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    relationship_search_record_type (osid.type.Type): a\n                relationship search record type\n", 
               "return_doc": "        return: (osid.relationship.records.RelationshipSearchRecord) -\n                the relationship search record", 
               "error_doc": "        raise:  NullArgument - ``relationship_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_search_record_type: a relationship search record type\n        :type relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship search record\n        :rtype: ``osid.relationship.records.RelationshipSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipSearchRecord", 
         "shortname": "RelationshipSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipSearchResults", 
         "shortname": "RelationshipSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_relationships", 
            "get_relationship_query_inspector", 
            "get_relationship_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_relationships", 
               "doc": {
                  "headline": "Gets the relationship list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipList) - the relationship\n                list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship list\n        :rtype: ``osid.relationship.RelationshipList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_relationship_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQueryInspector) - the\n                relationship query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query inspector\n        :rtype: ``osid.relationship.RelationshipQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_search_results_record", 
               "doc": {
                  "headline": "Gets the relationship search results record corresponding to the given relationship search record ``Type``.", 
                  "body": "        This method must be used to retrieve an object implementing the\n        requested record interface along with all of its ancestor\n        interfaces."
               }, 
               "arg_doc": "        arg:    relationship_search_record_type (osid.type.Type): a\n                relationship search record type\n", 
               "return_doc": "        return:\n                (osid.relationship.records.RelationshipSearchResultsReco\n                rd) - the relationship search results record", 
               "error_doc": "        raise:  NullArgument - ``relationship_search_record_type`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(relationship_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param relationship_search_record_type: a relationship search record type\n        :type relationship_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the relationship search results record\n        :rtype: ``osid.relationship.records.RelationshipSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(relationship_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "relationship_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.RelationshipSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.RelationshipSearchResultsRecord", 
         "shortname": "RelationshipSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RelationshipSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.RelationshipReceiver", 
         "shortname": "RelationshipReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The relationship receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Relationship`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_relationship", 
            "changed_relationship", 
            "deleted_relationship"
         ], 
         "methods": [
            {
               "name": "new_relationship", 
               "doc": {
                  "headline": "The callback for notifications of new relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the new\n                ``Relationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the new ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_relationship", 
               "doc": {
                  "headline": "The callback for notification of updated relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the updated\n                ``Relationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the updated ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_relationship", 
               "doc": {
                  "headline": "the callback for notification of deleted relationships.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): the ``Id`` of the deleted\n                ``Relationship``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param relationship_id: the ``Id`` of the deleted ``Relationship``\n        :type relationship_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.RelationshipList", 
         "shortname": "RelationshipList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``Relationship`` provides a means for accessing ``Relationship`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Relationship relationship =\n    rl.getNextRelationship(); }\n\n    or\n      while (rl.hasNext()) {\n           Relationship[] relationships = rl.getNextRelationships(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_relationship", 
            "get_next_relationships"
         ], 
         "methods": [
            {
               "name": "get_next_relationship", 
               "doc": {
                  "headline": "Gets the next ``Relationship`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Relationship) - the next\n                ``Relationship`` in this list. The ``has_next()`` method\n                should be used to test that a next ``Relationship`` is\n                available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Relationship`` in this list. The ``has_next()`` method should be used to test that a next ``Relationship`` is available before calling this method.\n        :rtype: ``osid.relationship.Relationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Relationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_relationships", 
               "doc": {
                  "headline": "Gets the next set of ``Relationships`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Relationship`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.relationship.Relationship) - an array of\n                ``Relationship`` elements.The length of the array is\n                less than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Relationship`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Relationship`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.relationship.Relationship``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.relationship.Relationship", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.Family", 
         "shortname": "Family", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Family`` represents a collection of relationships.", 
            "body": "    Like all OSID objects, a ``Family`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_family_record"
         ], 
         "methods": [
            {
               "name": "get_family_record", 
               "doc": {
                  "headline": "Gets the famly record corresponding to the given ``Family`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``family_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(family_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): the type of family\n                record to retrieve\n", 
               "return_doc": "        return: (osid.relationship.records.FamilyRecord) - the family\n                record", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(family_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_record_type: the type of family record to retrieve\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family record\n        :rtype: ``osid.relationship.records.FamilyRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilyRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilyRecord", 
         "shortname": "FamilyRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Family``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilyQuery", 
         "shortname": "FamilyQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query interface for searching for families.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_relationship_id", 
            "clear_relationship_id_terms", 
            "supports_relationship_query", 
            "get_relationship_query", 
            "match_any_relationship", 
            "clear_relationship_terms", 
            "match_ancestor_family_id", 
            "clear_ancestor_family_id_terms", 
            "supports_ancestor_family_query", 
            "get_ancestor_family_query", 
            "match_any_ancestor_family", 
            "clear_ancestor_family_terms", 
            "match_descendant_family_id", 
            "clear_descendant_family_id_terms", 
            "supports_descendant_family_query", 
            "get_descendant_family_query", 
            "match_any_descendant_family", 
            "clear_descendant_family_terms", 
            "get_family_query_record"
         ], 
         "methods": [
            {
               "name": "match_relationship_id", 
               "doc": {
                  "headline": "Matches a relationship ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    relationship_id (osid.id.Id): a relationship ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``relationship_id`` is ``null``", 
               "sphinx_param_doc": "        :param relationship_id: a relationship ``Id``\n        :type relationship_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``relationship_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "relationship_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_relationship_id_terms", 
               "doc": {
                  "headline": "Clears the relationship ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_relationship_query", 
               "doc": {
                  "headline": "Tests if a relationship query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a relationship query is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a relationship query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_query", 
               "doc": {
                  "headline": "Gets the query interface for a relationship.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQuery) - the relationship\n                query", 
               "error_doc": "        raise:  Unimplemented - ``supports_relationship_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship query\n        :rtype: ``osid.relationship.RelationshipQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_relationship_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_relationship_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_relationship", 
               "doc": {
                  "headline": "Matches families with any relationship.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match families with any\n                relationship, ``false`` to match families with no\n                relationship\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match families with any relationship, ``false`` to match families with no relationship\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_relationship_terms", 
               "doc": {
                  "headline": "Clears the relationship terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_family_id", 
               "doc": {
                  "headline": "Sets the family ``Id`` for this query to match families that have the specified family as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): a family ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``", 
               "sphinx_param_doc": "        :param family_id: a family ``Id``\n        :type family_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_family_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_family_query", 
               "doc": {
                  "headline": "Tests if a ``FamilyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a family query interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a family query interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_family_query", 
               "doc": {
                  "headline": "Gets the query interface for a family.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQuery) - the family query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_family_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family query\n        :rtype: ``osid.relationship.FamilyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_family_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_family_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_family", 
               "doc": {
                  "headline": "Matches families with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match families with any\n                ancestor, ``false`` to match root families\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match families with any ancestor, ``false`` to match root families\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_family_terms", 
               "doc": {
                  "headline": "Clears the ancestor family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_family_id", 
               "doc": {
                  "headline": "Sets the family ``Id`` for this query to match families that have the specified family as a descednant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): a family ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_id`` is ``null``", 
               "sphinx_param_doc": "        :param family_id: a family ``Id``\n        :type family_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_family_id_terms", 
               "doc": {
                  "headline": "Clears the descendant family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_family_query", 
               "doc": {
                  "headline": "Tests if a ``FamilyQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a family query interface is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a family query interface is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_family_query", 
               "doc": {
                  "headline": "Gets the query interface for a family.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQuery) - the family query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_family_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family query\n        :rtype: ``osid.relationship.FamilyQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_family_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_family_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_family", 
               "doc": {
                  "headline": "Matches families with any decendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match families with any\n                decendants, ``false`` to match leaf families\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match families with any decendants, ``false`` to match leaf families\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_family_terms", 
               "doc": {
                  "headline": "Clears the descendant family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_family_query_record", 
               "doc": {
                  "headline": "Gets the family query record corresponding to the given ``Family`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): a family record\n                type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilyQueryRecord) - the\n                family query record", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(family_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_record_type: a family record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family query record\n        :rtype: ``osid.relationship.records.FamilyQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilyQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilyQueryRecord", 
         "shortname": "FamilyQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilyQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilyQueryInspector", 
         "shortname": "FamilyQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining family queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_relationship_id_terms", 
            "get_relationship_terms", 
            "get_ancestor_family_id_terms", 
            "get_ancestor_family_terms", 
            "get_descendant_family_id_terms", 
            "get_descendant_family_terms", 
            "get_family_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_relationship_id_terms", 
               "doc": {
                  "headline": "Gets the relationship ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the relationship ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_relationship_terms", 
               "doc": {
                  "headline": "Gets the relationship terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.RelationshipQueryInspector) - the\n                relationship terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the relationship terms\n        :rtype: ``osid.relationship.RelationshipQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.RelationshipQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_family_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the ancestor family ``Id``\n                terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor family ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_family_terms", 
               "doc": {
                  "headline": "Gets the ancestor family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQueryInspector) - the ancestor\n                family terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ancestor family terms\n        :rtype: ``osid.relationship.FamilyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_family_id_terms", 
               "doc": {
                  "headline": "Gets the descendant family ``Id`` terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the descendant family\n                ``Id`` terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant family ``Id`` terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_family_terms", 
               "doc": {
                  "headline": "Gets the descendant family terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQueryInspector) - the\n                descendant family terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the descendant family terms\n        :rtype: ``osid.relationship.FamilyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_family_query_inspector_record", 
               "doc": {
                  "headline": "Gets the family query inspector record corresponding to the given ``Family`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): a family record\n                type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilyQueryInspectorRecord) -\n                the family query inspector record", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(family_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_record_type: a family record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family query inspector record\n        :rtype: ``osid.relationship.records.FamilyQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilyQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilyQueryInspectorRecord", 
         "shortname": "FamilyQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilyQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilyForm", 
         "shortname": "FamilyForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Family`` objects.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``FamilyAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_family_form_record"
         ], 
         "methods": [
            {
               "name": "get_family_form_record", 
               "doc": {
                  "headline": "Gets the ``FamilyFormRecord`` corresponding to the given family record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): the family record\n                type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilyFormRecord) - the\n                family form record", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(family_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_record_type: the family record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family form record\n        :rtype: ``osid.relationship.records.FamilyFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilyFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilyFormRecord", 
         "shortname": "FamilyFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilyForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilySearchOrder", 
         "shortname": "FamilySearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_family_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_family_search_order_record", 
               "doc": {
                  "headline": "Gets the family search record order corresponding to the given family record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    family_record_type (osid.type.Type): a family record\n                type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilySearchOrderRecord) -\n                the family search order record", 
               "error_doc": "        raise:  NullArgument - ``family_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``has_record_type(family_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_record_type: a family record type\n        :type family_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family search order record\n        :rtype: ``osid.relationship.records.FamilySearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilySearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilySearchOrderRecord", 
         "shortname": "FamilySearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilySearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilySearch", 
         "shortname": "FamilySearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing family searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_families", 
            "order_family_results", 
            "get_family_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_families", 
               "doc": {
                  "headline": "Execute this search among the given list of families.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_ids (osid.id.IdList): list of families\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_ids`` is ``null``", 
               "sphinx_param_doc": "        :param family_ids: list of families\n        :type family_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "family_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_family_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_search_order\n                (osid.relationship.FamilySearchOrder): family search\n                order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``family_search_order`` is ``null``\n        raise:  Unsupported - ``family_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param family_search_order: family search order\n        :type family_search_order: ``osid.relationship.FamilySearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``family_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.relationship.FamilySearchOrder", 
                     "var_name": "family_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.relationship.FamilySearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_search_record", 
               "doc": {
                  "headline": "Gets the family search record corresponding to the given family search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    family_search_record_type (osid.type.Type): a family\n                search record type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilySearchRecord) - the\n                family search record", 
               "error_doc": "        raise:  NullArgument - ``family_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(family_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_search_record_type: a family search record type\n        :type family_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family search record\n        :rtype: ``osid.relationship.records.FamilySearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``family_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilySearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilySearchRecord", 
         "shortname": "FamilySearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilySearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilySearchResults", 
         "shortname": "FamilySearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search and is used as a vehicle to perform a search within a previous result set.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_families", 
            "get_family_query_inspector", 
            "get_family_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_families", 
               "doc": {
                  "headline": "Gets the family list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyList) - the family list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family list\n        :rtype: ``osid.relationship.FamilyList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_family_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyQueryInspector) - the family\n                query inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family query inspector\n        :rtype: ``osid.relationship.FamilyQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_family_search_results_record", 
               "doc": {
                  "headline": "Gets the family search results record corresponding to the given family search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    family_search_record_type (osid.type.Type): a family\n                search record type\n", 
               "return_doc": "        return: (osid.relationship.records.FamilySearchResultsRecord) -\n                the family search results record", 
               "error_doc": "        raise:  NullArgument - ``FamilySearchRecordType`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported -\n                ``has_record_type(family_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param family_search_record_type: a family search record type\n        :type family_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the family search results record\n        :rtype: ``osid.relationship.records.FamilySearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``FamilySearchRecordType`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``has_record_type(family_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "family_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.relationship.records.FamilySearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.records.FamilySearchResultsRecord", 
         "shortname": "FamilySearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``FamilySearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.relationship.FamilyReceiver", 
         "shortname": "FamilyReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The family receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Family`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_family", 
            "new_ancestor_family", 
            "new_descendant_family", 
            "changed_family", 
            "deleted_family", 
            "deleted_ancestor_family", 
            "deleted_descendant_family"
         ], 
         "methods": [
            {
               "name": "new_family", 
               "doc": {
                  "headline": "The callback for notifications of new families.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the new ``Family``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the new ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_family", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of an family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the registered\n                ``Family``\n        arg:    ancestor_id (osid.id.Id): the Id of the new ancestor\n                family\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the registered ``Family``\n        :type family_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the new ancestor family\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_family", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of an family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the registered\n                ``Family``\n        arg:    descendant_id (osid.id.Id): the Id of the new descendant\n                family\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the registered ``Family``\n        :type family_id: ``osid.id.Id``\n        :param descendant_id: the Id of the new descendant family\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_family", 
               "doc": {
                  "headline": "The callback for notification of updated families.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the updated\n                ``Family``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the updated ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_family", 
               "doc": {
                  "headline": "the callback for notification of deleted familys.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the registered\n                ``Family``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the registered ``Family``\n        :type family_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_family", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of an family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the registered\n                ``Family``\n        arg:    ancestor_id (osid.id.Id): the Id of the removed ancestor\n                family\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the registered ``Family``\n        :type family_id: ``osid.id.Id``\n        :param ancestor_id: the Id of the removed ancestor family\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_family", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of an family.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    family_id (osid.id.Id): the ``Id`` of the registered\n                ``Family``\n        arg:    descendant_id (osid.id.Id): the Id of the deleted\n                descendant family\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param family_id: the ``Id`` of the registered ``Family``\n        :type family_id: ``osid.id.Id``\n        :param descendant_id: the Id of the deleted descendant family\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "family_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyList", 
         "shortname": "FamilyList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``FamilyList`` provides a means for accessing ``Family`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (fl.hasNext()) { Family family = fl.getNextFamily();\n    }\n\n    or\n      while (fl.hasNext()) {\n           Family[] families = fl.getNextFamilies(fl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_family", 
            "get_next_families"
         ], 
         "methods": [
            {
               "name": "get_next_family", 
               "doc": {
                  "headline": "Gets the next ``Family`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the next ``Family`` in this\n                list. The ``has_next()`` method should be used to test\n                that a next ``Family`` is available before calling this\n                method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Family`` in this list. The ``has_next()`` method should be used to test that a next ``Family`` is available before calling this method.\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_families", 
               "doc": {
                  "headline": "Gets the next set of ``Family elements`` in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Family`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.relationship.Family) - an array of ``Family``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Family`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Family`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.relationship.Family", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyNode", 
         "shortname": "FamilyNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``FamilyHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_family", 
            "get_parent_family_nodes", 
            "get_child_family_nodes"
         ], 
         "methods": [
            {
               "name": "get_family", 
               "doc": {
                  "headline": "Gets the ``Family`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.Family) - the family represented by\n                this node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the family represented by this node\n        :rtype: ``osid.relationship.Family``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.Family", 
               "errors": {}
            }, 
            {
               "name": "get_parent_family_nodes", 
               "doc": {
                  "headline": "Gets the parents of this family.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyNodeList) - the parents of the\n                ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.relationship.FamilyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_family_nodes", 
               "doc": {
                  "headline": "Gets the children of this family.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyNodeList) - the children of\n                this family", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this family\n        :rtype: ``osid.relationship.FamilyNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.relationship.FamilyNodeList", 
         "shortname": "FamilyNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``FamilyNodeList`` provides a means for accessing ``FamilyNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (fnl.hasNext()) { FamilyNode node =\n    fnl.getNextFamilyNode(); }\n\n    or\n      while (fnl.hasNext()) {\n           FamilyNode[] nodes = fnl.getNextFamilyNodes(fnl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_family_node", 
            "get_next_family_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_family_node", 
               "doc": {
                  "headline": "Gets the next ``FamilyNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.relationship.FamilyNode) - the next ``FamilyNode``\n                in this list. The ``has_next()`` method should be used\n                to test that a next ``FamilyNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``FamilyNode`` in this list. The ``has_next()`` method should be used to test that a next ``FamilyNode`` is available before calling this method.\n        :rtype: ``osid.relationship.FamilyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.relationship.FamilyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_family_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``FamilyNode elements`` in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``FamilyNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.relationship.FamilyNode) - an array of\n                ``FamilyNode`` elements.The length of the array is less\n                than or equal to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``FamilyNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``FamilyNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.relationship.FamilyNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.relationship.FamilyNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }
   ], 
   "full_name": "osid.relationship"
}
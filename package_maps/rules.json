{
   "name": "rules", 
   "version": "3.0.0", 
   "title": "Rules Open Service Interface Definitions", 
   "copyright": "Copyright (c) 2009 Massachusetts Institute of Technology.\n\nCopyright (c) 2010 Ingenescus. All Rights Reserved.", 
   "license": "This Work is being provided by the copyright holder(s) subject to the\nfollowing license. By obtaining, using and/or copying this Work, you\nagree that you have read, understand, and will comply with the following\nterms and conditions.\n\nPermission to use, copy and distribute unmodified versions of this Work,\nfor any purpose, without fee or royalty is hereby granted, provided that\nyou include the above copyright notices and the terms of this license on\nALL copies of the Work or portions thereof.\n\nYou may nodify or create Derivatives of this Work only for your internal\npurposes. You shall not distribute or transfer any such Derivative of\nthis Work to any location or to any third party. For the purposes of\nthis license, \"Derivative\" shall mean any derivative of the Work as\ndefined in the United States Copyright Act of 1976, such as a\ntranslation or modification.\n\nThis Work and the information contained herein is provided on an \"AS IS\"\nbasis WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.\n\nThe export of software employing encryption technology may require a\nspecific license from the United States Government. It is the\nresponsibility of any person or organization contemplating export to\nobtain such a license before exporting this Work.", 
   "summary": "The Rules OSID provides a means to evaluate rules and retrieve results.\nA ``Rule`` represents a something that can be executed and can be\norganized into ``Engines``. The rule evaluation accepts a ``Condition``\nthat is used to supply input conditions to the rule engine.\n\nThe Rules OSID does not define a means for authoring rules. Definitions\nexist for evaluating, examining and organizing rules. A ``Rule`` is\nidentified by an Id such that a consumer wishing to evaluate a rule must\nhave knowledge of the ``Rule Id`` along with the expectations of data\n(recod ``Type`` ) required in the ``Condition``. The Rule also implies\nthe structure of the ``Result,`` which can be a simple boolean value or\nanother structure defined in a Result Record.\n\nEngines can be organized into hierarchies for federation. An engine that\nis a parent of another engine makes visible the rules of its children.\n\nExample where the consumer executes a rule with knowledge of the ``Rule\nId`` , ``ConditionRecord``  ``Type,`` and the meaning of the ``Result``.\n  RulesSession session = manager.getRulesSession();\n  Condition condition = session.getConditionForRule(shouldIWearACoatRuleId);\n  if (!condition.hasRecordType(temperatureConditionRecordType) {\n      error (\"temperature condition record not supported\");\n  }\n  \n  TemperatureCondition temp = condition.getConditionRecord(temperatureConditionRecordType);\n  temp.setTemperature(28);\n  \n  if (session.evaluateRule(shouldIWearACoatRuleId, condition) {\n      putOnACoat();\n  }\n\n", 
   "interfaces": [
      {
         "fullname": "osid.rules.RulesProfile", 
         "shortname": "RulesProfile", 
         "category": "managers", 
         "doc": {
            "headline": "The rules profile describes the interoperability among rule services.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidProfile"
         ], 
         "inherit_shortnames": [
            "OsidProfile"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProfile"
            }
         ], 
         "method_names": [
            "supports_visible_federation", 
            "supports_rules", 
            "supports_rule_lookup", 
            "supports_rule_query", 
            "supports_rule_search", 
            "supports_rule_admin", 
            "supports_rule_notification", 
            "supports_rule_engine", 
            "supports_rule_engine_assignment", 
            "supports_rule_smart_engine", 
            "supports_engine_lookup", 
            "supports_engine_query", 
            "supports_engine_search", 
            "supports_engine_admin", 
            "supports_engine_notification", 
            "supports_engine_hierarchy", 
            "supports_engine_hierarchy_design", 
            "supports_rules_check", 
            "get_rule_record_types", 
            "supports_rule_record_type", 
            "get_rule_search_record_types", 
            "supports_rule_search_record_type", 
            "get_engine_record_types", 
            "supports_engine_record_type", 
            "get_engine_search_record_types", 
            "supports_engine_search_record_type"
         ], 
         "methods": [
            {
               "name": "supports_visible_federation", 
               "doc": {
                  "headline": "Tests if any engine federation is exposed.", 
                  "body": "        Federation is exposed when a specific engine may be identified,\n        selected and used to create a lookup or admin session.\n        Federation is not exposed when a set of engines appears as a\n        single engine."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if visible federation is supproted,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if visible federation is supproted, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rules", 
               "doc": {
                  "headline": "Tests if rule evaluation is supported.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule evaluation is supported,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule evaluation is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_lookup", 
               "doc": {
                  "headline": "Tests for the availability of a rule lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_query", 
               "doc": {
                  "headline": "Tests if querying rules is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_search", 
               "doc": {
                  "headline": "Tests if searching for rules is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_admin", 
               "doc": {
                  "headline": "Tests if managing rules is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule admin is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule admin is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_notification", 
               "doc": {
                  "headline": "Tests if rule notification is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule notification is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_engine", 
               "doc": {
                  "headline": "Tests if rule cataloging is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule cataloging is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule cataloging is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_engine_assignment", 
               "doc": {
                  "headline": "Tests if a rule cataloging assignment service is supported.", 
                  "body": "        A rule cataloging service maps rules to engines."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule cataloging is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule cataloging is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_smart_engine", 
               "doc": {
                  "headline": "Tests if rule smart engines is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if rule smart engines is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if rule smart engines is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_lookup", 
               "doc": {
                  "headline": "Tests for the availability of an engine lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine lookup is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine lookup is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_query", 
               "doc": {
                  "headline": "Tests for the availability of an engine query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_search", 
               "doc": {
                  "headline": "Tests if searching for engines is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine search is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine search is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_admin", 
               "doc": {
                  "headline": "Tests for the availability of a engine administrative service for creating and deleting engines.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine administration is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine administration is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_notification", 
               "doc": {
                  "headline": "Tests for the availability of an engine notification service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine notification is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine notification is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_hierarchy", 
               "doc": {
                  "headline": "Tests for the availability of an engine hierarchy traversal service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine hierarchy traversal is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine hierarchy traversal is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_hierarchy_design", 
               "doc": {
                  "headline": "Tests for the availability of an engine hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if engine hierarchy design is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if engine hierarchy design is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "supports_rules_check", 
               "doc": {
                  "headline": "Tests for the availability of a rules check service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rules check service is\n                available, ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rules check service is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented in all providers.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rule_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Rule`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                rule record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported rule record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Rule`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): a ``Type`` indicating\n                a ``Rule`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param rule_record_type: a ``Type`` indicating a ``Rule`` record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_record_types", 
               "doc": {
                  "headline": "Gets the supported rule search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                rule search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported rule search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_search_record_type", 
               "doc": {
                  "headline": "Tests if the given rule search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_search_record_type (osid.type.Type): a ``Type``\n                indicating a rule record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``rule_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param rule_search_record_type: a ``Type`` indicating a rule record type\n        :type rule_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_record_types", 
               "doc": {
                  "headline": "Gets the supported ``Engine`` record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                engine record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported engine record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_record_type", 
               "doc": {
                  "headline": "Tests if the given ``Engine`` record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): a ``Type``\n                indicating an ``Engine`` record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param engine_record_type: a ``Type`` indicating an ``Engine`` record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_search_record_types", 
               "doc": {
                  "headline": "Gets the supported engine search record types.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.type.TypeList) - a list containing the supported\n                engine search record types", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list containing the supported engine search record types\n        :rtype: ``osid.type.TypeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.type.TypeList", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_search_record_type", 
               "doc": {
                  "headline": "Tests if the given engine search record type is supported.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_search_record_type (osid.type.Type): a ``Type``\n                indicating an engine record type\n", 
               "return_doc": "        return: (boolean) - ``true`` if the given ``Type`` is supported,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``engine_search_record_type`` is ``null``", 
               "sphinx_param_doc": "        :param engine_search_record_type: a ``Type`` indicating an engine record type\n        :type engine_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the given ``Type`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_search_record_type`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RulesManager", 
         "shortname": "RulesManager", 
         "category": "managers", 
         "doc": {
            "headline": "The rules manager provides access to rules sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    The sessions included in this manager are:\n\n      * ``RulesSession:`` a session for evaluating and executing rules\n      * ``RuleLookupSession:`` a session to lookup rules\n      * ``RuleSearchSession:`` a session to query rules\n      * ``RuleSearchSession:`` a session to search rules\n      * ``RuleAdminSession:`` a session to manage rules\n      * ``RuleNotificationSession:`` a session to subscribe to\n        notifications of new rules\n      * ``RuleEngineSession`` a session to retrieve rule engine mappings\n      * ``RuleEngineAssignmentSession`` a session to manage rule engine\n        mappings\n      * ``RuleSmartEngineSession`` a session to manage dynamic engines\n      * ``EngineLookupSession:`` a session to retrieve engine objects\n      * ``EngineSearchSession:`` a session to query engines\n      * ``EngineSearchSession:`` a session to search for engines\n      * ``EngineAdminSession:`` a session to create, update and delete\n        engines\n      * ``EngineNotificationSession:`` a session to receive\n        notifications for changes in engines\n      * ``EngineHierarchyTraversalSession:`` a session to traverse\n        hierarchies of engines\n      * ``EngineHierarchyDesignSession:`` a session to manage\n        hierarchies of engines\n\n    \n    The rules manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidManager", 
            "osid.rules.RulesProfile"
         ], 
         "inherit_shortnames": [
            "OsidManager", 
            "RulesProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "rules"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidManager"
            }, 
            {
               "pkg_name": "rules", 
               "name": "RulesProfile"
            }
         ], 
         "method_names": [
            "get_rules_session", 
            "get_rules_session_for_engine", 
            "get_rule_lookup_session", 
            "get_rule_lookup_session_for_engine", 
            "get_rule_query_session", 
            "get_rule_query_session_for_engine", 
            "get_rule_search_session", 
            "get_rule_search_session_for_engine", 
            "get_rule_admin_session", 
            "get_rule_admin_session_for_engine", 
            "get_rule_notification_session", 
            "get_rule_notification_session_for_engine", 
            "get_rule_engine_session", 
            "get_rule_engine_assignment_session", 
            "get_rule_smart_engine_session", 
            "get_engine_lookup_session", 
            "get_engine_query_session", 
            "get_engine_search_session", 
            "get_engine_admin_session", 
            "get_engine_notification_session", 
            "get_engine_hierarchy_session", 
            "get_engine_hierarchy_design_session", 
            "get_rules_check_manager"
         ], 
         "methods": [
            {
               "name": "get_rules_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule evaluation service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RulesSession) - a ``RulesSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RulesSession``\n        :rtype: ``osid.rules.RulesSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_evaluation()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RulesSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rules_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule evaluation service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RulesSession) - a ``RulesSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RulesSession``\n        :rtype: ``osid.rules.RulesSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rules()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RulesSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleLookupSession) - a ``RuleLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_lookup()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleLookupSession``\n        :rtype: ``osid.rules.RuleLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_lookup_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule lookup service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleLookupSession) - a ``RuleLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleLookupSession``\n        :rtype: ``osid.rules.RuleLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQuerySession) - a ``RuleQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleQuerySession``\n        :rtype: ``osid.rules.RuleQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule query service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleQuerySession) - a ``RuleQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleQuerySession``\n        :rtype: ``osid.rules.RuleQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleSearchSession) - a ``RuleSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_search()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleSearchSession``\n        :rtype: ``osid.rules.RuleSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule search service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleSearchSession) - a ``RuleSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleSearchSession``\n        :rtype: ``osid.rules.RuleSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleAdminSession) - a ``RuleAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleAdminSession``\n        :rtype: ``osid.rules.RuleAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_admin_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule administrative service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleAdminSession) - a ``RuleAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleAdminSession``\n        :rtype: ``osid.rules.RuleAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_receiver (osid.rules.RuleReceiver): the receiver\n", 
               "return_doc": "        return: (osid.rules.RuleNotificationSession) - a\n                ``RuleNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``rule_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_receiver: the receiver\n        :type rule_receiver: ``osid.rules.RuleReceiver``\n", 
               "sphinx_return_doc": "        :return: a ``RuleNotificationSession``\n        :rtype: ``osid.rules.RuleNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleReceiver", 
                     "var_name": "rule_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleReceiver"
               ], 
               "return_type": "osid.rules.RuleNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_notification_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule notification service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_receiver (osid.rules.RuleReceiver): the receiver\n        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleNotificationSession) - a\n                ``RuleNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Rule`` found by the given ``Id``\n        raise:  NullArgument - ``rule_receiver`` or ``engine_id`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param rule_receiver: the receiver\n        :type rule_receiver: ``osid.rules.RuleReceiver``\n        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleNotificationSession``\n        :rtype: ``osid.rules.RuleNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Rule`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``rule_receiver`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleReceiver", 
                     "var_name": "rule_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleReceiver", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_engine_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup rule/engine mappings.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleEngineSession) - a ``RuleEngineSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_engine()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleEngineSession``\n        :rtype: ``osid.rules.RuleEngineSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_engine()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_engine()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleEngineSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_engine_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning rules to engines.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleEngineAssignmentSession) - a\n                ``RuleEngineAssignmentSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_engine_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RuleEngineAssignmentSession``\n        :rtype: ``osid.rules.RuleEngineAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_engine_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_engine_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleEngineAssignmentSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_smart_engine_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule smart engine service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleSmartEngineSession) - a\n                ``RuleSmartEngineSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_smart_engine()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: a ``RuleSmartEngineSession``\n        :rtype: ``osid.rules.RuleSmartEngineSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_smart_engine()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_smart_engine()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleSmartEngineSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineLookupSession) - an\n                ``EngineLookupSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineLookupSession``\n        :rtype: ``osid.rules.EngineLookupSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineLookupSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine query service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQuerySession) - an\n                ``EngineQuerySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineQuerySession``\n        :rtype: ``osid.rules.EngineQuerySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQuerySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine search service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineSearchSession) - an\n                ``EngineSearchSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_search()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineSearchSession``\n        :rtype: ``osid.rules.EngineSearchSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineSearchSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineAdminSession) - an\n                ``EngineAdminSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_admin()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineAdminSession``\n        :rtype: ``osid.rules.EngineAdminSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineAdminSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_receiver (osid.rules.EngineReceiver): the\n                receiver\n", 
               "return_doc": "        return: (osid.rules.EngineNotificationSession) - an\n                ``EngineNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``engine_receiver`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_receiver: the receiver\n        :type engine_receiver: ``osid.rules.EngineReceiver``\n", 
               "sphinx_return_doc": "        :return: an ``EngineNotificationSession``\n        :rtype: ``osid.rules.EngineNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_receiver`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineReceiver", 
                     "var_name": "engine_receiver", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineReceiver"
               ], 
               "return_type": "osid.rules.EngineNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineHierarchySession) - an\n                ``EngineHierarchySession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineHierarchySession``\n        :rtype: ``osid.rules.EngineHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineHierarchySession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineHierarchyDesignSession) - an\n                ``EngineierarchyDesignSession``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: an ``EngineierarchyDesignSession``\n        :rtype: ``osid.rules.EngineHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineHierarchyDesignSession", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rules_check_manager", 
               "doc": {
                  "headline": "Gets the ``RulesCheckManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.check.RulesCheckManager) - a\n                ``RulesCheckManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules_check_manager()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RulesCheckManager``\n        :rtype: ``osid.rules.check.RulesCheckManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules_check_manager()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rules_check_manager()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.check.RulesCheckManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RulesProxyManager", 
         "shortname": "RulesProxyManager", 
         "category": "managers", 
         "doc": {
            "headline": "The rules manager provides access to rules sessions and provides interoperability tests for various aspects of this service.", 
            "body": "    These methods accept a ``Proxy``. The sessions included in this\n    manager are:\n\n      * ``RulesSession:`` a session for evaluating and executing rules\n      * ``RuleLookupSession:`` a session to lookup rules\n      * ``RuleSearchSession:`` a session to query rules\n      * ``RuleSearchSession:`` a session to search rules\n      * ``RuleAdminSession:`` a session to manage rules\n      * ``RuleNotificationSession:`` a session to subscribe to\n        notifications of new rules\n      * ``RuleEngineSession`` a session to retrieve rule engine mappings\n      * ``RuleEngineAssignmentSession`` a session to manage rule engine\n        mappings\n      * ``RuleSmartEngineSession`` a session to manage dynamic engines\n      * ``EngineLookupSession:`` a session to retrieve engine objects\n      * ``EngineSearchSession:`` a session to query engines\n      * ``EngineSearchSession:`` a session to search for engines\n      * ``EngineAdminSession:`` a session to create, update and delete\n        engines\n      * ``EngineNotificationSession:`` a session to receive\n        notifications for changes in engines\n      * ``EngineHierarchyTraversalSession:`` a session to traverse\n        hierarchies of engines\n      * ``EngineHierarchyDesignSession:`` a session to manage\n        hierarchies of engines\n\n    \n    The rules manager also provides a profile for determing the\n    supported search types supported by this service."
         }, 
         "inherit_fullnames": [
            "osid.OsidProxyManager", 
            "osid.rules.RulesProfile"
         ], 
         "inherit_shortnames": [
            "OsidProxyManager", 
            "RulesProfile"
         ], 
         "inherit_pkg_names": [
            "osid", 
            "rules"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidProxyManager"
            }, 
            {
               "pkg_name": "rules", 
               "name": "RulesProfile"
            }
         ], 
         "method_names": [
            "get_rules_session", 
            "get_rules_session_for_engine", 
            "get_rule_lookup_session", 
            "get_rule_lookup_session_for_engine", 
            "get_rule_query_session", 
            "get_rule_query_session_for_engine", 
            "get_rule_search_session", 
            "get_rule_search_session_for_engine", 
            "get_rule_admin_session", 
            "get_rule_admin_session_for_engine", 
            "get_rule_notification_session", 
            "get_rule_notification_session_for_engine", 
            "get_rule_engine_session", 
            "get_rule_engine_assignment_session", 
            "get_rule_smart_engine_session", 
            "get_engine_lookup_session", 
            "get_engine_query_session", 
            "get_engine_search_session", 
            "get_engine_admin_session", 
            "get_engine_notification_session", 
            "get_engine_hierarchy_session", 
            "get_engine_hierarchy_design_session", 
            "get_rules_check_proxy_manager"
         ], 
         "methods": [
            {
               "name": "get_rules_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule evaluation service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RulesSession) - a ``RulesSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RulesSession``\n        :rtype: ``osid.rules.RulesSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rules()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RulesSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rules_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule evaluation service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RulesSession) - a ``RulesSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RulesSession``\n        :rtype: ``osid.rules.RulesSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rules()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RulesSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleLookupSession) - a ``RuleLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_lookup()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleLookupSession``\n        :rtype: ``osid.rules.RuleLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_lookup_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule lookup service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleLookupSession) - a ``RuleLookupSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_lookup()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleLookupSession``\n        :rtype: ``osid.rules.RuleLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_lookup()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_lookup()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleLookupSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleQuerySession) - a ``RuleQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleQuerySession``\n        :rtype: ``osid.rules.RuleQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule query service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleQuerySession) - a ``RuleQuerySession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engine_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_query()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleQuerySession``\n        :rtype: ``osid.rules.RuleQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engine_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_query()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_query()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleQuerySession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleSearchSession) - a ``RuleSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_search()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleSearchSession``\n        :rtype: ``osid.rules.RuleSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule search service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleSearchSession) - a ``RuleSearchSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engind_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_search()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleSearchSession``\n        :rtype: ``osid.rules.RuleSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engind_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_search()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_search()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleSearchSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule administration service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleAdminSession) - a ``RuleAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleAdminSession``\n        :rtype: ``osid.rules.RuleAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_admin_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule administration service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Rule``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleAdminSession) - a ``RuleAdminSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engind_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_admin()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Rule``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleAdminSession``\n        :rtype: ``osid.rules.RuleAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engind_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_admin()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_admin()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleAdminSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_receiver (osid.rules.RuleReceiver): the receiver\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleNotificationSession) - a\n                ``RuleNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``rule_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_receiver: the receiver\n        :type rule_receiver: ``osid.rules.RuleReceiver``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleNotificationSession``\n        :rtype: ``osid.rules.RuleNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleReceiver", 
                     "var_name": "rule_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_notification_session_for_engine", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule notification service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_receiver (osid.rules.RuleReceiver): the receiver\n        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleNotificationSession) - a\n                ``RuleNotificationSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``rule_receiver, engine_id`` or ``proxy``\n                is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_notification()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param rule_receiver: the receiver\n        :type rule_receiver: ``osid.rules.RuleReceiver``\n        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleNotificationSession``\n        :rtype: ``osid.rules.RuleNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``rule_receiver, engine_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_notification()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_notification()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleReceiver", 
                     "var_name": "rule_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleReceiver", 
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleNotificationSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_engine_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` to lookup rule/engine mappings.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleEngineSession) - a ``RuleEngineSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_engine()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleEngineSession``\n        :rtype: ``osid.rules.RuleEngineSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_engine()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_engine()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleEngineSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_engine_assignment_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with assigning rules to engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleEngineAssignmentSession) - a\n                ``RuleEngineAssignmentSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_engine_assignment()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleEngineAssignmentSession``\n        :rtype: ``osid.rules.RuleEngineAssignmentSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_engine_assignment()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_engine_assignment()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleEngineAssignmentSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_smart_engine_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the rule smart engine service for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Rule``\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.RuleSmartEngineSession) - a\n                ``RuleSmartEngineSession``", 
               "error_doc": "        raise:  NotFound - no ``Engine`` found by the given ``Id``\n        raise:  NullArgument - ``engind_id`` or ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rule_smart_engine()`` or\n                ``supports_visible_federation()`` is ``false``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Rule``\n        :type engine_id: ``osid.id.Id``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: a ``RuleSmartEngineSession``\n        :rtype: ``osid.rules.RuleSmartEngineSession``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Engine`` found by the given ``Id``\n        :raise: ``NullArgument`` -- ``engind_id`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rule_smart_engine()`` or ``supports_visible_federation()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_smart_engine()`` and ``supports_visible_federation()`` are ``true``*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.RuleSmartEngineSession", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_lookup_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine lookup service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineLookupSession) - an\n                ``EngineLookupSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_lookup()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineLookupSession``\n        :rtype: ``osid.rules.EngineLookupSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_lookup()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_lookup()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineLookupSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_query_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine query service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineQuerySession) - an\n                ``EngineQuerySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_query()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineQuerySession``\n        :rtype: ``osid.rules.EngineQuerySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineQuerySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_search_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine search service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineSearchSession) - an\n                ``EngineSearchSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_search()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineSearchSession``\n        :rtype: ``osid.rules.EngineSearchSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_search()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_search()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineSearchSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_admin_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine administrative service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineAdminSession) - an\n                ``EngineAdminSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_admin()`` is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineAdminSession``\n        :rtype: ``osid.rules.EngineAdminSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_admin()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_admin()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineAdminSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_notification_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine notification service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_receiver (osid.rules.EngineReceiver): the\n                receiver\n        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineNotificationSession) - an\n                ``EngineNotificationSession``", 
               "error_doc": "        raise:  NullArgument - ``engine_receiver`` or ``proxy`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_notification()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_receiver: the receiver\n        :type engine_receiver: ``osid.rules.EngineReceiver``\n        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineNotificationSession``\n        :rtype: ``osid.rules.EngineNotificationSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_receiver`` or ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_notification()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_notification()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineReceiver", 
                     "var_name": "engine_receiver", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineReceiver", 
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineNotificationSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_hierarchy_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine hierarchy service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineHierarchySession) - an\n                ``EngineHierarchySession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_hierarchy()`` is\n                ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineHierarchySession``\n        :rtype: ``osid.rules.EngineHierarchySession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_hierarchy()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_hierarchy()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineHierarchySession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_hierarchy_design_session", 
               "doc": {
                  "headline": "Gets the ``OsidSession`` associated with the engine hierarchy design service.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    proxy (osid.proxy.Proxy): the proxy\n", 
               "return_doc": "        return: (osid.rules.EngineHierarchyDesignSession) - an\n                ``EngineHierarchyDesignSession``", 
               "error_doc": "        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_engine_hierarchy_design()``\n                is ``false``", 
               "sphinx_param_doc": "        :param proxy: the proxy\n        :type proxy: ``osid.proxy.Proxy``\n", 
               "sphinx_return_doc": "        :return: an ``EngineHierarchyDesignSession``\n        :rtype: ``osid.rules.EngineHierarchyDesignSession``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``proxy`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_engine_hierarchy_design()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_hierarchy_design()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.proxy.Proxy", 
                     "var_name": "proxy", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.proxy.Proxy"
               ], 
               "return_type": "osid.rules.EngineHierarchyDesignSession", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rules_check_proxy_manager", 
               "doc": {
                  "headline": "Gets the ``RulesCheckProxyManager``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.check.RulesCheckProxyManager) - a\n                ``RulesCheckProxyManager``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_rules_check_manager()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a ``RulesCheckProxyManager``\n        :rtype: ``osid.rules.check.RulesCheckProxyManager``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unimplemented`` -- ``supports_rules_check_manager()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rules_check_manager()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.check.RulesCheckProxyManager", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RulesSession", 
         "shortname": "RulesSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to evaluate and execute rules.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "can_evaluate_rules", 
            "get_condition_for_rule", 
            "evaluate_rule", 
            "execute_rule"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the engine", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_evaluate_rules", 
               "doc": {
                  "headline": "Tests if this user can evaluate rules.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer these\n        operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if evaluation methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if evaluation methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_condition_for_rule", 
               "doc": {
                  "headline": "Gets a condition for the given rule.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of a ``Rule``\n", 
               "return_doc": "        return: (osid.rules.Condition) - the returned ``Condition``", 
               "error_doc": "        raise:  NotFound - no ``Rule`` found with the given ``Id``\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of a ``Rule``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Condition``\n        :rtype: ``osid.rules.Condition``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- no ``Rule`` found with the given ``Id``\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.Condition", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "evaluate_rule", 
               "doc": {
                  "headline": "Evaluates a rule based on an input condition.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): a rule ``Id``\n        arg:    condition (osid.rules.Condition): input conditions\n", 
               "return_doc": "        return: (boolean) - result of the evaluation", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``rule_id`` or ``condition`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``condition`` not of this service", 
               "sphinx_param_doc": "        :param rule_id: a rule ``Id``\n        :type rule_id: ``osid.id.Id``\n        :param condition: input conditions\n        :type condition: ``osid.rules.Condition``\n", 
               "sphinx_return_doc": "        :return: result of the evaluation\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``rule_id`` or ``condition`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``condition`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.rules.Condition", 
                     "var_name": "condition", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.rules.Condition"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "execute_rule", 
               "doc": {
                  "headline": "Executes a rule based on an input condition and returns a result.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): a rule ``Id``\n        arg:    condition (osid.rules.Condition): input conditions\n", 
               "return_doc": "        return: (osid.rules.Result) - result of the execution", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``rule_id`` or ``condition`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``condition`` not of this service", 
               "sphinx_param_doc": "        :param rule_id: a rule ``Id``\n        :type rule_id: ``osid.id.Id``\n        :param condition: input conditions\n        :type condition: ``osid.rules.Condition``\n", 
               "sphinx_return_doc": "        :return: result of the execution\n        :rtype: ``osid.rules.Result``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``rule_id`` or ``condition`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``condition`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.rules.Condition", 
                     "var_name": "condition", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.rules.Condition"
               ], 
               "return_type": "osid.rules.Result", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleLookupSession", 
         "shortname": "RuleLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Rule`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "can_lookup_rules", 
            "use_comparative_rule_view", 
            "use_plenary_rule_view", 
            "use_federated_engine_view", 
            "use_isolated_engine_view", 
            "use_active_rule_view", 
            "use_any_status_rule_view", 
            "get_rule", 
            "get_rules_by_ids", 
            "get_rules_by_genus_type", 
            "get_rules_by_parent_genus_type", 
            "get_rules_by_record_type", 
            "get_rules"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the engine", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_lookup_rules", 
               "doc": {
                  "headline": "Tests if this user can perform ``Rule`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer lookup\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_rule_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_rule_view", 
               "doc": {
                  "headline": "A complete view of the ``Rule`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_federated_engine_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include rules in engines which are\n        children of this engine in the engine hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_engine_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this engine only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_active_rule_view", 
               "doc": {
                  "headline": "Only active rules are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_any_status_rule_view", 
               "doc": {
                  "headline": "All active and inactive rules are returned by methods in this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_rule", 
               "doc": {
                  "headline": "Gets the ``Rule`` specified by its ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): ``Id`` of the ``Rule``\n", 
               "return_doc": "        return: (osid.rules.Rule) - the rule", 
               "error_doc": "        raise:  NotFound - ``rule_id`` not found\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: ``Id`` of the ``Rule``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the rule\n        :rtype: ``osid.rules.Rule``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``rule_id`` not found\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.Rule", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_ids", 
               "doc": {
                  "headline": "Gets a ``RuleList`` corresponding to the given ``IdList``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.rules.RuleList) - the returned ``Rule`` list", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``rule_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_ids: the list of ``Ids`` to retrieve\n        :type rule_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Rule`` list\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``rule_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "rule_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_genus_type", 
               "doc": {
                  "headline": "Gets a ``RuleList`` corresponding to the given rule genus ``Type`` which does not include rules of genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_genus_type (osid.type.Type): a rule genus type\n", 
               "return_doc": "        return: (osid.rules.RuleList) - the returned ``Rule`` list", 
               "error_doc": "        raise:  NullArgument - ``rule_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_genus_type: a rule genus type\n        :type rule_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Rule`` list\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets a ``RuleList`` corresponding to the given rule genus ``Type`` and include any additional rules with genus types derived from the specified ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_genus_type (osid.type.Type): a rule genus type\n", 
               "return_doc": "        return: (osid.rules.RuleList) - the returned ``Rule`` list", 
               "error_doc": "        raise:  NullArgument - ``rule_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_genus_type: a rule genus type\n        :type rule_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Rule`` list\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_record_type", 
               "doc": {
                  "headline": "Gets a ``RuleList`` containing the given repository record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): a rule record type\n", 
               "return_doc": "        return: (osid.rules.RuleList) - the returned ``Rule`` list", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_record_type: a rule record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Rule`` list\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules", 
               "doc": {
                  "headline": "Gets all ``Rules``.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleList) - a list of ``Rules``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Rules``\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleQuerySession", 
         "shortname": "RuleQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Rule`` objects.", 
            "body": "    The search query is constructed using the ``RuleQuery``. The rule\n    record ``Type`` also specifies the record for the rule query.\n\n    Rules may have a rule query record indicated by their respective\n    record types. The rule query record is accessed via the\n    ``RuleQuery``. The returns in this session may not be cast directly\n    to these interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "use_federated_engine_view", 
            "use_isolated_engine_view", 
            "can_search_rules", 
            "get_rule_query", 
            "get_rules_by_query"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the engine", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "use_federated_engine_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include rules in engines which are\n        children of this engine in the engine hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_engine_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts retrievals to this engine only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "can_search_rules", 
               "doc": {
                  "headline": "Tests if this user can perform ``Rule`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rule_query", 
               "doc": {
                  "headline": "Gets a rule query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQuery) - the rule query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule query\n        :rtype: ``osid.rules.RuleQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQuery", 
               "errors": {}
            }, 
            {
               "name": "get_rules_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Rules`` matching the given rule query.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_query (osid.rules.RuleQuery): the rule query\n", 
               "return_doc": "        return: (osid.rules.RuleList) - the returned ``RuleList``", 
               "error_doc": "        raise:  NullArgument - ``rule_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``rule_query`` is not of this service", 
               "sphinx_param_doc": "        :param rule_query: the rule query\n        :type rule_query: ``osid.rules.RuleQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``RuleList``\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``rule_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleQuery", 
                     "var_name": "rule_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleQuery"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleSearchSession", 
         "shortname": "RuleSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Rule`` objects.", 
            "body": "    The search query is constructed using the ``RuleQuery``. The rule\n    record ``Type`` also specifies the record for the rule query.\n\n    ``get_rules_by_query()`` is the basic search method and returns a\n    list of ``Rule`` elements. A more advanced search may be performed\n    with ``getRulesBySearch()``. It accepts a ``RuleSearch`` in addition\n    to the query for the purpose of specifying additional options\n    affecting the entire search, such as ordering.\n    ``get_rules_by_search()`` returns a ``RuleSearchResults`` that can\n    be used to access the resulting ``RuleList`` or be used to perform a\n    search within the result set through ``RuleSearch``.\n    \n    Rules may have a query record indicated by their respective record\n    types. The rule query record is accessed via the ``RuleQuery``. The\n    returns in this session may not be cast directly to these\n    interfaces."
         }, 
         "inherit_fullnames": [
            "osid.rules.RuleQuerySession"
         ], 
         "inherit_shortnames": [
            "RuleQuerySession"
         ], 
         "inherit_pkg_names": [
            "rules"
         ], 
         "inheritance": [
            {
               "pkg_name": "rules", 
               "name": "RuleQuerySession"
            }
         ], 
         "method_names": [
            "get_rule_search", 
            "get_rule_search_order", 
            "get_rules_by_search", 
            "get_rule_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_rule_search", 
               "doc": {
                  "headline": "Gets a rule search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleSearch) - the rule search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule search\n        :rtype: ``osid.rules.RuleSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleSearch", 
               "errors": {}
            }, 
            {
               "name": "get_rule_search_order", 
               "doc": {
                  "headline": "Gets a rule search order.", 
                  "body": "        The ``RuleSearchOrder`` is supplied to a ``RuleSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleSearchOrder) - the rule search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule search order\n        :rtype: ``osid.rules.RuleSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_rules_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_query (osid.rules.RuleQuery): the rule query\n        arg:    rule_search (osid.rules.RuleSearch): the rule search\n", 
               "return_doc": "        return: (osid.rules.RuleSearchResults) - the search results", 
               "error_doc": "        raise:  NullArgument - ``rule_query`` or ``rule_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``rule_query`` or ``rule_search`` is not\n                of this service", 
               "sphinx_param_doc": "        :param rule_query: the rule query\n        :type rule_query: ``osid.rules.RuleQuery``\n        :param rule_search: the rule search\n        :type rule_search: ``osid.rules.RuleSearch``\n", 
               "sphinx_return_doc": "        :return: the search results\n        :rtype: ``osid.rules.RuleSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_query`` or ``rule_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``rule_query`` or ``rule_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleQuery", 
                     "var_name": "rule_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.rules.RuleSearch", 
                     "var_name": "rule_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleQuery", 
                  "osid.rules.RuleSearch"
               ], 
               "return_type": "osid.rules.RuleSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_from_inspector", 
               "doc": {
                  "headline": "Gets a rule query from an inspector.", 
                  "body": "        The inspector is available from a ``RuleSearchResults``."
               }, 
               "arg_doc": "        arg:    rule_query_inspector (osid.rules.RuleQueryInspector): a\n                rule query inspector\n", 
               "return_doc": "        return: (osid.rules.RuleQuery) - the rule query", 
               "error_doc": "        raise:  NullArgument - ``rule_query_inspector`` is ``null``\n        raise:  Unsupported - ``rule_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param rule_query_inspector: a rule query inspector\n        :type rule_query_inspector: ``osid.rules.RuleQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the rule query\n        :rtype: ``osid.rules.RuleQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``rule_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleQueryInspector", 
                     "var_name": "rule_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleQueryInspector"
               ], 
               "return_type": "osid.rules.RuleQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleAdminSession", 
         "shortname": "RuleAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Rules``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create a\n    ``Rule,`` a ``RuleForm`` is requested using\n    ``get_rule_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``RuleForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``RuleForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``RuleForm`` corresponds\n    to an attempted transaction.\n    \n    For updates, ``RuleForms`` are requested to the ``Rule``  ``Id``\n    that is to be updated using ``getRuleFormForUpdate()``. Similarly,\n    the ``RuleForm`` has metadata about the data that can be updated and\n    it can perform validation before submitting the update. The\n    ``RuleForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Rules``. To unmap a ``Rule`` from the\n    current ``Engine,`` the ``RuleEngineAssignmentSession`` should be\n    used. These delete operations attempt to remove the ``Rule`` itself\n    thus removing it from all known ``Engine`` catalogs.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "can_create_rules", 
            "can_create_rule_with_record_types", 
            "get_rule_form_for_create", 
            "create_rule", 
            "can_update_rules", 
            "get_rule_form_for_update", 
            "update_rule", 
            "can_delete_rules", 
            "delete_rule", 
            "can_manage_rule_aliases", 
            "alias_rule"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the ``Engine`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine`` associated with this session\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_create_rules", 
               "doc": {
                  "headline": "Tests if this user can create ``Rules``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating a ``Rule``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer create\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Rule`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Rule`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_rule_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Rule`` using the desired record types.", 
                  "body": "        While ``RulesManager.getRuleRecordTypes()`` can be used to\n        examine which records are supported, this method tests which\n        record(s) are required for creating a specific ``Rule``.\n        Providing an empty array tests if a ``Rule`` can be created with\n        no records."
               }, 
               "arg_doc": "        arg:    rule_record_types (osid.type.Type[]): array of rule\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Rule`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``rule_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param rule_record_types: array of rule record types\n        :type rule_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Rule`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "rule_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_form_for_create", 
               "doc": {
                  "headline": "Gets the rule form for creating new rules.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    rule_record_types (osid.type.Type[]): array of rule\n                record types\n", 
               "return_doc": "        return: (osid.rules.RuleForm) - the rule form", 
               "error_doc": "        raise:  NullArgument - ``rule_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param rule_record_types: array of rule record types\n        :type rule_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the rule form\n        :rtype: ``osid.rules.RuleForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "rule_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.rules.RuleForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_rule", 
               "doc": {
                  "headline": "Creates a new ``Rule``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_form (osid.rules.RuleForm): the form for this\n                ``Rule``\n", 
               "return_doc": "        return: (osid.rules.Rule) - the new ``Rule``", 
               "error_doc": "        raise:  IllegalState - ``rule_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``rule_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``rule_form`` did not originate from\n                ``get_rule_form_for_create()``", 
               "sphinx_param_doc": "        :param rule_form: the form for this ``Rule``\n        :type rule_form: ``osid.rules.RuleForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Rule``\n        :rtype: ``osid.rules.Rule``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``rule_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``rule_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``rule_form`` did not originate from ``get_rule_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleForm", 
                     "var_name": "rule_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleForm"
               ], 
               "return_type": "osid.rules.Rule", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_rules", 
               "doc": {
                  "headline": "Tests if this user can update ``Rules``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating a ``Rule``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer update\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if rule modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if rule modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rule_form_for_update", 
               "doc": {
                  "headline": "Gets the rule form for updating an existing rule.", 
                  "body": "        A new rule form should be requested for each update transaction."
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule``\n", 
               "return_doc": "        return: (osid.rules.RuleForm) - the rule form", 
               "error_doc": "        raise:  NotFound - ``rule_id`` is not found\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the rule form\n        :rtype: ``osid.rules.RuleForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``rule_id`` is not found\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_rule", 
               "doc": {
                  "headline": "Updates an existing rule.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_form (osid.rules.RuleForm): the form containing the\n                elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``rule_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``rule_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``rule_form`` did not originate from\n                ``get_rule_form_for_update()``", 
               "sphinx_param_doc": "        :param rule_form: the form containing the elements to be updated\n        :type rule_form: ``osid.rules.RuleForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``rule_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``rule_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``rule_form`` did not originate from ``get_rule_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleForm", 
                     "var_name": "rule_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_rules", 
               "doc": {
                  "headline": "Tests if this user can delete ``Rules``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting a ``Rule``\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer delete\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Rule`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Rule`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_rule", 
               "doc": {
                  "headline": "Deletes the ``Rule`` identified by the given ``Id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule`` to\n                delete\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - a ``Rule`` was not found identified by the\n                given ``Id``\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule`` to delete\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- a ``Rule`` was not found identified by the given ``Id``\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_rule_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Rules``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Rule`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Rule`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_rule", 
               "doc": {
                  "headline": "Adds an ``Id`` to a ``Rule`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Rule`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another rule, it is\n        reassigned to the given rule ``Id``."
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of a ``Rule``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``rule_id`` not found\n        raise:  NullArgument - ``rule_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of a ``Rule``\n        :type rule_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``rule_id`` not found\n        :raise: ``NullArgument`` -- ``rule_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleNotificationSession", 
         "shortname": "RuleNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Rule`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "can_register_for_rule_notifications", 
            "use_federated_engine_view", 
            "use_isolated_engine_view", 
            "register_for_new_rules", 
            "register_for_changed_rules", 
            "register_for_changed_rule", 
            "register_for_deleted_rules", 
            "register_for_deleted_rule"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the ``Engine`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine`` associated with this session\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_register_for_rule_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Rule`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_federated_engine_view", 
               "doc": {
                  "headline": "Federates the view for methods in this session.", 
                  "body": "        A federated view will include notifications for rules in engines\n        which are children of this engine in the engine hierarchy."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_isolated_engine_view", 
               "doc": {
                  "headline": "Isolates the view for methods in this session.", 
                  "body": "        An isolated view restricts notifications to this engine only."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_rules", 
               "doc": {
                  "headline": "Register for notifications of new rules.", 
                  "body": "        ``RuleReceiver.newRule()`` is invoked when a new ``Rule`` is\n        created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_rules", 
               "doc": {
                  "headline": "Registers for notification of updated rules.", 
                  "body": "        ``RuleReceiver.changedRule()`` is invoked when a rule is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_rule", 
               "doc": {
                  "headline": "Registers for notification of an updated rule.", 
                  "body": "        ``RuleReceiver.changedRule()`` is invoked when the specified\n        rule is changed."
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule`` to monitor\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_rules", 
               "doc": {
                  "headline": "Registers for notification of deleted rules.", 
                  "body": "        ``RuleReceiver.deletedRule()`` is invoked when a rule is removed\n        from this engine."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_rule", 
               "doc": {
                  "headline": "Registers for notification of a deleted rule.", 
                  "body": "        ``RuleReceiver.deletedRule()`` is invoked when the specified\n        rule is removed from this engine."
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule`` to monitor\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleEngineSession", 
         "shortname": "RuleEngineSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to retrieve ``Rule`` to ``Engine`` mappings.", 
            "body": "    A ``Rule`` may appear in multiple ``Engine`` objects. Each engine\n    may have its own authorizations governing who is allowed to look at\n    it.\n\n    This lookup session defines several views:\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete result set or is an error\n        condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_rule_engine_mappings", 
            "use_comparative_rule_view", 
            "use_plenary_rule_view", 
            "get_rule_ids_by_engine", 
            "get_rules_by_engine", 
            "get_rule_ids_by_engines", 
            "get_rules_by_engines", 
            "get_engine_ids_by_rule", 
            "get_engines_by_rule"
         ], 
         "methods": [
            {
               "name": "can_lookup_rule_engine_mappings", 
               "doc": {
                  "headline": "Tests if this user can perform lookups of rule/engine mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known lookup methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        lookup operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if looking up mappings is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if looking up mappings is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_rule_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_rule_view", 
               "doc": {
                  "headline": "A complete view of the ``Rule`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_rule_ids_by_engine", 
               "doc": {
                  "headline": "Gets the list of ``Rule Ids`` associated with an ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of related rule ``Ids``", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related rule ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_engine", 
               "doc": {
                  "headline": "Gets the list of ``Rules`` associated with an ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.rules.RuleList) - list of related rules", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of related rules\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rule_ids_by_engines", 
               "doc": {
                  "headline": "Gets the list of ``Rule Ids`` corresponding to a list of ``Engine`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_ids (osid.id.IdList): list of engine ``Ids``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of rule ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``engine_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_ids: list of engine ``Ids``\n        :type engine_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of rule ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "engine_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_rules_by_engines", 
               "doc": {
                  "headline": "Gets the list of ``Rules`` corresponding to a list of ``Engine`` objects.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_ids (osid.id.IdList): list of engine ``Ids``\n", 
               "return_doc": "        return: (osid.rules.RuleList) - list of rules", 
               "error_doc": "        raise:  NullArgument - ``engine_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_ids: list of engine ``Ids``\n        :type engine_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: list of rules\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "engine_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engine_ids_by_rule", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Ids`` mapped to a ``Rule``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): ``Id`` of a ``Rule``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of engines", 
               "error_doc": "        raise:  NotFound - ``rule_id`` is not found\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: ``Id`` of a ``Rule``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of engines\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``rule_id`` is not found\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_rule", 
               "doc": {
                  "headline": "Gets the ``Engine`` objects mapped to a ``Rule``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): ``Id`` of a ``Rule``\n", 
               "return_doc": "        return: (osid.rules.EngineList) - list of engines", 
               "error_doc": "        raise:  NotFound - ``rule_id`` is not found\n        raise:  NullArgument - ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: ``Id`` of a ``Rule``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of engines\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``rule_id`` is not found\n        :raise: ``NullArgument`` -- ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleEngineAssignmentSession", 
         "shortname": "RuleEngineAssignmentSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods to re-assign ``TerRulesms`` to ``Engine`` objects A ``Rule`` may appear in multiple ``Engine`` objects and removing the last reference to a ``Rule`` is the equivalent of deleting it.", 
            "body": "    Each ``Rule`` may have its own authorizations governing who is\n    allowed to operate on it.\n\n    Adding a reference of a ``Rule`` to another ``Engine`` is not a copy\n    operation (eg: does not change its ``Id`` )."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_assign_rules", 
            "can_assign_rules_to_engine", 
            "get_assignable_engine_ids", 
            "get_assignable_engine_ids_for_rule", 
            "assign_rule_to_engine", 
            "unassign_rule_from_engine"
         ], 
         "methods": [
            {
               "name": "can_assign_rules", 
               "doc": {
                  "headline": "Tests if this user can alter rule/engine mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_assign_rules_to_engine", 
               "doc": {
                  "headline": "Tests if this user can alter rule/engine mappings.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known mapping methods in\n        this session will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may opt not to offer\n        assignment operations to unauthorized users."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (boolean) - ``false`` if mapping is not authorized,\n                ``true`` otherwise", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``false`` if mapping is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_assignable_engine_ids", 
               "doc": {
                  "headline": "Gets a list of engines including and under the given engine node in which any rule can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable rule ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable rule ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_assignable_engine_ids_for_rule", 
               "doc": {
                  "headline": "Gets a list of engines including and under the given engine node in which a specific rule can be assigned.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.id.IdList) - list of assignable engine ``Ids``", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` or ``rule_id`` is ``null``\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param rule_id: the ``Id`` of the ``Engine``\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: list of assignable engine ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` or ``rule_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "assign_rule_to_engine", 
               "doc": {
                  "headline": "Adds an existing ``Rule`` to an ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule``\n        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``rule_id`` is already assigned to\n                ``engine_id``\n        raise:  NotFound - ``rule_id`` or ``engine_id`` not found\n        raise:  NullArgument - ``rule_id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule``\n        :type rule_id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``rule_id`` is already assigned to ``engine_id``\n        :raise: ``NotFound`` -- ``rule_id`` or ``engine_id`` not found\n        :raise: ``NullArgument`` -- ``rule_id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "unassign_rule_from_engine", 
               "doc": {
                  "headline": "Removes a ``Rule`` from an ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the ``Rule``\n        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``rule_id`` or ``engine_id`` not found or\n                ``rule_id`` not assigned to ``engine_id``\n        raise:  NullArgument - ``rule_id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the ``Rule``\n        :type rule_id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``rule_id`` or ``engine_id`` not found or ``rule_id`` not assigned to ``engine_id``\n        :raise: ``NullArgument`` -- ``rule_id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleSmartEngineSession", 
         "shortname": "RuleSmartEngineSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages queries and sequencing to create \"smart\" dynamic catalogs.", 
            "body": "    A ``RuleQuery`` can be retrieved from this session and mapped to\n    this ``Engine`` to create a virtual collection of ``Rules``. The\n    rules may be sequenced using the ``RuleSearchOrder`` from this\n    session.\n\n    This ``Engine`` has a default query that matches any rule and a\n    default search order that specifies no sequencing. The queries may\n    be examined using a ``RuleQueryInspector``. The query may be\n    modified by converting the inspector back to a ``RuleQuery``."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_id", 
            "get_engine", 
            "can_manage_smart_engines", 
            "get_rule_query", 
            "get_rule_search_order", 
            "apply_rule_query", 
            "inspect_rule_query", 
            "apply_rule_sequencing", 
            "get_rule_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_engine_id", 
               "doc": {
                  "headline": "Gets the ``Engine``  ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the ``Engine Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the ``Engine`` associated with\n                this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the ``Engine`` associated with this session\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_smart_engines", 
               "doc": {
                  "headline": "Tests if this user can manage smart engines.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if smart engine management is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if smart engine management is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rule_query", 
               "doc": {
                  "headline": "Gets a rule query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQuery) - the rule query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule query\n        :rtype: ``osid.rules.RuleQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQuery", 
               "errors": {}
            }, 
            {
               "name": "get_rule_search_order", 
               "doc": {
                  "headline": "Gets a rule search order.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleSearchOrder) - the rule search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule search order\n        :rtype: ``osid.rules.RuleSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "apply_rule_query", 
               "doc": {
                  "headline": "Applies a rule query to this engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_query (osid.rules.RuleQuery): the rule query\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``rule_query`` not of this service", 
               "sphinx_param_doc": "        :param rule_query: the rule query\n        :type rule_query: ``osid.rules.RuleQuery``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``rule_query`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleQuery", 
                     "var_name": "rule_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleQuery"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "inspect_rule_query", 
               "doc": {
                  "headline": "Gets a rule query inspector for this engine.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQueryInspector) - the rule query\n                inspector", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule query inspector\n        :rtype: ``osid.rules.RuleQueryInspector``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQueryInspector", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "apply_rule_sequencing", 
               "doc": {
                  "headline": "Applies a rule search order to this engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_search_order (osid.rules.RuleSearchOrder): the rule\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_search_order`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        raise:  Unsupported - ``rule_search_order`` not of this service", 
               "sphinx_param_doc": "        :param rule_search_order: the rule search order\n        :type rule_search_order: ``osid.rules.RuleSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_search_order`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure occurred\n        :raise: ``Unsupported`` -- ``rule_search_order`` not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleSearchOrder", 
                     "var_name": "rule_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_from_inspector", 
               "doc": {
                  "headline": "Gets a rule query from an inspector.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_query_inspector (osid.rules.RuleQueryInspector): a\n                rule query inspector\n", 
               "return_doc": "        return: (osid.rules.RuleQuery) - the rule query", 
               "error_doc": "        raise:  NullArgument - ``rule_query_inspector`` is ``null``\n        raise:  Unsupported - ``rule_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param rule_query_inspector: a rule query inspector\n        :type rule_query_inspector: ``osid.rules.RuleQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the rule query\n        :rtype: ``osid.rules.RuleQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``rule_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleQueryInspector", 
                     "var_name": "rule_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleQueryInspector"
               ], 
               "return_type": "osid.rules.RuleQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineLookupSession", 
         "shortname": "EngineLookupSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for retrieving ``Engine`` objects.", 
            "body": "    The ``Engine`` represents a collection of rules.\n\n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: elements may be silently omitted or re-ordered\n      * plenary view: provides a complete set or is an error condition\n\n    \n    Generally, the comparative view should be used for most applications\n    as it permits operation even if there is data that cannot be\n    accessed. For example, a browsing application may only need to\n    examine the ``Engines`` it can access, without breaking execution.\n    However, an assessment may only be useful if all ``Engines``\n    referenced by it are available, and a test-taking applicationmay\n    sacrifice some interoperability for the sake of precision."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_lookup_engines", 
            "use_comparative_engine_view", 
            "use_plenary_engine_view", 
            "get_engine", 
            "get_engines_by_ids", 
            "get_engines_by_genus_type", 
            "get_engines_by_parent_genus_type", 
            "get_engines_by_record_type", 
            "get_engines_by_provider", 
            "get_engines"
         ], 
         "methods": [
            {
               "name": "can_lookup_engines", 
               "doc": {
                  "headline": "Tests if this user can perform ``Engine`` lookups.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may not offer lookup operations\n        to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if lookup methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if lookup methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_engine_view", 
               "doc": {
                  "headline": "The returns from the lookup methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_engine_view", 
               "doc": {
                  "headline": "A complete view of the ``Engine`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` specified by its ``Id``.", 
                  "body": "        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``Engine`` may have a different\n        ``Id`` than requested, such as the case where a duplicate ``Id``\n        was assigned to an ``Engine`` and retained for compatibility."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.rules.Engine) - the engine", 
               "error_doc": "        raise:  NotFound - ``engine_id`` not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the engine\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_ids", 
               "doc": {
                  "headline": "Gets an ``EngineList`` corresponding to the given ``IdList``.", 
                  "body": "        In plenary mode, the returned list contains all of the engines\n        specified in the ``Id`` list, in the order of the list,\n        including duplicates, or an error results if an ``Id`` in the\n        supplied list is not found or inaccessible. Otherwise,\n        inaccessible ``Engines`` may be omitted from the list and may\n        present the elements in any order including returning a unique\n        set."
               }, 
               "arg_doc": "        arg:    engine_ids (osid.id.IdList): the list of ``Ids`` to\n                retrieve\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``Engine`` list", 
               "error_doc": "        raise:  NotFound - an ``Id`` was not found\n        raise:  NullArgument - ``engine_ids`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_ids: the list of ``Ids`` to retrieve\n        :type engine_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "        :return: the returned ``Engine`` list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Id`` was not found\n        :raise: ``NullArgument`` -- ``engine_ids`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "engine_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_genus_type", 
               "doc": {
                  "headline": "Gets an ``EngineList`` corresponding to the given engine genus ``Type`` which does not include engines of genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known engines or\n        an error results. Otherwise, the returned list may contain only\n        those engines that are accessible through this session."
               }, 
               "arg_doc": "        arg:    engine_genus_type (osid.type.Type): an engine genus type\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``Engine`` list", 
               "error_doc": "        raise:  NullArgument - ``engine_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_genus_type: an engine genus type\n        :type engine_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Engine`` list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_parent_genus_type", 
               "doc": {
                  "headline": "Gets an ``EngineList`` corresponding to the given engine genus ``Type`` and include any additional engines with genus types derived from the specified ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known engines or\n        an error results. Otherwise, the returned list may contain only\n        those engines that are accessible through this session."
               }, 
               "arg_doc": "        arg:    engine_genus_type (osid.type.Type): an engine genus type\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``Engine`` list", 
               "error_doc": "        raise:  NullArgument - ``engine_genus_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_genus_type: an engine genus type\n        :type engine_genus_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Engine`` list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_genus_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_genus_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_record_type", 
               "doc": {
                  "headline": "Gets an ``EngineList`` containing the given repository record ``Type``.", 
                  "body": "        In plenary mode, the returned list contains all known engines or\n        an error results. Otherwise, the returned list may contain only\n        those engines that are accessible through this session."
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): a engine record\n                type\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``Engine`` list", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_record_type: a engine record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the returned ``Engine`` list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines_by_provider", 
               "doc": {
                  "headline": "Gets an ``EngineList`` from the given provider.", 
                  "body": "        In plenary mode, the returned list contains all known engines or\n        an error results. Otherwise, the returned list may contain only\n        those engines that are accessible through this session."
               }, 
               "arg_doc": "        arg:    resource_id (osid.id.Id): a resource ``Id``\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``Engine`` list", 
               "error_doc": "        raise:  NullArgument - ``resource_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param resource_id: a resource ``Id``\n        :type resource_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the returned ``Engine`` list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``resource_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "resource_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engines", 
               "doc": {
                  "headline": "Gets all ``Engines``.", 
                  "body": "        In plenary mode, the returned list contains all known engines or\n        an error results. Otherwise, the returned list may contain only\n        those engines that are accessible through this session."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineList) - a list of ``Engines``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: a list of ``Engines``\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineQuerySession", 
         "shortname": "EngineQuerySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Engine`` objects.", 
            "body": "    The search query is constructed using the ``EngineQuery``. The\n    engine record ``Type`` also specifies the record for the engine\n    query.\n\n    Engines may have an engine query record indicated by their\n    respective record types. The engine query record is accessed via the\n    ``EngineQuery``. The returns in this session may not be cast\n    directly to these interfaces."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_search_engines", 
            "get_engine_query", 
            "get_engines_by_query"
         ], 
         "methods": [
            {
               "name": "can_search_engines", 
               "doc": {
                  "headline": "Tests if this user can perform ``Engine`` searches.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer search\n        operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if search methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if search methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_engine_query", 
               "doc": {
                  "headline": "Gets an engine query.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQuery) - the engine query", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine query\n        :rtype: ``osid.rules.EngineQuery``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQuery", 
               "errors": {}
            }, 
            {
               "name": "get_engines_by_query", 
               "doc": {
                  "headline": "Gets a list of ``Engines`` matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_query (osid.rules.EngineQuery): the engine query\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the returned ``EngineList``", 
               "error_doc": "        raise:  NullArgument - ``engine_query`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``engine_query`` is not of this service", 
               "sphinx_param_doc": "        :param engine_query: the engine query\n        :type engine_query: ``osid.rules.EngineQuery``\n", 
               "sphinx_return_doc": "        :return: the returned ``EngineList``\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_query`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``engine_query`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineQuery", 
                     "var_name": "engine_query", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineQuery"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineSearchSession", 
         "shortname": "EngineSearchSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session provides methods for searching ``Engine`` objects.", 
            "body": "    The search query is constructed using the ``EngineQuery``. The\n    engine record ``Type`` also specifies the recod for the engine\n    query.\n\n    ``get_engines_by_query()`` is the basic search method and returns a\n    list of ``Engine`` elements. A more advanced search may be performed\n    with ``getEnginesBySearch()``. It accepts an ``EngineSearch`` in\n    addition to the query for the purpose of specifying additional\n    options affecting the entire search, such as ordering.\n    ``get_engines_by_search()`` returns a ``EngineSearchResults`` that\n    can be used to access the resulting ``EngineList`` or be used to\n    perform a search within the result set through ``EngineSearch``.\n    \n    Engines may have an engine query record indicated by their\n    respective record types. The engine query record is accessed via the\n    ``EngineQuery``. The returns in this session may not be cast\n    directly to these interfaces."
         }, 
         "inherit_fullnames": [
            "osid.rules.EngineQuerySession"
         ], 
         "inherit_shortnames": [
            "EngineQuerySession"
         ], 
         "inherit_pkg_names": [
            "rules"
         ], 
         "inheritance": [
            {
               "pkg_name": "rules", 
               "name": "EngineQuerySession"
            }
         ], 
         "method_names": [
            "get_engine_search", 
            "get_engine_search_order", 
            "get_engines_by_search", 
            "get_engine_query_from_inspector"
         ], 
         "methods": [
            {
               "name": "get_engine_search", 
               "doc": {
                  "headline": "Gets an engine search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineSearch) - the engine search", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine search\n        :rtype: ``osid.rules.EngineSearch``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineSearch", 
               "errors": {}
            }, 
            {
               "name": "get_engine_search_order", 
               "doc": {
                  "headline": "Gets an engine search order.", 
                  "body": "        The ``EngineSearchOrder`` is supplied to a ``EngineSearch`` to\n        specify the ordering of results."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineSearchOrder) - the engine search order", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine search order\n        :rtype: ``osid.rules.EngineSearchOrder``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineSearchOrder", 
               "errors": {}
            }, 
            {
               "name": "get_engines_by_search", 
               "doc": {
                  "headline": "Gets the search results matching the given search.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_query (osid.rules.EngineQuery): the engine query\n        arg:    engine_search (osid.rules.EngineSearch): the engine\n                search\n", 
               "return_doc": "        return: (osid.rules.EngineSearchResults) - the engine search\n                results", 
               "error_doc": "        raise:  NullArgument - ``engine_query`` or ``engine_search`` is\n                ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``engine_query`` or ``engine_search`` is\n                not of this service", 
               "sphinx_param_doc": "        :param engine_query: the engine query\n        :type engine_query: ``osid.rules.EngineQuery``\n        :param engine_search: the engine search\n        :type engine_search: ``osid.rules.EngineSearch``\n", 
               "sphinx_return_doc": "        :return: the engine search results\n        :rtype: ``osid.rules.EngineSearchResults``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_query`` or ``engine_search`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``engine_query`` or ``engine_search`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineQuery", 
                     "var_name": "engine_query", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.rules.EngineSearch", 
                     "var_name": "engine_search", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineQuery", 
                  "osid.rules.EngineSearch"
               ], 
               "return_type": "osid.rules.EngineSearchResults", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_query_from_inspector", 
               "doc": {
                  "headline": "Gets an engine query from an inspector.", 
                  "body": "        The inspector is available from a ``EngineSearchResults``."
               }, 
               "arg_doc": "        arg:    engine_query_inspector\n                (osid.rules.EngineQueryInspector): an engine query\n                inspector\n", 
               "return_doc": "        return: (osid.rules.EngineQuery) - the engine query", 
               "error_doc": "        raise:  NullArgument - ``engine_query_inspector`` is ``null``\n        raise:  Unsupported - ``engine_query_inspector`` is not of this\n                service", 
               "sphinx_param_doc": "        :param engine_query_inspector: an engine query inspector\n        :type engine_query_inspector: ``osid.rules.EngineQueryInspector``\n", 
               "sphinx_return_doc": "        :return: the engine query\n        :rtype: ``osid.rules.EngineQuery``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_query_inspector`` is ``null``\n        :raise: ``Unsupported`` -- ``engine_query_inspector`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineQueryInspector", 
                     "var_name": "engine_query_inspector", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineQueryInspector"
               ], 
               "return_type": "osid.rules.EngineQuery", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineAdminSession", 
         "shortname": "EngineAdminSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session creates, updates, and deletes ``Engines``.", 
            "body": "    The data for create and update is provided by the consumer via the\n    form object. ``OsidForms`` are requested for each create or update\n    and may not be reused.\n\n    Create and update operations differ in their usage. To create an\n    ``Engine,`` an ``EngineForm`` is requested using\n    ``get_engine_form_for_create()`` specifying the desired record\n    ``Types`` or none if no record ``Types`` are needed. The returned\n    ``EngineForm`` will indicate that it is to be used with a create\n    operation and can be used to examine metdata or validate data prior\n    to creation. Once the ``EngineForm`` is submiited to a create\n    operation, it cannot be reused with another create operation unless\n    the first operation was unsuccessful. Each ``EngineForm``\n    corresponds to an attempted transaction.\n    \n    For updates, ``EngineForms`` are requested to the ``Engine``  ``Id``\n    that is to be updated using ``getEngineFormForUpdate()``. Similarly,\n    the ``EngineForm`` has metadata about the data that can be updated\n    and it can perform validation before submitting the update. The\n    ``EngineForm`` can only be used once for a successful update and\n    cannot be reused.\n    \n    The delete operations delete ``Engines``. It is safer to remove all\n    mappings to the ``Engine`` catalogs before deletion.\n    \n    This session includes an ``Id`` aliasing mechanism to assign an\n    external ``Id`` to an internally assigned Id."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_create_engines", 
            "can_create_engine_with_record_types", 
            "get_engine_form_for_create", 
            "create_engine", 
            "can_update_engines", 
            "get_engine_form_for_update", 
            "update_engine", 
            "can_delete_engines", 
            "delete_engine", 
            "can_manage_engine_aliases", 
            "alias_engine"
         ], 
         "methods": [
            {
               "name": "can_create_engines", 
               "doc": {
                  "headline": "Tests if this user can create ``Engines``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known creating an\n        ``Engine`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        create operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Engine`` creation is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Engine`` creation is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "can_create_engine_with_record_types", 
               "doc": {
                  "headline": "Tests if this user can create a single ``Engine`` using the desired record interface types.", 
                  "body": "        While ``RulesManager.getEngineRecordTypes()`` can be used to\n        examine which record interfaces are supported, this method tests\n        which record(s) are required for creating a specific ``Engine``.\n        Providing an empty array tests if an ``Engine`` can be created\n        with no records."
               }, 
               "arg_doc": "        arg:    engine_record_types (osid.type.Type[]): array of engine\n                record types\n", 
               "return_doc": "        return: (boolean) - ``true`` if ``Engine`` creation using the\n                specified record ``Types`` is supported, ``false``\n                otherwise", 
               "error_doc": "        raise:  NullArgument - ``engine_record_types`` is ``null``", 
               "sphinx_param_doc": "        :param engine_record_types: array of engine record types\n        :type engine_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: ``true`` if ``Engine`` creation using the specified record ``Types`` is supported, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_types`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "engine_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_form_for_create", 
               "doc": {
                  "headline": "Gets the engine form for creating new engines.", 
                  "body": "        A new form should be requested for each create transaction."
               }, 
               "arg_doc": "        arg:    engine_record_types (osid.type.Type[]): array of engine\n                record types\n", 
               "return_doc": "        return: (osid.rules.EngineForm) - the engine form", 
               "error_doc": "        raise:  NullArgument - ``engine_record_types`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - unable to get form with requested record\n                types", 
               "sphinx_param_doc": "        :param engine_record_types: array of engine record types\n        :type engine_record_types: ``osid.type.Type[]``\n", 
               "sphinx_return_doc": "        :return: the engine form\n        :rtype: ``osid.rules.EngineForm``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_types`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- unable to get form with requested record types", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type[]", 
                     "var_name": "engine_record_types", 
                     "array": true
                  }
               ], 
               "arg_types": [
                  "osid.type.Type[]"
               ], 
               "return_type": "osid.rules.EngineForm", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "create_engine", 
               "doc": {
                  "headline": "Creates a new ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_form (osid.rules.EngineForm): the form for this\n                ``Engine``\n", 
               "return_doc": "        return: (osid.rules.Engine) - the new ``Engine``", 
               "error_doc": "        raise:  IllegalState - ``engine_form`` already used in a create\n                transaction\n        raise:  InvalidArgument - one or more of the form elements is\n                invalid\n        raise:  NullArgument - ``engine_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``engine_form`` did not originate from\n                ``get_engine_form_for_create()``", 
               "sphinx_param_doc": "        :param engine_form: the form for this ``Engine``\n        :type engine_form: ``osid.rules.EngineForm``\n", 
               "sphinx_return_doc": "        :return: the new ``Engine``\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``engine_form`` already used in a create transaction\n        :raise: ``InvalidArgument`` -- one or more of the form elements is invalid\n        :raise: ``NullArgument`` -- ``engine_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``engine_form`` did not originate from ``get_engine_form_for_create()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineForm", 
                     "var_name": "engine_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineForm"
               ], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_update_engines", 
               "doc": {
                  "headline": "Tests if this user can update ``Engines``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known updating an\n        ``Engine`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        update operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Engine`` modification is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Engine`` modification is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_engine_form_for_update", 
               "doc": {
                  "headline": "Gets the engine form for updating an existing engine.", 
                  "body": "        A new engine form should be requested for each update\n        transaction."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n", 
               "return_doc": "        return: (osid.rules.EngineForm) - the engine form", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the engine form\n        :rtype: ``osid.rules.EngineForm``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.EngineForm", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "update_engine", 
               "doc": {
                  "headline": "Updates an existing engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_form (osid.rules.EngineForm): the form containing\n                the elements to be updated\n", 
               "return_doc": "", 
               "error_doc": "        raise:  IllegalState - ``engine_form`` already used in an update\n                transaction\n        raise:  InvalidArgument - the form contains an invalid value\n        raise:  NullArgument - ``engine_form`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure\n        raise:  Unsupported - ``engine_form`` did not originate from\n                ``get_engine_form_for_update()``", 
               "sphinx_param_doc": "        :param engine_form: the form containing the elements to be updated\n        :type engine_form: ``osid.rules.EngineForm``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- ``engine_form`` already used in an update transaction\n        :raise: ``InvalidArgument`` -- the form contains an invalid value\n        :raise: ``NullArgument`` -- ``engine_form`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure\n        :raise: ``Unsupported`` -- ``engine_form`` did not originate from ``get_engine_form_for_update()``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineForm", 
                     "var_name": "engine_form", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineForm"
               ], 
               "return_type": "", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "INVALID_ARGUMENT": "ConsumerContract", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "can_delete_engines", 
               "doc": {
                  "headline": "Tests if this user can delete ``Engines``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known deleting an\n        ``Engine`` will result in a ``PermissionDenied``. This is\n        intended as a hint to an application that may not wish to offer\n        delete operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Engine`` deletion is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Engine`` deletion is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "delete_engine", 
               "doc": {
                  "headline": "Deletes an ``Engine``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                remove\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``engine_id`` not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to remove\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_manage_engine_aliases", 
               "doc": {
                  "headline": "Tests if this user can manage ``Id`` aliases for ``Engines``.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known changing an alias\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer alias\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if ``Engine`` aliasing is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if ``Engine`` aliasing is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "alias_engine", 
               "doc": {
                  "headline": "Adds an ``Id`` to an ``Engine`` for the purpose of creating compatibility.", 
                  "body": "        The primary ``Id`` of the ``Engine`` is determined by the\n        provider. The new ``Id`` performs as an alias to the primary\n        ``Id``. If the alias is a pointer to another engine it is\n        reassigned to the given engine ``Id``."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an ``Engine``\n        arg:    alias_id (osid.id.Id): the alias ``Id``\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``alias_id`` is already assigned\n        raise:  NotFound - ``engine_id`` not found\n        raise:  NullArgument - ``engine_id`` or ``alias_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param alias_id: the alias ``Id``\n        :type alias_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``alias_id`` is already assigned\n        :raise: ``NotFound`` -- ``engine_id`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` or ``alias_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "alias_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineNotificationSession", 
         "shortname": "EngineNotificationSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods to receive notifications on adds/changes to ``Engine`` objects.", 
            "body": "    This session is intended for consumers needing to synchronize their\n    state with this service without the use of polling. Notifications\n    are cancelled when this session is closed.\n\n    Notifications are triggered with changes to the ``Engine`` object\n    itself. Adding and removing rules result in notifications available\n    from the notification session for rules."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "can_register_for_engine_notifications", 
            "register_for_new_engines", 
            "register_for_new_engine_ancestors", 
            "register_for_new_engine_descendants", 
            "register_for_changed_engines", 
            "register_for_changed_engine", 
            "register_for_deleted_engines", 
            "register_for_deleted_engine", 
            "register_for_deleted_engine_ancestors", 
            "register_for_deleted_engine_descendants"
         ], 
         "methods": [
            {
               "name": "can_register_for_engine_notifications", 
               "doc": {
                  "headline": "Tests if this user can register for ``Engine`` notifications.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an application that may opt not to offer\n        notification operations."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if notification methods are not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if notification methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "register_for_new_engines", 
               "doc": {
                  "headline": "Register for notifications of new engines.", 
                  "body": "        ``EngineReceiver.newEngine()`` is invoked when a new ``Engine``\n        is created."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_engine_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new ancestor of the specified engine.", 
                  "body": "        ``EngineReceiver.newAncestorEngine()`` is invoked when the\n        specified engine node gets a new ancestor."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` node to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_new_engine_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that introduces a new descendant of the specified engine.", 
                  "body": "        ``EngineReceiver.newDescendantEngine()`` is invoked when the\n        specified engine node gets a new descendant."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine``\n                node to monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` node to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_engines", 
               "doc": {
                  "headline": "Registers for notification of updated engines.", 
                  "body": "        ``EngineReceiver.changedEngine()`` is invoked when an engine is\n        changed."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_changed_engine", 
               "doc": {
                  "headline": "Registers for notification of an updated engine.", 
                  "body": "        ``EngineReceiver.changedEngine()`` is invoked when the specified\n        engine is changed."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_engines", 
               "doc": {
                  "headline": "Registers for notification of deleted engines.", 
                  "body": "        ``EngineReceiver.deletedEngine()`` is invoked when an engine is\n        deleted."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_engine", 
               "doc": {
                  "headline": "Registers for notification of a deleted engine.", 
                  "body": "        ``EngineReceiver.deletedEngine()`` is invoked when the specified\n        engine is deleted."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_engine_ancestors", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes an ancestor of the specified engine.", 
                  "body": "        ``EngineReceiver.deletedAncestor()`` is invoked when the\n        specified engine node loses an ancestor."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "register_for_deleted_engine_descendants", 
               "doc": {
                  "headline": "Registers for notification of an updated hierarchy structure that removes a descendant of the specified engine.", 
                  "body": "        ``EngineReceiver.deletedDescendant()`` is invoked when the\n        specified engine node loses a descendant."
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                monitor\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to monitor\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineHierarchySession", 
         "shortname": "EngineHierarchySession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session defines methods for traversing a hierarchy of ``Engine`` objects.", 
            "body": "    Each node in the hierarchy is a unique ``Engine``. The hierarchy may\n    be traversed recursively to establish the tree structure through\n    ``get_parent_engines()`` and ``getChildEngines()``. To relate these\n    ``Ids`` to another OSID, ``get_engien_nodes()`` can be used for\n    retrievals that can be used for bulk lookups in other OSIDs. Any\n    ``Engine`` available in the Rule OSID is known to this hierarchy but\n    does not appear in the hierarchy traversal until added as a root\n    node or a child of another node.\n\n    A user may not be authorized to traverse the entire hierarchy. Parts\n    of the hierarchy may be made invisible through omission from the\n    returns of ``get_parent_engines()`` or ``get_child_engines()`` in\n    lieu of a ``PermissionDenied`` error that may disrupt the traversal\n    through authorized pathways.\n    \n    This session defines views that offer differing behaviors when\n    retrieving multiple objects.\n    \n      * comparative view: engine elements may be silently omitted or re-\n        ordered\n      * plenary view: provides a complete set or is an error condition\n"
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_hierarchy_id", 
            "get_engine_hierarchy", 
            "can_access_engine_hierarchy", 
            "use_comparative_engine_view", 
            "use_plenary_engine_view", 
            "get_root_engine_ids", 
            "get_root_engines", 
            "has_parent_engines", 
            "is_parent_of_engine", 
            "get_parent_engine_ids", 
            "get_parent_engines", 
            "is_ancestor_of_engine", 
            "has_child_engines", 
            "is_child_of_engine", 
            "get_child_engine_ids", 
            "get_child_engines", 
            "is_descendant_of_engine", 
            "get_engine_node_ids", 
            "get_engine_nodes"
         ], 
         "methods": [
            {
               "name": "get_engine_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_access_engine_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can perform hierarchy queries.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known all methods in this\n        session will result in a ``PermissionDenied``. This is intended\n        as a hint to an an application that may wish not to offer\n        traversal operations to unauthorized users."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if hierarchy traversal methods are\n                not authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if hierarchy traversal methods are not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "use_comparative_engine_view", 
               "doc": {
                  "headline": "The returns from the engine methods may omit or translate elements based on this session, such as authorization, and not result in an error.", 
                  "body": "        This view is used when greater interoperability is desired at\n        the expense of precision."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "use_plenary_engine_view", 
               "doc": {
                  "headline": "A complete view of the ``Engine`` returns is desired.", 
                  "body": "        Methods will return what is requested or result in an error.\n        This view is used when greater precision is desired at the\n        expense of interoperability."
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_root_engine_ids", 
               "doc": {
                  "headline": "Gets the root engine ``Ids`` in this hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.IdList) - the root engine ``Ids``", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root engine ``Ids``\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_root_engines", 
               "doc": {
                  "headline": "Gets the root engines in this engine hierarchy.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineList) - the root engines", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the root engines\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method is must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_parent_engines", 
               "doc": {
                  "headline": "Tests if the ``Engine`` has any parents.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of a engine\n", 
               "return_doc": "        return: (boolean) - ``true`` if the engine has parents,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of a engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the engine has parents, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_parent_of_engine", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a direct parent of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    engine_id (osid.id.Id): the ``Id`` of an egine\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is a parent of\n                ``engine_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of an egine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is a parent of ``engine_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_engine_ids", 
               "doc": {
                  "headline": "Gets the parent ``Ids`` of the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an egine\n", 
               "return_doc": "        return: (osid.id.IdList) - the parent ``Ids`` of the engine", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an egine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent ``Ids`` of the engine\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_parent_engines", 
               "doc": {
                  "headline": "Gets the parent engines of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                query\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the parent engines of the\n                ``id``", 
               "error_doc": "        raise:  NotFound - an ``Engine`` identified by ``Id is`` not\n                found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to query\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the parent engines of the ``id``\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Engine`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_ancestor_of_engine", 
               "doc": {
                  "headline": "Tests if an ``Id`` is an ancestor of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "        return: (boolean) - ``true`` if this ``id`` is an ancestor of\n                ``engine_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if this ``id`` is an ancestor of ``engine_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "has_child_engines", 
               "doc": {
                  "headline": "Tests if an engine has any children.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``engine_id`` has children,\n                ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``engine_id`` has children, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_child_of_engine", 
               "doc": {
                  "headline": "Tests if an engine is a direct child of another.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a child of\n                ``engine_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a child of ``engine_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_engine_ids", 
               "doc": {
                  "headline": "Gets the child ``Ids`` of the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` to query\n", 
               "return_doc": "        return: (osid.id.IdList) - the children of the engine", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` to query\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the children of the engine\n        :rtype: ``osid.id.IdList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.id.IdList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_child_engines", 
               "doc": {
                  "headline": "Gets the child engines of the given ``id``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the ``Engine`` to\n                query\n", 
               "return_doc": "        return: (osid.rules.EngineList) - the child engines of the\n                ``id``", 
               "error_doc": "        raise:  NotFound - an ``Engine`` identified by ``Id is`` not\n                found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the ``Engine`` to query\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: the child engines of the ``id``\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- an ``Engine`` identified by ``Id is`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "is_descendant_of_engine", 
               "doc": {
                  "headline": "Tests if an ``Id`` is a descendant of an egine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    id (osid.id.Id): an ``Id``\n        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "        return: (boolean) - ``true`` if the ``id`` is a descendant of\n                the ``engine_id,``  ``false`` otherwise", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``id`` or ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param id: an ``Id``\n        :type id: ``osid.id.Id``\n        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "        :return: ``true`` if the ``id`` is a descendant of the ``engine_id,``  ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``id`` or ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "        *implementation notes*: If ``id`` is not found return ``false``.\n", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "id_", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "boolean", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engine_node_ids", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.hierarchy.Node) - an engine node", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` to query\n        :type engine_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an engine node\n        :rtype: ``osid.hierarchy.Node``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.hierarchy.Node", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "get_engine_nodes", 
               "doc": {
                  "headline": "Gets a portion of the hierarchy for the given engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` to query\n        arg:    ancestor_levels (cardinal): the maximum number of\n                ancestor levels to include. A value of 0 returns no\n                parents in the node.\n        arg:    descendant_levels (cardinal): the maximum number of\n                descendant levels to include. A value of 0 returns no\n                children in the node.\n        arg:    include_siblings (boolean): ``true`` to include the\n                siblings of the given node, ``false`` to omit the\n                siblings\n", 
               "return_doc": "        return: (osid.rules.EngineNode) - an engine node", 
               "error_doc": "        raise:  NotFound - ``engine_id`` is not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` to query\n        :type engine_id: ``osid.id.Id``\n        :param ancestor_levels: the maximum number of ancestor levels to include. A value of 0 returns no parents in the node.\n        :type ancestor_levels: ``cardinal``\n        :param descendant_levels: the maximum number of descendant levels to include. A value of 0 returns no children in the node.\n        :type descendant_levels: ``cardinal``\n        :param include_siblings: ``true`` to include the siblings of the given node, ``false`` to omit the siblings\n        :type include_siblings: ``boolean``\n", 
               "sphinx_return_doc": "        :return: an engine node\n        :rtype: ``osid.rules.EngineNode``", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` is not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "ancestor_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "cardinal", 
                     "var_name": "descendant_levels", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "include_siblings", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "cardinal", 
                  "cardinal", 
                  "boolean"
               ], 
               "return_type": "osid.rules.EngineNode", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineHierarchyDesignSession", 
         "shortname": "EngineHierarchyDesignSession", 
         "category": "sessions", 
         "doc": {
            "headline": "This session manages a hierarchy of engines.", 
            "body": "    Engines may be organized into a hierarchy for organizing or\n    federating. A parent ``Engine`` includes all of the rules of its\n    children such that a single root node contains all of the rules of\n    the federation."
         }, 
         "inherit_fullnames": [
            "osid.OsidSession"
         ], 
         "inherit_shortnames": [
            "OsidSession"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSession"
            }
         ], 
         "method_names": [
            "get_engine_hierarchy_id", 
            "get_engine_hierarchy", 
            "can_modify_engine_hierarchy", 
            "add_root_engine", 
            "remove_root_engine", 
            "add_child_engine", 
            "remove_child_engine", 
            "remove_child_engines"
         ], 
         "methods": [
            {
               "name": "get_engine_hierarchy_id", 
               "doc": {
                  "headline": "Gets the hierarchy ``Id`` associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.id.Id) - the hierarchy ``Id`` associated with this\n                session", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy ``Id`` associated with this session\n        :rtype: ``osid.id.Id``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.id.Id", 
               "errors": {}
            }, 
            {
               "name": "get_engine_hierarchy", 
               "doc": {
                  "headline": "Gets the hierarchy associated with this session.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.hierarchy.Hierarchy) - the hierarchy associated\n                with this session", 
               "error_doc": "        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the hierarchy associated with this session\n        :rtype: ``osid.hierarchy.Hierarchy``", 
               "sphinx_error_doc": "        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.hierarchy.Hierarchy", 
               "errors": {
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "can_modify_engine_hierarchy", 
               "doc": {
                  "headline": "Tests if this user can change the hierarchy.", 
                  "body": "        A return of true does not guarantee successful authorization. A\n        return of false indicates that it is known performing any update\n        will result in a ``PermissionDenied``. This is intended as a\n        hint to an application that may opt not to offer these\n        operations to an unauthorized user."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``false`` if changing this hierarchy is not\n                authorized, ``true`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``false`` if changing this hierarchy is not authorized, ``true`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "add_root_engine", 
               "doc": {
                  "headline": "Adds a root engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``engine_id`` is already in hierarchy\n        raise:  NotFound - ``engine_id`` not found\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``engine_id`` is already in hierarchy\n        :raise: ``NotFound`` -- ``engine_id`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_root_engine", 
               "doc": {
                  "headline": "Removes a root engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``engine_id`` not a root\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` not a root\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "add_child_engine", 
               "doc": {
                  "headline": "Adds a child to an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  AlreadyExists - ``engine_id`` is already a parent of\n                ``child_id``\n        raise:  NotFound - ``engine_id`` or ``child_id`` not found\n        raise:  NullArgument - ``engine_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``AlreadyExists`` -- ``engine_id`` is already a parent of ``child_id``\n        :raise: ``NotFound`` -- ``engine_id`` or ``child_id`` not found\n        :raise: ``NullArgument`` -- ``engine_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "ALREADY_EXISTS": "User", 
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_engine", 
               "doc": {
                  "headline": "Removes a child from an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n        arg:    child_id (osid.id.Id): the ``Id`` of the new child\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``engine_id`` not a parent of ``child_id``\n        raise:  NullArgument - ``engine_id`` or ``child_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n        :param child_id: the ``Id`` of the new child\n        :type child_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` not a parent of ``child_id``\n        :raise: ``NullArgument`` -- ``engine_id`` or ``child_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "child_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }, 
            {
               "name": "remove_child_engines", 
               "doc": {
                  "headline": "Removes all children from an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of an engine\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NotFound - ``engine_id`` not in hierarchy\n        raise:  NullArgument - ``engine_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of an engine\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NotFound`` -- ``engine_id`` not in hierarchy\n        :raise: ``NullArgument`` -- ``engine_id`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``PermissionDenied`` -- authorization failure", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {
                  "NOT_FOUND": "User", 
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "PERMISSION_DENIED": "User"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.Rule", 
         "shortname": "Rule", 
         "category": "objects", 
         "doc": {
            "headline": "A ``Rule`` represents an entity that can be executed in a rules engine.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRule"
         ], 
         "inherit_shortnames": [
            "OsidRule"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRule"
            }
         ], 
         "method_names": [
            "get_rule_record"
         ], 
         "methods": [
            {
               "name": "get_rule_record", 
               "doc": {
                  "headline": "Gets the rule record corresponding to the given ``Rule`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``rule_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(rule_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): the type of rule\n                record to retrieve\n", 
               "return_doc": "        return: (osid.rules.records.RuleRecord) - the rule record", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(rule_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_record_type: the type of rule record to retrieve\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule record\n        :rtype: ``osid.rules.records.RuleRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleRecord", 
         "shortname": "RuleRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Rule``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleQuery", 
         "shortname": "RuleQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching rules.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidRuleQuery"
         ], 
         "inherit_shortnames": [
            "OsidRuleQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRuleQuery"
            }
         ], 
         "method_names": [
            "match_engine_id", 
            "clear_engine_id_terms", 
            "supports_engine_query", 
            "get_engine_query", 
            "clear_engine_terms", 
            "get_rule_query_record"
         ], 
         "methods": [
            {
               "name": "match_engine_id", 
               "doc": {
                  "headline": "Sets the engine ``Id`` for this query to match rules assigned to engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): an engine ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``", 
               "sphinx_param_doc": "        :param engine_id: an engine ``Id``\n        :type engine_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_engine_id_terms", 
               "doc": {
                  "headline": "Clears the engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_engine_query", 
               "doc": {
                  "headline": "Tests if an ``EngineQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an engine query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an engine query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_engine_query", 
               "doc": {
                  "headline": "Gets the query for an engine query.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQuery) - the engine query", 
               "error_doc": "        raise:  Unimplemented - ``supports_engine_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine query\n        :rtype: ``osid.rules.EngineQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_engine_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_engine_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_engine_terms", 
               "doc": {
                  "headline": "Clears the engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_rule_query_record", 
               "doc": {
                  "headline": "Gets the rule query record corresponding to the given ``Rule`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): a rule record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleQueryRecord) - the rule query\n                record", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(rule_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_record_type: a rule record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule query record\n        :rtype: ``osid.rules.records.RuleQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleQueryRecord", 
         "shortname": "RuleQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleQueryInspector", 
         "shortname": "RuleQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining rule queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidObjectQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidObjectQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidObjectQueryInspector"
            }
         ], 
         "method_names": [
            "get_engine_id_terms", 
            "get_engine_terms", 
            "get_rule_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_engine_id_terms", 
               "doc": {
                  "headline": "Gets the engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_engine_terms", 
               "doc": {
                  "headline": "Gets the engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.rules.EngineQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_rule_query_inspector_record", 
               "doc": {
                  "headline": "Gets the rule query inspector record corresponding to the given ``Rule`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): a rule record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleQueryInspectorRecord) - the rule\n                query inspector record", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(rule_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_record_type: a rule record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule query inspector record\n        :rtype: ``osid.rules.records.RuleQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleQueryInspectorRecord", 
         "shortname": "RuleQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleForm", 
         "shortname": "RuleForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Rules``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``RuleAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidForm"
         ], 
         "inherit_shortnames": [
            "OsidForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidForm"
            }
         ], 
         "method_names": [
            "get_rule_form_record"
         ], 
         "methods": [
            {
               "name": "get_rule_form_record", 
               "doc": {
                  "headline": "Gets the ``RuleFormRecord`` corresponding to the given rule record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): the rule record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleFormRecord) - the record", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(rule_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_record_type: the rule record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the record\n        :rtype: ``osid.rules.records.RuleFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleFormRecord", 
         "shortname": "RuleFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleSearchOrder", 
         "shortname": "RuleSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidRuleSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidRuleSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRuleSearchOrder"
            }
         ], 
         "method_names": [
            "get_rule_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_rule_search_order_record", 
               "doc": {
                  "headline": "Gets the rule search order record corresponding to the given rule record ``Type``.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    rule_record_type (osid.type.Type): a rule record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleSearchOrderRecord) - the rule\n                search order record", 
               "error_doc": "        raise:  NullArgument - ``rule_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(rule_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_record_type: a rule record type\n        :type rule_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule search order record\n        :rtype: ``osid.rules.records.RuleSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleSearchOrderRecord", 
         "shortname": "RuleSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleSearch", 
         "shortname": "RuleSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing rule searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_rules", 
            "order_rule_results", 
            "get_rule_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_rules", 
               "doc": {
                  "headline": "Execute this search among the given list of rules.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_ids (osid.id.IdList): list of rules\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_ids`` is ``null``", 
               "sphinx_param_doc": "        :param rule_ids: list of rules\n        :type rule_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "rule_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_rule_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_search_order (osid.rules.RuleSearchOrder): rule\n                search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_search_order`` is ``null``\n        raise:  Unsupported - ``rule_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param rule_search_order: rule search order\n        :type rule_search_order: ``osid.rules.RuleSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``rule_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.RuleSearchOrder", 
                     "var_name": "rule_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.RuleSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_search_record", 
               "doc": {
                  "headline": "Gets the rule search record corresponding to the given rule search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    rule_search_record_type (osid.type.Type): a rule search\n                record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleSearchRecord) - the rule search\n                record", 
               "error_doc": "        raise:  NullArgument - ``rule_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(rule_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_search_record_type: a rule search record type\n        :type rule_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule search record\n        :rtype: ``osid.rules.records.RuleSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleSearchRecord", 
         "shortname": "RuleSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleSearchResults", 
         "shortname": "RuleSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_rules", 
            "get_rule_query_inspector", 
            "get_rule_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_rules", 
               "doc": {
                  "headline": "Gets the rule list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleList) - the rule list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule list\n        :rtype: ``osid.rules.RuleList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_rule_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQueryInspector) - the rule query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule query inspector\n        :rtype: ``osid.rules.RuleQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_rule_search_results_record", 
               "doc": {
                  "headline": "Gets the rule search results record corresponding to the given rule search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    rule_search_record_type (osid.type.Type): a rule search\n                record type\n", 
               "return_doc": "        return: (osid.rules.records.RuleSearchResultsRecord) - the rule\n                search results record", 
               "error_doc": "        raise:  NullArgument - ``rule_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(rule_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param rule_search_record_type: a rule search record type\n        :type rule_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the rule search results record\n        :rtype: ``osid.rules.records.RuleSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(rule_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "rule_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.RuleSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.RuleSearchResultsRecord", 
         "shortname": "RuleSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``RuleSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.RuleReceiver", 
         "shortname": "RuleReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The rule receiver is the consumer supplied interface for receiving notifications pertaining to new or deleted rules.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_rule", 
            "changed_rule", 
            "deleted_rule"
         ], 
         "methods": [
            {
               "name": "new_rule", 
               "doc": {
                  "headline": "The callback for notifications of new rules.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the new rule\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the new rule\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_rule", 
               "doc": {
                  "headline": "the callback for notification of changed rules.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the changed rule\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the changed rule\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_rule", 
               "doc": {
                  "headline": "the callback for notification of deleted rules.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): the ``Id`` of the deleted rule\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param rule_id: the ``Id`` of the deleted rule\n        :type rule_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.rules.RuleList", 
         "shortname": "RuleList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``RuleList`` provides a means for accessing ``Rule`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (rl.hasNext()) { Rule rule = rl.getNextRule(); }\n\n    or\n      while (rl.hasNext()) {\n           Rule[] rules = rl.getNextRules(rl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_rule", 
            "get_next_rules"
         ], 
         "methods": [
            {
               "name": "get_next_rule", 
               "doc": {
                  "headline": "Gets the next ``Rule`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Rule) - the next ``Rule`` in this list. The\n                ``has_next()`` method should be used to test that a next\n                ``Rule`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Rule`` in this list. The ``has_next()`` method should be used to test that a next ``Rule`` is available before calling this method.\n        :rtype: ``osid.rules.Rule``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Rule", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_rules", 
               "doc": {
                  "headline": "Gets the next set of ``Rule`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Rule`` elements requested\n                which must be less than or equal to ``available()``\n", 
               "return_doc": "        return: (osid.rules.Rule) - an array of ``Rule`` elements.The\n                length of the array is less than or equal to the number\n                specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Rule`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Rule`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.rules.Rule``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.rules.Rule", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.Engine", 
         "shortname": "Engine", 
         "category": "objects", 
         "doc": {
            "headline": "An ``Engine`` represents a collection of rules.", 
            "body": "    Like all OSID objects, an ``Engine`` is identified by its ``Id`` and\n    any persisted references should use the ``Id``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalog"
         ], 
         "inherit_shortnames": [
            "OsidCatalog"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalog"
            }
         ], 
         "method_names": [
            "get_engine_record"
         ], 
         "methods": [
            {
               "name": "get_engine_record", 
               "doc": {
                  "headline": "Gets the engine record corresponding to the given ``Engine`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``engine_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(engine_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): the type of engine\n                record to retrieve\n", 
               "return_doc": "        return: (osid.rules.records.EngineRecord) - the engine record", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(engine_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_record_type: the type of engine record to retrieve\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine record\n        :rtype: ``osid.rules.records.EngineRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineRecord", 
         "shortname": "EngineRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``Engine``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineQuery", 
         "shortname": "EngineQuery", 
         "category": "queries", 
         "doc": {
            "headline": "This is the query for searching for engines.", 
            "body": "    Each method specifies an ``AND`` term while multiple invocations of\n    the same method produce a nested ``OR``."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQuery"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQuery"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQuery"
            }
         ], 
         "method_names": [
            "match_rule_id", 
            "clear_rule_id_terms", 
            "supports_rule_query", 
            "get_rule_query", 
            "match_any_rule", 
            "clear_rule_terms", 
            "match_ancestor_engine_id", 
            "clear_ancestor_engine_id_terms", 
            "supports_ancestor_engine_query", 
            "get_ancestor_engine_query", 
            "match_any_ancestor_engine", 
            "clear_ancestor_engine_terms", 
            "match_descendant_engine_id", 
            "clear_descendant_engine_id_terms", 
            "supports_descendant_engine_query", 
            "get_descendant_engine_query", 
            "match_any_descendant_engine", 
            "clear_descendant_engine_terms", 
            "get_engine_query_record"
         ], 
         "methods": [
            {
               "name": "match_rule_id", 
               "doc": {
                  "headline": "Sets the rule ``Id`` for this query to match rules assigned to engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    rule_id (osid.id.Id): a rule ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``rule_id`` is ``null``", 
               "sphinx_param_doc": "        :param rule_id: a rule ``Id``\n        :type rule_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``rule_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "rule_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_rule_id_terms", 
               "doc": {
                  "headline": "Clears the rule ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_rule_query", 
               "doc": {
                  "headline": "Tests if a rule query is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if a rule query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if a rule query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_rule_query", 
               "doc": {
                  "headline": "Gets the query for a rule.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQuery) - the rule query", 
               "error_doc": "        raise:  Unimplemented - ``supports_rule_query()`` is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the rule query\n        :rtype: ``osid.rules.RuleQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_rule_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_rule_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_rule", 
               "doc": {
                  "headline": "Matches engines with any riule.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match engines with any\n                rule,, ``false`` to match engines with no rules\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match engines with any rule,, ``false`` to match engines with no rules\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_rule_terms", 
               "doc": {
                  "headline": "Clears the rule query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_ancestor_engine_id", 
               "doc": {
                  "headline": "Sets the engine ``Id`` for this query to match engines that have the specified engine as an ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): an engine ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``", 
               "sphinx_param_doc": "        :param engine_id: an engine ``Id``\n        :type engine_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_ancestor_engine_id_terms", 
               "doc": {
                  "headline": "Clears the ancestor engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_ancestor_engine_query", 
               "doc": {
                  "headline": "Tests if an ``EngineQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an engine query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an engine query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_engine_query", 
               "doc": {
                  "headline": "Gets the query for an engine.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQuery) - the engine query", 
               "error_doc": "        raise:  Unimplemented - ``supports_ancestor_engine_query()`` is\n                ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine query\n        :rtype: ``osid.rules.EngineQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_ancestor_engine_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_ancestor_engine_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_ancestor_engine", 
               "doc": {
                  "headline": "Matches engines with any ancestor.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match engine with any\n                ancestor, ``false`` to match root engines\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match engine with any ancestor, ``false`` to match root engines\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_ancestor_engine_terms", 
               "doc": {
                  "headline": "Clears the ancestor engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "match_descendant_engine_id", 
               "doc": {
                  "headline": "Sets the engine ``Id`` for this query to match engines that have the specified engine as a descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): an engine ``Id``\n        arg:    match (boolean): ``true`` for a positive match,\n                ``false`` for a negative match\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_id`` is ``null``", 
               "sphinx_param_doc": "        :param engine_id: an engine ``Id``\n        :type engine_id: ``osid.id.Id``\n        :param match: ``true`` for a positive match, ``false`` for a negative match\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_id`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "clear_descendant_engine_id_terms", 
               "doc": {
                  "headline": "Clears the descendant engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "supports_descendant_engine_query", 
               "doc": {
                  "headline": "Tests if an ``EngineQuery`` is available.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` if an engine query is available,\n                ``false`` otherwise", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` if an engine query is available, ``false`` otherwise\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_engine_query", 
               "doc": {
                  "headline": "Gets the query for an engine.", 
                  "body": "        Multiple retrievals produce a nested ``OR`` term."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQuery) - the engine query", 
               "error_doc": "        raise:  Unimplemented - ``supports_descendant_engine_query()``\n                is ``false``", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine query\n        :rtype: ``osid.rules.EngineQuery``", 
               "sphinx_error_doc": "        :raise: ``Unimplemented`` -- ``supports_descendant_engine_query()`` is ``false``", 
               "compliance_doc": "        *compliance: optional -- This method must be implemented if ``supports_descendant_engine_query()`` is ``true``.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQuery", 
               "errors": {
                  "UNIMPLEMENTED": "ConsumerContract"
               }
            }, 
            {
               "name": "match_any_descendant_engine", 
               "doc": {
                  "headline": "Matches engines with any descendant.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    match (boolean): ``true`` to match engine with any\n                descendant, ``false`` to match leaf engines\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param match: ``true`` to match engine with any descendant, ``false`` to match leaf engines\n        :type match: ``boolean``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "boolean", 
                     "var_name": "match", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "boolean"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "clear_descendant_engine_terms", 
               "doc": {
                  "headline": "Clears the descendant engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "get_engine_query_record", 
               "doc": {
                  "headline": "Gets the engine query record corresponding to the given ``Engine`` record ``Type``.", 
                  "body": "        Multiple record retrievals produce a nested boolean ``OR`` term."
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): an engine record\n                type\n", 
               "return_doc": "        return: (osid.rules.records.EngineQueryRecord) - the engine\n                query record", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(engine_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_record_type: an engine record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine query record\n        :rtype: ``osid.rules.records.EngineQueryRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineQueryRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineQueryRecord", 
         "shortname": "EngineQueryRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``EngineQuery``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineQueryInspector", 
         "shortname": "EngineQueryInspector", 
         "category": "query_inspectors", 
         "doc": {
            "headline": "This is the query inspector for examining engine queries.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogQueryInspector"
         ], 
         "inherit_shortnames": [
            "OsidCatalogQueryInspector"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogQueryInspector"
            }
         ], 
         "method_names": [
            "get_rule_id_terms", 
            "get_rule_terms", 
            "get_ancestor_engine_id_terms", 
            "get_ancestor_engine_terms", 
            "get_descendant_engine_id_terms", 
            "get_descendant_engine_terms", 
            "get_engine_query_inspector_record"
         ], 
         "methods": [
            {
               "name": "get_rule_id_terms", 
               "doc": {
                  "headline": "Gets the rule ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_rule_terms", 
               "doc": {
                  "headline": "Gets the rule query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.RuleQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.rules.RuleQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.RuleQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_engine_id_terms", 
               "doc": {
                  "headline": "Gets the ancestor engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_ancestor_engine_terms", 
               "doc": {
                  "headline": "Gets the ancestor engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.rules.EngineQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_engine_id_terms", 
               "doc": {
                  "headline": "Gets the descendant engine ``Id`` query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.search.terms.IdTerm) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.search.terms.IdTerm``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.search.terms.IdTerm", 
               "errors": {}
            }, 
            {
               "name": "get_descendant_engine_terms", 
               "doc": {
                  "headline": "Gets the descendant engine query terms.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQueryInspector) - the query terms", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the query terms\n        :rtype: ``osid.rules.EngineQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_engine_query_inspector_record", 
               "doc": {
                  "headline": "Gets the engine query inspector record corresponding to the given ``Engine`` record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): an engine record\n                type\n", 
               "return_doc": "        return: (osid.rules.records.EngineQueryInspectorRecord) - the\n                engine query inspector record", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(engine_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_record_type: an engine record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine query inspector record\n        :rtype: ``osid.rules.records.EngineQueryInspectorRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineQueryInspectorRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineQueryInspectorRecord", 
         "shortname": "EngineQueryInspectorRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``EngineQueryInspector``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineForm", 
         "shortname": "EngineForm", 
         "category": "objects", 
         "doc": {
            "headline": "This is the form for creating and updating ``Engines``.", 
            "body": "    Like all ``OsidForm`` objects, various data elements may be set here\n    for use in the create and update methods in the\n    ``EngineAdminSession``. For each data element that may be set,\n    metadata may be examined to provide display hints or data\n    constraints."
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogForm"
         ], 
         "inherit_shortnames": [
            "OsidCatalogForm"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogForm"
            }
         ], 
         "method_names": [
            "get_engine_form_record"
         ], 
         "methods": [
            {
               "name": "get_engine_form_record", 
               "doc": {
                  "headline": "Gets the ``EngineFormRecord`` corresponding to the given engine record ``Type``.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): the engine record\n                type\n", 
               "return_doc": "        return: (osid.rules.records.EngineFormRecord) - the record", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(engine_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_record_type: the engine record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the record\n        :rtype: ``osid.rules.records.EngineFormRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineFormRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineFormRecord", 
         "shortname": "EngineFormRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for an ``EngineForm``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineSearchOrder", 
         "shortname": "EngineSearchOrder", 
         "category": "search_orders", 
         "doc": {
            "headline": "An interface for specifying the ordering of search results.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCatalogSearchOrder"
         ], 
         "inherit_shortnames": [
            "OsidCatalogSearchOrder"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCatalogSearchOrder"
            }
         ], 
         "method_names": [
            "get_engine_search_order_record"
         ], 
         "methods": [
            {
               "name": "get_engine_search_order_record", 
               "doc": {
                  "headline": "Gets the engine search order record corresponding to the given engine record Type.", 
                  "body": "        Multiple retrievals return the same underlying object."
               }, 
               "arg_doc": "        arg:    engine_record_type (osid.type.Type): an engine record\n                type\n", 
               "return_doc": "        return: (osid.rules.records.EngineSearchOrderRecord) - the\n                engine search order record", 
               "error_doc": "        raise:  NullArgument - ``engine_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(engine_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_record_type: an engine record type\n        :type engine_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine search order record\n        :rtype: ``osid.rules.records.EngineSearchOrderRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineSearchOrderRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineSearchOrderRecord", 
         "shortname": "EngineSearchOrderRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``EngineSearchOrder``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineSearch", 
         "shortname": "EngineSearch", 
         "category": "searches", 
         "doc": {
            "headline": "The search interface for governing engine searches.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearch"
         ], 
         "inherit_shortnames": [
            "OsidSearch"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearch"
            }
         ], 
         "method_names": [
            "search_among_engines", 
            "order_engine_results", 
            "get_engine_search_record"
         ], 
         "methods": [
            {
               "name": "search_among_engines", 
               "doc": {
                  "headline": "Execute this search among the given list of engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_ids (osid.id.IdList): list of engines\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_ids`` is ``null``", 
               "sphinx_param_doc": "        :param engine_ids: list of engines\n        :type engine_ids: ``osid.id.IdList``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_ids`` is ``null``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.IdList", 
                     "var_name": "engine_ids", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.IdList"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract"
               }
            }, 
            {
               "name": "order_engine_results", 
               "doc": {
                  "headline": "Specify an ordering to the search results.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_search_order (osid.rules.EngineSearchOrder):\n                engine search order\n", 
               "return_doc": "", 
               "error_doc": "        raise:  NullArgument - ``engine_search_order`` is ``null``\n        raise:  Unsupported - ``engine_search_order`` is not of this\n                service", 
               "sphinx_param_doc": "        :param engine_search_order: engine search order\n        :type engine_search_order: ``osid.rules.EngineSearchOrder``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_search_order`` is ``null``\n        :raise: ``Unsupported`` -- ``engine_search_order`` is not of this service", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.rules.EngineSearchOrder", 
                     "var_name": "engine_search_order", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.rules.EngineSearchOrder"
               ], 
               "return_type": "", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_search_record", 
               "doc": {
                  "headline": "Gets the engine search record corresponding to the given engine search record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    engine_search_record_type (osid.type.Type): an engine\n                search record type\n", 
               "return_doc": "        return: (osid.rules.records.EngineSearchRecord) - the engine\n                search record", 
               "error_doc": "        raise:  NullArgument - ``engine_search_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(engine_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_search_record_type: an engine search record type\n        :type engine_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine search record\n        :rtype: ``osid.rules.records.EngineSearchRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``engine_search_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineSearchRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineSearchRecord", 
         "shortname": "EngineSearchRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``EngineSearch``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineSearchResults", 
         "shortname": "EngineSearchResults", 
         "category": "searches", 
         "doc": {
            "headline": "This interface provides a means to capture results of a search.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidSearchResults"
         ], 
         "inherit_shortnames": [
            "OsidSearchResults"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidSearchResults"
            }
         ], 
         "method_names": [
            "get_engines", 
            "get_engine_query_inspector", 
            "get_engine_search_results_record"
         ], 
         "methods": [
            {
               "name": "get_engines", 
               "doc": {
                  "headline": "Gets the engine list resulting from a search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineList) - the engine list", 
               "error_doc": "        raise:  IllegalState - list already retrieved", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine list\n        :rtype: ``osid.rules.EngineList``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- list already retrieved", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineList", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract"
               }
            }, 
            {
               "name": "get_engine_query_inspector", 
               "doc": {
                  "headline": "Gets the inspector for the query to examine the terms used in the search.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineQueryInspector) - the engine query\n                inspector", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine query inspector\n        :rtype: ``osid.rules.EngineQueryInspector``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineQueryInspector", 
               "errors": {}
            }, 
            {
               "name": "get_engine_search_results_record", 
               "doc": {
                  "headline": "Gets the engine search results record corresponding to the given engine search record Type.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record."
               }, 
               "arg_doc": "        arg:    engine_search_record_type (osid.type.Type): an engine\n                search record type\n", 
               "return_doc": "        return: (osid.rules.records.EngineSearchResultsRecord) - the\n                engine search results record", 
               "error_doc": "        raise:  NullArgument - ``EngineSearchRecordType`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_record_type(engine_search_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param engine_search_record_type: an engine search record type\n        :type engine_search_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the engine search results record\n        :rtype: ``osid.rules.records.EngineSearchResultsRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``EngineSearchRecordType`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(engine_search_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "engine_search_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.EngineSearchResultsRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.EngineSearchResultsRecord", 
         "shortname": "EngineSearchResultsRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``EngineSearchResults``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.EngineReceiver", 
         "shortname": "EngineReceiver", 
         "category": "receivers", 
         "doc": {
            "headline": "The engine receiver is the consumer supplied interface for receiving notifications pertaining to new, updated or deleted ``Engine`` objects.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidReceiver"
         ], 
         "inherit_shortnames": [
            "OsidReceiver"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidReceiver"
            }
         ], 
         "method_names": [
            "new_engine", 
            "new_ancestor_engine", 
            "new_descendant_engine", 
            "changed_engine", 
            "deleted_engine", 
            "deleted_ancestor_engine", 
            "deleted_descendant_engine"
         ], 
         "methods": [
            {
               "name": "new_engine", 
               "doc": {
                  "headline": "The callback for notifications of new engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the new ``Engine``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the new ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_ancestor_engine", 
               "doc": {
                  "headline": "The callback for notifications of new ancestors of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the registered\n                ``Engine``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the new ancestor\n                engine\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the registered ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the new ancestor engine\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "new_descendant_engine", 
               "doc": {
                  "headline": "The callback for notifications of new descendant of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the registered\n                ``Engine``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the new\n                descendant engine\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the registered ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the new descendant engine\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "changed_engine", 
               "doc": {
                  "headline": "The callback for notification of updated engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the updated\n                ``Engine``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the updated ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_engine", 
               "doc": {
                  "headline": "the callback for notification of deleted engines.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the registered\n                ``Engine``\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the registered ``Engine``\n        :type engine_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_ancestor_engine", 
               "doc": {
                  "headline": "The callback for notifications of deleted ancestors of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the registered\n                ``Engine``\n        arg:    ancestor_id (osid.id.Id): the ``Id`` of the removed\n                ancestor engine\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the registered ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param ancestor_id: the ``Id`` of the removed ancestor engine\n        :type ancestor_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "ancestor_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }, 
            {
               "name": "deleted_descendant_engine", 
               "doc": {
                  "headline": "The callback for notifications of deleted descendants of an engine.", 
                  "body": ""
               }, 
               "arg_doc": "        arg:    engine_id (osid.id.Id): the ``Id`` of the registered\n                ``Engine``\n        arg:    descendant_id (osid.id.Id): the ``Id`` of the deleted\n                descendant engine\n", 
               "return_doc": "", 
               "error_doc": "", 
               "sphinx_param_doc": "        :param engine_id: the ``Id`` of the registered ``Engine``\n        :type engine_id: ``osid.id.Id``\n        :param descendant_id: the ``Id`` of the deleted descendant engine\n        :type descendant_id: ``osid.id.Id``\n", 
               "sphinx_return_doc": "", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "engine_id", 
                     "array": false
                  }, 
                  {
                     "arg_type": "osid.id.Id", 
                     "var_name": "descendant_id", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.id.Id", 
                  "osid.id.Id"
               ], 
               "return_type": "", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineList", 
         "shortname": "EngineList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``EngineList`` provides a means for accessing ``Engine`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (el.hasNext()) { Engine engine = el.getNextEngine();\n    }\n\n    or\n      while (el.hasNext()) {\n           Engine[] engines = el.getNextEngines(el.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_engine", 
            "get_next_engines"
         ], 
         "methods": [
            {
               "name": "get_next_engine", 
               "doc": {
                  "headline": "Gets the next ``Engine`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the next ``Engine`` in this list.\n                The ``has_next()`` method should be used to test that a\n                next ``Engine`` is available before calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``Engine`` in this list. The ``has_next()`` method should be used to test that a next ``Engine`` is available before calling this method.\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_engines", 
               "doc": {
                  "headline": "Gets the next set of ``Engine`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``Engine`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.rules.Engine) - an array of ``Engine``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``Engine`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``Engine`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.rules.Engine", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineNode", 
         "shortname": "EngineNode", 
         "category": "objects", 
         "doc": {
            "headline": "This interface is a container for a partial hierarchy retrieval.", 
            "body": "    The number of hierarchy levels traversable through this interface\n    depend on the number of levels requested in the\n    ``EngineHierarchySession``."
         }, 
         "inherit_fullnames": [
            "osid.OsidNode"
         ], 
         "inherit_shortnames": [
            "OsidNode"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidNode"
            }
         ], 
         "method_names": [
            "get_engine", 
            "get_parent_engine_nodes", 
            "get_child_engine_nodes"
         ], 
         "methods": [
            {
               "name": "get_engine", 
               "doc": {
                  "headline": "Gets the ``Engine`` at this node.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.Engine) - the engine represented by this\n                node", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the engine represented by this node\n        :rtype: ``osid.rules.Engine``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.Engine", 
               "errors": {}
            }, 
            {
               "name": "get_parent_engine_nodes", 
               "doc": {
                  "headline": "Gets the parents of this engine.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineNodeList) - the parents of the ``id``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the parents of the ``id``\n        :rtype: ``osid.rules.EngineNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineNodeList", 
               "errors": {}
            }, 
            {
               "name": "get_child_engine_nodes", 
               "doc": {
                  "headline": "Gets the children of this engine.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineNodeList) - the children of this\n                engine", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the children of this engine\n        :rtype: ``osid.rules.EngineNodeList``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineNodeList", 
               "errors": {}
            }
         ]
      }, 
      {
         "fullname": "osid.rules.EngineNodeList", 
         "shortname": "EngineNodeList", 
         "category": "objects", 
         "doc": {
            "headline": "Like all ``OsidLists,``  ``EngineNodeList`` provides a means for accessing ``EngineNode`` elements sequentially either one at a time or many at a time.", 
            "body": "    Examples: while (enl.hasNext()) { EngineNode node =\n    enl.getNextEngineNode(); }\n\n    or\n      while (enl.hasNext()) {\n           EngineNode[] nodes = enl.getNextEngineNodes(enl.available());\n      }\n    \n"
         }, 
         "inherit_fullnames": [
            "osid.OsidList"
         ], 
         "inherit_shortnames": [
            "OsidList"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidList"
            }
         ], 
         "method_names": [
            "get_next_engine_node", 
            "get_next_engine_nodes"
         ], 
         "methods": [
            {
               "name": "get_next_engine_node", 
               "doc": {
                  "headline": "Gets the next ``EngineNode`` in this list.", 
                  "body": ""
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (osid.rules.EngineNode) - the next ``EngineNode`` in\n                this list. The ``has_next()`` method should be used to\n                test that a next ``EngineNode`` is available before\n                calling this method.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: the next ``EngineNode`` in this list. The ``has_next()`` method should be used to test that a next ``EngineNode`` is available before calling this method.\n        :rtype: ``osid.rules.EngineNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "osid.rules.EngineNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }, 
            {
               "name": "get_next_engine_nodes", 
               "doc": {
                  "headline": "Gets the next set of ``EngineNode`` elements in this list.", 
                  "body": "        The specified amount must be less than or equal to the return\n        from ``available()``."
               }, 
               "arg_doc": "        arg:    n (cardinal): the number of ``EngineNode`` elements\n                requested which must be less than or equal to\n                ``available()``\n", 
               "return_doc": "        return: (osid.rules.EngineNode) - an array of ``EngineNode``\n                elements.The length of the array is less than or equal\n                to the number specified.", 
               "error_doc": "        raise:  IllegalState - no more elements available in this list\n        raise:  OperationFailed - unable to complete request", 
               "sphinx_param_doc": "        :param n: the number of ``EngineNode`` elements requested which must be less than or equal to ``available()``\n        :type n: ``cardinal``\n", 
               "sphinx_return_doc": "        :return: an array of ``EngineNode`` elements.The length of the array is less than or equal to the number specified.\n        :rtype: ``osid.rules.EngineNode``", 
               "sphinx_error_doc": "        :raise: ``IllegalState`` -- no more elements available in this list\n        :raise: ``OperationFailed`` -- unable to complete request", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "cardinal", 
                     "var_name": "n", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "cardinal"
               ], 
               "return_type": "osid.rules.EngineNode", 
               "errors": {
                  "ILLEGAL_STATE": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.Condition", 
         "shortname": "Condition", 
         "category": "rules", 
         "doc": {
            "headline": "The ``Condition`` is used to input conditions into a rule execution.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidCondition"
         ], 
         "inherit_shortnames": [
            "OsidCondition"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidCondition"
            }
         ], 
         "method_names": [
            "get_condition_record"
         ], 
         "methods": [
            {
               "name": "get_condition_record", 
               "doc": {
                  "headline": "Gets the condition record corresponding to the given ``Condition`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``condition_record_type`` may be the\n        ``Type`` returned in ``get_record_types()`` or any of its\n        parents in a ``Type`` hierarchy where\n        ``has_record_type(condition_record_type)`` is ``true`` ."
               }, 
               "arg_doc": "        arg:    condition_record_type (osid.type.Type): the type of\n                condition record to retrieve\n", 
               "return_doc": "        return: (osid.rules.records.ConditionRecord) - the condition\n                record", 
               "error_doc": "        raise:  NullArgument - ``condition_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported -\n                ``has_condition_record_type(condition_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param condition_record_type: the type of condition record to retrieve\n        :type condition_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the condition record\n        :rtype: ``osid.rules.records.ConditionRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``condition_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_condition_record_type(condition_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "condition_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.ConditionRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.ConditionRecord", 
         "shortname": "ConditionRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Condition``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }, 
      {
         "fullname": "osid.rules.Result", 
         "shortname": "Result", 
         "category": "rules", 
         "doc": {
            "headline": "The ``Result`` is the output of a rule execution.", 
            "body": ""
         }, 
         "inherit_fullnames": [
            "osid.OsidResult"
         ], 
         "inherit_shortnames": [
            "OsidResult"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidResult"
            }
         ], 
         "method_names": [
            "get_boolean_value", 
            "get_result_record"
         ], 
         "methods": [
            {
               "name": "get_boolean_value", 
               "doc": {
                  "headline": "Gets a boolean result from the rule evaluation.", 
                  "body": "        Based on the definition of the Rule, the result may be a simple\n        boolean value or something more complex defined in the record\n        type."
               }, 
               "arg_doc": "", 
               "return_doc": "        return: (boolean) - ``true`` or ``false``", 
               "error_doc": "", 
               "sphinx_param_doc": "", 
               "sphinx_return_doc": "        :return: ``true`` or ``false``\n        :rtype: ``boolean``", 
               "sphinx_error_doc": "", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [], 
               "arg_types": [], 
               "return_type": "boolean", 
               "errors": {}
            }, 
            {
               "name": "get_result_record", 
               "doc": {
                  "headline": "Gets the result record corresponding to the given ``ResultRecord`` record ``Type``.", 
                  "body": "        This method is used to retrieve an object implementing the\n        requested record. The ``result_record_type`` may be the ``Type``\n        returned in ``get_record_types()`` or any of its parents in a\n        ``Type`` hierarchy where ``has_record_type(result_record_type)``\n        is ``true`` ."
               }, 
               "arg_doc": "        arg:    result_record_type (osid.type.Type): the type of result\n                record to retrieve\n", 
               "return_doc": "        return: (osid.rules.records.ResultRecord) - the result record", 
               "error_doc": "        raise:  NullArgument - ``result_record_type`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unsupported - ``has_record_type(result_record_type)`` is\n                ``false``", 
               "sphinx_param_doc": "        :param result_record_type: the type of result record to retrieve\n        :type result_record_type: ``osid.type.Type``\n", 
               "sphinx_return_doc": "        :return: the result record\n        :rtype: ``osid.rules.records.ResultRecord``", 
               "sphinx_error_doc": "        :raise: ``NullArgument`` -- ``result_record_type`` is ``null``\n        :raise: ``OperationFailed`` -- unable to complete request\n        :raise: ``Unsupported`` -- ``has_record_type(result_record_type)`` is ``false``", 
               "compliance_doc": "        *compliance: mandatory -- This method must be implemented.*\n", 
               "impl_notes_doc": "", 
               "args": [
                  {
                     "arg_type": "osid.type.Type", 
                     "var_name": "result_record_type", 
                     "array": false
                  }
               ], 
               "arg_types": [
                  "osid.type.Type"
               ], 
               "return_type": "osid.rules.records.ResultRecord", 
               "errors": {
                  "NULL_ARGUMENT": "ConsumerContract", 
                  "OPERATION_FAILED": "Operational", 
                  "UNSUPPORTED": "ConsumerContract"
               }
            }
         ]
      }, 
      {
         "fullname": "osid.rules.records.ResultRecord", 
         "shortname": "ResultRecord", 
         "category": "records", 
         "doc": {
            "headline": "A record for a ``Result``.", 
            "body": "    The methods specified by the record type are available through the\n    underlying object."
         }, 
         "inherit_fullnames": [
            "osid.OsidRecord"
         ], 
         "inherit_shortnames": [
            "OsidRecord"
         ], 
         "inherit_pkg_names": [
            "osid"
         ], 
         "inheritance": [
            {
               "pkg_name": "osid", 
               "name": "OsidRecord"
            }
         ], 
         "method_names": [], 
         "methods": []
      }
   ], 
   "full_name": "osid.rules"
}